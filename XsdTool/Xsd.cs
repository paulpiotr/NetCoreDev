// ------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja środowiska uruchomieniowego: 16.0.0.0
//  
//     Zmiany w tym pliku mogą spowodować niewłaściwe zachowanie i zostaną utracone
//     w przypadku ponownego wygenerowania kodu.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XsdTool
{
    using XsdTool.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Xsd : XsdBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"#region using
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System.Xml.Serialization;
using NetAppCommon.Models;
#endregion

#nullable enable annotations

#region namespace
namespace ");
            
            #line 20 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_Namespace_));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    #region public class ");
            
            #line 22 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_ClassName_));
            
            #line default
            #line hidden
            this.Write(" : BaseEntity\r\n    /// <summary>\r\n    ///     Model danych ");
            
            #line 24 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_Namespace_));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 24 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_ClassName_));
            
            #line default
            #line hidden
            this.Write("\r\n    ///     Data model of entities found in the basic report\r\n    /// </summary" +
                    ">\r\n    [Table(nameof(");
            
            #line 27 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_ClassName_));
            
            #line default
            #line hidden
            this.Write("), Schema = \"");
            
            #line 27 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_DatabaseSchema_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n    [JsonObject(nameof(");
            
            #line 28 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_ClassName_));
            
            #line default
            #line hidden
            this.Write("))]\r\n    [Display(Name = \"");
            
            #line 29 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_ClassName_));
            
            #line default
            #line hidden
            this.Write("\", Description = \"");
            
            #line 29 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_ClassName_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n    [Serializable]\r\n    [XmlRoot(\"dane\")]\r\n    ");
            
            #line 32 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
 foreach (XsdModel xsdModel in xsdModelList) { 
            
            #line default
            #line hidden
            this.Write("    [Index(nameof(");
            
            #line 33 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.PublicName));
            
            #line default
            #line hidden
            this.Write("))]\r\n    ");
            
            #line 34 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    public class ");
            
            #line 35 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_ClassName_));
            
            #line default
            #line hidden
            this.Write(" : BaseEntity\r\n    {\r\n        ");
            
            #line 37 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
 foreach (XsdModel xsdModel in xsdModelList) { 
            
            #line default
            #line hidden
            this.Write("        #region private ");
            
            #line 38 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.DataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 38 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.PrivateName));
            
            #line default
            #line hidden
            this.Write("; public ");
            
            #line 38 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.DataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 38 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.PublicName));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n            private ");
            
            #line 40 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.DataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 40 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.PrivateName));
            
            #line default
            #line hidden
            this.Write(";\r\n            \r\n            /// ");
            
            #line 42 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.Title));
            
            #line default
            #line hidden
            this.Write("\r\n            /// ");
            
            #line 43 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.Title));
            
            #line default
            #line hidden
            this.Write("\r\n            [Column(Order = 2)]\r\n            [XmlElement(\"");
            
            #line 45 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.XmlName));
            
            #line default
            #line hidden
            this.Write("\")]\r\n            [JsonProperty(nameof(");
            
            #line 46 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.PublicName));
            
            #line default
            #line hidden
            this.Write("), Order = 2)]\r\n            [Display(Name = \"");
            
            #line 47 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.Title));
            
            #line default
            #line hidden
            this.Write("\", Prompt = \"Wpisz ");
            
            #line 47 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.Title));
            
            #line default
            #line hidden
            this.Write("\", Description = \"");
            
            #line 47 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.Title));
            
            #line default
            #line hidden
            this.Write("\")]\r\n            ");
            
            #line 48 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
 if (xsdModel.DataType == "string") { 
            
            #line default
            #line hidden
            this.Write("[StringLength(");
            
            #line 48 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.MaxLength > 0 ? xsdModel.MaxLength : 2147483647));
            
            #line default
            #line hidden
            this.Write(")]");
            
            #line 48 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 50 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
 if (xsdModel.DataType == "string") { 
            
            #line default
            #line hidden
            this.Write("[MaxLength(");
            
            #line 50 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.MaxLength > 0 ? xsdModel.MaxLength : 2147483647));
            
            #line default
            #line hidden
            this.Write(")]");
            
            #line 50 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 52 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
 if (xsdModel.DataType == "int") { 
            
            #line default
            #line hidden
            this.Write("[Range(int.MinValue, int.MaxValue)]");
            
            #line 52 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            public ");
            
            #line 54 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.DataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 54 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.PublicName));
            
            #line default
            #line hidden
            this.Write("\r\n            {\r\n                get => ");
            
            #line 56 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.PrivateName));
            
            #line default
            #line hidden
            this.Write(";\r\n                set\r\n                {\r\n                    if (value != ");
            
            #line 59 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.PrivateName));
            
            #line default
            #line hidden
            this.Write(")\r\n                    {\r\n                        ");
            
            #line 61 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.PrivateName));
            
            #line default
            #line hidden
            this.Write(" = value;\r\n                        OnPropertyChanged(nameof(");
            
            #line 62 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xsdModel.PublicName));
            
            #line default
            #line hidden
            this.Write("));\r\n                    }\r\n                }\r\n            }\r\n        \r\n        #" +
                    "endregion\r\n        ");
            
            #line 68 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    }\r\n    #endregion\r\n}\r\n#endregion");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\Praca\NetCoreDev\XsdTool\Xsd.tt"

private string @__Namespace_Field;

/// <summary>
/// Access the _Namespace_ parameter of the template.
/// </summary>
private string _Namespace_
{
    get
    {
        return this.@__Namespace_Field;
    }
}

private string @__ClassName_Field;

/// <summary>
/// Access the _ClassName_ parameter of the template.
/// </summary>
private string _ClassName_
{
    get
    {
        return this.@__ClassName_Field;
    }
}

private string @__DatabaseSchema_Field;

/// <summary>
/// Access the _DatabaseSchema_ parameter of the template.
/// </summary>
private string _DatabaseSchema_
{
    get
    {
        return this.@__DatabaseSchema_Field;
    }
}

private global::System.Collections.Generic.List<XsdModel> _xsdModelListField;

/// <summary>
/// Access the xsdModelList parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<XsdModel> xsdModelList
{
    get
    {
        return this._xsdModelListField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool _Namespace_ValueAcquired = false;
if (this.Session.ContainsKey("_Namespace_"))
{
    this.@__Namespace_Field = ((string)(this.Session["_Namespace_"]));
    _Namespace_ValueAcquired = true;
}
if ((_Namespace_ValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("_Namespace_");
    if ((data != null))
    {
        this.@__Namespace_Field = ((string)(data));
    }
}
bool _ClassName_ValueAcquired = false;
if (this.Session.ContainsKey("_ClassName_"))
{
    this.@__ClassName_Field = ((string)(this.Session["_ClassName_"]));
    _ClassName_ValueAcquired = true;
}
if ((_ClassName_ValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("_ClassName_");
    if ((data != null))
    {
        this.@__ClassName_Field = ((string)(data));
    }
}
bool _DatabaseSchema_ValueAcquired = false;
if (this.Session.ContainsKey("_DatabaseSchema_"))
{
    this.@__DatabaseSchema_Field = ((string)(this.Session["_DatabaseSchema_"]));
    _DatabaseSchema_ValueAcquired = true;
}
if ((_DatabaseSchema_ValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("_DatabaseSchema_");
    if ((data != null))
    {
        this.@__DatabaseSchema_Field = ((string)(data));
    }
}
bool xsdModelListValueAcquired = false;
if (this.Session.ContainsKey("xsdModelList"))
{
    this._xsdModelListField = ((global::System.Collections.Generic.List<XsdModel>)(this.Session["xsdModelList"]));
    xsdModelListValueAcquired = true;
}
if ((xsdModelListValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("xsdModelList");
    if ((data != null))
    {
        this._xsdModelListField = ((global::System.Collections.Generic.List<XsdModel>)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class XsdBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
