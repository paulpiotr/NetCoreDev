(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{"./node_modules/@progress/kendo-ui/js/kendo.scheduler.js":
/*!***************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.scheduler.js ***!
  \***************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1366);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1054:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.dropdownlist */ "./node_modules/@progress/kendo-ui/js/kendo.dropdownlist.js");\n\n/***/ }),\n\n/***/ 1056:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.multiselect */ "./node_modules/@progress/kendo-ui/js/kendo.multiselect.js");\n\n/***/ }),\n\n/***/ 1191:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.window */ "./node_modules/@progress/kendo-ui/js/kendo.window.js");\n\n/***/ }),\n\n/***/ 1241:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.dialog */ "./node_modules/@progress/kendo-ui/js/kendo.dialog.js");\n\n/***/ }),\n\n/***/ 1249:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.editable */ "./node_modules/@progress/kendo-ui/js/kendo.editable.js");\n\n/***/ }),\n\n/***/ 1252:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.switch */ "./node_modules/@progress/kendo-ui/js/kendo.switch.js");\n\n/***/ }),\n\n/***/ 1257:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.pdf */ "./node_modules/@progress/kendo-ui/js/kendo.pdf.js");\n\n/***/ }),\n\n/***/ 1262:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.datetimepicker */ "./node_modules/@progress/kendo-ui/js/kendo.datetimepicker.js");\n\n/***/ }),\n\n/***/ 1276:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.pane */ "./node_modules/@progress/kendo-ui/js/kendo.pane.js");\n\n/***/ }),\n\n/***/ 1366:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1054), __webpack_require__(1249), __webpack_require__(1056), __webpack_require__(1191), __webpack_require__(1262), __webpack_require__(1368), __webpack_require__(1369), __webpack_require__(1367), __webpack_require__(1370), __webpack_require__(1371), __webpack_require__(1372), __webpack_require__(1241), __webpack_require__(1276), __webpack_require__(1257), __webpack_require__(1252) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "scheduler",\n\t    name: "Scheduler",\n\t    category: "web",\n\t    description: "The Scheduler is an event calendar.",\n\t    depends: [ "dropdownlist", "editable", "multiselect", "window", "datepicker", "datetimepicker", "scheduler.recurrence", "scheduler.view" ],\n\t    features: [ {\n\t        id: "scheduler-dayview",\n\t        name: "Scheduler Day View",\n\t        description: "Scheduler Day View",\n\t        depends: [ "scheduler.dayview" ]\n\t    }, {\n\t        id: "scheduler-agendaview",\n\t        name: "Scheduler Agenda View",\n\t        description: "Scheduler Agenda View",\n\t        depends: [ "scheduler.agendaview" ]\n\t    }, {\n\t        id: "scheduler-monthview",\n\t        name: "Scheduler Month View",\n\t        description: "Scheduler Month View",\n\t        depends: [ "scheduler.monthview" ]\n\t    }, {\n\t        id: "scheduler-timelineview",\n\t        name: "Scheduler Timeline View",\n\t        description: "Scheduler Timeline View",\n\t        depends: [ "scheduler.timelineview" ]\n\t    }, {\n\t        id: "scheduler-mobile",\n\t        name: "Scheduler adaptive rendering",\n\t        description: "Support for adaptive rendering",\n\t        depends: [ "dialog", "pane", "switch" ]\n\t    }, {\n\t        id: "scheduler-pdf-export",\n\t        name: "PDF export",\n\t        description: "Export the scheduler events as PDF",\n\t        depends: [ "pdf", "drawing" ]\n\t    }, {\n\t        id: "scheduler-timezones",\n\t        name: "Timezones",\n\t        description: "Allow selecting timezones different than Etc/UTC",\n\t        depends: [ "timezones" ]\n\t    }]\n\t};\n\n\t/*jshint eqnull: true */\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        date = kendo.date,\n\t        MS_PER_DAY = date.MS_PER_DAY,\n\t        getDate = date.getDate,\n\t        getMilliseconds = kendo.date.getMilliseconds,\n\t        recurrence = kendo.recurrence,\n\t        keys = $.extend({F10: 121}, kendo.keys),\n\t        ui = kendo.ui,\n\t        Widget = ui.Widget,\n\t        DataBoundWidget = ui.DataBoundWidget,\n\t        STRING = "string",\n\t        Popup = ui.Popup,\n\t        Calendar = ui.Calendar,\n\t        DataSource = kendo.data.DataSource,\n\t        isPlainObject = $.isPlainObject,\n\t        extend = $.extend,\n\t        proxy = $.proxy,\n\t        toString = Object.prototype.toString,\n\t        isArray = $.isArray,\n\t        NS = ".kendoScheduler",\n\t        CLICK = "click",\n\t        MOUSEDOWN = "mousedown",\n\t        TOUCHSTART = kendo.support.pointers ? "pointerdown" : "touchstart",\n\t        TOUCHMOVE = kendo.support.pointers ? "pointermove" : "touchmove",\n\t        TOUCHEND = kendo.support.pointers ? "pointerup" : "touchend",\n\t        MOUSEMOVE = kendo.support.mousemove,\n\t        CHANGE = "change",\n\t        PROGRESS = "progress",\n\t        ERROR = "error",\n\t        CANCEL = "cancel",\n\t        REMOVE = "remove",\n\t        RESET = "resetSeries",\n\t        SAVE = "save",\n\t        ADD = "add",\n\t        EDIT = "edit",\n\t        FOCUSEDSTATE = "k-state-focused",\n\t        EXPANDEDSTATE = "k-state-expanded",\n\t        VIEWSSELECTOR = ".k-scheduler-views",\n\t        INVERSECOLORCLASS = "k-event-inverse",\n\t        valueStartEndBoundRegex = /(?:value:start|value:end)(?:,|$)/,\n\t        TODAY = getDate(new Date()),\n\t        EXCEPTION_SEPARATOR = ",",\n\t        OLD_EXCEPTION_SEPARATOR_REGEXP = /\\;/g,\n\t        RECURRENCE_EXCEPTION = "recurrenceException",\n\t        DELETECONFIRM = "Are you sure you want to delete this event?",\n\t        DELETERECURRING = "Do you want to delete only this event occurrence or the whole series?",\n\t        EDITRECURRING = "Do you want to edit only this event occurrence or the whole series?",\n\t        DELETERECURRINGCONFIRM = "Are you sure you want to delete this event occurrence?",\n\t        RESETSERIESCONFIRM = "Are you sure you want to reset the whole series?",\n\t        DELETESERIESCONFIRM = "Are you sure you want to delete the whole series?",\n\t        COMMANDBUTTONTMPL = \'<button type="button" class="k-button #=className#" #=attr#><span class="k-button-text">#=text#</span></button>\',\n\t        VIEWS_DROPDOWN_TEMPLATE = kendo.template(\'\' +\n\t            \'<select class="k-dropdown k-views-dropdown">\' +\n\t                \'#for (var view in views) {#\' +\n\t                    \'<option value="#= view #">${views[view].title}</option>\' +\n\t                \'#}#\'  +\n\t            \'</select>\'\n\t        ),\n\t        TOOLBARTEMPLATE = kendo.template(\'\' +\n\t            \'<div class="k-scheduler-toolbar k-toolbar">\' +\n\t                \'# if (pdf) { #\' +\n\t                    \'<button class="k-button k-pdf"><span class="k-icon k-i-file-pdf"></span><span class="k-button-text">${messages.pdf}</span></button>\' +\n\t                \'# } #\' +\n\t                \'<span class="k-scheduler-navigation k-button-group">\' +\n\t                    \'<button class="k-button k-nav-today" title="${messages.today}"><span class="k-button-text">${messages.today}</span></button>\' +\n\t                    \'<button class="k-button k-button-icon k-icon-button k-nav-prev" title="${messages.previous}" aria-label="${messages.previous}"><span class="k-icon k-i-arrow-60-left"></span></button>\' +\n\t                    \'<button class="k-button k-button-icon k-icon-button k-nav-next" title="${messages.next}" aria-label="${messages.next}"><span class="k-icon k-i-arrow-60-right"></span></button>\' +\n\t                \'</span>\' +\n\t                \'<a role="button" href="\\\\#" class="k-nav-current">\' +\n\t                    \'<span class="k-icon k-i-calendar"></span>\' +\n\t                    \'<span class="k-sm-date-format" data-#=ns#bind="text: formattedShortDate"></span>\' +\n\t                    \'<span class="k-lg-date-format" data-#=ns#bind="text: formattedDate"></span>\' +\n\t                \'</a>\' +\n\t                \'<span class="k-spacer k-toolbar-spacer"></span>\' +\n\t                \'# if (search) { #\' +\n\t                    \'<span class="k-scheduler-search k-textbox">\' +\n\t                        \'<input autocomplete="off" placeholder="Search..." title="Search..." class="k-input k-scheduler-search-input" />\' +\n\t                        \'<span class="k-input-icon"><span class="k-icon k-i-search"></span></span>\' +\n\t                    \'</span>\' +\n\t                \'# } #\' +\n\t                \'# if (viewsCount === 1) { #\' +\n\t                    \'<a role="button" data-#=ns#name="#=view#" href="\\\\#" class="k-button k-button-icon k-icon-button k-scheduler-refresh">\' +\n\t                        \'<span class="k-icon k-i-reload"></span>\' +\n\t                    \'</a>\' +\n\t                \'# } else { #\' +\n\t                    \'<span class="k-scheduler-views-wrapper">\' +\n\t                        \'<span class="k-scheduler-views k-button-group">\' +\n\t                            \'# for (var view in views) { #\' +\n\t                                \'<button type="button" class="k-button k-view-#= view.toLowerCase() #" data-#=ns#name="#=view#">${views[view].title}</button>\' +\n\t                            \'# } #\'  +\n\t                        \'</span>\' +\n\t                    \'</span>\' +\n\t                \'# } #\' +\n\t            \'</div>\'),\n\t        MOBILETOOLBARTEMPLATE = kendo.template(\'<div class="k-scheduler-toolbar k-toolbar">\' +\n\t            \'<span class="k-scheduler-tools k-button-group">\' +\n\t                \'# if (pdf) { #\' +\n\t                    \'<button type="button" class="k-button k-icon-button k-button-icon k-pdf"><span class="k-icon k-i-file-pdf"></span></button>\' +\n\t                \'# } #\' +\n\t                \'<button type="button" class="k-button k-icon-button k-button-icon k-nav-calendar"><span class="k-icon k-i-calendar"></span></button>\' +\n\t                "# if (editable) { #" +\n\t                    \'<button type="button" class="k-button k-icon-button k-button-icon k-create-event"><span class="k-icon k-i-plus"></span></button>\' +\n\t                "# } #" +\n\t            \'</span>\' +\n\t            \'<span class="k-spacer k-toolbar-spacer"></span>\' +\n\t            \'# if (search) { #\' +\n\t                \'<span class="k-scheduler-search k-textbox">\' +\n\t                    \'<input autocomplete="off" placeholder="Search..." title="Search..." class="k-scheduler-search-input" />\' +\n\t                    \'<span class="k-input-icon"><span class="k-icon k-i-search"></span></span>\' +\n\t                \'</span>\' +\n\t            \'# } #\' +\n\t            \'#if(viewsCount === 1){#\' +\n\t                \'<a role="button" data-#=ns#name="#=view#" href="\\\\#" class="k-button k-button-icon k-icon-button k-scheduler-refresh">\' +\n\t                    \'<span class="k-icon k-i-reload"></span>\' +\n\t                \'</a>\' +\n\t            \'#} else {#\' +\n\t                \'<select class="k-dropdown k-scheduler-mobile-views">\' +\n\t                    \'#for(var view in views){#\' +\n\t                        \'<option class="k-view-#= view.toLowerCase() #" value="#=view#">${views[view].title}</option>\' +\n\t                    \'#}#\'  +\n\t                \'</select>\' +\n\t            \'#}#\' +\n\t            \'</div>\'+\n\t            \'<div class="k-scheduler-toolbar k-toolbar">\' +\n\t                \'<span class="k-scheduler-navigation">\' +\n\t                   \'<button class="k-button k-button-icon k-icon-button k-nav-prev"><span class="k-icon k-i-arrow-chevron-left"></span></button>\' +\n\t                   \'<span class="k-state-default k-nav-current">\' +\n\t                        \'<span class="k-m-date-format" data-#=ns#bind="text: formattedMobileDate"></span>\' +\n\t                        \'<span class="k-y-date-format" data-#=ns#bind="text: formattedYear"></span>\' +\n\t                    \'</span>\' +\n\t                   \'<button class="k-button k-button-icon k-icon-button k-nav-next"><span class="k-icon k-i-arrow-chevron-right"></span></button>\' +\n\t                \'</span>\' +\n\t            \'</div>\'),\n\t        MOBILEDATERANGEEDITOR = function(container, options) {\n\t            var attr = { name: options.field, title: options.title };\n\t            var isAllDay = options.model.isAllDay;\n\t            var dateTimeValidate = kendo.attr("validate") + "=\'" + (!isAllDay) + "\'";\n\t            var dateValidate = kendo.attr("validate") + "=\'" + isAllDay + "\'";\n\n\t            appendTimezoneAttr(attr, options);\n\t            appendValidDateValidator(attr, options);\n\t            appendDateCompareValidator(attr, options);\n\n\t            $(\'<input type="datetime-local" required \' + kendo.attr("type") + \'="datetime-local" \' + kendo.attr("bind") + \'="value:\' + options.field +\', invisible:isAllDay" \' + dateTimeValidate + \'/>\')\n\t                .attr(attr)\n\t                .appendTo(container);\n\n\t            $(\'<input type="date" required \' + kendo.attr("type") + \'="date" \' + kendo.attr("bind") + \'="value:\' + options.field +\',visible:isAllDay" \' +\n\t                dateValidate + \'/>\')\n\t                .attr(attr).appendTo(container);\n\n\t            $(\'<span \' + kendo.attr("for") + \'="\' + options.field + \'" class="k-invalid-msg"/>\').hide().appendTo(container);\n\t        },\n\t        DATERANGEEDITOR = function(container, options) {\n\t            var attr = { name: options.field, title: options.title },\n\t                isAllDay = options.model.isAllDay,\n\t                dateTimeValidate = kendo.attr("validate") + "=\'" + (!isAllDay) + "\' ",\n\t                dateValidate = kendo.attr("validate") + "=\'" + isAllDay + "\' ";\n\n\t            appendTimezoneAttr(attr, options);\n\t            appendValidDateValidator(attr, options);\n\t            appendDateCompareValidator(attr, options);\n\n\t            $(\'<input type="text" required \' + kendo.attr("type") + \'="date"\' + \' \' + kendo.attr("role") + \'="datetimepicker" \' + kendo.attr("bind") + \'="value:\' + options.field +\',invisible:isAllDay" \' +\n\t                dateTimeValidate + \'/>\')\n\t            .attr(attr).appendTo(container);\n\n\t            $(\'<input type="text" required \' + kendo.attr("type") + \'="date"\' + \' \'  + kendo.attr("role") + \'="datepicker" \' + kendo.attr("bind") + \'="value:\' + options.field +\',visible:isAllDay" \' +\n\t                dateValidate + \'/>\')\n\t            .attr(attr).appendTo(container);\n\n\t            $(\'<span \' + kendo.attr("bind") + \'="text: \' + options.field + \'Timezone"></span>\').appendTo(container);\n\n\t            if (options.field === "end") {\n\t                $(\'<span \' + kendo.attr("bind") + \'="text: startTimezone, invisible: endTimezone"></span>\').appendTo(container);\n\t            }\n\n\t            $(\'<span \' + kendo.attr("for") + \'="\' + options.field + \'" class="k-invalid-msg"/>\').hide().appendTo(container);\n\t        },\n\t        RECURRENCEEDITOR = function(container, options) {\n\t            $(\'<div \' + kendo.attr("bind") + \'="value:\' + options.field +\'" />\')\n\t                .attr({\n\t                    name: options.field\n\t                })\n\t                .appendTo(container)\n\t                .kendoRecurrenceEditor({\n\t                    start: options.model.start,\n\t                    timezone: options.timezone,\n\t                    messages: options.messages\n\t                });\n\t        },\n\t        MOBILERECURRENCEEDITOR = function(container, options) {\n\t            $(\'<div \' + kendo.attr("bind") + \'="value:\' + options.field +\'" />\')\n\t                .attr({\n\t                    name: options.field\n\t                })\n\t                .appendTo(container)\n\t                .kendoMobileRecurrenceEditor({\n\t                    start: options.model.start,\n\t                    timezone: options.timezone,\n\t                    messages: options.messages,\n\t                    pane: options.pane,\n\t                    value: options.model[options.field]\n\t                });\n\t        },\n\t        MOBILEISALLDAYEDITOR = function (container, options) {\n\t            $(\'<input type="checkbox" data-role="switch"\' + kendo.attr("bind") + \'="value:\' + options.field +\'" />\').appendTo(container);\n\t        },\n\t        MOBILETIMEZONEPOPUP = function(container, options) {\n\t            var text = timezoneButtonText(options.model, options.messages.noTimezone);\n\t            $(\'<span class="k-timezone-label"></span>\').text(text).appendTo(container);\n\t            $(\'<span class="k-icon k-i-arrow-chevron-right"></span>\').appendTo(container);\n\t            container.closest("li.k-item label").click(options.click);\n\t        },\n\t        TIMEZONEPOPUP = function(container, options) {\n\t            $(\'<a href="#" class="k-button" data-bind="invisible:isAllDay">\' + options.messages.timezoneEditorButton + \'</a>\').click(options.click).appendTo(container);\n\t        },\n\t        MOBILETIMEZONEEDITOR = function(container, options) {\n\t            $(\'<div class="k-mobiletimezoneeditor" \' + kendo.attr("bind") + \'="value:\' + options.field +\'" />\')\n\t                .attr({\n\t                    name: options.field\n\t                })\n\t                .appendTo(container)\n\t                .kendoMobileTimezoneEditor({\n\t                    optionLabel: options.noTimezone\n\t                });\n\t        },\n\t        TIMEZONEEDITOR = function(container, options) {\n\t            var visible = options.visible || options.visible === undefined;\n\t            $(\'<div \' + kendo.attr("bind") + \'="value:\' + options.field +\'" />\')\n\t                .attr({ name: options.field })\n\t                .toggle(visible)\n\t                .appendTo(container)\n\t                .kendoTimezoneEditor({\n\t                    optionLabel: options.noTimezone,\n\t                    title: options.title\n\t                });\n\t        };\n\n\t    function timezoneButtonText(model, message) {\n\t        message = message || "";\n\n\t        if (model.startTimezone) {\n\t            message = model.startTimezone;\n\n\t            if (model.endTimezone) {\n\t                message += " | " + model.endTimezone;\n\t            }\n\t        }\n\n\t        return message;\n\t    }\n\n\t    function appendTimezoneAttr(attrs, options) {\n\t        var timezone = options.timezone;\n\n\t        if (timezone) {\n\t            attrs[kendo.attr("timezone")] = timezone;\n\t        }\n\t    }\n\n\t    function appendValidDateValidator(attrs, options) {\n\t        var validationRules = options.model.fields[options.field].validation;\n\n\t        if (validationRules) {\n\t            var validDateRule = validationRules.validDateValidator;\n\t            if (validDateRule && isPlainObject(validDateRule) && validDateRule.message) {\n\t                attrs[kendo.attr("validDate-msg")] = validDateRule.message;\n\t            }\n\t        }\n\t    }\n\n\t    function appendDateCompareValidator(attrs, options) {\n\t        var validationRules = options.model.fields[options.field].validation;\n\n\t        if (validationRules) {\n\t            var dateCompareRule = validationRules.dateCompare;\n\t            if (dateCompareRule && isPlainObject(dateCompareRule) && dateCompareRule.message) {\n\t                attrs[kendo.attr("dateCompare-msg")] = dateCompareRule.message;\n\t            }\n\t        }\n\t    }\n\n\t    function wrapDataAccess(originalFunction, timezone) {\n\t        return function(data) {\n\t            data = originalFunction(data);\n\n\t            convertData(data, "apply",  timezone);\n\n\t            return data || [];\n\t        };\n\t    }\n\n\t    function wrapDataSerialization(originalFunction, timezone) {\n\t        return function(data) {\n\n\t            if (data) {\n\t                if (toString.call(data) !== "[object Array]" && !(data instanceof kendo.data.ObservableArray)) {\n\t                    data = [data];\n\t                }\n\t            }\n\n\t            convertData(data, "remove",  timezone, true);\n\n\t            data = originalFunction(data);\n\n\t            return data || [];\n\t        };\n\t    }\n\n\t    function convertData(data, method, timezone, removeUid) {\n\t        var event,\n\t            idx,\n\t            length;\n\n\t        data = data || [];\n\n\t        for (idx = 0, length = data.length; idx < length; idx++) {\n\t            event = data[idx];\n\n\t            if (removeUid) {\n\t                if (event.startTimezone || event.endTimezone) {\n\t                    if (timezone) {\n\t                        event.start = kendo.timezone.convert(event.start, event.startTimezone || event.endTimezone, timezone);\n\t                        event.end = kendo.timezone.convert(event.end, event.endTimezone || event.startTimezone, timezone);\n\n\t                        event.start = kendo.timezone[method](event.start, timezone);\n\t                        event.end = kendo.timezone[method](event.end, timezone);\n\t                    } else {\n\t                        event.start = kendo.timezone[method](event.start, event.startTimezone || event.endTimezone);\n\t                        event.end = kendo.timezone[method](event.end, event.endTimezone || event.startTimezone);\n\t                    }\n\n\t                } else if (timezone) {\n\t                    event.start = kendo.timezone[method](event.start, timezone);\n\t                    event.end = kendo.timezone[method](event.end, timezone);\n\t                }\n\t            } else {\n\t                if (event.startTimezone || event.endTimezone) {\n\t                    event.start = kendo.timezone[method](event.start, event.startTimezone || event.endTimezone);\n\t                    event.end = kendo.timezone[method](event.end, event.endTimezone || event.startTimezone);\n\n\t                    if (timezone) {\n\t                        event.start = kendo.timezone.convert(event.start, event.startTimezone || event.endTimezone, timezone);\n\t                        event.end = kendo.timezone.convert(event.end, event.endTimezone || event.startTimezone, timezone);\n\t                    }\n\n\t                } else if (timezone) {\n\t                    event.start = kendo.timezone[method](event.start, timezone);\n\t                    event.end = kendo.timezone[method](event.end, timezone);\n\t                }\n\t            }\n\n\t            if (removeUid) {\n\t                delete event.uid;\n\t            }\n\t        }\n\t        return data;\n\t    }\n\n\t    function getOccurrenceByUid(data, uid) {\n\t        var length = data.length,\n\t            idx = 0,\n\t            event;\n\n\t        for (; idx < length; idx++) {\n\t            event = data[idx];\n\n\t            if (event.uid === uid) {\n\t                return event;\n\t            }\n\t        }\n\t    }\n\n\t    var SchedulerDataReader = kendo.Class.extend({\n\t        init: function(schema, reader) {\n\t            var timezone = schema.timezone;\n\n\t            this.reader = reader;\n\n\t            if (reader.model) {\n\t                this.model = reader.model;\n\t            }\n\n\t            this.timezone = timezone;\n\t            this.data = wrapDataAccess($.proxy(this.data, this), timezone);\n\t            this.serialize = wrapDataSerialization($.proxy(this.serialize, this), timezone);\n\t        },\n\t        errors: function(data) {\n\t            return this.reader.errors(data);\n\t        },\n\t        parse: function(data) {\n\t            return this.reader.parse(data);\n\t        },\n\t        data: function(data) {\n\t            return this.reader.data(data);\n\t        },\n\t        total: function(data) {\n\t            return this.reader.total(data);\n\t        },\n\t        groups: function(data) {\n\t            return this.reader.groups(data);\n\t        },\n\t        aggregates: function(data) {\n\t            return this.reader.aggregates(data);\n\t        },\n\t        serialize: function(data) {\n\t            return this.reader.serialize(data);\n\t        }\n\t    });\n\n\t    function applyZone(date, fromZone, toZone) {\n\t        if (toZone) {\n\t            date = kendo.timezone.convert(date, fromZone, toZone);\n\t        } else {\n\t            date = kendo.timezone.remove(date, fromZone);\n\t        }\n\n\t        return date;\n\t    }\n\n\t    function validDateValidator(input) {\n\t        if ((input.filter("[name=start]").length && input.filter("[title=Start]").length) ||\n\t            (input.filter("[name=end]").length && input.filter("[title=End]").length) ||\n\t            input.filter(".k-recur-until").length) {\n\t            var date;\n\t            var picker = kendo.widgetInstance(input, kendo.ui);\n\n\t            if (picker) {\n\t                date = kendo.parseDate(input.val(), picker.options.format);\n\t                return !!date && picker.value();\n\t            } else {\n\t                date = kendo.parseDate(input.val());\n\t                return !!date;\n\t            }\n\t        }\n\n\t        return true;\n\t    }\n\n\t    function dateCompareValidator(input) {\n\t        if (input.filter("[name=end]").length) {\n\t            var container = input.closest(".k-scheduler-edit-form");\n\t            var startInput = container.find("[name=start]:visible");\n\t            var endInput = container.find("[name=end]:visible");\n\n\t            if (endInput[0] && startInput[0]) {\n\t                var start, end;\n\t                var startPicker = kendo.widgetInstance(startInput, kendo.ui);\n\t                var endPicker = kendo.widgetInstance(endInput, kendo.ui);\n\n\t                var editable = container.data("kendoEditable");\n\t                var model = editable ? editable.options.model : null;\n\n\t                if (startPicker && endPicker) {\n\t                    start = startPicker.value();\n\t                    end = endPicker.value();\n\t                } else {\n\t                    start = kendo.parseDate(startInput.val());\n\t                    end = kendo.parseDate(endInput.val());\n\t                }\n\n\t                if (start && end) {\n\t                    if (model) {\n\t                        var timezone = startInput.attr(kendo.attr("timezone"));\n\t                        var startTimezone = model.startTimezone;\n\t                        var endTimezone = model.endTimezone;\n\n\t                        startTimezone = startTimezone || endTimezone;\n\t                        endTimezone = endTimezone || startTimezone;\n\n\t                        if (startTimezone) {\n\t                            start = applyZone(start, startTimezone, timezone);\n\t                            end = applyZone(end, endTimezone, timezone);\n\t                        }\n\t                    }\n\n\t                    return start <= end;\n\t                }\n\t            }\n\t        }\n\n\t        return true;\n\t    }\n\n\t    function untilDateCompareValidator(input) {\n\t        var untilPicker, until,\n\t            container, startInput, start, startPicker;\n\n\t        if(input.filter(".k-recur-until").length) {\n\t            untilPicker = kendo.widgetInstance(input, kendo.ui);\n\t            until = untilPicker.value();\n\t            container = input.closest(".k-scheduler-edit-form");\n\t            startInput = container.find("[name=start]:visible");\n\n\t            if (startInput[0]) {\n\t                startPicker = kendo.widgetInstance(startInput, kendo.ui);\n\n\t                if (startPicker) {\n\t                    start = startPicker.value();\n\t                } else {\n\t                    start = kendo.parseDate(startInput.val());\n\t                }\n\n\t                if (start && until) {\n\t                    return start <= until;\n\t                }\n\t            }\n\t        }\n\n\t        return true;\n\t    }\n\n\t    var SchedulerEvent = kendo.data.Model.define({\n\t        init: function(value) {\n\t            var that = this;\n\n\t            kendo.data.Model.fn.init.call(that, value);\n\n\t            that._defaultId = that.defaults[that.idField];\n\t        },\n\n\t        _time: function(field) {\n\t            var date = this[field];\n\t            var fieldTime = "_" + field + "Time";\n\n\t            if (this[fieldTime]) {\n\t                return this[fieldTime] - kendo.date.toUtcTime(kendo.date.getDate(date));\n\t            }\n\n\t            return getMilliseconds(date);\n\t        },\n\n\t        _date: function(field) {\n\t            var fieldTime = "_" + field + "Time";\n\n\t            if (this[fieldTime]) {\n\t                return this[fieldTime] - this._time(field);\n\t            }\n\n\t            return kendo.date.getDate(this[field]);\n\t        },\n\n\t        clone: function(options, updateUid) {\n\t            var uid = this.uid,\n\t                event = new this.constructor($.extend({}, this.toJSON(), options));\n\n\t            if (!updateUid) {\n\t                event.uid = uid;\n\t            }\n\n\t            return event;\n\t        },\n\n\t        duration: function() {\n\t            var end = this.end;\n\t            var start = this.start;\n\t            var offset = (end.getTimezoneOffset() - start.getTimezoneOffset()) * kendo.date.MS_PER_MINUTE;\n\n\t            return end - start - offset;\n\t        },\n\n\t        expand: function(start, end, zone) {\n\t            return recurrence ? recurrence.expand(this, start, end, zone) : [this];\n\t        },\n\n\t        update: function(eventInfo) {\n\t            for (var field in eventInfo) {\n\t                this.set(field, eventInfo[field]);\n\t            }\n\n\t            if (this._startTime) {\n\t                this.set("_startTime", kendo.date.toUtcTime(this.start));\n\t            }\n\n\t            if (this._endTime) {\n\t                this.set("_endTime", kendo.date.toUtcTime(this.end));\n\t            }\n\t        },\n\n\t        isMultiDay: function() {\n\t            return this.isAllDay || this.duration() >= kendo.date.MS_PER_DAY;\n\t        },\n\n\t        isException: function() {\n\t            return !this.isNew() && this.recurrenceId;\n\t        },\n\n\t        isOccurrence: function() {\n\t            return this.isNew() && this.recurrenceId;\n\t        },\n\n\t        isRecurring: function() {\n\t            return !!(this.recurrenceRule || this.recurrenceId);\n\t        },\n\n\t        isRecurrenceHead: function() {\n\t            return !!(this.id && this.recurrenceRule);\n\t        },\n\n\t        toOccurrence: function(options) {\n\t            options = $.extend(options, {\n\t                recurrenceException: null,\n\t                recurrenceRule: null,\n\t                recurrenceId: this.id || this.recurrenceId\n\t            });\n\n\t            options[this.idField] = this.defaults[this.idField];\n\n\t            return this.clone(options, true);\n\t        },\n\n\t        toJSON: function() {\n\t            var obj = kendo.data.Model.fn.toJSON.call(this);\n\t            obj.uid = this.uid;\n\n\t            delete obj._startTime;\n\t            delete obj._endTime;\n\n\t            return obj;\n\t        },\n\n\t        shouldSerialize: function(field) {\n\t            return kendo.data.Model.fn.shouldSerialize.call(this, field) && field !== "_defaultId";\n\t        },\n\n\t        set: function(key, value) {\n\t            var isAllDay = this.isAllDay || false;\n\n\t            kendo.data.Model.fn.set.call(this, key, value);\n\n\t            if (key == "isAllDay" && value != isAllDay) {\n\t                var start = kendo.date.getDate(this.start);\n\t                var end = new Date(this.end);\n\t                var milliseconds = kendo.date.getMilliseconds(end);\n\n\t                if (milliseconds === 0 && value) {\n\t                    milliseconds = MS_PER_DAY;\n\t                }\n\n\t                this.set("start", start);\n\n\t                if (value === true) {\n\t                    kendo.date.setTime(end, -milliseconds);\n\n\t                    if (end < start) {\n\t                        end = start;\n\t                    }\n\t                } else {\n\t                    kendo.date.setTime(end, MS_PER_DAY - milliseconds);\n\t                }\n\n\t                this.set("end", end);\n\t            }\n\t        },\n\t        id: "id",\n\t        fields: {\n\t            id: { type: "number" },\n\t            title: { defaultValue: "", type: "string" },\n\t            start: { type: "date", validation: { required: true, validDate: { value: validDateValidator } } },\n\t            startTimezone: { type: "string" },\n\t            end: {\n\t                type: "date",\n\t                validation: {\n\t                    required: true,\n\t                    validDate: { value: validDateValidator },\n\t                    dateCompare: { value: dateCompareValidator }\n\t                }\n\t            },\n\t            endTimezone: { type: "string" },\n\t            recurrenceRule: {\n\t                defaultValue: "",\n\t                type: "string",\n\t                validation: {\n\t                    validDate: { value: validDateValidator },\n\t                    untilDateCompare: { value: untilDateCompareValidator }\n\t                }\n\t            },\n\t            recurrenceException: { defaultValue: "", type: "string" },\n\t            isAllDay: { type: "boolean", defaultValue: false },\n\t            description: { type: "string" }\n\t        }\n\t    });\n\n\t    var SchedulerDataSource = DataSource.extend({\n\t        init: function(options) {\n\n\t            DataSource.fn.init.call(this, extend(true, {}, {\n\t                schema: {\n\t                    modelBase: SchedulerEvent,\n\t                    model: SchedulerEvent\n\t                }\n\t            }, options));\n\n\t            this.reader = new SchedulerDataReader(this.options.schema, this.reader);\n\t        },\n\n\t        expand: function(start, end) {\n\t            var data = this.view(),\n\t                filter = {},\n\t                endOffset;\n\n\t            if (start && end) {\n\t                endOffset = end.getTimezoneOffset();\n\t                end = new Date(end.getTime() + MS_PER_DAY - 1);\n\n\t                if(end.getTimezoneOffset() !== endOffset){\n\t                    end = kendo.timezone.apply(end, endOffset);\n\t                }\n\n\t                filter = {\n\t                    logic: "or",\n\t                    filters: [\n\t                        {\n\t                            logic: "and",\n\t                            filters: [\n\t                                { field: "start", operator: "gte", value: start },\n\t                                { field: "end", operator: "gte", value: start },\n\t                                { field: "start", operator: "lte", value: end }\n\t                            ]\n\t                        },\n\t                        {\n\t                            logic: "and",\n\t                            filters: [\n\t                                { field: "start", operator: "lte", value: new Date(start.getTime() + MS_PER_DAY - 1) },\n\t                                { field: "end", operator: "gte", value: start }\n\t                            ]\n\t                        }\n\t                    ]\n\t                };\n\n\t                data = new kendo.data.Query(expandAll(data, start, end, this.reader.timezone)).filter(filter).toArray();\n\t            }\n\n\t            return data;\n\t        },\n\n\t        cancelChanges: function(model) {\n\t            if (model && model.isOccurrence()) {\n\t                this._removeExceptionDate(model);\n\t            }\n\n\t            DataSource.fn.cancelChanges.call(this, model);\n\t        },\n\n\t        insert: function(index, model) {\n\t            if (!model) {\n\t                return;\n\t            }\n\n\t            if (!(model instanceof SchedulerEvent)) {\n\t                var eventInfo = model;\n\n\t                model = this._createNewModel();\n\t                model.accept(eventInfo);\n\t            }\n\n\t            if ((!this._pushCreated && model.isRecurrenceHead()) || model.recurrenceId) {\n\t                model = model.recurrenceId ? model : model.toOccurrence();\n\t                this._addExceptionDate(model);\n\t            }\n\n\t            return DataSource.fn.insert.call(this, index, model);\n\t        },\n\n\t        pushCreate: function(items) {\n\t            this._pushCreated = true;\n\t            DataSource.fn.pushCreate.call(this, items);\n\t            this._pushCreated = false;\n\t        },\n\n\t        remove: function(model) {\n\t            if (model.isRecurrenceHead()) {\n\t                this._removeExceptions(model);\n\t            } else if (model.isRecurring()) {\n\t                this._addExceptionDate(model);\n\t            }\n\n\t            return DataSource.fn.remove.call(this, model);\n\t        },\n\n\t        _removeExceptions: function(model) {\n\t            var data = this.data().slice(0),\n\t                item = data.shift(),\n\t                id = model.id;\n\n\t            while(item) {\n\t                if (item.recurrenceId === id) {\n\t                    DataSource.fn.remove.call(this, item);\n\t                }\n\n\t                item = data.shift();\n\t            }\n\n\t            model.set(RECURRENCE_EXCEPTION, "");\n\t        },\n\n\t        _removeExceptionDate: function(model) {\n\t            if (model.recurrenceId) {\n\t                var head = this.get(model.recurrenceId);\n\n\t                if (head) {\n\t                    var start = model.defaults.start;\n\t                    var replaceRegExp = new RegExp("(\\\\" + EXCEPTION_SEPARATOR + "?)" + recurrence.toExceptionString(start, this.reader.timezone));\n\t                    var recurrenceException = (head.recurrenceException || "").replace(OLD_EXCEPTION_SEPARATOR_REGEXP, EXCEPTION_SEPARATOR).replace(/\\,$/, "");\n\n\t                    if(replaceRegExp.test(recurrenceException)){\n\t                        head.set(RECURRENCE_EXCEPTION, recurrenceException.replace(replaceRegExp, ""));\n\t                    }else{\n\t                        start = model.start;\n\t                        replaceRegExp = new RegExp("(\\\\" + EXCEPTION_SEPARATOR + "?)" + recurrence.toExceptionString(start, this.reader.timezone));\n\t                        head.set(RECURRENCE_EXCEPTION, recurrenceException.replace(replaceRegExp, ""));\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _addExceptionDate: function(model) {\n\t            var start = model.start;\n\t            var zone = this.reader.timezone;\n\t            var head = this.get(model.recurrenceId);\n\t            var recurrenceException = (head.recurrenceException || "").replace(OLD_EXCEPTION_SEPARATOR_REGEXP, EXCEPTION_SEPARATOR).replace(/\\,$/, "");\n\n\t            if (!recurrence.isException(recurrenceException, start, zone)) {\n\t                var newException = recurrence.toExceptionString(start, zone);\n\t                model.defaults.start = start;\n\t                head.set(RECURRENCE_EXCEPTION, recurrenceException + (recurrenceException && newException ? EXCEPTION_SEPARATOR : "") + newException);\n\t            }\n\t        }\n\t    });\n\n\t    function expandAll(events, start, end, zone) {\n\t        var length = events.length,\n\t            data = [],\n\t            idx = 0;\n\n\t        for (; idx < length; idx++) {\n\t            data = data.concat(events[idx].expand(start, end, zone));\n\t        }\n\n\t        return data;\n\t    }\n\n\t    SchedulerDataSource.create = function(options) {\n\t        if (isArray(options) || options instanceof kendo.data.ObservableArray) {\n\t            options = { data: options };\n\t        }\n\n\t        var dataSource = options || {},\n\t            data = dataSource.data;\n\n\t        dataSource.data = data;\n\n\t        if (!(dataSource instanceof SchedulerDataSource) && dataSource instanceof kendo.data.DataSource) {\n\t            throw new Error("Incorrect DataSource type. Only SchedulerDataSource instances are supported");\n\t        }\n\n\t        return dataSource instanceof SchedulerDataSource ? dataSource : new SchedulerDataSource(dataSource);\n\t    };\n\n\t    extend(true, kendo.data, {\n\t       SchedulerDataSource: SchedulerDataSource,\n\t       SchedulerDataReader: SchedulerDataReader,\n\t       SchedulerEvent: SchedulerEvent\n\t    });\n\n\t    var defaultCommands = {\n\t        update: {\n\t            text: "Save",\n\t            className: "k-primary k-scheduler-update"\n\t        },\n\t        canceledit: {\n\t            text: "Cancel",\n\t            className: "k-scheduler-cancel"\n\t        },\n\t        destroy: {\n\t            text: "Delete",\n\t            imageClass: "k-i-close",\n\t            className: "k-primary k-scheduler-delete",\n\t            iconClass: "k-icon"\n\t        }\n\t    };\n\n\t    function trimOptions(options, overrideOptions) {\n\t        delete options.name;\n\t        delete options.prefix;\n\n\t        delete options.remove;\n\t        delete options.edit;\n\t        delete options.add;\n\t        delete options.navigate;\n\n\t        for (var key in overrideOptions) {\n\t            options[key] = overrideOptions[key];\n\t        }\n\n\t        return options;\n\t    }\n\n\t    /*\n\t    function fieldType(field) {\n\t        field = field != null ? field : "";\n\t        return field.type || $.type(field) || "string";\n\t    }\n\t    */\n\n\t    function createValidationAttributes(model, field) {\n\t        var modelField = (model.fields || model)[field];\n\t        var specialRules = ["url", "email", "number", "date", "boolean"];\n\t        var validation = modelField ? modelField.validation : {};\n\t        // var type = fieldType(modelField);\n\t        var datatype = kendo.attr("type");\n\t        var inArray = $.inArray;\n\t        var ruleName;\n\t        var rule;\n\n\t        var attr = {};\n\n\t        for (ruleName in validation) {\n\t            rule = validation[ruleName];\n\n\t            if (inArray(ruleName, specialRules) >= 0) {\n\t                attr[datatype] = ruleName;\n\t            } else if (!kendo.isFunction(rule)) {\n\t                attr[ruleName] = isPlainObject(rule) ? (rule.value || ruleName) : rule;\n\t            }\n\n\t            attr[kendo.attr(ruleName + "-msg")] = rule.message;\n\t        }\n\n\t        return attr;\n\t    }\n\n\t    function dropDownResourceEditor(resource, model) {\n\t        var attr = createValidationAttributes(model, resource.field);\n\n\t        return function(container) {\n\t           $(kendo.format(\'<select data-{0}bind="value:{1}" title="\' + model.title + \'">\', kendo.ns, resource.field))\n\t             .appendTo(container)\n\t             .attr(attr)\n\t             .kendoDropDownList({\n\t                 dataTextField: resource.dataTextField,\n\t                 dataValueField: resource.dataValueField,\n\t                 dataSource: resource.dataSource,\n\t                 valuePrimitive: resource.valuePrimitive,\n\t                 optionLabel: "None",\n\t                 template: kendo.format(\'<span class="k-scheduler-mark" style="background-color:#= data.{0}?{0}:"none" #"></span>#={1}#\', resource.dataColorField, resource.dataTextField)\n\t             });\n\t       };\n\t    }\n\n\t    function dropDownResourceEditorMobile(resource, model) {\n\t        var attr = createValidationAttributes(model, resource.field);\n\n\t        return function(container) {\n\t            var options = "";\n\t            var view = resource.dataSource.view();\n\n\t            for (var idx = 0, length = view.length; idx < length; idx++) {\n\t                options += kendo.format(\'<option value="{0}">{1}</option>\',\n\t                    kendo.getter(resource.dataValueField)(view[idx]),\n\t                    kendo.getter(resource.dataTextField)(view[idx])\n\t                );\n\t            }\n\n\t            $(kendo.format(\'<select data-{0}bind="value:{1}">{2}</select>\',\n\t                kendo.ns,\n\t                resource.field,\n\t                options,\n\t                resource.valuePrimitive\n\t             ))\n\t             .appendTo(container)\n\t             .attr(attr);\n\t       };\n\t    }\n\n\t    function descriptionEditor(options) {\n\t        var attr = createValidationAttributes(options.model, options.field);\n\n\t        return function(container, model) {\n\t            $(\'<textarea name="description" class="k-textarea" title="\' + model.title + \'"/>\').attr(attr)\n\t                .appendTo(container);\n\t        };\n\t    }\n\n\t    function multiSelectResourceEditor(resource, model) {\n\t        var attr = createValidationAttributes(model, resource.field);\n\n\t        return function(container) {\n\t           $(kendo.format(\'<select data-{0}bind="value:{1}">\', kendo.ns, resource.field))\n\t             .appendTo(container)\n\t             .attr(attr)\n\t             .kendoMultiSelect({\n\t                 dataTextField: resource.dataTextField,\n\t                 dataValueField: resource.dataValueField,\n\t                 dataSource: resource.dataSource,\n\t                 valuePrimitive: resource.valuePrimitive,\n\t                 itemTemplate: kendo.format(\'<span class="k-scheduler-mark" style="background-color:#= data.{0}?{0}:"none" #"></span>#={1}#\', resource.dataColorField, resource.dataTextField),\n\t                 tagTemplate: kendo.format(\'<span class="k-scheduler-mark" style="background-color:#= data.{0}?{0}:"none" #"></span>#={1}#\', resource.dataColorField, resource.dataTextField)\n\t             });\n\t       };\n\t    }\n\n\t    function multiSelectResourceEditorMobile(resource, model) {\n\t        var attr = createValidationAttributes(model, resource.field);\n\n\t        return function(container) {\n\t            var options = "";\n\t            var view = resource.dataSource.view();\n\n\t            for (var idx = 0, length = view.length; idx < length; idx++) {\n\t                options += kendo.format(\'<option value="{0}">{1}</option>\',\n\t                    kendo.getter(resource.dataValueField)(view[idx]),\n\t                    kendo.getter(resource.dataTextField)(view[idx])\n\t                );\n\t            }\n\n\t            $(kendo.format(\'<select data-{0}bind="value:{1}" multiple="multiple" data-{0}value-primitive="{3}">{2}</select>\',\n\t                kendo.ns,\n\t                resource.field,\n\t                options,\n\t                resource.valuePrimitive\n\t             ))\n\t             .appendTo(container)\n\t             .attr(attr);\n\t       };\n\t    }\n\n\t    function moveEventRange(event, distance) {\n\t        var duration = event.end.getTime() - event.start.getTime();\n\n\t        var start = new Date(event.start.getTime());\n\n\t        kendo.date.setTime(start, distance);\n\n\t        var end = new Date(start.getTime());\n\n\t        kendo.date.setTime(end, duration, true);\n\n\t        return {\n\t            start: start,\n\t            end: end\n\t        };\n\t    }\n\n\t    var editors = {\n\t        mobile: {\n\t            dateRange: MOBILEDATERANGEEDITOR,\n\t            timezonePopUp: MOBILETIMEZONEPOPUP,\n\t            timezone: MOBILETIMEZONEEDITOR,\n\t            recurrence: MOBILERECURRENCEEDITOR,\n\t            description: descriptionEditor,\n\t            multipleResources: multiSelectResourceEditorMobile,\n\t            resources: dropDownResourceEditorMobile,\n\t            isAllDay: MOBILEISALLDAYEDITOR\n\t        },\n\t        desktop: {\n\t            dateRange: DATERANGEEDITOR,\n\t            timezonePopUp: TIMEZONEPOPUP,\n\t            timezone: TIMEZONEEDITOR,\n\t            recurrence: RECURRENCEEDITOR,\n\t            description: descriptionEditor,\n\t            multipleResources: multiSelectResourceEditor,\n\t            resources: dropDownResourceEditor\n\t        }\n\t    };\n\n\t    var Editor = kendo.Observable.extend({\n\t        init: function(element, options) {\n\n\t            kendo.Observable.fn.init.call(this);\n\n\t            this.element = element;\n\t            this.options = extend(true, {}, this.options, options);\n\t            this.createButton = this.options.createButton;\n\n\t            this.toggleDateValidationHandler = proxy(this._toggleDateValidation, this);\n\t        },\n\n\t        _toggleDateValidation: function(e) {\n\t            if (e.field == "isAllDay") {\n\t                var container = this.container,\n\t                    isAllDay = this.editable.options.model.isAllDay,\n\t                    bindAttribute = kendo.attr("bind"),\n\t                    element, isDateTimeInput, shouldValidate;\n\t                container.find("[" + bindAttribute+ "*=end],[" + bindAttribute + "*=start]").each(function() {\n\t                    element = $(this);\n\t                    if (valueStartEndBoundRegex.test(element.attr(bindAttribute))) {\n\t                        isDateTimeInput = element.is("[" + kendo.attr("role") + "=datetimepicker],[type*=datetime]");\n\t                        shouldValidate = isAllDay !== isDateTimeInput;\n\t                        element.attr(kendo.attr("validate"), shouldValidate);\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        fields: function(editors, model) {\n\t            var that = this;\n\n\t            var messages = that.options.messages;\n\t            var timezone = that.options.timezone;\n\n\t            var click = function(e) {\n\t                e.preventDefault();\n\t                that._initTimezoneEditor(model, this);\n\t            };\n\n\t            var fields = [\n\t                { field: "title", title: messages.editor.title /*, format: field.format, editor: field.editor, values: field.values*/ },\n\t                { field: "start", title: messages.editor.start, editor: editors.dateRange, timezone: timezone },\n\t                { field: "end", title: messages.editor.end, editor: editors.dateRange, timezone: timezone },\n\t                { field: "isAllDay", title: messages.editor.allDayEvent, editor: editors.isAllDay }\n\t            ];\n\n\t            if (kendo.timezone.windows_zones) {\n\t                fields.push({ field: "timezone", title: messages.editor.timezone, editor: editors.timezonePopUp, click: click, messages: messages.editor, model: model });\n\t                fields.push({ field: "startTimezone", title: messages.editor.startTimezone, editor: editors.timezone, noTimezone: messages.editor.noTimezone });\n\t                fields.push({ field: "endTimezone", title: messages.editor.endTimezone, editor: editors.timezone, noTimezone: messages.editor.noTimezone });\n\t            }\n\n\t            if (!model.recurrenceId) {\n\t                fields.push({ field: "recurrenceRule", title: messages.editor.repeat, editor: editors.recurrence, timezone: timezone, messages: messages.recurrenceEditor, pane: this.pane });\n\t            }\n\n\t            if ("description" in model) {\n\t                fields.push({ field: "description", title: messages.editor.description, editor: editors.description({model: model, field: "description"}) });\n\t            }\n\n\t            for (var resourceIndex = 0; resourceIndex < this.options.resources.length; resourceIndex++) {\n\t                var resource = this.options.resources[resourceIndex];\n\t                fields.push({\n\t                    field: resource.field,\n\t                    title: resource.title,\n\t                    editor: resource.multiple? editors.multipleResources(resource, model) : editors.resources(resource, model)\n\t                });\n\t            }\n\n\t            return fields;\n\t        },\n\n\t        end: function() {\n\t            return this.editable.end();\n\t        },\n\n\t        _buildDesktopEditTemplate: function(model, fields, editableFields) {\n\n\t            var messages = this.options.messages;\n\t            var settings = extend({}, kendo.Template, this.options.templateSettings);\n\t            var paramName = settings.paramName;\n\t            var html = "";\n\n\t            for (var idx = 0, length = fields.length; idx < length; idx++) {\n\t                var field = fields[idx];\n\n\t                if (field.field === "startTimezone") {\n\t                    html += \'<div class="k-popup-edit-form k-scheduler-edit-form k-scheduler-timezones" style="display:none">\';\n\t                    html += \'<div class="k-edit-form-container">\';\n\t                    html += \'<div class="k-edit-label"></div>\';\n\t                    html += \'<div class="k-edit-field"><label class="k-check"><input class="k-timezone-toggle" type="checkbox" />\' + messages.editor.separateTimezones + \'</label></div>\';\n\t                }\n\n\t                html += \'<div class="k-edit-label"><label for="\' + field.field + \'">\' + (field.title || field.field || "") + \'</label></div>\';\n\n\t                if ((!model.editable || model.editable(field.field))) {\n\t                    editableFields.push(field);\n\t                    html += \'<div \' + kendo.attr("container-for") + \'="\' + field.field + \'" class="k-edit-field"></div>\';\n\t                } else {\n\t                    var tmpl = "#:";\n\n\t                    if (field.field) {\n\t                        field = kendo.expr(field.field, paramName);\n\t                        tmpl += field + "==null?\'\':" + field;\n\t                    } else {\n\t                        tmpl += "\'\'";\n\t                    }\n\n\t                    tmpl += "#";\n\n\t                    tmpl = kendo.template(tmpl, settings);\n\n\t                    html += \'<div class="k-edit-field">\' + tmpl(model) + \'</div>\';\n\t                }\n\n\t                if (field.field === "endTimezone") {\n\t                    html += this._createEndTimezoneButton();\n\t                }\n\t            }\n\n\t            return html;\n\t        },\n\n\t        _buildMobileEditTemplate: function(model, fields, editableFields) {\n\t            var messages = this.options.messages;\n\t            var settings = extend({}, kendo.Template, this.options.templateSettings);\n\t            var paramName = settings.paramName;\n\t            var html = "";\n\n\t            html += \'<ul class="k-listgroup k-listgroup-flush">\';\n\n\t            for (var idx = 0, length = fields.length; idx < length; idx++) {\n\t                var field = fields[idx];\n\n\t                if (field.field === "timezone" || field.field === "recurrenceRule") {\n\t                    html += \'</ul><ul class="k-listgroup k-listgroup-flush">\';\n\t                }\n\n\t                if (field.field === "startTimezone") {\n\t                    html += \'<div class="k-popup-edit-form k-scheduler-edit-form k-scheduler-timezones" style="display:none">\';\n\t                    html += \'<ul class="k-listgroup k-listgroup-flush">\';\n\t                    html += \'<li class="k-item k-listgroup-item">\';\n\t                    html += \'<label class="k-label k-listgroup-form-row">\';\n\t                    html += \'<span class="k-item-title k-listgroup-form-row">\' + messages.editor.separateTimezones + \'</span>\';\n\t                    html += \'<span class="k-listgroup-form-field-wrapper">\';\n\t                    html += \'<input class="k-timezone-toggle" data-role="switch" type="checkbox" />\';\n\t                    html += \'</span>\';\n\t                    html += \'</label>\';\n\t                    html += \'</li>\';\n\t                }\n\n\t                if ((!model.editable || model.editable(field.field))) {\n\t                    html += \'<li class="k-item k-listgroup-item">\';\n\t                    if (field.field === "timezone") {\n\t                        html += \'<label class="k-label k-listgroup-form-row" data-bind="css: { k-state-disabled: isAllDay }">\';\n\t                    } else {\n\t                        html += \'<label class="k-label k-listgroup-form-row">\';\n\t                    }\n\t                    html += \'<span class="k-item-title k-listgroup-form-field-label">\' + (field.title || field.field || "") + \'</span>\';\n\n\t                    editableFields.push(field);\n\t                    html += \'<div class="k-listgroup-form-field-wrapper" \' + kendo.attr("container-for") + \'="\' + field.field + \'"></div>\';\n\n\t                    html += \'</label></li>\';\n\t                } else {\n\t                    var tmpl = "#:";\n\n\t                    html += \'<li class="k-item k-listgroup-item">\';\n\t                    html += \'<label class="k-label k-no-click k-listgroup-form-row">\';\n\t                    html += \'<span class="k-item-title k-listgroup-form-field-label">\' + (field.title || field.field || "") + \'</span>\';\n\n\t                    if (field.field) {\n\t                        field = kendo.expr(field.field, paramName);\n\t                        tmpl += field + "==null?\'\':" + field;\n\t                    } else {\n\t                        tmpl += "\'\'";\n\t                    }\n\n\t                    tmpl += "#";\n\n\t                    tmpl = kendo.template(tmpl, settings);\n\n\t                    html += \'<span class="k-no-editor k-listgroup-form-field-wrapper">\' + tmpl(model) + \'</span>\';\n\n\t                    html += \'</label></li>\';\n\t                }\n\n\t                if (field.field === "recurrenceRule") {\n\t                    html += \'</ul><ul class="k-listgroup k-listgroup-flush">\';\n\t                }\n\n\t                if (field.field === "endTimezone") {\n\t                    html += "</ul></div>";\n\t                }\n\t            }\n\t            html += \'</ul>\';\n\n\t            return html;\n\t        },\n\n\t        _buildEditTemplate: function(model, fields, editableFields, isMobile) {\n\t            var settings = extend({}, kendo.Template, this.options.templateSettings);\n\t            var template = this.options.editable.template;\n\t            var html = "";\n\n\t            if (template) {\n\t                if (typeof template === STRING) {\n\t                    template = kendo.unescape(template);\n\t                }\n\t                html += (kendo.template(template, settings))(model);\n\t            } else if (isMobile) {\n\t                html += \'<div data-role="content">\' + this._buildMobileEditTemplate(model, fields, editableFields) + \'</div>\';\n\t            } else {\n\t                html += this._buildDesktopEditTemplate(model, fields, editableFields);\n\t            }\n\n\t            return html;\n\t        },\n\n\t        _createEndTimezoneButton: function() {\n\t            return \'</ul></div>\';\n\t        },\n\n\t        _revertTimezones: function(model) {\n\t            model.set("startTimezone", this._startTimezone);\n\t            model.set("endTimezone", this._endTimezone);\n\n\t            delete this._startTimezone;\n\t            delete this._endTimezone;\n\t        }\n\t    });\n\n\t    var MobileEditor = Editor.extend({\n\t        init: function() {\n\t            Editor.fn.init.apply(this, arguments);\n\n\t            this.pane = kendo.Pane.wrap(this.element, {\n\t                viewEngine: {\n\t                    viewOptions: {\n\t                        renderOnInit: true,\n\t                        wrap: false,\n\t                        wrapInSections: true,\n\t                        detachOnHide: false,\n\t                        detachOnDestroy: false\n\t                    }\n\t                }\n\t            });\n\t            this.pane.element.parent().css("height", this.options.height);\n\t            this.view = this.pane.view();\n\t        },\n\n\t        options: {\n\t            animations: {\n\t                left: "slide",\n\t                right: "slide:right"\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            this.close();\n\t            this.unbind();\n\t            this.pane.destroy();\n\t        },\n\n\t        _initTimezoneEditor: function(model) {\n\t            var that = this;\n\t            var pane = that.pane;\n\t            var messages = that.options.messages;\n\t            var timezoneView = that.timezoneView;\n\t            var container = timezoneView ? timezoneView.content.find(".k-scheduler-timezones") : that.container.find(".k-scheduler-timezones");\n\t            var kSwitch = container.find("input.k-timezone-toggle").data("kendoSwitch");\n\t            var endTimezoneRow = container.find("li.k-item:not(.k-zonepicker):last");\n\t            var startTimezoneChange = function(e) {\n\t                if (e.field === "startTimezone") {\n\t                    var value = model.startTimezone;\n\n\t                    kSwitch.enable(value);\n\n\t                    if (!value) {\n\t                        endTimezoneRow.hide();\n\t                        model.set("endTimezone", "");\n\t                        kSwitch.value(false);\n\t                    }\n\t                }\n\t            };\n\n\t            that._startTimezone = model.startTimezone || "";\n\t            that._endTimezone = model.endTimezone || "";\n\n\t            if (!timezoneView) {\n\t                var html = \'<div data-role="view" class="k-popup-edit-form k-scheduler-edit-form">\' +\n\t                \'<div data-role="header" class="k-header">\' +\n\t                    \'<a href="\\\\#" class="k-header-cancel k-scheduler-cancel k-link" title="\' + messages.cancel + \'"\' +\n\t                    \'aria-label="\' + messages.cancel + \'"><span class="k-icon k-i-arrow-chevron-left"></span></a>\' +\n\t                    messages.editor.timezoneTitle +\n\t                    \'<a href="\\\\#" class="k-header-done k-scheduler-update k-link" title="\' + messages.save + \'" \' +\n\t                    \'aria-label="\' + messages.save + \'"><span class="k-icon k-i-check"></span></a>\' +\n\t                \'</div><div data-role="content"></div>\';\n\n\t                this.timezoneView = timezoneView = pane.append(html);\n\n\t                timezoneView.contentElement.append(container.show());\n\n\t                timezoneView.element.on(CLICK + NS, ".k-scheduler-cancel, .k-scheduler-update", function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\n\t                    if ($(this).hasClass("k-scheduler-cancel")) {\n\t                        that._revertTimezones(model);\n\t                    }\n\n\t                    var editView = that._editPane;\n\n\t                    var text = timezoneButtonText(model, messages.editor.noTimezone);\n\n\t                    editView.content.find(".k-timezone-label").text(text);\n\n\t                    pane.navigate(editView, that.options.animations.right);\n\t                });\n\n\t                kSwitch.bind("change", function(ev) {\n\t                    endTimezoneRow.toggle(ev.checked);\n\t                    model.set("endTimezone", "");\n\t                });\n\t                model.bind("change", startTimezoneChange);\n\t            }\n\n\t            kSwitch.value(!!model.endTimezone);\n\t            kSwitch.enable(!!model.startTimezone);\n\n\t            if (model.endTimezone) {\n\t                endTimezoneRow.show();\n\t            } else {\n\t                endTimezoneRow.hide();\n\t            }\n\n\t            pane.navigate(timezoneView, that.options.animations.left);\n\t        },\n\n\t        showDialog: function(options) {\n\t            var actions = options.buttons.map(function(button){\n\t                return {\n\t                    text: button.text,\n\t                    action: button.click\n\t                };\n\t            });\n\n\t            actions.push({\n\t                text: this.options.messages.cancel,\n\t                primary: true\n\t            });\n\n\t            $("<div />").appendTo(document.body)\n\t                .kendoDialog({\n\t                    close: function() {\n\t                        this.destroy();\n\t                    },\n\t                    modal: {\n\t                        preventScroll: true\n\t                    },\n\t                    closable: false,\n\t                    title: false,\n\t                    content: options.text,\n\t                    actions: actions\n\t                });\n\t        },\n\n\t        editEvent: function(model) {\n\t            var pane = this.pane;\n\t            var html = "";\n\n\t            var messages = this.options.messages;\n\t            var updateText = messages.save;\n\t            var removeText = messages.destroy;\n\t            var cancelText = messages.cancel;\n\t            var titleText = messages.editor.editorTitle;\n\t            var resetSeries = messages.resetSeries;\n\n\t            html += \'<div data-role="view" class="k-popup-edit-form k-scheduler-edit-form"\' + kendo.attr("uid") + \'="\' + model.uid + \'">\' +\n\t                \'<div data-role="header" class="k-header">\' +\n\t                    \'<a href="\\\\#" class="k-header-cancel k-scheduler-cancel k-link" title="\' + cancelText + \'"\' +\n\t                    \'aria-label="\' + cancelText + \'"><span class="k-icon k-i-arrow-chevron-left"></span></a>\' +\n\t                    titleText +\n\t                    \'<a href="\\\\#" class="k-header-done k-scheduler-update k-link" title="\' + updateText + \'" \' +\n\t                    \'aria-label="\' + updateText + \'"><span class="k-icon k-i-check"></span></a>\' +\n\t                \'</div>\';\n\n\t            var fields = this.fields(editors.mobile, model);\n\n\t            var that = this;\n\n\t            var editableFields = [];\n\n\t            html += this._buildEditTemplate(model, fields, editableFields, true);\n\n\t            html += "</div>";\n\n\t            var view = pane.append(html);\n\n\t            if (!model.isNew() && this.options.editable && this.options.editable.destroy !== false && model.isRecurrenceHead() && model.recurrenceException) {\n\t                var resetSeriesBtn = \'<ul class="k-edit-buttons k-listgroup k-listgroup-flush"><li class="k-item k-listgroup-item"><span class="k-scheduler-resetSeries k-link k-label" aria-label="\' + resetSeries + \'">\' + resetSeries + \'</span></li></ul>\';\n\t                view.contentElement.append(resetSeriesBtn);\n\t            }\n\n\t            if (!model.isNew() && this.options.editable && this.options.editable.destroy !== false) {\n\t                var deleteBtn = \'<ul class="k-edit-buttons k-listgroup k-listgroup-flush"><li class="k-item k-listgroup-item"><span class="k-scheduler-delete k-link k-label" aria-label="\' + removeText + \'">\' + removeText + \'</span></li></ul>\';\n\t                view.contentElement.append(deleteBtn);\n\t            }\n\n\t            this._editPane = view;\n\n\t            var container = this.container = view.element;\n\n\t            this.editable = container.kendoEditable({\n\t                fields: editableFields,\n\t                model: model,\n\t                clearContainer: false,\n\t                target: that.options.target,\n\t                validateOnBlur: true\n\t            }).data("kendoEditable");\n\n\t            if (!this.trigger("edit", { container: container, model: model })) {\n\n\t                container.on(CLICK + NS, "a.k-scheduler-edit, a.k-scheduler-cancel, a.k-scheduler-update, span.k-scheduler-delete, span.k-scheduler-resetSeries", function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\n\t                    var button = $(this);\n\n\t                    if (!button.hasClass("k-scheduler-edit")) {\n\n\t                        var name = "cancel";\n\n\t                        if (button.hasClass("k-scheduler-update")) {\n\t                            name = "save";\n\t                        } else if (button.hasClass("k-scheduler-delete")) {\n\t                            name = "remove";\n\t                        } else if (button.hasClass("k-scheduler-resetSeries")) {\n\t                            name = RESET;\n\t                        }\n\n\t                        that.trigger(name, { container: container, model: model });\n\t                    } else {\n\t                        pane.navigate(this._editPane, that.options.animations.right);\n\t                    }\n\t                });\n\n\t                pane.navigate(view, that.options.animations.left);\n\n\t                model.bind("change", that.toggleDateValidationHandler);\n\t            } else {\n\t                this.trigger("cancel", { container: container, model: model });\n\t            }\n\n\t            return this.editable;\n\t        },\n\n\t        _views: function() {\n\t            return this.pane.element\n\t                    .find(kendo.roleSelector("view"))\n\t                    .not(this.view.element);\n\t        },\n\n\t        close: function() {\n\t            if (this.container) {\n\t                this.pane.navigate("", this.options.animations.right);\n\n\t                var views = this._views();\n\t                var view;\n\n\t                for (var idx = 0, length = views.length; idx < length; idx++) {\n\t                    view = views.eq(idx).data("kendoView");\n\t                    if (view) {\n\t                       view.purge();\n\t                    }\n\t                }\n\n\t                views.remove();\n\n\t                this.container = null;\n\t                if (this.editable) {\n\t                    this.editable.options.model.unbind("change", this.toggleDateValidationHandler);\n\t                    this.editable.destroy();\n\t                    this.editable = null;\n\t                }\n\t                this.timezoneView = null;\n\t            }\n\t        }\n\t    });\n\n\t    var PopupEditor = Editor.extend({\n\t        destroy: function() {\n\t            this.close();\n\t            this.unbind();\n\t        },\n\n\t        editEvent: function(model) {\n\t            var that = this;\n\t            var editable = that.options.editable;\n\t            var html = \'<div \' + kendo.attr("uid") + \'="\' + model.uid + \'" class="k-popup-edit-form k-scheduler-edit-form"><div class="k-edit-form-container">\';\n\t            var messages = that.options.messages;\n\t            var updateText = messages.save;\n\t            var cancelText = messages.cancel;\n\t            var deleteText = messages.destroy;\n\t            var resetSeries = messages.resetSeries;\n\n\t            var fields = this.fields(editors.desktop, model);\n\n\t            var editableFields = [];\n\n\t            html += this._buildEditTemplate(model, fields, editableFields, false);\n\n\t            var attr;\n\t            var options = isPlainObject(editable) ? editable.window : {};\n\n\t            html += \'<div class="k-edit-buttons k-state-default">\';\n\t            html += this.createButton({ name: "update", text: updateText, attr: attr }) + this.createButton({ name: "canceledit", text: cancelText, attr: attr });\n\n\t            if (!model.isNew() && editable.destroy !== false && model.isRecurrenceHead() && model.recurrenceException) {\n\t                html += this.createButton({ name: "resetSeries", text: resetSeries, attr: attr });\n\t            }\n\n\t            if ((!model.isNew() || model.isRecurring()) && editable.destroy !== false) {\n\t                html += this.createButton({ name: "delete", text: deleteText, attr: attr });\n\t            }\n\n\t            html += \'</div></div></div>\';\n\n\t            var container = this.container = $(html)\n\t                .appendTo(that.element).eq(0)\n\t                .kendoWindow(extend({\n\t                    modal: true,\n\t                    resizable: false,\n\t                    draggable: true,\n\t                    title: messages.editor.editorTitle,\n\t                    visible: false,\n\t                    close: function(e) {\n\t                        if (e.userTriggered) {\n\t                            if (that.trigger(CANCEL, { container: container, model: model })) {\n\t                                e.preventDefault();\n\t                            }\n\t                        }\n\t                    }\n\t                }, options));\n\n\t            that.editable = container.kendoEditable({\n\t                fields: editableFields,\n\t                model: model,\n\t                clearContainer: false,\n\t                validateOnBlur: true,\n\t                target: that.options.target\n\t            }).data("kendoEditable");\n\n\t            if (!that.trigger(EDIT, { container: container, model: model })) {\n\n\t                container.data("kendoWindow").center().open();\n\n\t                container.on(CLICK + NS, "button.k-scheduler-cancel", function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\n\t                    that.trigger(CANCEL, { container: container, model: model });\n\t                });\n\n\t                container.on(CLICK + NS, "button.k-scheduler-update", function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\n\t                    that.trigger("save", { container: container, model: model });\n\t                });\n\n\t                container.on(CLICK + NS, "button.k-scheduler-delete", function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\n\t                    that.trigger(REMOVE, { container: container, model: model });\n\t                });\n\n\t                container.on(CLICK + NS, "button.k-scheduler-resetSeries", function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\t                    that.trigger(RESET, { container: container, model: model });\n\t                });\n\n\t                kendo.cycleForm(container);\n\n\t                model.bind("change", that.toggleDateValidationHandler);\n\t            } else {\n\t                that.trigger(CANCEL, { container: container, model: model });\n\t            }\n\n\t            return that.editable;\n\t        },\n\n\t        close: function() {\n\t            var that = this;\n\n\t            var destroy = function() {\n\t                if (that.editable) {\n\t                    that.editable.options.model.unbind("change", that.toggleDateValidationHandler);\n\t                    that.editable.destroy();\n\t                    that.editable = null;\n\t                    that.container = null;\n\t                }\n\t                if (that.popup) {\n\t                    that.popup.destroy();\n\t                    that.popup = null;\n\t                }\n\t            };\n\n\t            if (that.editable) {\n\t                if (that._timezonePopup && that._timezonePopup.data("kendoWindow")) {\n\t                    that._timezonePopup.data("kendoWindow").destroy();\n\t                    that._timezonePopup = null;\n\t                }\n\n\t                if (that.container.is(":visible")) {\n\t                    that.container.data("kendoWindow").bind("deactivate", destroy).close();\n\t                } else {\n\t                    destroy();\n\t                }\n\t            } else {\n\t                destroy();\n\t            }\n\t        },\n\n\t        _createEndTimezoneButton: function() {\n\t            var messages = this.options.messages;\n\t            var html = "";\n\n\t            html += \'<div class="k-edit-buttons k-state-default">\';\n\t            html += this.createButton({ name: "savetimezone", text: messages.save }) + this.createButton({ name: "canceltimezone", text: messages.cancel });\n\t            html += \'</div></div></div>\';\n\n\t            return html;\n\t        },\n\n\t        showDialog: function(options) {\n\t            var html = kendo.format("<div class=\'k-popup-edit-form\'><div class=\'k-edit-form-container\'><p class=\'k-popup-message\'>{0}</p>", options.text);\n\n\t            html += \'<div class="k-edit-buttons k-state-default">\';\n\n\t            for (var buttonIndex = 0; buttonIndex < options.buttons.length; buttonIndex++) {\n\t                html+= this.createButton(options.buttons[buttonIndex]);\n\t            }\n\n\t            html += \'</div></div></div>\';\n\n\t            var wrapper = this.element;\n\n\t            if (this.popup) {\n\t                this.popup.destroy();\n\t            }\n\n\t            var popup = this.popup = $(html).appendTo(wrapper)\n\t                               .eq(0)\n\t                               .on(CLICK, ".k-button", function(e) {\n\t                                    e.preventDefault();\n\n\t                                    popup.close();\n\n\t                                    var buttonIndex = $(e.currentTarget).index();\n\n\t                                    options.buttons[buttonIndex].click();\n\t                               })\n\t                               .kendoWindow({\n\t                                   modal: true,\n\t                                   resizable: false,\n\t                                   draggable: false,\n\t                                   title: options.title,\n\t                                   visible: false,\n\t                                   close: function() {\n\t                                       this.destroy();\n\t                                       wrapper.focus();\n\t                                   }\n\t                               })\n\t                               .getKendoWindow();\n\n\t            popup.center().open();\n\t        },\n\n\t        _initTimezoneEditor: function(model, activator) {\n\t            var that = this;\n\t            var container = that.container.find(".k-scheduler-timezones");\n\t            var checkbox = container.find("input.k-timezone-toggle");\n\t            var endTimezoneRow = container.find(".k-edit-label:last").add(container.find(".k-edit-field:last"));\n\t            var saveButton = container.find(".k-scheduler-savetimezone");\n\t            var cancelButton = container.find(".k-scheduler-canceltimezone");\n\t            var timezonePopup = that._timezonePopup;\n\t            var startTimezoneChange = function(e) {\n\t                if (e.field === "startTimezone") {\n\t                    var value = model.startTimezone;\n\n\t                    checkbox.prop("disabled", !value);\n\n\t                    if (!value) {\n\t                        endTimezoneRow.hide();\n\t                        model.set("endTimezone", "");\n\t                        checkbox.prop("checked", false);\n\t                    }\n\t                }\n\t            };\n\t            var wnd;\n\n\t            that._startTimezone = model.startTimezone;\n\t            that._endTimezone = model.endTimezone;\n\n\t            if (!timezonePopup) {\n\t                that._timezonePopup = timezonePopup = container.kendoWindow({\n\t                    modal: true,\n\t                    resizable: false,\n\t                    draggable: true,\n\t                    title: that.options.messages.editor.timezoneEditorTitle,\n\t                    visible: false,\n\t                    close: function(e) {\n\t                        model.unbind("change", startTimezoneChange);\n\n\t                        if (e.userTriggered) {\n\t                            that._revertTimezones(model);\n\t                        }\n\n\t                        if (activator) {\n\t                            activator.focus();\n\t                        }\n\t                    }\n\t                });\n\n\t                checkbox.click(function() {\n\t                    endTimezoneRow.toggle(checkbox.prop("checked"));\n\t                    model.set("endTimezone", "");\n\t                });\n\n\t                saveButton.click(function(e) {\n\t                    e.preventDefault();\n\t                    wnd.close();\n\t                });\n\n\t                cancelButton.click(function(e) {\n\t                    e.preventDefault();\n\t                    that._revertTimezones(model);\n\t                    wnd.close();\n\t                });\n\n\t                model.bind("change", startTimezoneChange);\n\t            }\n\n\t            checkbox.prop("checked", model.endTimezone).prop("disabled", !model.startTimezone);\n\n\t            if (model.endTimezone) {\n\t                endTimezoneRow.show();\n\t            } else {\n\t                endTimezoneRow.hide();\n\t            }\n\n\t            wnd = timezonePopup.data("kendoWindow");\n\t            wnd.center().open();\n\t        }\n\t    });\n\n\t    var Scheduler = DataBoundWidget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            if (!that.options.views || !that.options.views.length) {\n\t                that.options.views = ["day", "week"];\n\t            }\n\n\t            that.resources = [];\n\n\t            that._initModel();\n\n\t            that._wrapper();\n\n\t            that._views();\n\n\t            that._toolbar();\n\n\t            that._dataSource();\n\n\t            that._resources();\n\n\t            that._resizeHandler = function() {\n\t                that.resize();\n\t            };\n\n\t            that.wrapper.on(MOUSEDOWN + NS + " selectstart" + NS, function(e) {\n\t                if (!$(e.target).is(":kendoFocusable")) {\n\t                    e.preventDefault();\n\t                }\n\t            });\n\n\t            if (that.options.editable && that.options.editable.resize !== false) {\n\t                that._resizable();\n\t            }\n\n\t            that._movable();\n\n\t            that._bindResize();\n\n\t            if(that.options.messages && that.options.messages.recurrence) {\n\t                recurrence.options = that.options.messages.recurrence;\n\t            }\n\n\t            that._selectable();\n\n\t            that._touchHandlers();\n\n\t            that._ariaId = kendo.guid();\n\n\t            that._createEditor();\n\t        },\n\n\t        _bindResize: function() {\n\t            $(window).on("resize" + NS, this._resizeHandler);\n\t        },\n\n\t        _unbindResize: function() {\n\t            $(window).off("resize" + NS, this._resizeHandler);\n\t        },\n\n\t        dataItems: function() {\n\t            var that = this;\n\t            var items = that.items();\n\t            var events = that._data;\n\t            var eventsUids = $.map(items, function(item) {\n\t                return $(item).attr("data-uid");\n\t            });\n\t            var i;\n\t            var key;\n\n\t            var dict = {};\n\t            var eventsUidsLength = eventsUids.length;\n\t            for (i = 0; i < eventsUidsLength; i++) {\n\t                dict[eventsUids[i]] = null;\n\t            }\n\n\t            var eventsCount = events.length;\n\t            for (i = 0; i < eventsCount; i++) {\n\t                var event = events[i];\n\t                if (dict[event.uid] !== undefined) {\n\t                    dict[event.uid] = event;\n\t                }\n\t            }\n\n\t            var sortedData = [];\n\t            for (key in dict) {\n\t                sortedData.push(dict[key]);\n\t            }\n\n\t            return sortedData;\n\t        },\n\n\t        _isMobile: function() {\n\t            var options = this.options;\n\t            return (options.mobile === true && kendo.support.mobileOS) || options.mobile === "phone" || options.mobile === "tablet";\n\t        },\n\n\t        _isTouch: function(event) {\n\t            return /touch/.test(event.type) || (event.originalEvent && /touch/.test(event.originalEvent.pointerType));\n\t        },\n\n\t        _isInverseColor: function(eventElement) {\n\t            return eventElement.hasClass(INVERSECOLORCLASS);\n\t        },\n\n\t        _groupsByResource: function(resources, groupIndex, groupsArray, parentFieldValue, parentField) {\n\t            if (!groupsArray) {\n\t                groupsArray = [];\n\t            }\n\n\t            var resource = resources[0];\n\t            if (resource) {\n\t                var group;\n\t                var data = resource.dataSource.view();\n\t                var prevIndex = 0;\n\n\t                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n\t                    var fieldValue = kendo.getter(resource.dataValueField)(data[dataIndex]);\n\t                    var currentGroupIndex = groupIndex + prevIndex + dataIndex;\n\n\t                    group = this._groupsByResource(resources.slice(1), currentGroupIndex, groupsArray, fieldValue, resource.field);\n\t                    group[resource.field] = fieldValue;\n\t                    prevIndex = group.groupIndex;\n\n\t                    if (parentField && parentFieldValue) {\n\t                        group[parentField] = parentFieldValue;\n\t                    }\n\n\t                    if (resources.length === 1) {\n\t                        group.groupIndex = groupIndex + dataIndex;\n\t                        groupsArray.push(group);\n\t                    }\n\t                }\n\t                return group;\n\t            } else {\n\t                return {};\n\t            }\n\t        },\n\n\t        data: function () {\n\t            return this._data;\n\t        },\n\n\t        select: function (options) {\n\t            var that = this;\n\t            var view = that.view();\n\t            var selection = that._selection;\n\t            var groups = view.groups;\n\t            var selectedGroups;\n\n\t            if (options === undefined) {\n\t                var selectedEvents;\n\t                var slots = view._selectedSlots;\n\n\t                if(!selection) {\n\t                    return [];\n\t                }\n\n\t                if (selection && selection.events) {\n\t                    selectedEvents = that._selectedEvents();\n\t                }\n\n\t                return {\n\t                    start: selection.start,\n\t                    end: selection.end,\n\t                    events: selectedEvents,\n\t                    slots: slots,\n\t                    resources: view._resourceBySlot(selection)\n\t                };\n\t            }\n\n\t            if (!options) {\n\t                that._selection = null;\n\t                that._old = null;\n\t                view.clearSelection();\n\n\t                return;\n\t            }\n\n\t            if ($.isArray(options)) {\n\t                options = {\n\t                    events: options.splice(0)\n\t                };\n\t            }\n\n\t            if (options.resources) {\n\t                var fieldName;\n\t                var filters = [];\n\t                var groupsByResource = [];\n\n\t                if (view.groupedResources) {\n\t                    that._groupsByResource(view.groupedResources, 0, groupsByResource);\n\t                }\n\n\t                for (fieldName in options.resources) {\n\t                    filters.push({ field: fieldName, operator: "eq", value: options.resources[fieldName]});\n\t                }\n\n\t                selectedGroups = new kendo.data.Query(groupsByResource)\n\t                    .filter(filters)\n\t                    .toArray();\n\t            }\n\n\t            if (options.events && options.events.length) {\n\t                that._selectEvents(options.events, selectedGroups);\n\t                that._select();\n\n\t                return;\n\t            }\n\n\t            if (groups && (options.start && options.end)) {\n\t                var rangeStart = getDate(view._startDate);\n\t                var rangeEnd = kendo.date.addDays(getDate(view._endDate),1);\n\t                var group;\n\t                var ranges;\n\n\t                if (options.start < rangeEnd && rangeStart <= options.end) {\n\t                    if (selectedGroups && selectedGroups.length) {\n\t                        group = groups[selectedGroups[0].groupIndex];\n\t                    } else {\n\t                        group = groups[0];\n\t                    }\n\n\t                    if (!group.timeSlotCollectionCount()) {\n\t                        options.isAllDay = true;\n\t                    }\n\n\t                    ranges = group.ranges(options.start, options.end, options.isAllDay, false);\n\n\t                    if (ranges.length) {\n\t                        that._selection = {\n\t                            start: kendo.timezone.toLocalDate(ranges[0].start.start),\n\t                            end: kendo.timezone.toLocalDate(ranges[ranges.length-1].end.end),\n\t                            groupIndex: ranges[0].start.groupIndex,\n\t                            index: ranges[0].start.index,\n\t                            isAllDay: ranges[0].start.isDaySlot,\n\t                            events: []\n\t                        };\n\n\t                        that._select();\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _selectEvents: function (eventsUids, selectedGroups) {\n\t            var that = this;\n\t            var idx;\n\t            var view = that.view();\n\t            var groups = view.groups;\n\t            var eventsLength = eventsUids.length;\n\t            var isGrouped = selectedGroups && selectedGroups.length;\n\n\t            for (idx = 0; idx < eventsLength; idx++) {\n\t                if (groups && isGrouped) {\n\t                    var currentGroup = groups[selectedGroups[0].groupIndex];\n\t                    var events = [];\n\t                    var timeSlotCollectionCount = currentGroup.timeSlotCollectionCount();\n\t                    var daySlotCollectionCount = currentGroup.daySlotCollectionCount();\n\n\t                    for (var collIdx = 0; collIdx < timeSlotCollectionCount; collIdx++) {\n\t                        events = events.concat(currentGroup.getTimeSlotCollection(collIdx).events());\n\t                    }\n\n\t                    for (var dayCollIdx = 0; dayCollIdx < daySlotCollectionCount; dayCollIdx++) {\n\t                        events = events.concat(currentGroup.getDaySlotCollection(dayCollIdx).events());\n\t                    }\n\n\t                    events = new kendo.data.Query(events)\n\t                        .filter({field: "element[0].getAttribute(\'data-uid\')", operator: "eq", value: eventsUids[idx]})\n\t                        .toArray();\n\n\t                    if (events[0]) {\n\t                        that._createSelection(events[0].element);\n\t                    }\n\t                } else {\n\t                    var element = view.element.find(kendo.format(".k-event[data-uid={0}], .k-task[data-uid={0}]", eventsUids[idx]));\n\n\t                    if (element.length) {\n\t                        that._createSelection(element[0]);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _touchHandlers: function() {\n\t            var that = this;\n\t            var startX;\n\t            var startY;\n\t            var endX;\n\t            var endY;\n\t            var timeStamp;\n\t            var wrapper = that.wrapper;\n\t            var touchMoveHandler = $.proxy(that._touchMove, that);\n\n\t            wrapper.on(TOUCHSTART + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td, .k-event", function(e) {\n\t                var content = that.wrapper.find(".k-scheduler-content");\n\n\t                if (!that._isTouch(e)) {\n\t                    return;\n\t                }\n\n\t                content.stop(true, false);\n\n\t                that._touchPosX = startX = that._tapPosition(e, \'X\');\n\t                that._touchPosY = startY = that._tapPosition(e, \'Y\');\n\t                that._userTouched = true;\n\t                that.view()._scrolling = false;\n\t                timeStamp = Date.now();\n\n\t                wrapper.on(TOUCHMOVE + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td, .k-event", touchMoveHandler);\n\t            });\n\n\t            wrapper.on(TOUCHEND + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td, .k-event", function(e) {\n\t                if (!that._isTouch(e)) {\n\t                    return;\n\t                }\n\n\t                var delta = Date.now() - timeStamp;\n\t                var content = that.wrapper.find(".k-scheduler-content");\n\t                var amplitude = -that._amplitude * (3000 / delta);\n\n\t                endX = that._tapPosition(e, \'X\');\n\t                endY = that._tapPosition(e, \'Y\');\n\n\t                if (that._dragging) {\n\t                    return;\n\t                }\n\n\t                if (that.options.selectable && (Math.abs(endX - startX) <= 10 || Math.abs(endY - startY) <= 10)) {\n\t                    that._mouseDownSelection(e);\n\t                }\n\n\t                if (!kendo.support.kineticScrollNeeded && delta < 200 && Math.abs(endX - startX) > 10) {\n\t                    content.animate({\n\t                        scrollTop: content[0].scrollTop + amplitude\n\t                    });\n\t                }\n\n\t                wrapper.off(TOUCHMOVE + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td", touchMoveHandler);\n\t            });\n\t        },\n\n\t        _selectable: function() {\n\t            var that = this;\n\t            var wrapper = that.wrapper;\n\n\t            if (!that.options.selectable) {\n\t                return;\n\t            }\n\n\t            that._tabindex();\n\n\t            wrapper.on(MOUSEDOWN + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td, .k-event", function (e) {\n\t                if (that._isTouch(e)) {\n\t                    return;\n\t                }\n\t                that._mouseDownSelection(e);\n\t            });\n\n\t            var mouseMoveHandler = $.proxy(that._mouseMove, that);\n\n\t            wrapper.on(MOUSEDOWN + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td", function(e) {\n\t                var which = e.which;\n\t                var button = e.button;\n\t                var isRight = which && which === 3 || button && button == 2;\n\n\t                if (that._isTouch(e)) {\n\t                    return;\n\t                }\n\n\t                if (!isRight) {\n\t                    wrapper.on(MOUSEMOVE + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td", mouseMoveHandler);\n\t                }\n\t            });\n\n\t            wrapper.on("mouseup" + NS + " mousecancel" + NS, function() {\n\t                wrapper.off(MOUSEMOVE + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td", mouseMoveHandler);\n\t            });\n\n\t            wrapper.on("focus" + NS, function() {\n\t                if (!that._selection && !that._userTouched) {\n\t                    that._selectFirstSlot();\n\t                }\n\n\t                that._select();\n\t            });\n\n\t            wrapper.on("focusout" + NS, function(e) {\n\t                that._ctrlKey = that._shiftKey = false;\n\n\t                if (!$(e.relatedTarget).closest(VIEWSSELECTOR).length) {\n\t                    that.toolbar.find(VIEWSSELECTOR).removeClass(EXPANDEDSTATE);\n\t                }\n\t            });\n\n\t            wrapper.on("keydown" + NS, proxy(that._keydown, that));\n\n\t            wrapper.on("keyup" + NS, function(e) {\n\t                that._ctrlKey = e.ctrlKey;\n\t                that._shiftKey = e.shiftKey;\n\t            });\n\t        },\n\n\t        _mouseDownSelection: function(e) {\n\t            var which = e.which;\n\t            var button = e.button;\n\t            var isRight = which && which === 3 || button && button == 2;\n\n\t            if (!isRight) {\n\t                if( e.ctrlKey){\n\t                    this._ctrlKey = e.ctrlKey;\n\t                }\n\n\t                if(e.shiftKey){\n\t                    this._shiftKey = e.shiftKey;\n\t                }\n\t                this._createSelection(e.currentTarget);\n\t            }\n\n\t            if(kendo._activeElement() !== this.wrapper.get(0)){\n\t                kendo.focusElement(this.wrapper);\n\t            } else {\n\t                this._select();\n\t            }\n\n\t            if(this.toolbar){\n\t                this.toolbar.find("." + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n\t            }\n\t        },\n\n\t        _selectFirstSlot: function() {\n\t            this._createSelection(this.wrapper.find(".k-scheduler-content").find("td:first"));\n\t        },\n\n\t        _select: function() {\n\t            var that = this;\n\t            var view = that.view();\n\t            var wrapper = that.wrapper;\n\t            var current = view.current();\n\t            var selection = that._selection;\n\t            var oldSelection = that._old ? that._old.selection : null;\n\t            var oldEventsLength = that._old ? that._old.eventsLength : null;\n\t            if (!selection) {\n\t                return;\n\t            }\n\n\t            if (current) {\n\t                current.removeAttribute("id");\n\t                current.removeAttribute("aria-label");\n\t                wrapper.removeAttr("aria-activedescendant");\n\t            }\n\n\t            view.select(selection);\n\n\t            current = view.current();\n\t            if (current && (oldSelection !== current || (selection.events && (oldEventsLength !== selection.events.length )))) {\n\t                var currentUid = $(current).data("uid");\n\n\t                if (that._old && currentUid &&\n\t                    currentUid === $(that._old.selection).data("uid") &&\n\t                    (selection.events && that._old.eventsLength === selection.events.length)) {\n\t                    return;\n\t                }\n\n\t                var labelFormat;\n\t                var data = selection;\n\t                var events = that._selectedEvents();\n\t                var slots = view._selectedSlots;\n\n\t                if (events[0]) {\n\t                    data = events[0] || selection;\n\t                    labelFormat = kendo.format(that.options.messages.ariaEventLabel, data.title, data.start, data.start);\n\t                } else {\n\t                    labelFormat = kendo.format(that.options.messages.ariaSlotLabel, data.start, data.end);\n\t                }\n\n\t                current.setAttribute("id", that._ariaId);\n\t                current.setAttribute("aria-label", labelFormat);\n\t                wrapper.attr("aria-activedescendant", that._ariaId);\n\n\t                that._old ={\n\t                    selection:current,\n\t                    eventsLength: events.length\n\t                };\n\n\t                that.trigger("change", {\n\t                    start: selection.start,\n\t                    end: selection.end,\n\t                    events: events,\n\t                    slots: slots,\n\t                    resources: view._resourceBySlot(selection)\n\t                });\n\t            }\n\t        },\n\n\t        _selectedEvents: function() {\n\t            var uids = this._selection.events;\n\t            var length = uids.length;\n\t            var idx = 0;\n\t            var event;\n\n\t            var events = [];\n\n\t            for (; idx < length; idx++) {\n\t                event = this.occurrenceByUid(uids[idx]);\n\t                if (event) {\n\t                    events.push(event);\n\t                }\n\t            }\n\n\t            return events;\n\t        },\n\n\t        _tapPosition: function (event, coordinate) {\n\t            return /touch/.test(event.type) ? (event.originalEvent || event).changedTouches[0][\'page\' + coordinate] : event[\'page\' + coordinate];\n\t        },\n\n\t        _touchMove: function (e) {\n\t            var that = this;\n\t            var content = that.wrapper.find(".k-scheduler-content");\n\t            var verticalScroll = content[0].scrollHeight > content[0].clientHeight;\n\t            var horizontalScroll = content[0].scrollWidth > content[0].clientWidth;\n\t            var endY = that._tapPosition(e, \'Y\');\n\t            var endX = that._tapPosition(e, \'X\');\n\t            var scrollTop = content[0].scrollTop - Math.round(endY - that._touchPosY);\n\t            var scrollLeft = content[0].scrollLeft - Math.round(endX - that._touchPosX);\n\t            var applyVerticalScroll = verticalScroll && Math.abs(endY - that._touchPosY) > 10;\n\t            var applyhorizontalScroll = horizontalScroll && Math.abs(endY - that._touchPosY) > 10;\n\n\n\t            if (that._dragging || kendo.support.kineticScrollNeeded || !that._isTouch(e)) {\n\t                return;\n\t            }\n\n\t            if (applyVerticalScroll || applyhorizontalScroll) {\n\t                that._amplitude = Math.round(endY - that._touchPosY);\n\t                that._touchPosY = endY;\n\t                that._touchPosX = endX;\n\t                content.animate({\n\t                    scrollTop: scrollTop,\n\t                    scrollLeft: scrollLeft\n\t                }, 0);\n\t                that.view()._scrolling = true;\n\t            }\n\t        },\n\n\t        _mouseMove: function(e) {\n\t            var that = this;\n\t            clearTimeout(that._moveTimer);\n\n\t            if (that._isTouch(e)) {\n\t                return;\n\t            }\n\n\t            that._moveTimer = setTimeout(function() {\n\t                var view = that.view();\n\t                var selection = that._selection;\n\n\t                if (selection) {\n\t                    var slot = view.selectionByElement($(e.currentTarget));\n\n\t                    if (slot && selection.groupIndex === slot.groupIndex) {\n\t                        var startDate = slot.startDate();\n\t                        var endDate = slot.endDate();\n\n\t                        if (startDate >= selection.end) {\n\t                            selection.backward = false;\n\t                        } else if (endDate <= selection.start) {\n\t                            selection.backward = true;\n\t                        }\n\n\t                        if (selection.backward) {\n\t                            selection.start = startDate;\n\t                        } else {\n\t                            selection.end = endDate;\n\t                        }\n\n\t                        that._select();\n\t                    }\n\t                }\n\t            }, 5);\n\t        },\n\n\t        _viewByIndex: function(index) {\n\t            var view, views = this.views;\n\n\t            for (view in views) {\n\t                if (!index) {\n\t                    return view;\n\t                }\n\n\t                index--;\n\t            }\n\t        },\n\n\t        _keydown: function(e) {\n\t            var that = this,\n\t                key = e.keyCode,\n\t                view = that.view(),\n\t                editable = view.options.editable,\n\t                selection = that._selection,\n\t                prevSelection = $.extend(selection),\n\t                isModifier = key === 16 || key === 18 || key === 17 || key === 91 || key === 92,\n\t                focusableToolBarSelector = "> .k-button," +\n\t                                    ".k-scheduler-navigation > .k-button," +\n\t                                    ".k-nav-current," +\n\t                                    ".k-views-dropdown:visible," +\n\t                                    ".k-scheduler-views > .k-button",\n\t                focusableItems = that.toolbar.find(focusableToolBarSelector),\n\t                viewsWrapper = that.toolbar.find(VIEWSSELECTOR),\n\t                shouldNavigate = $(e.target).closest(VIEWSSELECTOR).length || that.toolbar.find(\'.k-scheduler-views .k-state-focused\').length,\n\t                focusedViewIndex = viewsWrapper.children().index(that.toolbar.find("." + FOCUSEDSTATE)),\n\t                isRtl =  kendo.support.isRtl(that.element),\n\t                isViewsDropDown = $(e.target).is(".k-views-dropdown"),\n\t                direction = isRtl ? -1 : 1;\n\n\t            if (focusedViewIndex == -1) {\n\t                focusedViewIndex = viewsWrapper.children().index(that.toolbar.find(".k-state-selected"));\n\t            }\n\n\t            that._ctrlKey = e.ctrlKey;\n\t            that._shiftKey = e.shiftKey;\n\n\t            if (key === keys.F10) {\n\t                that._focusToolbar();\n\t                e.preventDefault();\n\t                return;\n\t            } else if (key === keys.TAB) {\n\t                if (that.toolbar.find("." + FOCUSEDSTATE).length) {\n\t                    var idx = focusableItems.index(that.toolbar.find("." + FOCUSEDSTATE));\n\t                    var itemToFocus = e.shiftKey ? focusableItems[idx -  1] : focusableItems[idx +  1];\n\t                    that.toolbar.find("." + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n\t                    if (itemToFocus) {\n\t                        $(itemToFocus).addClass(FOCUSEDSTATE).focus();\n\t                        that._focusedView = null;\n\t                        e.preventDefault();\n\t                        return;\n\t                    } else {\n\t                        that.element.focus();\n\t                        e.preventDefault();\n\t                        return;\n\t                    }\n\t                }\n\t            } else if (key === keys.ENTER || key === keys.SPACEBAR) {\n\t                if (shouldNavigate && that._focusedView && !that._focusedView.hasClass("k-state-selected")) {\n\t                    var focusedViewName = that._focusedView.data().name;\n\n\t                    if (!that.trigger("navigate", { view: focusedViewName, action: "changeView", date: that.date() })) {\n\t                        that.view(focusedViewName);\n\t                    }\n\t                    e.preventDefault();\n\t                    return;\n\t                }\n\n\t                if (that.toolbar.find("." + FOCUSEDSTATE + \':visible\').length) {\n\t                    that.toolbar.find("." + FOCUSEDSTATE + \':visible\').click();\n\t                    e.preventDefault();\n\t                    return;\n\t                }\n\t            } else if (e.altKey && key === keys.DOWN  && !isViewsDropDown) {\n\t                if (that.toolbar.find("." + FOCUSEDSTATE + \':visible\').length) {\n\t                    that.toolbar.find("." + FOCUSEDSTATE + \':visible\').click();\n\t                    e.preventDefault();\n\t                    return;\n\t                }\n\t            } else if (key === keys.RIGHT && shouldNavigate) {\n\t                $(that.toolbar.find("." + FOCUSEDSTATE)).removeClass(FOCUSEDSTATE);\n\t                if (isRtl) {\n\t                    that._focusedView = focusedViewIndex - 1 === 0 ? $(viewsWrapper.children(":last")) : $(viewsWrapper.children()[focusedViewIndex + (1 * direction)]);\n\t                } else {\n\t                    that._focusedView = focusedViewIndex + 1 === viewsWrapper.children().length ? $(viewsWrapper.children(":first")) : $(viewsWrapper.children()[focusedViewIndex + (1 * direction)]);\n\t                }\n\t                that._focusedView.focus().addClass(FOCUSEDSTATE);\n\t                e.preventDefault();\n\t                return;\n\t            } else if (key === keys.LEFT && shouldNavigate) {\n\t                $(that.toolbar.find("." + FOCUSEDSTATE)).removeClass(FOCUSEDSTATE);\n\t                if (isRtl) {\n\t                    that._focusedView = focusedViewIndex + 1 === viewsWrapper.children().length ? $(viewsWrapper.children(":first")) : $(viewsWrapper.children()[focusedViewIndex - (1 * direction)]);\n\t                } else {\n\t                    that._focusedView = focusedViewIndex - 1 < 0 ? $(viewsWrapper.children(":last")) : $(viewsWrapper.children()[focusedViewIndex - (1 * direction)]);\n\t                }\n\t                that._focusedView.focus().addClass(FOCUSEDSTATE);\n\t                e.preventDefault();\n\t                return;\n\t            } else if (e.altKey && key === keys.DOWN && that.toolbar.find(".k-nav-current").hasClass(FOCUSEDSTATE)) {\n\t                that._showCalendar();\n\t                e.preventDefault();\n\t                return;\n\t            } else if (e.altKey && key === keys.DOWN && isViewsDropDown) {\n\t                return;\n\t            } else if (key === keys.ESC && that.popup && that.popup.visible()) {\n\t                that.popup.close();\n\t                e.preventDefault();\n\t                return;\n\t            }\n\n\t            if (isModifier) {\n\t                return;\n\t            }\n\n\t            if (!selection) {\n\t                that._selectFirstSlot();\n\t                that._select();\n\t                that.element.focus();\n\n\t                return;\n\t            }\n\n\t            if (key === keys.TAB) {\n\t                if (view.moveToEvent(selection, e.shiftKey)) {\n\t                    that._select();\n\n\t                    // Focus the Scheduler element only if it not the currently focused element\n\t                    if(document.activeElement.getAttribute("id") !== that.element.attr("id")) {\n\t                        that.element.focus();\n\t                    }\n\n\t                    e.preventDefault();\n\t                } else {\n\t                    that._focusToolbar();\n\t                    e.preventDefault();\n\t                    return;\n\t                }\n\t            } else if (key === keys.ENTER || key === keys.SPACEBAR) {\n\t                if (selection.events.length && editable) {\n\t                    if (editable.update !== false) {\n\t                        that.editEvent(selection.events[0]);\n\t                    }\n\t                } else if (editable && editable.create !== false) {\n\t                    if (selection.isAllDay) {\n\t                        selection = $.extend({}, selection, {\n\t                            end: kendo.date.addDays(selection.end, -1)\n\t                        });\n\t                    }\n\n\t                    e.preventDefault();\n\t                    that.addEvent(extend({}, selection, view._resourceBySlot(selection)));\n\t                }\n\t            } else if (key === keys.DELETE && editable !== false && editable.destroy !== false) {\n\t                that.removeEvent(selection.events[0]);\n\t            } else if (key >= 49 && key <= 57) {\n\t                // switch to view 1-9\n\t                var viewByIndex = that._viewByIndex(key - 49);\n\t                if (viewByIndex && !that.trigger("navigate", { view: viewByIndex, action: "changeView", date: that.date() })) {\n\t                    that.view(viewByIndex);\n\t                }\n\t            } else if (view.move(selection, key, e.shiftKey)) {\n\t                if (view.inRange(selection)) {\n\t                    that._select();\n\n\t                    // prevents trapping focus in pseudo toolbar - remove when toolbar widget is integrated\n\t                    $(document.activeElement).blur();\n\t                    that.toolbar.find("." + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n\t                    that.wrapper.focus();\n\t                } else {\n\t                    var action  = that.date().getTime() > selection.start.getTime() ? "previous": "next";\n\t                    if (!that.trigger("navigate", { view: that._selectedViewName, action: action, date: selection.start })) {\n\t                        that.date(selection.start);\n\t                    } else {\n\t                        selection.start = prevSelection.start;\n\t                        selection.end = prevSelection.end;\n\t                    }\n\t                }\n\n\t                e.preventDefault();\n\t            }\n\n\t            that._adjustSelectedDate();\n\t        },\n\n\t        _focusToolbar: function() {\n\t            this.toolbar.find(".k-button:first")\n\t                .focus()\n\t                .addClass(FOCUSEDSTATE);\n\t        },\n\n\t        _createSelection: function (item) {\n\t            var selection = this._selection;\n\t            var uid;\n\t            var slot;\n\n\t            item = $(item);\n\n\t            if (item.is(".k-event")) {\n\t                uid = item.attr(kendo.attr("uid"));\n\n\t                if (selection && selection.events.indexOf(uid) !== -1 && !this._ctrlKey) {\n\t                    return;\n\t                }\n\t            }\n\n\t            if (!selection || (!this._ctrlKey && !this._shiftKey)) {\n\t                selection = this._selection = {\n\t                    events: [],\n\t                    groupIndex: 0\n\t                };\n\t            }\n\n\t            slot = this.view().selectionByElement(item);\n\n\t            if (slot) {\n\t                selection.groupIndex = slot.groupIndex || 0;\n\t            }\n\n\t            if (uid) {\n\t                slot = getOccurrenceByUid(this._data, uid);\n\t            }\n\n\t            if (slot && slot.uid) {\n\t                uid = [slot.uid];\n\t            }\n\n\t            this._updateSelection(slot, uid);\n\t            this._adjustSelectedDate();\n\t        },\n\n\t        _updateSelection: function(dataItem, events, groupIndex) {\n\t            var selection = this._selection;\n\n\t            if (dataItem && selection) {\n\t                var view =  this.view();\n\n\t                if (dataItem.uid) {\n\t                    dataItem = view._updateEventForSelection(dataItem);\n\t                }\n\n\t                if (this._shiftKey && selection.start && selection.end) {\n\t                    var backward = dataItem.end < selection.end;\n\n\t                    selection.end = dataItem.endDate ? dataItem.endDate() : dataItem.end;\n\n\t                    if (backward && view._timeSlotInterval) {\n\t                        kendo.date.setTime(selection.end, -view._timeSlotInterval());\n\t                    }\n\t                } else {\n\t                    selection.start = dataItem.startDate ? dataItem.startDate() : dataItem.start;\n\t                    selection.end = dataItem.endDate ? dataItem.endDate() : dataItem.end;\n\t                }\n\n\t                if ("isDaySlot" in dataItem) {\n\t                    selection.isAllDay = dataItem.isDaySlot;\n\t                } else {\n\t                    selection.isAllDay = dataItem.isAllDay;\n\t                }\n\n\t                if (groupIndex !== null && groupIndex !== undefined) {\n\t                    selection.groupIndex = groupIndex;\n\t                }\n\n\t                selection.index = dataItem.index;\n\t                if (this._ctrlKey) {\n\t                    var indexOfEvent = (events && events.length) ? selection.events.indexOf(events[0]): -1;\n\n\t                    if(indexOfEvent > -1){\n\t                        selection.events.splice(indexOfEvent, 1);\n\t                    }else{\n\t                        selection.events = selection.events.concat(events || []);\n\t                    }\n\t                } else {\n\t                        selection.events = events || [];\n\t                }\n\t            }\n\t        },\n\n\t        options: {\n\t            name: "Scheduler",\n\t            date: TODAY,\n\t            editable: true,\n\t            autoBind: true,\n\t            snap: true,\n\t            mobile: false,\n\t            timezone: "",\n\t            allDaySlot: true,\n\t            min: new Date(1900, 0, 1),\n\t            max: new Date(2099, 11, 31),\n\t            toolbar: null,\n\t            workWeekStart: 1,\n\t            workWeekEnd: 5,\n\t            workDays: null,\n\t            showWorkHours: false,\n\t            startTime: TODAY,\n\t            endTime: TODAY,\n\t            currentTimeMarker: {\n\t                updateInterval: 10000,\n\t                useLocalTimezone: true\n\t            },\n\t            footer: {},\n\t            messages: {\n\t                today: "Today",\n\t                pdf: "Export to PDF",\n\t                save: "Save",\n\t                cancel: "Cancel",\n\t                destroy: "Delete",\n\t                resetSeries: "Reset Series",\n\t                deleteWindowTitle: "Delete event",\n\t                next: "Next",\n\t                previous: "Previous",\n\t                ariaSlotLabel: "Selected from {0:t} to {1:t}",\n\t                ariaEventLabel: "{0} on {1:D} at {2:t}",\n\t                views: {\n\t                    day: "Day",\n\t                    week: "Week",\n\t                    workWeek: "Work Week",\n\t                    agenda: "Agenda",\n\t                    month: "Month",\n\t                    timeline: "Timeline",\n\t                    timelineWeek: "Timeline Week",\n\t                    timelineWorkWeek: "Timeline Work Week",\n\t                    timelineMonth: "Timeline Month"\n\t                },\n\t                recurrenceMessages: {\n\t                    deleteWindowTitle: "Delete Recurring Item",\n\t                    resetSeriesWindowTitle: "Reset Series",\n\t                    deleteWindowOccurrence: "Delete current occurrence",\n\t                    deleteWindowSeries: "Delete the series",\n\t                    editWindowTitle: "Edit Recurring Item",\n\t                    editWindowOccurrence: "Edit current occurrence",\n\t                    editWindowSeries: "Edit the series"\n\t                },\n\t                editable: {\n\t                    confirmation: DELETECONFIRM\n\t                },\n\t                editor: {\n\t                    title: "Title",\n\t                    start: "Start",\n\t                    end: "End",\n\t                    allDayEvent: "All day event",\n\t                    description: "Description",\n\t                    repeat: "Repeat",\n\t                    timezone: "Timezone",\n\t                    startTimezone: "Start timezone",\n\t                    endTimezone: "End timezone",\n\t                    separateTimezones: "Use separate start and end time zones",\n\t                    timezoneEditorTitle: "Timezones",\n\t                    timezoneEditorButton: "Time zone",\n\t                    timezoneTitle: "Time zones",\n\t                    noTimezone: "No timezone",\n\t                    editorTitle: "Event"\n\t                }\n\t            },\n\t            height: null,\n\t            width: null,\n\t            resources: [],\n\t            group: {\n\t                resources: [],\n\t                orientation: "horizontal"\n\t            },\n\t            views: [],\n\t            selectable: false\n\t        },\n\n\t        events: [\n\t            REMOVE,\n\t            EDIT,\n\t            CANCEL,\n\t            SAVE,\n\t            "add",\n\t            "dataBinding",\n\t            "dataBound",\n\t            "moveStart",\n\t            "move",\n\t            "moveEnd",\n\t            "resizeStart",\n\t            "resize",\n\t            "resizeEnd",\n\t            "navigate",\n\t            "change"\n\t        ],\n\n\t        destroy: function() {\n\t            var that = this,\n\t                element;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            if (that.dataSource) {\n\t                that.dataSource.unbind(CHANGE, that._refreshHandler);\n\t                that.dataSource.unbind(PROGRESS, that._progressHandler);\n\t                that.dataSource.unbind(ERROR, that._errorHandler);\n\t            }\n\n\t            if(that._resourceRefreshHandler) {\n\t                for (var idx = 0; idx < that.resources.length; idx++) {\n\t                    var resourceDS = that.resources[idx].dataSource;\n\t                    resourceDS.unbind(CHANGE, that._resourceRefreshHandler);\n\t                    resourceDS.unbind(PROGRESS, that._resourceProgressHandler);\n\t                    resourceDS.unbind(ERROR, that._resourceErrorHandler);\n\t                }\n\t            }\n\n\t            if (that.calendar) {\n\t                that.calendar.destroy();\n\t                that.popup.destroy();\n\t            }\n\n\t            if (that.view()) {\n\t                that.view().destroy();\n\t            }\n\n\t            if (that._editor) {\n\t                that._editor.destroy();\n\t            }\n\n\t            if (this._moveDraggable) {\n\t                this._moveDraggable.destroy();\n\t            }\n\n\t            if (this._resizeDraggable) {\n\t                this._resizeDraggable.destroy();\n\t            }\n\n\t            element = that.element\n\t                .add(that.wrapper)\n\t                .add(that.toolbar)\n\t                .add(that.popup);\n\n\t            element.off(NS);\n\n\t            clearTimeout(that._moveTimer);\n\n\t            that._model = null;\n\t            that.toolbar = null;\n\t            that.element = null;\n\n\t            $(window).off("resize" + NS, that._resizeHandler);\n\n\t            kendo.destroy(that.wrapper);\n\t        },\n\n\t        setDataSource: function(dataSource) {\n\t            this.options.dataSource = dataSource;\n\n\t            this._dataSource();\n\n\t            if (this.options.autoBind && dataSource.fetch) {\n\t                dataSource.fetch();\n\t            } else if (isArray(dataSource)) {\n\t                this.view(this._selectedView);\n\t            }\n\t        },\n\n\t        items: function() {\n\t            var content = this.wrapper.find(".k-scheduler-content");\n\t            var view = this.view();\n\n\t            if (view && view.options.name === "agenda") {\n\t                return content.find(".k-task");\n\t            } else {\n\t                return content.find(".k-event")\n\t                              .add(this.wrapper.find(".k-scheduler-header-wrap")\n\t                                       .find(".k-scheduler-header-all-day").siblings());\n\t            }\n\t        },\n\n\t        _movable: function() {\n\t            var startSlot;\n\t            var endSlot;\n\t            var startResources;\n\t            var startTime;\n\t            var endTime;\n\t            var event;\n\t            var clonedEvent;\n\t            var that = this;\n\t            var originSlot;\n\t            var originStartTime;\n\t            var originalEvent;\n\t            var distance = 0;\n\t            var clonedEvents = [];\n\t            var cachedEvents = [];\n\n\t            var isMobile = that._isMobile();\n\t            var movable = that.options.editable && that.options.editable.move !== false;\n\t            var resizable = that.options.editable && that.options.editable.resize !== false;\n\n\t            if (movable || (resizable && isMobile)) {\n\t                that._dragging = false;\n\t                if (isMobile && kendo.support.mobileOS.android) {\n\t                    distance = 5;\n\t                }\n\n\t                that._moveDraggable = new kendo.ui.Draggable(that.element, {\n\t                    distance: distance,\n\t                    filter: ".k-event",\n\t                    ignore: ".k-resize-handle",\n\t                    holdToDrag: isMobile,\n\t                    autoScroll: true\n\t                });\n\n\t                if (movable) {\n\t                    that._moveDraggable.bind("dragstart", function(e) {\n\t                        var view = that.view();\n\t                        var eventElement = e.currentTarget;\n\t                        var isTouch = that._isTouch(e);\n\t                        that._dragging = true;\n\n\t                        if (!view.options.editable || view.options.editable.move === false) {\n\t                            that._dragging = false;\n\t                            e.preventDefault();\n\t                            return;\n\t                        }\n\n\t                        if (isTouch && !eventElement.hasClass("k-event-active")) {\n\t                            that._dragging = false;\n\t                            that.element.find(".k-event-active").removeClass("k-event-active");\n\t                            e.preventDefault();\n\t                            return;\n\t                        }\n\n\t                        event = that.occurrenceByUid(eventElement.attr(kendo.attr("uid")));\n\n\t                        clonedEvent = event.clone();\n\t                        originalEvent = event.clone();\n\n\t                        clonedEvent.update(view._eventOptionsForMove(clonedEvent));\n\n\t                        clonedEvent.inverseColor = that._isInverseColor(eventElement);\n\n\t                        clonedEvents = [];\n\t                        if (that._selection) {\n\t                            var events = that._selection.events;\n\n\t                            for (var i = 0; i < events.length; i++) {\n\t                                var evtClone = that.occurrenceByUid(events[i]).clone();\n\t                                var evtCloneElement = this.element.find(\'div.k-event[data-uid="\' + evtClone.uid + \'"]\').eq(0);\n\n\t                                evtClone.update(view._eventOptionsForMove(evtClone));\n\n\t                                if(evtCloneElement.length) {\n\t                                    evtClone.inverseColor = that._isInverseColor(evtCloneElement);\n\t                                }\n\n\t                                clonedEvents.push(evtClone);\n\t                            }\n\t                        } else {\n\t                            clonedEvents.push(clonedEvent);\n\t                        }\n\n\t                        startSlot = view._slotByPosition(e.x.startLocation, e.y.startLocation);\n\t                        startResources = view._resourceBySlot(startSlot);\n\n\t                        originStartTime = startTime = startSlot.startOffset(e.x.startLocation, e.y.startLocation, that.options.snap);\n\n\t                        endSlot = startSlot;\n\n\t                        originSlot = startSlot;\n\n\t                        if (!startSlot || that.trigger("moveStart", { event: event })) {\n\t                            e.preventDefault();\n\t                        }\n\t                    })\n\t                    .bind("drag", function(e) {\n\t                        var view = that.view();\n\t                        var slot = view._slotByPosition(e.x.location, e.y.location);\n\t                        var distance;\n\t                        var range;\n\t                        var i;\n\n\t                        if (!slot) {\n\t                            return;\n\t                        }\n\n\t                        endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n\n\t                        if (slot.isDaySlot !== startSlot.isDaySlot) {\n\n\t                            if (slot.isDaySlot !== originSlot.isDaySlot) {\n\t                                var slotIndex = $(startSlot.element).index();\n\n\t                                var targetSlotElement = $(slot.element).parent().children().eq(slotIndex);\n\n\t                                startSlot = view._slotByPosition(targetSlotElement.offset().left, targetSlotElement.offset().top);\n\n\t                                startTime = startSlot.startOffset(e.x.location, e.y.location, true);\n\n\t                                cachedEvents = clonedEvents.map(function(event) { return event.clone(); });\n\n\t                                for (i = 0; i < clonedEvents.length; i++) {\n\t                                    if (clonedEvents[i].isAllDay != slot.isDaySlot) {\n\t                                        clonedEvents[i].isAllDay = slot.isDaySlot;\n\n\t                                        clonedEvents[i].end = kendo.date.getDate(clonedEvents[i].start);\n\t                                        clonedEvents[i].start = kendo.date.getDate(clonedEvents[i].start);\n\n\t                                        if (!slot.isDaySlot) {\n\t                                            kendo.date.setTime(clonedEvents[i].start, kendo.date.getMilliseconds(view.startTime()));\n\t                                            kendo.date.setTime(clonedEvents[i].end, kendo.date.getMilliseconds(view.startTime()) + view._timeSlotInterval());\n\t                                        }\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                startSlot = $.extend(true, { }, originSlot);\n\t                                startTime = originStartTime;\n\n\t                                clonedEvents = cachedEvents;\n\t                            }\n\t                        }\n\n\t                        distance = endTime - startTime;\n\n\t                        for (i = 0; i < clonedEvents.length; i++) {\n\t                            view._updateMoveHint(clonedEvents[i], slot.groupIndex, distance);\n\t                        }\n\n\t                        range = moveEventRange(clonedEvent, distance);\n\n\t                        if (!that.trigger("move", {\n\t                            event: event,\n\t                            slot: { element: slot.element, start: slot.startDate(), end: slot.endDate(), isDaySlot: slot.isDaySlot },\n\t                            resources: view._resourceBySlot(slot),\n\t                            start: range.start,\n\t                            end: range.end\n\t                        })) {\n\t                            endSlot = slot;\n\t                        } else {\n\t                            for (i = 0; i < clonedEvents.length; i++) {\n\t                                view._updateMoveHint(clonedEvents[i], slot.groupIndex, distance);\n\t                            }\n\t                        }\n\t                    })\n\t                    .bind("dragend", function(e) {\n\t                        that.view()._removeMoveHint();\n\t                        var distance = endTime - startTime;\n\t                        var range = moveEventRange(clonedEvent, distance);\n\t                        var start = range.start;\n\t                        var end = range.end;\n\t                        that._dragging = false;\n\n\t                        var endResources = that.view()._resourceBySlot(endSlot);\n\n\t                        var prevented = that.trigger("moveEnd", {\n\t                            event: event,\n\t                            slot: { element: endSlot.element, start: endSlot.startDate(), end: endSlot.endDate() },\n\t                            start: start,\n\t                            end: end,\n\t                            resources: endResources\n\t                        });\n\n\t                        if (!prevented && (event.start.getTime() !== start.getTime() ||\n\t                            event.end.getTime() !== end.getTime() ||\n\t                            originSlot.isDaySlot !== endSlot.isDaySlot ||\n\t                            kendo.stringify(endResources) !== kendo.stringify(startResources))) {\n\n\t                            that._isMultiDrag = clonedEvents.length > 1;\n\n\t                            for (var i = 0; i < clonedEvents.length; i++) {\n\t                                var evt = clonedEvents[i];\n\n\t                                range = moveEventRange(evt, distance);\n\n\t                                var updatedEventOptions = that.view()._eventOptionsForMove(evt);\n\t                                var eventOptions = $.extend(\n\t                                    {\n\t                                        isAllDay: evt.isAllDay,\n\t                                        start: range.start,\n\t                                        end: range.end\n\t                                    },\n\t                                    updatedEventOptions,\n\t                                    endResources\n\t                                );\n\n\t                                that._updateEvent(null, evt, eventOptions);\n\t                            }\n\n\t                            if (that._isMultiDrag) {\n\t                                that.dataSource.sync();\n\t                                that._isMultiDrag = false;\n\t                            }\n\t                        }\n\n\t                        e.currentTarget.removeClass("k-event-active");\n\t                        this.cancelHold();\n\t                        clonedEvents = [];\n\t                        cachedEvents = [];\n\t                    })\n\t                    .bind("dragcancel", function() {\n\t                        that.view()._removeMoveHint();\n\t                        this.cancelHold();\n\t                        clonedEvents = [];\n\t                        cachedEvents = [];\n\t                    });\n\t                }\n\n\t                that._moveDraggable.bind("hold", function(e) {\n\t                    if (that._isTouch(e)) {\n\t                        that.element.find(".k-event-active").removeClass("k-event-active");\n\t                        if (that.options.selectable) {\n\t                            that._createSelection(e.currentTarget);\n\t                        }\n\t                        e.currentTarget.addClass("k-event-active");\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        _resizable: function() {\n\t            var startTime;\n\t            var endTime;\n\t            var event;\n\t            var clonedEvent;\n\t            var slot;\n\t            var that = this;\n\t            var distance = 0;\n\n\t            function direction(handle) {\n\t                var directions = {\n\t                    "k-resize-e": "east",\n\t                    "k-resize-w": "west",\n\t                    "k-resize-n": "north",\n\t                    "k-resize-s": "south"\n\t                };\n\n\t                for (var key in directions) {\n\t                    if (handle.hasClass(key)) {\n\t                        return directions[key];\n\t                    }\n\t                }\n\t            }\n\n\t            if (that._isMobile() && kendo.support.mobileOS.android) {\n\t                distance = 5;\n\t            }\n\n\t            that._resizeDraggable = new kendo.ui.Draggable(that.element, {\n\t                distance: distance,\n\t                filter: ".k-resize-handle",\n\t                autoScroll: true,\n\t                dragstart: function(e) {\n\t                    var dragHandle = $(e.currentTarget);\n\n\t                    var eventElement = dragHandle.closest(".k-event");\n\n\t                    var uid = eventElement.attr(kendo.attr("uid"));\n\n\t                    var view = that.view();\n\n\t                    that._dragging = true;\n\t                    event = that.occurrenceByUid(uid);\n\n\t                    clonedEvent = event.clone();\n\n\t                    view._updateEventForResize(clonedEvent);\n\n\t                    slot = view._slotByPosition(e.x.startLocation, e.y.startLocation);\n\n\t                    if (that.trigger("resizeStart", { event: event })) {\n\t                        e.preventDefault();\n\t                    }\n\n\t                    startTime = kendo.date.toUtcTime(clonedEvent.start);\n\n\t                    endTime = kendo.date.toUtcTime(clonedEvent.end);\n\t                },\n\t                drag: function(e) {\n\t                    if (!slot) {\n\t                        return;\n\t                    }\n\n\t                    var dragHandle = $(e.currentTarget);\n\n\t                    var dir = direction(dragHandle);\n\n\t                    var view = that.view();\n\n\t                    var currentSlot = view._slotByPosition(e.x.location, e.y.location);\n\n\t                    if (!currentSlot || slot.groupIndex != currentSlot.groupIndex) {\n\t                        return;\n\t                    }\n\n\t                    slot = currentSlot;\n\n\t                    var originalStart = startTime;\n\n\t                    var originalEnd = endTime;\n\n\t                    if (dir == "south") {\n\t                        if (!slot.isDaySlot && slot.end - kendo.date.toUtcTime(clonedEvent.start) >= view._timeSlotInterval()) {\n\t                            if (clonedEvent.isAllDay) {\n\t                                endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n\t                            } else {\n\t                                endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);\n\t                            }\n\t                        }\n\t                    } else if (dir == "north") {\n\t                        if (!slot.isDaySlot && kendo.date.toUtcTime(clonedEvent.end) - slot.start >= view._timeSlotInterval()) {\n\t                            startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n\t                        }\n\t                    } else if (dir == "east") {\n\t                        if (slot.isDaySlot && kendo.date.toUtcTime(kendo.date.getDate(slot.endDate())) >= kendo.date.toUtcTime(kendo.date.getDate(clonedEvent.start))) {\n\t                            if (clonedEvent.isAllDay) {\n\t                                endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n\t                            } else {\n\t                                endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);\n\t                            }\n\t                        } else if (!slot.isDaySlot && slot.end - kendo.date.toUtcTime(clonedEvent.start) >= view._timeSlotInterval()) {\n\t                            endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);\n\t                        }\n\t                    } else if (dir == "west") {\n\t                        if (slot.isDaySlot && kendo.date.toUtcTime(kendo.date.getDate(clonedEvent.end)) >= kendo.date.toUtcTime(kendo.date.getDate(slot.startDate()))) {\n\t                            startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n\t                        } else if (!slot.isDaySlot && kendo.date.toUtcTime(clonedEvent.end) - slot.start >= view._timeSlotInterval()) {\n\t                            startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n\t                        }\n\t                    }\n\n\t                    if (!that.trigger("resize", {\n\t                        event: event,\n\t                        slot: { element: slot.element, start: slot.startDate(), end: slot.endDate() },\n\t                        start: kendo.timezone.toLocalDate(startTime),\n\t                        end: kendo.timezone.toLocalDate(endTime),\n\t                        resources: view._resourceBySlot(slot)\n\t                    })) {\n\t                        view._updateResizeHint(clonedEvent, slot.groupIndex, startTime, endTime);\n\t                    } else {\n\t                        startTime = originalStart;\n\t                        endTime = originalEnd;\n\t                    }\n\t                },\n\t                dragend: function(e) {\n\t                    var dragHandle = $(e.currentTarget);\n\t                    var start = new Date(clonedEvent.start.getTime());\n\t                    var end = new Date(clonedEvent.end.getTime());\n\t                    var dir = direction(dragHandle);\n\n\t                    that._dragging = false;\n\t                    that.view()._removeResizeHint();\n\n\t                    if (dir == "south") {\n\t                        end = kendo.timezone.toLocalDate(endTime);\n\t                    } else if (dir == "north") {\n\t                        start = kendo.timezone.toLocalDate(startTime);\n\t                    } else if (dir == "east") {\n\t                        if (slot.isDaySlot) {\n\t                            end = kendo.date.getDate(kendo.timezone.toLocalDate(endTime));\n\t                        } else {\n\t                            end = kendo.timezone.toLocalDate(endTime);\n\t                        }\n\t                    } else if (dir == "west") {\n\t                        if (slot.isDaySlot) {\n\t                            start = new Date(kendo.timezone.toLocalDate(startTime));\n\t                            start.setHours(0);\n\t                            start.setMinutes(0);\n\t                        } else {\n\t                            start = kendo.timezone.toLocalDate(startTime);\n\t                        }\n\t                    }\n\n\t                    var prevented = that.trigger("resizeEnd", {\n\t                        event: event,\n\t                        slot: { element: slot.element, start: slot.startDate(), end: slot.endDate() },\n\t                        start: start,\n\t                        end: end,\n\t                        resources: that.view()._resourceBySlot(slot)\n\t                    });\n\n\t                    if (!prevented && end.getTime() >= start.getTime()) {\n\t                        if (clonedEvent.start.getTime() != start.getTime() || clonedEvent.end.getTime() != end.getTime()) {\n\t                            that.view()._updateEventForResize(event);\n\t                            that._updateEvent(dir, event, { start: start, end: end });\n\t                        }\n\t                    }\n\n\t                    slot = null;\n\t                    event = null;\n\t                },\n\t                dragcancel: function() {\n\t                    that._dragging = false;\n\t                    that.view()._removeResizeHint();\n\n\t                    slot = null;\n\t                    event = null;\n\t                }\n\t            });\n\t        },\n\n\t        _updateEvent: function(dir, event, eventInfo) {\n\t            var that = this;\n\n\t            var updateEvent = function(event, callback) {\n\t                try {\n\t                    that._preventRefresh = true;\n\t                    event.update(eventInfo);\n\t                    that._convertDates(event);\n\t                } finally {\n\t                    that._preventRefresh = false;\n\t                }\n\n\t                if (!that.trigger(SAVE, { event: event })) {\n\t                    if (callback) {\n\t                        callback();\n\t                    }\n\n\t                    if (!that._isMultiDrag) {\n\t                        that.dataSource.sync();\n\t                    }\n\t                }\n\t            };\n\n\t            var recurrenceHead = function(event) {\n\t                if (event.recurrenceRule) {\n\t                    return that.dataSource.getByUid(event.uid);\n\t                } else {\n\t                    return that.dataSource.get(event.recurrenceId);\n\t                }\n\t            };\n\n\t            var updateSeries = function() {\n\t                var head = recurrenceHead(event);\n\n\t                if (dir == "south" || dir == "north") {\n\t                    if (eventInfo.start) {\n\t                        var start = kendo.date.getDate(head.start);\n\t                        kendo.date.setTime(start, getMilliseconds(eventInfo.start));\n\t                        eventInfo.start = start;\n\t                    }\n\t                    if (eventInfo.end) {\n\t                        var end = kendo.date.getDate(head.end);\n\t                        kendo.date.setTime(end, getMilliseconds(eventInfo.end));\n\t                        eventInfo.end = end;\n\t                    }\n\t                }\n\n\t                that.dataSource._removeExceptions(head);\n\n\t                updateEvent(head);\n\t            };\n\n\t            var updateOccurrence = function() {\n\t                var head = recurrenceHead(event);\n\t                var eventUid;\n\n\t                var callback = function() {\n\t                    that._convertDates(head);\n\n\t                    if (that._selection) {\n\t                        that._selection.events.push(eventUid);\n\t                    }\n\t                };\n\n\t                var exception = head.toOccurrence({ start: event.start, end: event.end });\n\n\t                eventUid = exception.uid;\n\n\t                updateEvent(that.dataSource.add(exception), callback);\n\t            };\n\n\t            if (event.recurrenceRule || event.isOccurrence()) {\n\t                var recurrenceMessages = that.options.messages.recurrenceMessages;\n\n\t                that._showRecurringDialog(event, updateOccurrence, updateSeries,{\n\t                    title: recurrenceMessages.editWindowTitle,\n\t                    text: recurrenceMessages.editRecurring ? recurrenceMessages.editRecurring : EDITRECURRING,\n\t                    occurrenceText: recurrenceMessages.editWindowOccurrence,\n\t                    seriesText: recurrenceMessages.editWindowSeries\n\t                });\n\t            } else {\n\t                updateEvent(that.dataSource.getByUid(event.uid));\n\t            }\n\t        },\n\n\t        _modelForContainer: function(container) {\n\t            container = $(container).closest("[" + kendo.attr("uid") + "]");\n\n\t            return this.dataSource.getByUid(container.attr(kendo.attr("uid")));\n\t        },\n\n\t        showDialog: function(options) {\n\t            this._editor.showDialog(options);\n\t        },\n\n\t        focus: function() {\n\t            this.wrapper.focus();\n\t        },\n\n\t        _confirmation: function(callback, model, isResetSeries) {\n\t            var editable = this.options.editable;\n\n\t            if (editable === true || editable.confirmation !== false) {\n\t                var messages = this.options.messages;\n\t                var title = messages.deleteWindowTitle;\n\t                var text = typeof editable.confirmation === STRING ? editable.confirmation : messages.editable.confirmation;\n\n\t                if (this._isEditorOpened() && model.isRecurring()) {\n\t                    var recurrenceMessages = this.options.messages.recurrenceMessages;\n\t                    title = recurrenceMessages.deleteWindowTitle;\n\n\t                    if (model.isException() || model.isNew()) {\n\t                        text = recurrenceMessages.deleteRecurringConfirmation ? recurrenceMessages.deleteRecurringConfirmation : DELETERECURRINGCONFIRM;\n\t                    } else {\n\t                        text = recurrenceMessages.deleteSeriesConfirmation ? recurrenceMessages.deleteSeriesConfirmation : DELETESERIESCONFIRM;\n\t                    }\n\n\t                    if(isResetSeries) {\n\t                        title = recurrenceMessages.resetSeriesWindowTitle;\n\t                        text = recurrenceMessages.resetSeriesConfirmation ? recurrenceMessages.resetSeriesConfirmation : RESETSERIESCONFIRM;\n\t                    }\n\t                }\n\n\t                var buttons = [\n\t                    { name: "destroy", text: isResetSeries ? messages.resetSeries : messages.destroy, click: function() { callback(); } }\n\t                ];\n\n\t                if (!(this._isMobile() && kendo.Pane)) {\n\t                    buttons.push({ name: "canceledit", text: messages.cancel, click: function() { callback(true); } });\n\t                }\n\n\t                this._unbindResize();\n\n\t                this.showDialog({\n\t                    model: model,\n\t                    text: text,\n\t                    title: title,\n\t                    buttons: buttons\n\t                });\n\n\t                this._bindResize();\n\t            } else {\n\t                callback();\n\t            }\n\t        },\n\n\t        addEvent: function(eventInfo) {\n\t            var editable = this._editor.editable;\n\t            var dataSource = this.dataSource;\n\t            var event;\n\n\t            eventInfo = eventInfo || {};\n\n\t            var prevented = this.trigger("add", { event:  eventInfo });\n\n\t            if (!prevented && ((editable && editable.end()) || !editable)) {\n\t                this.cancelEvent();\n\n\t                if (eventInfo && eventInfo.toJSON) {\n\t                    eventInfo = eventInfo.toJSON();\n\t                }\n\n\t                event = dataSource.add(eventInfo);\n\n\t                if (event) {\n\t                    this.cancelEvent();\n\t                    this._editEvent(event);\n\t                }\n\t            }\n\t       },\n\n\t       saveEvent: function() {\n\t            var that = this;\n\t            var editor = that._editor;\n\t            var dataSource = that.dataSource;\n\n\t            if (!editor) {\n\t                return;\n\t            }\n\n\t            var editable = editor.editable;\n\t            var container = editor.container;\n\t            var model = that._modelForContainer(container);\n\t            var events, i, event;\n\n\t            if (container && editable && editable.end() &&\n\t                !that.trigger(SAVE, { container: container, event: model } )) {\n\n\t                if(!model.isOccurrence() && !!model.recurrenceException && !model.recurrenceRule) {\n\t                    events = dataSource.data();\n\n\t                    for(i = events.length - 1; i >= 0; i -= 1) {\n\t                        event = events[i];\n\t                        if(event && event.recurrenceId === model.id) {\n\t                            dataSource.remove(event);\n\t                        }\n\t                    }\n\n\t                    model.set("recurrenceException", "");\n\t                }\n\n\t                if (!model.dirty && !model.isOccurrence()) {\n\t                    that._convertDates(model, "remove");\n\t                }\n\n\t                dataSource.sync();\n\t            }\n\t        },\n\n\t        cancelEvent: function() {\n\t            var editor = this._editor;\n\t            var container = editor.container;\n\t            var model;\n\n\t            if (container) {\n\t                model = this._modelForContainer(container);\n\n\t                if (model && model.isOccurrence()) {\n\t                    this._convertDates(model, "remove");\n\t                    this._convertDates(this.dataSource.get(model.recurrenceId), "remove");\n\t                }\n\n\t                this.dataSource.cancelChanges(model);\n\n\t                //TODO: handle the cancel in UI\n\n\t                editor.close();\n\t            }\n\t        },\n\n\t        editEvent: function(uid) {\n\t            var model = typeof uid == "string" ? this.occurrenceByUid(uid) : uid;\n\n\t            if (!model) {\n\t                return;\n\t            }\n\n\t            this.cancelEvent();\n\n\t            if (model.isRecurring()) {\n\t                this._editRecurringDialog(model);\n\t            } else {\n\t                this._editEvent(model);\n\t            }\n\t        },\n\n\t        _editEvent: function(model) {\n\t            this._preventRefresh = true;\n\t            this._unbindResize();\n\n\t            this._createPopupEditor(model);\n\n\t            this._bindResize();\n\t        },\n\n\t        _editRecurringDialog: function(model) {\n\t            var that = this;\n\n\t            var editOccurrence = function() {\n\t                if (model.isException()) {\n\t                    that._editEvent(model);\n\t                } else {\n\t                    that.addEvent(model);\n\t                }\n\t            };\n\n\t            var editSeries = function() {\n\t                if (model.recurrenceId) {\n\t                    model = that.dataSource.get(model.recurrenceId);\n\t                }\n\n\t                that._editEvent(model);\n\t            };\n\n\t            var recurrenceMessages = that.options.messages.recurrenceMessages;\n\t            that._showRecurringDialog(model, editOccurrence, editSeries, {\n\t                title: recurrenceMessages.editWindowTitle,\n\t                text: recurrenceMessages.editRecurring ? recurrenceMessages.editRecurring : EDITRECURRING,\n\t                occurrenceText: recurrenceMessages.editWindowOccurrence,\n\t                seriesText: recurrenceMessages.editWindowSeries\n\t            });\n\t         },\n\n\t         _showRecurringDialog: function(model, editOccurrence, editSeries, messages) {\n\t             var editable = this.options.editable;\n\t             var editRecurringMode = isPlainObject(editable) ? editable.editRecurringMode : "dialog";\n\n\t             if (editRecurringMode ===  "occurrence" || this._isMultiDrag) {\n\t                 editOccurrence();\n\t             } else if (editRecurringMode === "series") {\n\t                 editSeries();\n\t             } else {\n\t                 this._unbindResize();\n\n\t                 this.showDialog({\n\t                     model: model,\n\t                     title: messages.title,\n\t                     text: messages.text,\n\t                     buttons: [\n\t                         { text: messages.occurrenceText, click: editOccurrence },\n\t                         { text: messages.seriesText, click: editSeries }\n\t                     ]\n\t                 });\n\n\t                 this._bindResize();\n\t             }\n\t        },\n\n\t        _createButton: function(command) {\n\t            var template = command.template || COMMANDBUTTONTMPL,\n\t                commandName = typeof command === STRING ? command : command.name || command.text,\n\t                options = { className: "k-scheduler-" + (commandName || "").replace(/\\s/g, ""), text: commandName, attr: "" };\n\n\t            if (!commandName && !(isPlainObject(command) && command.template))  {\n\t                throw new Error("Custom commands should have name specified");\n\t            }\n\n\t            if (isPlainObject(command)) {\n\t                if (command.className) {\n\t                    command.className += " " + options.className;\n\t                }\n\n\t                if (commandName === "edit" && isPlainObject(command.text)) {\n\t                    command = extend(true, {}, command);\n\t                    command.text = command.text.edit;\n\t                }\n\n\t                options = extend(true, options, defaultCommands[commandName], command);\n\t            } else {\n\t                options = extend(true, options, defaultCommands[commandName]);\n\t            }\n\n\t            return kendo.template(template)(options);\n\t        },\n\n\t        _convertDates: function(model, method) {\n\t            var timezone = this.dataSource.reader.timezone;\n\t            var startTimezone = model.startTimezone;\n\t            var endTimezone = model.endTimezone;\n\t            var start = model.start;\n\t            var end = model.start;\n\n\t            method = method || "apply";\n\t            startTimezone = startTimezone || endTimezone;\n\t            endTimezone = endTimezone || startTimezone;\n\n\t            if (startTimezone) {\n\t                if (timezone) {\n\t                    if (method === "apply") {\n\t                        start = kendo.timezone.convert(model.start, timezone, startTimezone);\n\t                        end = kendo.timezone.convert(model.end, timezone, endTimezone);\n\t                    } else {\n\t                        start = kendo.timezone.convert(model.start, startTimezone, timezone);\n\t                        end = kendo.timezone.convert(model.end, endTimezone, timezone);\n\t                    }\n\t                } else {\n\t                    start = kendo.timezone[method](model.start, startTimezone);\n\t                    end = kendo.timezone[method](model.end, endTimezone);\n\t                }\n\n\t                model._set("start", start);\n\t                model._set("end", end);\n\t            }\n\t        },\n\n\t        _createEditor: function() {\n\t            var that = this;\n\n\t            var editor;\n\n\t            if (this._isMobile() && kendo.Pane) {\n\t                editor = that._editor = new MobileEditor(this.wrapper, extend({}, this.options, {\n\t                    target: this,\n\t                    timezone: that.dataSource.reader.timezone,\n\t                    resources: that.resources,\n\t                    createButton: proxy(this._createButton, this)\n\t                }));\n\t            } else {\n\t                editor = that._editor = new PopupEditor(this.wrapper, extend({}, this.options, {\n\t                    target: this,\n\t                    createButton: proxy(this._createButton, this),\n\t                    timezone: that.dataSource.reader.timezone,\n\t                    resources: that.resources\n\t                }));\n\t            }\n\n\t            editor.bind("cancel", function(e) {\n\t                if (that.trigger("cancel", { container: e.container, event: e.model })) {\n\t                    e.preventDefault();\n\t                    return;\n\t                }\n\t                that._preventRefresh = false;\n\t                that.cancelEvent();\n\n\t                if(that._attemptRefresh) {\n\t                    that.refresh();\n\t                }\n\n\t                that.focus();\n\t            });\n\n\t            editor.bind("edit", function(e) {\n\t                if (that.trigger(EDIT, { container: e.container, event: e.model })) {\n\t                    e.preventDefault();\n\t                }\n\t            });\n\n\t            editor.bind("save", function() {\n\t                that._preventRefresh = false;\n\t                that.saveEvent();\n\t            });\n\n\t            editor.bind("remove", function(e) {\n\t                that._preventRefresh = false;\n\t                that.removeEvent(e.model);\n\t            });\n\n\t            editor.bind("resetSeries", function(e) {\n\t                that._confirmation(function(cancel) {\n\t                    that._preventRefresh = false;\n\t                    if (!cancel) {\n\t                        that.dataSource._removeExceptions(e.model);\n\t                        that.saveEvent();\n\t                    }\n\t                }, e.model, true);\n\t            });\n\t        },\n\n\t        _createPopupEditor: function(model) {\n\t            var editor = this._editor;\n\n\t            if (!model.isNew() || model.isOccurrence()) {\n\t                if (model.isOccurrence()) {\n\t                    this._convertDates(model.recurrenceId ? this.dataSource.get(model.recurrenceId) : model);\n\t                }\n\t                this._convertDates(model);\n\t            }\n\n\t            this.editable = editor.editEvent(model);\n\t        },\n\n\t        removeEvent: function(uid) {\n\t            var that = this,\n\t                model = typeof uid == "string" ? that.occurrenceByUid(uid) : uid;\n\n\t            if (!model) {\n\t                return;\n\t            }\n\n\t            if (model.isRecurring()) {\n\t                that._deleteRecurringDialog(model);\n\t            } else {\n\t                that._confirmation(function(cancel) {\n\t                    if (!cancel) {\n\t                        that._removeEvent(model);\n\t                    }\n\t                }, model);\n\t            }\n\t        },\n\n\t        occurrenceByUid: function(uid) {\n\t            var occurrence = this.dataSource.getByUid(uid);\n\t            if (!occurrence) {\n\t                occurrence = getOccurrenceByUid(this._data, uid);\n\t            }\n\n\t            return occurrence;\n\t        },\n\n\t        occurrencesInRange: function(start, end) {\n\t            return new kendo.data.Query(this._data).filter({\n\t                logic: "or",\n\t                filters: [\n\t                    {\n\t                        logic: "and",\n\t                        filters: [\n\t                            { field: "start", operator: "gte", value: start },\n\t                            { field: "end", operator: "gte", value: start },\n\t                            { field: "start", operator: "lt", value: end }\n\t                        ]\n\t                    },\n\t                    {\n\t                        logic: "and",\n\t                        filters: [\n\t                            { field: "start", operator: "lte", value: start },\n\t                            { field: "end", operator: "gt", value: start }\n\t                        ]\n\t                    }\n\t                ]\n\t            }).toArray();\n\t        },\n\n\t        _removeEvent: function(model) {\n\t            if (!this.trigger(REMOVE, { event: model })) {\n\t                if (this.dataSource.remove(model)) {\n\t                    this.dataSource.sync();\n\t                }\n\t            }\n\t        },\n\n\t        _deleteRecurringDialog: function(model) {\n\t            var that = this;\n\t            var currentModel = model;\n\t            var editable = that.options.editable;\n\t            var deleteOccurrence;\n\t            var deleteSeries;\n\t            var createException;\n\t            var deleteOccurrenceConfirmation;\n\t            var deleteSeriesConfirmation;\n\t            var createExceptionConfirmation;\n\t            var editRecurringMode = isPlainObject(editable) ? editable.editRecurringMode : "dialog";\n\n\t            deleteOccurrence = function() {\n\t                var occurrence = currentModel.recurrenceId ? currentModel : currentModel.toOccurrence();\n\t                var head = that.dataSource.get(occurrence.recurrenceId);\n\n\t                that._convertDates(head);\n\t                that._removeEvent(occurrence);\n\t            };\n\n\t            deleteSeries = function() {\n\t                if (currentModel.recurrenceId) {\n\t                    currentModel = that.dataSource.get(currentModel.recurrenceId);\n\t                }\n\n\t                that._removeEvent(currentModel);\n\t            };\n\n\t            createException = function() {\n\t                that.dataSource.remove(currentModel);\n\t                that.dataSource.sync();\n\t            };\n\n\t            if (editRecurringMode != "dialog" || that._isEditorOpened()) {\n\t                deleteOccurrenceConfirmation = function() {\n\t                    that._confirmation(function(cancel) {\n\t                        if (!cancel) {\n\t                            deleteOccurrence();\n\t                        }\n\t                    }, currentModel);\n\t                };\n\n\t                deleteSeriesConfirmation = function() {\n\t                    that._confirmation(function(cancel) {\n\t                        if (!cancel) {\n\t                            deleteSeries();\n\t                        }\n\t                    }, currentModel);\n\t                };\n\n\t                createExceptionConfirmation = function() {\n\t                    that._confirmation(function(cancel) {\n\t                        if (!cancel) {\n\t                            createException();\n\t                        }\n\t                    }, currentModel);\n\t                };\n\t            }\n\n\t            var seriesCallback = deleteSeriesConfirmation || deleteSeries;\n\t            var occurrenceCallback = deleteOccurrenceConfirmation || deleteOccurrence;\n\t            var exeptionCallback = createExceptionConfirmation || createException;\n\n\t            if (that._isEditorOpened()) {\n\t                if (model.isException()) {\n\t                    occurrenceCallback();\n\t                } else if (model.isNew()) {\n\t                    exeptionCallback();\n\t                } else {\n\t                    seriesCallback();\n\t                }\n\t            } else {\n\t                var recurrenceMessages = that.options.messages.recurrenceMessages;\n\t                that._showRecurringDialog(model, occurrenceCallback, seriesCallback, {\n\t                    title: recurrenceMessages.deleteWindowTitle,\n\t                    text: recurrenceMessages.deleteRecurring ? recurrenceMessages.deleteRecurring : DELETERECURRING,\n\t                    occurrenceText: recurrenceMessages.deleteWindowOccurrence,\n\t                    seriesText: recurrenceMessages.deleteWindowSeries\n\t                });\n\t            }\n\t        },\n\n\t        _isEditorOpened: function() {\n\t            return !!this._editor.container;\n\t        },\n\n\t        _unbindView: function(view) {\n\t            var that = this;\n\t            that.angular("cleanup", function(){\n\t                return { elements: that.items() };\n\t            });\n\n\t            view.destroy();\n\t        },\n\n\t        _bindView: function(view) {\n\t            var that = this;\n\n\t            if (that.options.editable) {\n\t                if (that._viewRemoveHandler) {\n\t                    view.unbind(REMOVE, that._viewRemoveHandler);\n\t                }\n\n\t                that._viewRemoveHandler = function(e) {\n\t                    that.removeEvent(e.uid);\n\t                };\n\n\t                view.bind(REMOVE, that._viewRemoveHandler);\n\n\t                if (that._viewAddHandler) {\n\t                    view.unbind(ADD, that._viewAddHandler);\n\t                }\n\n\t                that._viewAddHandler = function(e) {\n\t                    that.addEvent(e.eventInfo);\n\t                };\n\n\t                view.bind(ADD, this._viewAddHandler);\n\n\t                if (that._viewEditHandler) {\n\t                    view.unbind(EDIT, that._viewEditHandler);\n\t                }\n\n\t                that._viewEditHandler = function(e) {\n\t                    that.editEvent(e.uid);\n\t                };\n\n\t                view.bind(EDIT, this._viewEditHandler);\n\t            }\n\n\t            if (that._viewNavigateHandler) {\n\t                view.unbind("navigate", that._viewNavigateHandler);\n\t            }\n\n\t            that._viewNavigateHandler = function(e) {\n\t                if (e.view) {\n\t                    var switchWorkDay = "isWorkDay" in e;\n\t                    var action = switchWorkDay ? "changeWorkDay" : "changeView";\n\n\t                    if (!that.trigger("navigate", { view: e.view, isWorkDay: e.isWorkDay, action: action, date: e.date })) {\n\t                        if (switchWorkDay) {\n\t                            that._workDayMode = e.isWorkDay;\n\t                        }\n\n\t                        that._selectView(e.view);\n\t                        that.date(e.date);\n\t                    }\n\t                }\n\t            };\n\n\t            view.bind("navigate", that._viewNavigateHandler);\n\n\t            if (that._viewActivateHandler) {\n\t                view.unbind("activate", that._viewActivateHandler);\n\t            }\n\n\t            that._viewActivateHandler = function() {\n\t                var view = this;\n\t                if (that._selection) {\n\t                    view.constrainSelection(that._selection);\n\n\t                    that._select();\n\n\t                    that._adjustSelectedDate();\n\t                }\n\t            };\n\n\t            view.bind("activate", that._viewActivateHandler);\n\t        },\n\n\t        _selectView: function(name) {\n\t            var that = this;\n\n\t            if (name && that.views[name]) {\n\n\t                if (that._selectedView) {\n\t                    that._unbindView(that._selectedView);\n\t                }\n\n\t                that._selectedView = that._renderView(name);\n\t                that._selectedViewName = name;\n\n\t                if (that._viewsCount > 1 && !that._isMobile()) {\n\t                    var viewsDropdown = that.toolbar.find(".k-views-dropdown");\n\t                    var viewButtons = that.toolbar.find(".k-scheduler-views > .k-button");\n\n\t                    if ( that.toolbar.find(".k-views-dropdown").length === 0 ) {\n\t                        that.toolbar.find(".k-scheduler-views-wrapper").prepend(VIEWS_DROPDOWN_TEMPLATE({views: that.views, view: name, ns: kendo.ns}));\n\t                        viewsDropdown = that.toolbar.find(".k-views-dropdown");\n\t                    }\n\n\t                    viewsDropdown.val(name);\n\n\t                    viewButtons.removeClass("k-state-selected");\n\t                    viewButtons.filter(".k-view-" + name.replace(/\\./g, "\\\\.").toLowerCase()).addClass("k-state-selected");\n\t                } else {\n\t                    var viewSelect =  that.toolbar.find(".k-scheduler-mobile-views");\n\n\t                    viewSelect.find("[value=" + name.replace(/\\./g, "\\\\.") + "]")\n\t                        .prop("selected", "selected");\n\t                }\n\t            }\n\t        },\n\n\t        view: function(name) {\n\t            var that = this;\n\n\t            if (name) {\n\t                that._selectView(name);\n\t                that.rebind();\n\n\t                return;\n\t            }\n\n\t            return that._selectedView;\n\t        },\n\n\t        viewName: function() {\n\t            return this.view().name;\n\t        },\n\n\t        _renderView: function(name) {\n\t            var view = this._initializeView(name);\n\n\t            this._bindView(view);\n\n\t            if (kendo.support.mouseAndTouchPresent || kendo.support.pointers) {\n\t                view.content.css("-ms-touch-action", "pinch-zoom");\n\t                view.content.css("touch-action", "pinch-zoom");\n\t            }\n\n\t            this._model.set("formattedDate", view.dateForTitle());\n\t            this._model.set("formattedShortDate", view.shortDateForTitle());\n\t            this._model.set("formattedMobileDate", view.mobileDateForTitle ? view.mobileDateForTitle() : view.shortDateForTitle());\n\t            this._model.set("formattedYear", kendo.format("{0:yyyy}", view.startDate()));\n\n\t            return view;\n\t        },\n\n\t        resize: function(force) {\n\t            var size = this.getSize();\n\t            var currentSize = this._size;\n\t            var view = this.view();\n\n\t            if (!view || !view.groups) {\n\t                return;\n\t            }\n\n\t            if (force || !currentSize || size.width !== currentSize.width || size.height !== currentSize.height) {\n\t                this.refresh({ action: "resize" });\n\t                this._size = size;\n\t            }\n\t        },\n\n\t        _adjustSelectedDate: function() {\n\t            var date = this._model.selectedDate,\n\t                selection = this._selection,\n\t                start = selection.start;\n\n\t            if (start && !kendo.date.isInDateRange(date, getDate(start), getDate(selection.end))) {\n\t                date.setFullYear(start.getFullYear(), start.getMonth(), start.getDate());\n\t            }\n\t        },\n\n\t        _initializeView: function(name) {\n\t            var view = this.views[name];\n\n\t            if (view) {\n\t                var isSettings = isPlainObject(view),\n\t                    overrideOptions = {},\n\t                    type = view.type;\n\n\t                if (typeof type === STRING) {\n\t                    type = kendo.getter(view.type)(window);\n\t                }\n\n\t                if(isSettings && view.workDays && view.workDays.length) {\n\t                    overrideOptions.workDays = view.workDays;\n\t                }\n\n\t                if (type) {\n\t                    view = new type(this.wrapper, trimOptions(extend(true, {}, this.options, isSettings ? view : {}, {\n\t                        resources: this.resources,\n\t                        date: this.date(),\n\t                        startTime: kendo.parseDate(view.startTime) || kendo.parseDate(this.options.startTime),\n\t                        endTime: kendo.parseDate(view.endTime) || kendo.parseDate(this.options.endTime),\n\t                        showWorkHours: this._workDayMode\n\t                    }),overrideOptions));\n\n\t                } else {\n\t                    throw new Error("There is no such view");\n\t                }\n\t            }\n\n\t            return view;\n\t        },\n\n\t        _views: function() {\n\t            var views = this.options.views;\n\t            var view;\n\t            var defaultView;\n\t            var selected;\n\t            var isSettings;\n\t            var name;\n\t            var type;\n\t            var idx;\n\t            var length;\n\n\t            this.views = {};\n\t            this._viewsCount = 0;\n\n\t            for (idx = 0, length = views.length; idx < length; idx++) {\n\t                var hasType = false;\n\n\t                view = views[idx];\n\n\t                isSettings = isPlainObject(view);\n\n\t                if (isSettings) {\n\t                    type = name = view.type ? view.type : view;\n\t                    if (typeof type !== STRING) {\n\t                        name = view.name || view.title;\n\t                        hasType = true;\n\t                    }\n\t                } else {\n\t                    type = name = view;\n\t                }\n\n\t                defaultView = defaultViews[name];\n\n\t                if (defaultView && !hasType) {\n\n\t                    view.type = defaultView.type;\n\t                    defaultView.title = this.options.messages.views[name];\n\t                    if (defaultView.type === "day") {\n\t                        defaultView.messages = { allDay: this.options.messages.allDay };\n\t                    } else if (defaultView.type === "agenda") {\n\t                        defaultView.messages = {\n\t                            event: this.options.messages.event,\n\t                            date: this.options.messages.date,\n\t                            time: this.options.messages.time\n\t                        };\n\t                    }\n\t                }\n\n\t                view = extend({ title: name }, defaultView, isSettings ? view : {});\n\n\t                if (name) {\n\t                    this.views[name] = view;\n\t                    this._viewsCount++;\n\n\t                    if (!selected || view.selected) {\n\t                        selected = name;\n\t                    }\n\t                }\n\t            }\n\n\t            if (selected) {\n\t                this._selectedViewName = selected; // toolbar is not rendered yet\n\t            }\n\t        },\n\n\t        rebind: function() {\n\t            var that = this,\n\t                resources = that.resources,\n\t                resourceFetchArray = [];\n\n\t            if(that._preventRebind) {\n\t                that._preventRebind = false;\n\t                return;\n\t            }\n\n\t            if(that.options.autoBind === false && resources && resources.length > 0) {\n\t                resources.forEach(function(resource) {\n\t                    if(resource.dataSource.data().length === 0) {\n\t                        that._preventRebind = true;\n\t                        resourceFetchArray.push(resource.dataSource.fetch());\n\t                    }\n\t                });\n\n\t                $.when.apply(null, resourceFetchArray).then(function() {\n\t                    that.dataSource.fetch();\n\t                    that._preventRebind = false;\n\t                });\n\t            } else {\n\t                that.dataSource.fetch();\n\t            }\n\t        },\n\n\t        _dataSource: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                dataSource = options.dataSource;\n\n\t            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n\t            if (options.timezone && !(dataSource instanceof SchedulerDataSource)) {\n\t                dataSource = extend(true, dataSource, { schema: { timezone: options.timezone } });\n\t            } else if(dataSource instanceof SchedulerDataSource) {\n\t                options.timezone = dataSource.options.schema ? dataSource.options.schema.timezone : "";\n\t            }\n\n\t            if (that.dataSource && that._refreshHandler) {\n\t                that.dataSource\n\t                    .unbind(CHANGE, that._refreshHandler)\n\t                    .unbind(PROGRESS, that._progressHandler)\n\t                    .unbind(ERROR, that._errorHandler);\n\t            } else {\n\t                that._refreshHandler = proxy(that.refresh, that);\n\t                that._progressHandler = proxy(that._requestStart, that);\n\t                that._errorHandler = proxy(that._error, that);\n\t            }\n\n\t            that.dataSource = kendo.data.SchedulerDataSource.create(dataSource)\n\t                .bind(CHANGE, that._refreshHandler)\n\t                .bind(PROGRESS, that._progressHandler)\n\t                .bind(ERROR, that._errorHandler);\n\n\t            that.options.dataSource = that.dataSource;\n\t        },\n\n\n\t        _error: function() {\n\t            this._progress(false);\n\t        },\n\n\t        _requestStart: function() {\n\t            this._progress(true);\n\t        },\n\n\t        _progress: function(toggle) {\n\t            var element = this.element.find(".k-scheduler-content");\n\t            kendo.ui.progress(element, toggle);\n\t        },\n\n\t        _resources: function() {\n\t            var that = this;\n\t            var resources = that.options.resources;\n\t            var resourcePromises = [];\n\n\t            for (var idx = 0; idx < resources.length; idx++) {\n\t                var resource = resources[idx];\n\t                var field = resource.field;\n\t                var name = resource.name || field;\n\t                var dataSource = resource.dataSource;\n\n\t                if (!field || !dataSource) {\n\t                    throw new Error(\'The "field" and "dataSource" options of the scheduler resource are mandatory.\');\n\t                }\n\n\t                that.resources.push({\n\t                    field: field,\n\t                    name: name,\n\t                    title: resource.title || field,\n\t                    dataTextField: resource.dataTextField || "text",\n\t                    dataValueField: resource.dataValueField || "value",\n\t                    dataColorField: resource.dataColorField || "color",\n\t                    valuePrimitive: resource.valuePrimitive != null ? resource.valuePrimitive : true,\n\t                    multiple: resource.multiple || false,\n\t                    dataSource: that._resourceDataSource(dataSource, name, resourcePromises)\n\t                });\n\t            }\n\n\t            if (!that.options.autoBind) {\n\t                that._selectView(that._selectedViewName);\n\t            } else {\n\t                $.when.apply(null, resourcePromises)\n\t                      .then(function () {\n\t                            that.view(that._selectedViewName);\n\t                        });\n\t            }\n\t        },\n\n\t        _resourceDataSource: function(resourceDS, groupName, promises) {\n\t            var that = this;\n\t            var dataSource = isArray(resourceDS) ? { data: resourceDS } : resourceDS;\n\t            var dataSourceInstance = kendo.data.DataSource.create(dataSource);\n\n\t            if (that.options.autoBind) {\n\t                promises.push(dataSourceInstance.fetch(function(){\n\t                    // \'this\' is the DataSource instance not the Scheduler\n\t                    that._bindResourceEvents(this, groupName);\n\t                }));\n\t            } else {\n\t                that._bindResourceEvents(dataSourceInstance, groupName);\n\t            }\n\n\t            return dataSourceInstance;\n\t        },\n\n\t        _bindResourceEvents: function(resourceDS, groupName){\n\t            var that = this;\n\t            var isGrouped = that.options.group && that.options.group.resources.length;\n\t            var isResourceGrouped = isGrouped && that.options.group.resources.indexOf(groupName) > -1;\n\n\t            if (!that._resourceRefreshHandler && isResourceGrouped){\n\t                that._resourceRefreshHandler = proxy(that._refreshResource, that);\n\t                that._resourceErrorHandler = proxy(that._error, that);\n\t            }\n\n\t            if(isResourceGrouped) {\n\t                resourceDS.bind(CHANGE, that._resourceRefreshHandler)\n\t                    .bind(ERROR, that._resourceErrorHandler);\n\t            }\n\t        },\n\n\t        _refreshResource: function() {\n\t            var that = this;\n\t            var preventRefresh = (that._editor && that._editor.editable) || that._preventRefresh;\n\n\t            if(!preventRefresh){\n\t                that.view(that._selectedViewName);\n\t            }\n\t        },\n\n\t        _initModel: function() {\n\t            var that = this;\n\t            that._model = kendo.observable({\n\t               selectedDate: new Date(this.options.date),\n\t               formattedDate: "",\n\t               formattedShortDate: ""\n\t           });\n\n\t           that._model.bind("change", function(e) {\n\t                if (e.field === "selectedDate") {\n\t                    that.view(that._selectedViewName);\n\t                }\n\t           });\n\t        },\n\n\t        _wrapper: function() {\n\t            var that = this;\n\t            var options = that.options;\n\t            var height = options.height;\n\t            var width = options.width;\n\n\t            that.wrapper = that.element\n\t                               .addClass("k-widget k-scheduler k-floatwrap")\n\t                               .attr("role", "grid")\n\t                               .attr("aria-multiselectable", true);\n\n\t            if (that._isMobile()) {\n\t               that.wrapper.addClass("k-scheduler-mobile");\n\t            }\n\n\t            if (height) {\n\t                that.wrapper.height(height);\n\t            }\n\n\t            if (width) {\n\t                that.wrapper.width(width);\n\t            }\n\t        },\n\n\t        date: function(value) {\n\t            if (value != null && getDate(value) >= getDate(this.options.min) && getDate(value) <= getDate(this.options.max)) {\n\t                this._model.set("selectedDate", value);\n\t            }\n\t            return getDate(this._model.get("selectedDate"));\n\t        },\n\n\t        _toolbar: function() {\n\t            var that = this;\n\t            var options = that.options;\n\t            var commands = [];\n\n\t            if (options.toolbar) {\n\t                commands = $.isArray(options.toolbar) ? options.toolbar : [options.toolbar];\n\t            }\n\n\t            var template = this._isMobile() ? MOBILETOOLBARTEMPLATE : TOOLBARTEMPLATE;\n\n\t            var toolbar = $(template({\n\t                    messages: options.messages,\n\t                    pdf: $.grep(commands, function(item) {\n\t                            return item == "pdf" || item.name == "pdf";\n\t                        }).length > 0,\n\t                    search: $.grep(commands, function(item) {\n\t                        return item == "search" || item.name == "search";\n\t                    }).length > 0,\n\t                    ns: kendo.ns,\n\t                    view: that._selectedViewName,\n\t                    views: that.views,\n\t                    viewsCount: that._viewsCount,\n\t                    editable: that.options.editable\n\t                }));\n\n\t            that.wrapper.append(toolbar);\n\t            that.toolbar = toolbar;\n\n\t            kendo.bind(that.toolbar, that._model);\n\n\t            toolbar.on(CLICK + NS, ".k-pdf", function(e) {\n\t                e.preventDefault();\n\t                that.saveAsPDF();\n\t            });\n\n\t            toolbar.on("input" + NS, ".k-scheduler-search-input", kendo.throttle(function(e) {\n\t                that.dataSource.filter({\n\t                    logic: "or",\n\t                    filters: [\n\t                        {field: "title", operator: "contains", value: e.target.value},\n\t                        {field: "description", operator: "contains", value: e.target.value}\n\t                    ]\n\t                });\n\t            }, 250));\n\n\t            toolbar.on(CLICK + NS, ".k-create-event", function(e) {\n\t                e.preventDefault();\n\t                that.addEvent();\n\t            });\n\n\t            toolbar.on(CLICK + NS, ".k-nav-calendar", function(e) {\n\t                e.preventDefault();\n\t                that._showCalendar(e.target);\n\t            });\n\n\t            toolbar.on(CLICK + NS, ".k-scheduler-navigation > .k-button", function(e) {\n\t                var button = $(this);\n\t                var date = new Date(that.date());\n\t                var action = "";\n\t                var currentDate = new Date();\n\t                var timezone = that.options.timezone;\n\n\t                if($(e.target).is("input")) {\n\t                    return;\n\t                }\n\n\t                e.preventDefault();\n\n\t                if (button.hasClass("k-nav-today")) {\n\t                    action = "today";\n\t                    if (timezone) {\n\t                        var timezoneOffset = kendo.timezone.offset(currentDate, timezone);\n\t                        date = kendo.timezone.convert(currentDate, currentDate.getTimezoneOffset(), timezoneOffset);\n\t                    } else {\n\t                        date = currentDate;\n\t                    }\n\t                } else if (button.hasClass("k-nav-next")) {\n\t                    action = "next";\n\t                    date = that.view().nextDate();\n\t                } else if (button.hasClass("k-nav-prev")) {\n\t                    action = "previous";\n\t                    date = that.view().previousDate();\n\t                }\n\n\t                if (!that.trigger("navigate", { view: that._selectedViewName, action: action, date: date })) {\n\t                    that.date(date);\n\t                }\n\t            });\n\n\t            toolbar.on(CLICK + NS, ".k-nav-current", function(e) {\n\t                e.preventDefault();\n\n\t                if (!that._isMobile()) {\n\t                    that._showCalendar();\n\t                }\n\t            });\n\n\t            toolbar.on(CLICK + NS, ".k-scheduler-views > .k-button, .k-scheduler-refresh", function(e) {\n\t                e.preventDefault();\n\n\t                var name = $(this).attr(kendo.attr("name"));\n\n\t                that.toolbar.find(".k-scheduler-views > .k-button").removeClass(FOCUSEDSTATE);\n\n\t                if (!that.trigger("navigate", { view: name, action: "changeView", date: that.date() })) {\n\t                    that.view(name);\n\t                }\n\t            });\n\n\t            toolbar.on(CHANGE + NS, ".k-views-dropdown", function() {\n\t                var name = this.value;\n\n\t                if (!that.trigger("navigate", { view: name, action: "changeView", date: that.date() })) {\n\t                    that.view(name);\n\t                }\n\t            });\n\n\t            toolbar.find(".k-scheduler-mobile-views").on("change", function (e) {\n\t                that.view(e.target.value);\n\t            });\n\t        },\n\n\t        _showCalendar: function(targetElm) {\n\t            var that = this,\n\t                target = targetElm || that.toolbar.find(".k-nav-current"),\n\t                html = $(\'<div class="k-calendar-container"><div class="k-scheduler-calendar"></div></div>\');\n\n\t            if (!that.popup) {\n\t                that.popup = new Popup(html, {\n\t                    anchor: target,\n\t                    activate: function() {\n\t                        if(that.popup && that.calendar){\n\t                            that.popup._toggleResize(false);\n\t                            that.calendar.element.find("table").focus();\n\t                            that.popup._toggleResize(true);\n\t                        }\n\t                    },\n\t                    open: function() {\n\t                        if (!that.calendar) {\n\t                            that.calendar = new Calendar(this.element.find(".k-scheduler-calendar"),\n\t                            {\n\t                                change: function() {\n\t                                    var date = this.value();\n\t                                    if (!that.trigger("navigate", { view: that._selectedViewName, action: "changeDate", date: date })) {\n\t                                        that.date(date);\n\t                                        that.popup.close();\n\t                                    }\n\n\t                                    if(!that._isMobile()) {\n\t                                        that._selectedView.element.focus();\n\t                                        that.toolbar.find(".k-nav-current").focus().addClass(FOCUSEDSTATE);\n\t                                    }\n\t                                },\n\t                                min: that.options.min,\n\t                                max: that.options.max\n\t                            });\n\t                        }\n\t                        that.calendar.element.on("keydown" + NS, function (e) {\n\t                            if (e.keyCode === keys.ESC || e.keyCode === keys.TAB) {\n\t                                that.popup.close();\n\t                                that._selectedView.element.focus();\n\t                                that.toolbar.find(".k-nav-current").focus().addClass(FOCUSEDSTATE);\n\t                            }\n\t                        });\n\t                        that.calendar.value(that.date());\n\t                    },\n\t                    copyAnchorStyles: false\n\t                });\n\t            }\n\n\t            that.popup.open();\n\t        },\n\n\t        refresh: function(e) {\n\t            var that = this;\n\t            var view = this.view();\n\t            var preventRefresh = (e && e.action === "itemchange" && (this._editor.editable || this._preventRefresh)) ||\n\t                                 (this.dataSource.options.type === "signalr" && this._preventRefresh);\n\n\t            this._progress(false);\n\n\t            this.angular("cleanup", function(){\n\t                return { elements: that.items() };\n\t            });\n\n\t            e = e || {};\n\n\t            if (!view) {\n\t                return;\n\t            }\n\n\t            if (preventRefresh) { // skip rebinding if editing is in progress\n\t                this._attemptRefresh =  true && this.dataSource.options.type === "signalr";\n\t                return;\n\t            }\n\n\t            if (this.trigger("dataBinding", { action: e.action || "rebind", index: e.index, items: e.items })) {\n\t                return;\n\t            }\n\n\t            if (!(e && e.action === "resize") && this._editor) {\n\t                this._editor.close();\n\t            }\n\n\t            this._data = this.dataSource.expand(view.startDate(), view.visibleEndDate());\n\n\t            view.refreshLayout();\n\n\t            view.render(this._data);\n\n\t            this.trigger("dataBound");\n\t            this._attemptRefresh = false;\n\t        },\n\n\t        slotByPosition: function(x, y) {\n\t            var view = this.view();\n\n\t            if(!view._slotByPosition) {\n\t                return null;\n\t            }\n\n\t            var slot = view._slotByPosition(x, y);\n\n\t            if(!slot) {\n\t                return null;\n\t            }\n\n\t            return {\n\t                startDate: slot.startDate(),\n\t                endDate: slot.endDate(),\n\t                groupIndex: slot.groupIndex,\n\t                element: slot.element,\n\t                isDaySlot: slot.isDaySlot\n\t            };\n\t        },\n\n\t        slotByElement: function(element) {\n\t            var offset = $(element).offset();\n\t            return this.slotByPosition(offset.left, offset.top);\n\t        },\n\n\t        resourcesBySlot: function(slot) {\n\t            return this.view()._resourceBySlot(slot);\n\t        }\n\t    });\n\n\t    var defaultViews = {\n\t        day: {\n\t            type: "kendo.ui.DayView"\n\t        },\n\t        week: {\n\t            type: "kendo.ui.WeekView"\n\t        },\n\t        workWeek: {\n\t            type: "kendo.ui.WorkWeekView"\n\t        },\n\t        agenda: {\n\t            type: "kendo.ui.AgendaView"\n\t        },\n\t        month: {\n\t            type: "kendo.ui.MonthView"\n\t        },\n\t        timeline: {\n\t            type: "kendo.ui.TimelineView"\n\t        },\n\t        timelineWeek: {\n\t            type: "kendo.ui.TimelineWeekView"\n\t        },\n\t        timelineWorkWeek: {\n\t            type: "kendo.ui.TimelineWorkWeekView"\n\t        },\n\t        timelineMonth: {\n\t            type: "kendo.ui.TimelineMonthView"\n\t        }\n\t    };\n\n\t    ui.plugin(Scheduler);\n\n\t    if (kendo.PDFMixin) {\n\t        kendo.PDFMixin.extend(Scheduler.prototype);\n\n\t        var SCHEDULER_EXPORT = "k-scheduler-pdf-export";\n\t        Scheduler.fn._drawPDF = function(progress) {\n\t            var wrapper = this.wrapper;\n\t            var styles = wrapper[0].style.cssText;\n\n\t            wrapper.css({\n\t                width: wrapper.width(),\n\t                height: wrapper.height()\n\t            });\n\n\t            wrapper.addClass(SCHEDULER_EXPORT);\n\n\t            var scheduler = this;\n\t            var promise = new $.Deferred();\n\t            var table = wrapper.find(".k-scheduler-content").find("table").css("table-layout", "auto");\n\n\t            setTimeout(function() {\n\t                table.css("table-layout", "fixed");\n\t                scheduler.resize(true);\n\n\t                scheduler._drawPDFShadow({}, {\n\t                    avoidLinks: scheduler.options.pdf.avoidLinks\n\t                })\n\t                .done(function(group) {\n\t                    var args = {\n\t                        page: group,\n\t                        pageNumber: 1,\n\t                        progress: 1,\n\t                        totalPages: 1\n\t                    };\n\n\t                    progress.notify(args);\n\t                    promise.resolve(args.page);\n\t                })\n\t                .fail(function(err) {\n\t                    promise.reject(err);\n\t                })\n\t                .always(function() {\n\t                    wrapper[0].style.cssText = styles;\n\t                    wrapper.removeClass(SCHEDULER_EXPORT);\n\t                    scheduler.resize(true);\n\n\t                    //Required because slot.offsetLeft is incorrect after first resize\n\t                    scheduler.resize(true);\n\t                });\n\t            });\n\n\t            return promise;\n\t        };\n\t    }\n\n\t    var TimezoneEditor = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this,\n\t                zones = kendo.timezone.windows_zones;\n\n\t            if (!zones || !kendo.timezone.zones_titles) {\n\t                throw new Error(\'kendo.timezones.min.js is not included.\');\n\t            }\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that.wrapper = that.element;\n\n\t            that._zonesQuery = new kendo.data.Query(zones);\n\t            that._zoneTitleId = kendo.guid();\n\t            that._zoneTitlePicker();\n\t            that._zonePicker();\n\n\t            that._zoneTitle.bind("cascade", function() {\n\t                if (!this.value()) {\n\t                    that._zone.wrapper.hide();\n\t                }\n\t            });\n\n\t            that._zone.bind("cascade", function() {\n\t                that._value = this.value();\n\t                that.trigger("change");\n\t            });\n\n\t            that.value(that.options.value);\n\t        },\n\t        options: {\n\t            name: "TimezoneEditor",\n\t            value: "",\n\t            optionLabel: "No timezone"\n\t        },\n\t        events: [ "change" ],\n\n\t        _zoneTitlePicker: function() {\n\t            var that = this,\n\t                zoneTitle = $(\'<input id="\' + that._zoneTitleId + \'" aria-label="\' + that.options.title + \'"/>\').appendTo(that.wrapper);\n\n\t            that._zoneTitle = new kendo.ui.DropDownList(zoneTitle, {\n\t                dataSource: kendo.timezone.zones_titles,\n\t                dataValueField: "other_zone",\n\t                dataTextField: "name",\n\t                optionLabel: that.options.optionLabel\n\t            });\n\t        },\n\n\t        _zonePicker: function() {\n\t            var that = this,\n\t                zone = $(\'<input aria-label="\' + that.options.title + \'"/>\').appendTo(this.wrapper);\n\n\t            that._zone = new kendo.ui.DropDownList(zone, {\n\t                dataValueField: "zone",\n\t                dataTextField: "territory",\n\t                dataSource: that._zonesQuery.data,\n\t                cascadeFrom: that._zoneTitleId,\n\t                dataBound: function() {\n\t                    that._value = this.value();\n\t                    this.wrapper.toggle(this.dataSource.view().length > 1);\n\t                }\n\t            });\n\n\t            that._zone.wrapper.hide();\n\t        },\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\n\t            kendo.destroy(this.wrapper);\n\t        },\n\n\t        value: function(value) {\n\t            var that = this,\n\t                zone;\n\n\t            if (value === undefined) {\n\t                return that._value;\n\t            }\n\n\t            zone = that._zonesQuery.filter({ field: "zone", operator: "eq", value: value }).data[0];\n\n\t            if (zone) {\n\t                that._zoneTitle.value(zone.other_zone);\n\t                that._zone.value(zone.zone);\n\t            } else {\n\t                that._zoneTitle.select(0);\n\t            }\n\n\t        }\n\t    });\n\n\t    ui.plugin(TimezoneEditor);\n\n\t    var ZONETITLEOPTIONTEMPLATE = kendo.template(\'<option value="#=other_zone#">#=name#</option>\');\n\t    var ZONEOPTIONTEMPLATE = kendo.template(\'<option value="#=zone#">#=territory#</option>\');\n\n\t    var MobileTimezoneEditor = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this,\n\t                zones = kendo.timezone.windows_zones;\n\n\t            if (!zones || !kendo.timezone.zones_titles) {\n\t                throw new Error(\'kendo.timezones.min.js is not included.\');\n\t            }\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that.wrapper = that.element;\n\n\t            that._zonesQuery = new kendo.data.Query(zones);\n\t            that._zoneTitlePicker();\n\t            that._zonePicker();\n\n\t            that.value(that.options.value);\n\t        },\n\n\t        options: {\n\t            name: "MobileTimezoneEditor",\n\t            optionLabel: "No timezone",\n\t            value: ""\n\t        },\n\n\t        events: [ "change" ],\n\n\t        _bindZones: function(value) {\n\t            var data = value ? this._filter(value) : [];\n\n\t            this._zone.html(this._options(data, ZONEOPTIONTEMPLATE));\n\t        },\n\n\t        _filter: function(value) {\n\t            return this._zonesQuery.filter({ field: "other_zone", operator: "eq", value: value }).data;\n\t        },\n\n\t        _options: function(data, template, optionLabel) {\n\t            var idx = 0;\n\t            var html = "";\n\t            var length = data.length;\n\n\t            if (optionLabel) {\n\t                html += template({ other_zone: "", name: optionLabel });\n\t            }\n\n\t            for (; idx < length; idx++) {\n\t                html += template(data[idx]);\n\t            }\n\n\t            return html;\n\t        },\n\n\t        _zoneTitlePicker: function() {\n\t            var that = this;\n\t            var options = that._options(kendo.timezone.zones_titles, ZONETITLEOPTIONTEMPLATE, that.options.optionLabel);\n\n\t            that._zoneTitle = $(\'<select>\' + options + \'</select>\')\n\t                                .appendTo(that.wrapper)\n\t                                .change(function() {\n\t                                    var value = this.value;\n\t                                    var zone = that._zonePickerLabel;\n\t                                    var zoneSelect = zone.find("select");\n\n\t                                    that._bindZones(value);\n\n\t                                    if (value && zoneSelect.children().length > 1) {\n\t                                        zone.show();\n\t                                    } else {\n\t                                        zone.hide();\n\t                                    }\n\n\t                                    that._value = that._zone[0].value;\n\n\t                                    that.trigger("change");\n\t                                });\n\t        },\n\n\t        _zonePicker: function() {\n\t            var that = this;\n\n\t            that._zonePickerLabel = $("<li class=\'k-item k-listgroup-item k-zonepicker\' style=\'display:none\'>" +\n\t                                        "<label class=\'k-label k-listgroup-form-row\'>" +\n\t                                            "<span class=\'k-item-title k-listgroup-form-field-label\'></span>" +\n\t                                            "<div class=\'k-listgroup-form-field-wrapper\'></div>" +\n\t                                        "</label>" +\n\t                                    "</li>");\n\n\t            that._zone = $(\'<select></select>\')\n\t                            .appendTo(that._zonePickerLabel.find("div"))\n\t                            .change(function() {\n\t                                that._value = this.value;\n\n\t                                that.trigger("change");\n\t                            });\n\n\t            this.wrapper.closest(".k-item").after(that._zonePickerLabel);\n\n\t            that._bindZones(that._zoneTitle.val());\n\t            that._value = that._zone[0].value;\n\t        },\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\n\t            kendo.destroy(this.wrapper);\n\t        },\n\n\t        value: function(value) {\n\t            var that = this;\n\t            var zonePicker = that._zone;\n\t            var other_zone = "";\n\t            var zone_value = "";\n\t            var zone;\n\n\t            if (value === undefined) {\n\t                return that._value;\n\t            }\n\n\t            zone = that._zonesQuery.filter({ field: "zone", operator: "eq", value: value }).data[0];\n\n\t            if (zone) {\n\t                zone_value = zone.zone;\n\t                other_zone = zone.other_zone;\n\t            }\n\n\t            that._zoneTitle.val(other_zone);\n\t            that._bindZones(other_zone);\n\n\t            zonePicker.val(zone_value);\n\t            zone_value = zonePicker[0].value;\n\n\t            if (zone_value && zonePicker.children.length > 1) {\n\t                that._zonePickerLabel.show();\n\t            } else {\n\t                that._zonePickerLabel.hide();\n\t            }\n\n\t            that._value = zone_value;\n\t        }\n\t    });\n\n\t    ui.plugin(MobileTimezoneEditor);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1367:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.scheduler.dayview */ "./node_modules/@progress/kendo-ui/js/kendo.scheduler.dayview.js");\n\n/***/ }),\n\n/***/ 1368:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.scheduler.recurrence */ "./node_modules/@progress/kendo-ui/js/kendo.scheduler.recurrence.js");\n\n/***/ }),\n\n/***/ 1369:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.scheduler.view */ "./node_modules/@progress/kendo-ui/js/kendo.scheduler.view.js");\n\n/***/ }),\n\n/***/ 1370:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.scheduler.agendaview */ "./node_modules/@progress/kendo-ui/js/kendo.scheduler.agendaview.js");\n\n/***/ }),\n\n/***/ 1371:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.scheduler.monthview */ "./node_modules/@progress/kendo-ui/js/kendo.scheduler.monthview.js");\n\n/***/ }),\n\n/***/ 1372:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.scheduler.timelineview */ "./node_modules/@progress/kendo-ui/js/kendo.scheduler.timelineview.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.scheduler.js?')}}]);