(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{"./node_modules/@progress/kendo-ui/js/kendo.scrollview.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.scrollview.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1337);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1027:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ "./node_modules/@progress/kendo-ui/js/kendo.data.js");\n\n/***/ }),\n\n/***/ 1072:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.fx */ "./node_modules/@progress/kendo-ui/js/kendo.fx.js");\n\n/***/ }),\n\n/***/ 1077:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.draganddrop */ "./node_modules/@progress/kendo-ui/js/kendo.draganddrop.js");\n\n/***/ }),\n\n/***/ 1337:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1072), __webpack_require__(1027), __webpack_require__(1077) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "scrollview",\n\t    name: "ScrollView",\n\t    category: "web",\n\t    description: "The Kendo ScrollView widget is used to scroll content wider than the device screen.",\n\t    depends: [ "fx", "data", "draganddrop" ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        proxy = $.proxy,\n\t        Transition = kendo.effects.Transition,\n\t        Pane = kendo.ui.Pane,\n\t        PaneDimensions = kendo.ui.PaneDimensions,\n\t        Widget = ui.DataBoundWidget,\n\t        DataSource = kendo.data.DataSource,\n\n\t        // Math\n\t        math = Math,\n\t        abs  = math.abs,\n\t        ceil = math.ceil,\n\t        round = math.round,\n\t        max = math.max,\n\t        min = math.min,\n\t        floor = math.floor,\n\n\t        CHANGE = "change",\n\t        CLICK = "click",\n\t        CHANGING = "changing",\n\t        REFRESH = "refresh",\n\t        CURRENT_PAGE_CLASS = "primary",\n\t        VIRTUAL_PAGE_CLASS = "scrollview-page",\n\t        FUNCTION = "function",\n\t        ITEM_CHANGE = "itemChange",\n\t        CLEANUP = "cleanup",\n\n\t        VIRTUAL_PAGE_COUNT = 3,\n\t        LEFT_PAGE = -1,\n\t        CETER_PAGE = 0,\n\t        RIGHT_PAGE = 1,\n\n\t        LEFT_SWIPE = -1,\n\t        NUDGE = 0,\n\t        RIGHT_SWIPE = 1;\n\n\t    function className(name) {\n\t        return "k-" + name;\n\t    }\n\n\t    var ScrollViewDataReader = kendo.Observable.extend({\n\t        init: function(dataSource) {\n\t            var that = this;\n\t            this.dataSource = dataSource;\n\t            this.pendingRequestArray = [];\n\t            this.initialFetch = false;\n\t            this.useRanges = dataSource.options.serverPaging;\n\n\t            kendo.Observable.fn.init.call(this);\n\n\t            dataSource.bind("change", function() {\n\t                that._change();\n\t            });\n\t        },\n\n\t        _change: function() {\n\t            this.trigger("reset", { offset: this.offset });\n\t        },\n\n\t        page: function(page, callback) {\n\t            var that = this;\n\n\t            if (!this.useRanges) {\n\t                this.dataSource.page(page + 1);\n\t                if (callback) {\n\t                    callback(that.dataSource.view());\n\t                } else {\n\t                    that.trigger("page", {page: page});\n\t                }\n\t             }\n\t             if (this.useRanges) {\n\t                this.dataSource.range(page * this.dataSource.pageSize(), this.dataSource.pageSize(), function() {\n\t                    if (callback) {\n\t                        callback(that.dataSource.view());\n\t                    } else {\n\t                        that.trigger("page", { page: page });\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        scrollTo: function(page) {\n\t            var pageCount = Math.ceil(this.dataSource.total() / this.dataSource.pageSize() || 1);\n\t            var prevPage = page - 1;\n\t            var prevPrefetch = prevPage - 1;\n\t            var currentPage = page;\n\t            var nextPage = pageCount > 0 && page + 1 >= pageCount ? - 1 : page + 1;\n\t            var nextPrefetch = pageCount > 0 && nextPage + 1 >= pageCount ? - 1 : nextPage + 1;\n\n\t            if (nextPage >= 0) {\n\t                this.pendingRequestArray.push(nextPage);\n\t            }\n\n\t            if (prevPage >= 0) {\n\t                this.pendingRequestArray.push(prevPage);\n\t            }\n\n\t            if (prevPrefetch >= 0) {\n\t                this.pendingRequestArray.push(prevPrefetch);\n\t            }\n\n\t            if (nextPrefetch >= 0) {\n\t                this.pendingRequestArray.push(nextPrefetch);\n\t            }\n\n\t            this.page(currentPage);\n\t        },\n\n\t        getViewData: function() {\n\t            var view = this.dataSource.view();\n\t            var data;\n\t            if (this.dataSource.options.pageSize > 1) {\n\t                data = [];\n\t                for (var index = 0; index < view.length; index++) {\n\t                    data.push(view[index]);\n\t                }\n\t            }\n\t            else {\n\t                data = view[0];\n\t            }\n\t            return data;\n\t        },\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that.dataSource.unbind();\n\t            that.dataSource = null;\n\t        }\n\t    });\n\n\t    kendo.ui.ScrollViewDataReader = ScrollViewDataReader;\n\n\t    var Pager = kendo.Class.extend({\n\t        init: function(scrollView) {\n\t            var that = this,\n\t                element = $("<ul class=\'" + className("scrollview-nav") + "\'/>"),\n\t                navigationWrapElement = $("<div class=\'" + className("scrollview-nav-wrap") + "\'></div>");\n\n\t            navigationWrapElement.append(element);\n\t            scrollView._navigationContainer.append(navigationWrapElement);\n\n\t            this._changeProxy = proxy(that, "_change");\n\t            this._refreshProxy = proxy(that, "_refresh");\n\t            scrollView.bind(CHANGE, this._changeProxy);\n\t            scrollView.bind(REFRESH, this._refreshProxy);\n\t            element.on(CLICK, "li.k-link", proxy(this._click, scrollView));\n\n\t            $.extend(that, { element: element, scrollView: scrollView });\n\t        },\n\n\t        items: function() {\n\t            return this.element.children();\n\t        },\n\n\t        _refresh: function(e) {\n\t            var pageHTML = "";\n\n\t            for (var idx = 0; idx < e.pageCount; idx ++) {\n\t                pageHTML += \'<li class="k-link"></li>\';\n\t            }\n\n\t            this.element.html(pageHTML);\n\t            this.items().eq(e.page).addClass(className(CURRENT_PAGE_CLASS));\n\n\t            this.scrollView._toggleNavigation({currentPage: e.page});\n\t        },\n\n\t        _change: function(e) {\n\t            if (e.isDefaultPrevented()) {\n\t                return;\n\t            }\n\n\t            var innerNavigationContainer = this.scrollView._navigationContainer.find(".k-scrollview-nav");\n\t            var scrollViewWidth = this.scrollView.element.width();\n\t            var containerOffset = (scrollViewWidth - innerNavigationContainer.width()) / 2;\n\t            var pageWidth = innerNavigationContainer.find("li.k-link:eq(0)").outerWidth(true) / 2;\n\n\t            this.items()\n\t                .removeClass(className(CURRENT_PAGE_CLASS))\n\t                .eq(e.nextPage).addClass(className(CURRENT_PAGE_CLASS));\n\n\n\t            var itemOffset = this.items().eq(e.nextPage).length > 0 ?  this.items().eq(e.nextPage).position().left : 0;\n\n\t            if (itemOffset > scrollViewWidth / 2 || itemOffset < innerNavigationContainer.scrollLeft() + scrollViewWidth / 2) {\n\n\t                var translate = 0;\n\t                if (itemOffset > scrollViewWidth / 2) {\n\t                    translate = innerNavigationContainer.scrollLeft() + itemOffset - scrollViewWidth / 2;\n\t                }\n\t                else {\n\t                    translate = innerNavigationContainer.scrollLeft() - (scrollViewWidth / 2 -itemOffset);\n\t                }\n\n\t                translate += (containerOffset + pageWidth);\n\n\t                innerNavigationContainer.animate({"scrollLeft": translate }, 300);\n\t            }\n\n\t            this.scrollView._toggleNavigation({currentPage: e.currentPage, nextPage: e.nextPage});\n\t        },\n\n\t        _click: function(e) {\n\t            var newPage = $(e.currentTarget).index();\n\n\t            this.scrollTo(newPage);\n\t        },\n\n\t        destroy: function() {\n\t            this.scrollView.unbind(CHANGE, this._changeProxy);\n\t            this.scrollView.unbind(REFRESH, this._refreshProxy);\n\t            this.element.off(CLICK);\n\t            this.element.remove();\n\t        }\n\t    });\n\n\t    kendo.ui.ScrollViewPager = Pager;\n\n\t    var TRANSITION_END = "transitionEnd",\n\t        DRAG_START = "dragStart",\n\t        DRAG_END = "dragEnd";\n\n\t    var ElasticPane = kendo.Observable.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            kendo.Observable.fn.init.call(this);\n\n\t            this.element = element;\n\t            this.container = element.parent();\n\n\t            var movable,\n\t                transition,\n\t                userEvents,\n\t                dimensions,\n\t                dimension,\n\t                pane;\n\n\t            movable = new kendo.ui.Movable(that.element);\n\n\t            transition = new Transition({\n\t                axis: "x",\n\t                movable: movable,\n\t                onEnd: function() {\n\t                    that.trigger(TRANSITION_END);\n\t                }\n\t            });\n\n\t            userEvents = new kendo.UserEvents(element, {\n\t                fastTap: true,\n\t                start: function(e) {\n\t                    if (abs(e.x.velocity) * 2 >= abs(e.y.velocity)) {\n\t                        userEvents.capture();\n\t                    } else {\n\t                        userEvents.cancel();\n\t                    }\n\n\t                    that.trigger(DRAG_START, e);\n\t                    transition.cancel();\n\t                },\n\t                allowSelection: true,\n\t                end: function(e) {\n\t                    that.trigger(DRAG_END, e);\n\t                }\n\t            });\n\n\t            dimensions = new PaneDimensions({\n\t                element: that.element,\n\t                container: that.container\n\t            });\n\n\t            dimension = dimensions.x;\n\n\t            dimension.bind(CHANGE, function() {\n\t                that.trigger(CHANGE);\n\t            });\n\n\t            pane = new Pane({\n\t                dimensions: dimensions,\n\t                userEvents: userEvents,\n\t                movable: movable,\n\t                elastic: true\n\t            });\n\n\t            $.extend(that, {\n\t                duration: options && options.duration || 1,\n\t                movable: movable,\n\t                transition: transition,\n\t                userEvents: userEvents,\n\t                dimensions: dimensions,\n\t                dimension: dimension,\n\t                pane: pane\n\t            });\n\n\t            this.bind([TRANSITION_END, DRAG_START, DRAG_END, CHANGE], options);\n\t        },\n\n\t        size: function() {\n\t            return { width: this.dimensions.x.getSize(), height: this.dimensions.y.getSize() };\n\t        },\n\n\t        total: function() {\n\t            return this.dimension.getTotal();\n\t        },\n\n\t        offset: function() {\n\t            return -this.movable.x;\n\t        },\n\n\t        updateDimension: function() {\n\t            this.dimension.update(true);\n\t        },\n\n\t        refresh: function() {\n\t            this.dimensions.refresh();\n\t            this.dimensions.y.enabled = false;\n\t        },\n\n\t        moveTo: function(offset) {\n\t            this.movable.moveAxis("x", -offset);\n\t        },\n\n\t        transitionTo: function(offset, ease, instant) {\n\t            if (instant) {\n\t                this.moveTo(-offset);\n\t            } else {\n\t                this.transition.moveTo({ location: offset, duration: this.duration, ease: ease });\n\t            }\n\t        },\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that.userEvents.destroy();\n\t            that.unbind();\n\t            that.movable = that.tansition = that.dimensions = that.dimension = that.pane = null;\n\t            that.element.remove();\n\t        }\n\t    });\n\n\t    kendo.ui.ScrollViewElasticPane = ElasticPane;\n\n\t    var ScrollViewContent = kendo.Observable.extend({\n\t        init: function(element, pane, options) {\n\t            var that = this;\n\n\t            kendo.Observable.fn.init.call(this);\n\t            that.element = element;\n\t            that.pane = pane;\n\t            that._getPages();\n\t            this.page = 0;\n\t            this.pageSize = options.pageSize || 1;\n\t            this.contentHeight = options.contentHeight;\n\t            this.enablePager = options.enablePager;\n\t            this.pagerOverlay = options.pagerOverlay;\n\t        },\n\n\t        scrollTo: function(page, instant) {\n\t            var that = this;\n\n\t            if (page == that.page && !instant) {\n\t                return;\n\t            }\n\n\t            if (!that.trigger("resize", { currentPage: this.page, nextPage: page, data: undefined })) {\n\t                that.page = page;\n\t                that.pane.transitionTo(- page * that.pane.size().width, Transition.easeOutExpo, instant);\n\t            }\n\t        },\n\n\t        paneMoved: function(swipeType, bounce, callback, /*internal*/ instant) {\n\t            var that = this,\n\t                pane = that.pane,\n\t                width = pane.size().width * that.pageSize,\n\t                approx = round,\n\t                ease = bounce ? Transition.easeOutBack : Transition.easeOutExpo,\n\t                snap,\n\t                nextPage;\n\n\t            if (swipeType === LEFT_SWIPE) {\n\t                approx = ceil;\n\t            } else if (swipeType === RIGHT_SWIPE) {\n\t                approx = floor;\n\t            }\n\n\t            nextPage = approx(pane.offset() / width);\n\n\t            if (nextPage < 0 || nextPage >= that.pageCount) {\n\t                var tansition = nextPage < 0 ? 0 : (- this.page * this.pane.size().width);\n\t                return this.pane.transitionTo(tansition, ease, instant);\n\t            }\n\n\t            snap = max(that.minSnap, min(-nextPage * width, that.maxSnap));\n\n\t            if (nextPage != that.page) {\n\t                if (callback && callback({ currentPage: that.page, nextPage: nextPage })) {\n\t                    snap = -that.page * pane.size().width;\n\t                }\n\t            }\n\n\t            pane.transitionTo(snap, ease, instant);\n\t        },\n\n\t        updatePage: function() {\n\t            var pane = this.pane,\n\t                page = round(pane.offset() / pane.size().width);\n\n\t            if (page != this.page) {\n\t                this.page = page;\n\t                return true;\n\t            }\n\n\t            return false;\n\t        },\n\n\t        forcePageUpdate: function() {\n\t            return this.updatePage();\n\t        },\n\n\t        resizeTo: function(size) {\n\t            var pane = this.pane,\n\t                width = size.width;\n\n\t            this.pageElements.width(width);\n\n\t            if (this.contentHeight === "100%") {\n\t                var containerHeight = this.element.parent().height();\n\n\t                if (this.enablePager === true) {\n\t                    var pager = this.element.parent().find("ul.k-scrollview-nav");\n\t                    if (!this.pagerOverlay && pager.length) {\n\t                        containerHeight -= kendo._outerHeight(pager, true);\n\t                    }\n\t                }\n\n\t                this.element.css("height", containerHeight);\n\t                this.pageElements.css("height", containerHeight);\n\t            }\n\n\t            // re-read pane dimension after the pageElements have been resized.\n\t            pane.updateDimension();\n\n\t            if (!this._paged) {\n\t                this.page = floor(pane.offset() / width);\n\t            }\n\n\t            this.scrollTo(this.page, true, true);\n\n\t            this.pageCount = floor(pane.total() / width);\n\t            this.minSnap = - (this.pageCount - 1) * width;\n\t            this.maxSnap = 0;\n\t        },\n\n\t        _getPages: function() {\n\t            this.pageElements = this.element.find(kendo.roleSelector("page"));\n\t            this._paged = this.pageElements.length > 0;\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that.pane = null;\n\t            that.element.remove();\n\t        }\n\t    });\n\n\t    kendo.ui.ScrollViewContent = ScrollViewContent;\n\n\t    var VirtualScrollViewContent = kendo.Observable.extend({\n\t        init: function(element, pane, options) {\n\t            var that = this;\n\n\t            kendo.Observable.fn.init.call(this);\n\n\t            that.element = element;\n\t            that.pane = pane;\n\t            that.options = options;\n\t            that._templates();\n\t            that.page = options.page || 0;\n\t            that.pages = [];\n\t            that._initPages();\n\t            that.resizeTo(that.pane.size());\n\n\t            that.pane.dimension.forceEnabled();\n\t        },\n\n\t        setDataSource: function(dataSource) {\n\t            this.dataSource = DataSource.create(dataSource);\n\t            this._dataReader();\n\t            this._pendingPageRefresh = false;\n\t            this._pendingWidgetRefresh = false;\n\t        },\n\n\t        _viewShow: function() {\n\t            var that = this;\n\t            if (that._pendingWidgetRefresh) {\n\t                setTimeout(function() {\n\t                    that._resetPages();\n\t                }, 0);\n\t                that._pendingWidgetRefresh = false;\n\t            }\n\t        },\n\n\t        _dataReader: function() {\n\t            this.dataReader = new ScrollViewDataReader(this.dataSource);\n\n\t            this._pageProxy = proxy(this, "_onPage");\n\t            this._resetProxy = proxy(this, "_onReset");\n\n\t            this.dataReader.bind({\n\t                "page": this._pageProxy,\n\t                "reset": this._resetProxy\n\t            });\n\t        },\n\n\t        _templates: function() {\n\t            var template = this.options.template,\n\t                emptyTemplate = this.options.emptyTemplate,\n\t                templateProxy = {},\n\t                emptyTemplateProxy = {};\n\n\t            if (typeof template === FUNCTION) {\n\t                templateProxy.template = template;\n\t                template = "#=this.template(data)#";\n\t            }\n\n\t            this.template = proxy(kendo.template(template), templateProxy);\n\n\t            if (typeof emptyTemplate === FUNCTION) {\n\t                emptyTemplateProxy.emptyTemplate = emptyTemplate;\n\t                emptyTemplate = "#=this.emptyTemplate(data)#";\n\t            }\n\n\t            this.emptyTemplate = proxy(kendo.template(emptyTemplate), emptyTemplateProxy);\n\t        },\n\n\t        _initPages: function() {\n\t            var pages = this.pages,\n\t                element = this.element,\n\t                page;\n\n\t            for (var i = 0; i < VIRTUAL_PAGE_COUNT; i++) {\n\t                page = new Page(element);\n\t                pages.push(page);\n\t            }\n\n\t            this.pane.updateDimension();\n\t        },\n\n\t        resizeTo: function(size) {\n\t            var pages = this.pages,\n\t                pane = this.pane;\n\n\t            for (var i = 0; i < pages.length; i++) {\n\t                pages[i].setWidth(size.width);\n\t            }\n\n\t            if (this.options.contentHeight === "auto") {\n\t                this.element.css("height", this.pages[1].element.height());\n\t            }\n\n\t            else if (this.options.contentHeight === "100%") {\n\t                var containerHeight = this.element.parent().height();\n\n\t                if (this.options.enablePager === true) {\n\t                    var pager = this.element.parent().find("ul.k-scrollview-nav");\n\t                    if (!this.options.pagerOverlay && pager.length) {\n\t                        containerHeight -= kendo._outerHeight(pager, true);\n\t                    }\n\t                }\n\n\t                this.element.css("height", containerHeight);\n\t                pages[0].element.css("height", containerHeight);\n\t                pages[1].element.css("height", containerHeight);\n\t                pages[2].element.css("height", containerHeight);\n\t            }\n\t            else if (this.options.contentHeight) {\n\t                pages[0].element.css("height", this.options.contentHeight);\n\t                pages[1].element.css("height", this.options.contentHeight);\n\t                pages[2].element.css("height", this.options.contentHeight);\n\t            }\n\n\t            pane.updateDimension();\n\n\t            this._repositionPages();\n\n\t            this.width = size.width;\n\t        },\n\n\t        scrollTo: function(page, instant, silent) {\n\t            var that = this;\n\t            var dataReader = that.dataReader;\n\n\t            if (page == that.page && !instant) {\n\t                return;\n\t            }\n\n\t            dataReader.page(page, function(data) {\n\t                if (silent) {\n\t                    dataReader.scrollTo(page);\n\t                    return;\n\t                }\n\t                if (!that.trigger("resize", { currentPage: that.page, nextPage: page, data: data })) {\n\t                    if (!instant) {\n\t                        dataReader.pagerScroll = page > that.page ? - 1 : 1;\n\t                        that.page = page + dataReader.pagerScroll;\n\t                    } else {\n\t                        that.page = page;\n\t                    }\n\t                    dataReader.scrollTo(page);\n\t                }\n\t            });\n\t        },\n\t        paneMoved: function(swipeType, bounce, callback, /*internal*/ instant) {\n\t            var that = this,\n\t                pane = that.pane,\n\t                width = pane.size().width,\n\t                offset = pane.offset(),\n\t                thresholdPassed = Math.abs(offset) >= width / 3,\n\t                ease = bounce ? kendo.effects.Transition.easeOutBack : kendo.effects.Transition. easeOutExpo,\n\t                isEndReached = that.dataSource.options.serverPaging ? that.page + 2 > that.pageCount : false,\n\t                nextPage,\n\t                delta = 0,\n\t                data,\n\t                element;\n\n\t            if (swipeType === RIGHT_SWIPE) {\n\t                if (that.page !== 0) {\n\t                    delta = -1; //backward\n\t                }\n\t            } else if (swipeType === LEFT_SWIPE && !isEndReached) {\n\t                delta = 1; //forward\n\t            } else if (offset > 0 && (thresholdPassed && !isEndReached)) {\n\t                delta = 1; //forward\n\t            } else if (offset < 0 && thresholdPassed) {\n\t                if (that.page !== 0) {\n\t                    delta = -1; //backward\n\t                }\n\t            }\n\n\t            nextPage = that.page;\n\t            if (delta) {\n\t                nextPage = (delta > 0) ? nextPage + 1 : nextPage - 1;\n\n\t                if(that instanceof kendo.ui.VirtualScrollViewContent) {\n\t                    that.dataReader.page(nextPage);\n\t                    data = that.dataReader.getViewData();\n\t                }\n\t                else {\n\t                    data = undefined;\n\t                }\n\n\t                if (!(data instanceof Array)) {\n\t                    data = [data];\n\t                }\n\t                element = that.pages ? that.pages[1].element : undefined;\n\n\t            }\n\n\t            if (callback && that.page != nextPage && callback({ currentPage: that.page, nextPage: nextPage, element: element, data: data })) {\n\t                delta = 0;\n\t            }\n\n\t            if (delta === 0) {\n\t                that._cancelMove(ease, instant);\n\t            } else if (delta === -1) {\n\t                that._moveBackward(instant);\n\t            } else if (delta === 1) {\n\t                that._moveForward(instant);\n\t            }\n\t        },\n\n\t        updatePage: function() {\n\t            var pages = this.pages;\n\n\t            if (this.pane.offset() === 0) {\n\t                return false;\n\t            }\n\n\t            if (this.pane.offset() > 0) {\n\t                pages.push(this.pages.shift());//forward\n\t                this.page++;\n\t                if (this.page + 2 < this.pageCount) {\n\t                    this.dataReader.pendingRequestArray.push(this.page + 2);\n\t                }\n\t                if (this.page + 1 < this.pageCount) {\n\t                    this.dataReader.page(this.page + 1);\n\t                }\n\n\t                if (this.page + 1 == this.pageCount) {\n\t                    this.setPageContent(this.pages[2], null);\n\t                }\n\n\t            } else {\n\t                pages.unshift(this.pages.pop()); //back\n\t                this.page--;\n\t                if (this.page - 2 >= 0) {\n\t                    this.dataReader.pendingRequestArray.push(this.page - 2);\n\t                }\n\t                if (this.page - 1 >= 0) {\n\t                    this.dataReader.page(this.page - 1);\n\t                }\n\t            }\n\n\t            this._repositionPages();\n\n\t            this._resetMovable();\n\n\t            return true;\n\t        },\n\n\t        forcePageUpdate: function() {\n\t            var offset = this.pane.offset(),\n\t                threshold  = this.pane.size().width * 3/4;\n\n\t            if (abs(offset) > threshold) {\n\t                return this.updatePage();\n\t            }\n\n\t            return false;\n\t        },\n\n\t        _resetMovable: function() {\n\t            this.pane.moveTo(0);\n\t        },\n\n\t        _moveForward: function(instant) {\n\t            this.pane.transitionTo(-this.width, kendo.effects.Transition.easeOutExpo, instant);\n\t        },\n\n\t        _moveBackward: function(instant) {\n\t            this.pane.transitionTo(this.width, kendo.effects.Transition.easeOutExpo, instant);\n\t        },\n\n\t        _cancelMove: function(ease, /*internal*/ instant) {\n\t            this.pane.transitionTo(0, ease, instant);\n\t        },\n\n\t        _resetPages: function() {\n\t            this.page = this.options.page || 0;\n\t            this._repositionPages();\n\n\t            this.trigger("reset");\n\t        },\n\n\t        _onPage: function(e) {\n\t            if (e.page >= this.pageCount) {\n\t                this.setPageContent(this.pages[2], null);\n\t            }\n\t            if (this.page == e.page) {\n\t                if (!this.dataReader.pagerScroll || this.dataReader.pagerScroll === 0 && this.dataReader.initialFetch) {\n\t                    this.setPageContent(this.pages[1], this.dataReader.getViewData());\n\t                }\n\t                else {\n\t                    if (this.dataReader.pagerScroll < 0) {\n\t                        this._moveForward();\n\t                    }\n\t                    else {\n\t                        this._moveBackward();\n\t                    }\n\n\t                    this.dataReader.pagerScroll = 0;\n\t                    this.setPageContent(this.pages[1], this.dataReader.getViewData());\n\t                }\n\t            }\n\t            else if (this.page + 1 == e.page) {\n\t                this.setPageContent(this.pages[2], this.dataReader.getViewData());\n\t            }\n\t            else if (this.page - 1 == e.page) {\n\t                this.setPageContent(this.pages[0], this.dataReader.getViewData());\n\t            }\n\n\t            if (this.dataReader.pendingRequestArray.length > 0 && this.dataReader.initialFetch) {\n\t                var item = this.dataReader.pendingRequestArray.shift();\n\t                this.dataReader.page(item);\n\t            }\n\t        },\n\n\t        _onReset: function() {\n\t            this.pageCount = ceil(this.dataSource.total() / this.dataSource.pageSize());\n\t        },\n\n\t        _repositionPages: function() {\n\t            var pages = this.pages;\n\n\t            pages[0].position(LEFT_PAGE);\n\t            pages[1].position(CETER_PAGE);\n\t            pages[2].position(RIGHT_PAGE);\n\t        },\n\n\t        setPageContent: function(page, data) {\n\t            var template = this.template,\n\t                emptyTemplate = this.emptyTemplate;\n\n\t            if (data !== null && data !== undefined) {\n\t                page.content(template(data));\n\t            } else {\n\t                page.content(emptyTemplate({}));\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\t            var pages = that.pages;\n\n\t            that.dataReader.unbind();\n\t            that.dataSource.unbind();\n\t            that.dataReader = that.dataSource = that.pane = null;\n\n\t            for (var index = 0; index < pages.length; index++) {\n\t                pages[index].destroy();\n\t            }\n\n\t            that.element.remove();\n\t        }\n\t    });\n\n\t    kendo.ui.VirtualScrollViewContent = VirtualScrollViewContent;\n\n\t    var Page = kendo.Class.extend({\n\t        init: function(container) {\n\t            this.element = $("<li class=\'" + className(VIRTUAL_PAGE_CLASS) + "\'></li>");\n\t            this.width = container.width();\n\t            this.element.width(this.width);\n\t            container.append(this.element);\n\t        },\n\n\t        content: function(theContent) {\n\t            this.element.html(theContent);\n\t        },\n\n\t        position: function(position) { //position can be -1, 0, 1\n\t            this.element.css("transform", "translate3d(" + this.width * position + "px, 0, 0)");\n\t        },\n\n\t        setWidth: function(width) {\n\t            this.width = width;\n\t            this.element.width(width);\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that.element.remove();\n\t            that.element = null;\n\t        }\n\t    });\n\n\t    kendo.ui.VirtualPage = Page;\n\n\t    var ScrollView = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            options = that.options;\n\t            element = that.element;\n\n\t            kendo.stripWhitespace(element[0]);\n\n\t            if (element.children().length === 0) {\n\t                element\n\t                .wrapInner("<ul class=\'k-scrollview-wrap\'/>");\n\t            } else {\n\t                element\n\t                .wrapInner("<div class=\'k-scrollview-wrap\'/>");\n\t            }\n\n\t            element.addClass("k-widget " + className("scrollview"));\n\n\t            that._initNavigation();\n\n\t            if (this.options.enablePager) {\n\t                this.pager = new Pager(this);\n\n\t                if (this.options.pagerOverlay) {\n\t                    element.addClass(className("scrollview-overlay"));\n\t                }\n\t            } else {\n\t                this._changeProxy = proxy(that, "_toggleNavigation");\n\t                this.bind(CHANGE, this._changeProxy);\n\t            }\n\n\t            that.inner = element.children().first();\n\t            that.page = 0;\n\n\t            that.inner.css("height", options.contentHeight);\n\n\t            that.pane = new ElasticPane(that.inner, {\n\t                duration: this.options.duration,\n\t                transitionEnd: proxy(this, "_transitionEnd"),\n\t                dragStart: proxy(this, "_dragStart"),\n\t                dragEnd: proxy(this, "_dragEnd"),\n\t                change: proxy(this, REFRESH)\n\t            });\n\n\t            that.bind("resize", function() {\n\t                that.pane.refresh();\n\t            });\n\n\t            that.page = options.page;\n\n\t            var empty = this.inner.children().length === 0;\n\n\t            var content = empty ? new VirtualScrollViewContent(that.inner, that.pane, options) : new ScrollViewContent(that.inner, that.pane, options);\n\n\t            content.page = that.page;\n\n\t            content.bind("reset", function() {\n\t                this._pendingPageRefresh = false;\n\t                that.trigger(REFRESH, { pageCount: content.pageCount, page: content.page });\n\t                that._toggleNavigation({currentPage: content.page, nextPage: content.page });\n\t            });\n\n\t            content.bind("resize", function(e) {\n\t                var currentPage = content.page;\n\t                var nextPage = e.nextPage;\n\n\t                if (currentPage != nextPage) {\n\t                    e._defaultPrevented = that.trigger(CHANGE, { currentPage: content.page, nextPage: e.nextPage, data: e.data });\n\t                }\n\t                that._toggleNavigation({ currentPage: content.page, nextPage: e.nextPage});\n\t            });\n\n\t            content.bind(ITEM_CHANGE, function(e) {\n\t                that.trigger(ITEM_CHANGE, e);\n\n\t                that.angular("compile", function() {\n\t                    return { elements: e.item, data: [ { dataItem: e.data } ] };\n\t                });\n\t            });\n\n\t            content.bind(CLEANUP, function(e) {\n\t                that.angular("cleanup", function() {\n\t                    return { elements: e.item };\n\t                });\n\t            });\n\n\t            that._content = content;\n\t            that.setDataSource(options.dataSource);\n\t            this.viewInit();\n\t            this.viewShow();\n\n\t        },\n\n\t        options: {\n\t            name: "ScrollView",\n\t            page: 0,\n\t            duration: 400,\n\t            velocityThreshold: 0.8,\n\t            contentHeight: "auto",\n\t            pageSize: 1,\n\t            bounceVelocityThreshold: 1.6,\n\t            enablePager: true,\n\t            enableNavigationButtons: true,\n\t            pagerOverlay: true,\n\t            autoBind: true,\n\t            template: "",\n\t            emptyTemplate: ""\n\t        },\n\n\t        events: [\n\t            CHANGING,\n\t            CHANGE,\n\t            REFRESH\n\t        ],\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\t            this._content.destroy();\n\t            this.pane.destroy();\n\n\t            if (this.pager) {\n\t                this.pager.destroy();\n\t            }\n\n\t            this.inner = null;\n\t            kendo.destroy(this.element);\n\t        },\n\n\t        viewInit: function() {\n\t            if (this.options.autoBind) {\n\t                this._content.scrollTo(this._content.page, true, true);\n\t            }\n\t        },\n\n\t        viewShow: function() {\n\t            this.pane.refresh();\n\t        },\n\n\t        refresh: function() {\n\t            var content = this._content;\n\t            var options = this.options;\n\n\t            content.resizeTo(this.pane.size());\n\t            this.page = content.page;\n\n\t            if (content instanceof ScrollViewContent || content.dataReader.initialFetch) {\n\t                if (options.enablePager) {\n\t                    this.trigger(REFRESH, { pageCount: content.pageCount, page: content.page });\n\t                }\n\t                else {\n\t                    this.trigger(CHANGE, { pageCount: content.pageCount, currentPage: content.page });\n\t                }  \n\t            }\n\t        },\n\n\t        content: function(html) {\n\t           this.element.children().first().html(html);\n\t           this._content._getPages();\n\t           this.pane.refresh();\n\t        },\n\n\t        scrollTo: function(page, instant, silent) {\n\t            this._content.scrollTo(page, instant, silent);\n\t        },\n\n\t        prev: function() {\n\t            var that = this,\n\t                prevPage =  that._content.page - 1;\n\n\t            if (that._content instanceof VirtualScrollViewContent) {\n\t                that._content.paneMoved(RIGHT_SWIPE, undefined, function(eventData) {\n\t                    return that.trigger(CHANGE, eventData);\n\t                });\n\t            } else if (prevPage > -1) {\n\t                that.scrollTo(prevPage);\n\t            }\n\t        },\n\n\t        next: function() {\n\t            var that = this,\n\t                nextPage = that._content.page + 1;\n\n\t            if (that._content instanceof VirtualScrollViewContent) {\n\t                that._content.paneMoved(LEFT_SWIPE, undefined, function(eventData) {\n\t                    return that.trigger(CHANGE, eventData);\n\t                });\n\t            } else if (nextPage < that._content.pageCount) {\n\t                that.scrollTo(nextPage);\n\t            }\n\t        },\n\n\t        setDataSource: function(dataSource) {\n\t            var that = this;\n\t            if (!(this._content instanceof VirtualScrollViewContent)) {\n\t                return;\n\t            }\n\t            // the scrollview should have a ready datasource for MVVM to function properly. But an empty datasource should not empty the element\n\t            var emptyDataSource = !dataSource;\n\t            if (dataSource instanceof DataSource) {\n\t                dataSource.options.pageSize = dataSource.options.pageSize || 1;\n\t                this.dataSource = dataSource = new DataSource(dataSource.options);\n\t            }\n\t            else {\n\t                this.dataSource = DataSource.create(dataSource);\n\t            }\n\n\t            this._content.setDataSource(this.dataSource);\n\n\t            if (this.options.autoBind && !emptyDataSource) {\n\t                this.dataSource.fetch(function() {\n\t                    that._content.dataReader.initialFetch = true;\n\t                    that.scrollTo(that._content.page, true, true);\n\t                    that._content.trigger("reset");\n\t                });\n\t            }\n\t        },\n\n\t        items: function() {\n\t            return this.element.find(".k-" + VIRTUAL_PAGE_CLASS);\n\t        },\n\n\t        _dragStart: function() {\n\t            this._content.forcePageUpdate();\n\t        },\n\n\t        _dragEnd: function(e) {\n\t            var that = this,\n\t                velocity = e.x.velocity,\n\t                velocityThreshold = this.options.velocityThreshold,\n\t                swipeType = NUDGE,\n\t                bounce = abs(velocity) > this.options.bounceVelocityThreshold;\n\n\t            if (velocity > velocityThreshold) {\n\t                swipeType = RIGHT_SWIPE;\n\t            } else if (velocity < -velocityThreshold) {\n\t                swipeType = LEFT_SWIPE;\n\t            }\n\n\t            this._content.paneMoved(swipeType, bounce, function(eventData) {\n\t                return that.trigger(CHANGE, eventData);\n\t            });\n\t        },\n\n\t        _transitionEnd: function() {\n\t            this._content.updatePage();\n\t        },\n\n\t        _initNavigation: function() {\n\t            var that = this;\n\t            var navigationContainer = that._navigationContainer = $("<div class=\'k-scrollview-elements\'></div>");\n\t            var prevArrow = $(\'<a class="k-scrollview-prev"><span class="k-icon k-i-arrowhead-w"></span></a>\').hide();\n\t            var nextArrow = $(\'<a class="k-scrollview-next"><span class="k-icon k-i-arrowhead-e"></span></a>\').hide();\n\n\t            navigationContainer.append(prevArrow);\n\t            navigationContainer.append(nextArrow);\n\t            that.element.append(navigationContainer);\n\t            navigationContainer.on(CLICK, "a.k-scrollview-prev", proxy(that.prev, that));\n\t            navigationContainer.on(CLICK, "a.k-scrollview-next", proxy(that.next, that));\n\t        },\n\n\t        _toggleNavigation: function(e) {\n\t            var page = e.nextPage || e.nextPage === 0 ? e.nextPage : e.currentPage;\n\t            var navigationContainer = this._navigationContainer;\n\t            var prevArrow = navigationContainer.find(">a.k-scrollview-prev");\n\t            var nextArrow = navigationContainer.find(">a.k-scrollview-next");\n\n\t            prevArrow.hide();\n\t            nextArrow.hide();\n\n\t            if (page || page === 0) {\n\t                if (page !== 0) {\n\t                    prevArrow.show();\n\t                }\n\t                if (page != this._content.pageCount - 1) {\n\t                    nextArrow.show();\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    ui.plugin(ScrollView);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.scrollview.js?')},"./node_modules/@progress/kendo-ui/js/kendo.selectable.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.selectable.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1338);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1056:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.userevents */ "./node_modules/@progress/kendo-ui/js/kendo.userevents.js");\n\n/***/ }),\n\n/***/ 1338:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018), __webpack_require__(1056) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "selectable",\n\t    name: "Selectable",\n\t    category: "framework",\n\t    depends: [ "core", "userevents" ],\n\t    advanced: true\n\t};\n\n\t(function ($, undefined) {\n\t    var kendo = window.kendo,\n\t        Widget = kendo.ui.Widget,\n\t        proxy = $.proxy,\n\t        abs = Math.abs,\n\t        ARIASELECTED = "aria-selected",\n\t        SELECTED = "k-state-selected",\n\t        ACTIVE = "k-state-selecting",\n\t        SELECTABLE = "k-selectable",\n\t        CHANGE = "change",\n\t        NS = ".kendoSelectable",\n\t        UNSELECT = "unselect",\n\t        UNSELECTING = "k-state-unselecting",\n\t        INPUTSELECTOR = "input,a,textarea,.k-multiselect-wrap,select,button,.k-button>span,.k-button>img,span.k-icon.k-i-arrow-60-down,span.k-icon.k-i-arrow-60-up,label.k-checkbox-label.k-no-text,.k-icon.k-i-collapse,.k-icon.k-i-expand,span.k-numeric-wrap,.k-focusable",\n\t        msie = kendo.support.browser.msie,\n\t        supportEventDelegation = false;\n\n\t        (function($) {\n\t            (function() {\n\t                $(\'<div class="parent"><span></span></div>\')\n\t                .on("click", ">*", function() {\n\t                    supportEventDelegation = true;\n\t                })\n\t                .find("span")\n\t                .trigger("click")\n\t                .end()\n\t                .off();\n\t            })();\n\t        })($);\n\n\t    var Selectable = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this,\n\t                multiple;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that._marquee = $("<div class=\'k-marquee\'><div class=\'k-marquee-color\'></div></div>");\n\t            that._lastActive = null;\n\t            that.element.addClass(SELECTABLE);\n\n\t            that.relatedTarget = that.options.relatedTarget;\n\n\t            multiple = that.options.multiple;\n\n\t            if (this.options.aria && multiple) {\n\t                that.element.attr("aria-multiselectable", true);\n\t            }\n\n\t            that.userEvents = new kendo.UserEvents(that.element, {\n\t                global: true,\n\t                allowSelection: true,\n\t                filter: (!supportEventDelegation ? "." + SELECTABLE + " " : "") + that.options.filter,\n\t                tap: proxy(that._tap, that),\n\t                touchAction: multiple ? "none" : "pan-x pan-y"\n\t            });\n\n\t            if (multiple) {\n\t                that.userEvents\n\t                   .bind("start", proxy(that._start, that))\n\t                   .bind("move", proxy(that._move, that))\n\t                   .bind("end", proxy(that._end, that))\n\t                   .bind("select", proxy(that._select, that));\n\t            }\n\t        },\n\n\t        events: [CHANGE, UNSELECT],\n\n\t        options: {\n\t            name: "Selectable",\n\t            filter: ">*",\n\t            inputSelectors: INPUTSELECTOR,\n\t            multiple: false,\n\t            relatedTarget: $.noop\n\t        },\n\n\t        _isElement: function(target) {\n\t            var elements = this.element;\n\t            var idx, length = elements.length, result = false;\n\n\t            target = target[0];\n\n\t            for (idx = 0; idx < length; idx ++) {\n\t                if (elements[idx] === target) {\n\t                    result = true;\n\t                    break;\n\t                }\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _tap: function(e) {\n\t            var target = $(e.target),\n\t                that = this,\n\t                ctrlKey = e.event.ctrlKey || e.event.metaKey,\n\t                multiple = that.options.multiple,\n\t                shiftKey = multiple && e.event.shiftKey,\n\t                selected,\n\t                whichCode = e.event.which,\n\t                buttonCode = e.event.button;\n\n\t            //in case of hierarchy or right-click\n\t            if (!that._isElement(target.closest("." + SELECTABLE)) || whichCode && whichCode == 3 || buttonCode && buttonCode == 2) {\n\t                return;\n\t            }\n\n\t            if (!this._allowSelection(e.event.target)) {\n\t                return;\n\t            }\n\n\t            selected = target.hasClass(SELECTED);\n\t            if (!multiple || !ctrlKey) {\n\t                that.clear();\n\t            }\n\n\t            target = target.add(that.relatedTarget(target));\n\n\t            if (shiftKey) {\n\t                that.selectRange(that._firstSelectee(), target, e);\n\t            } else {\n\t                if (selected && ctrlKey) {\n\t                    that._unselect(target);\n\t                    that._notify(CHANGE, e);\n\t                } else {\n\t                    that.value(target, e);\n\t                }\n\n\t                that._lastActive = that._downTarget = target;\n\t            }\n\t        },\n\n\t        _start: function(e) {\n\t            var that = this,\n\t                target = $(e.target),\n\t                selected = target.hasClass(SELECTED),\n\t                currentElement,\n\t                ctrlKey = e.event.ctrlKey || e.event.metaKey;\n\n\t            if (!this._allowSelection(e.event.target)) {\n\t                return;\n\t            }\n\n\t            that._downTarget = target;\n\n\t            //in case of hierarchy\n\t            if (!that._isElement(target.closest("." + SELECTABLE))) {\n\t                that.userEvents.cancel();\n\t                return;\n\t            }\n\n\t            if (that.options.useAllItems) {\n\t                that._items = that.element.find(that.options.filter);\n\t            } else {\n\t                currentElement = target.closest(that.element);\n\t                that._items = currentElement.find(that.options.filter);\n\t            }\n\n\t            e.sender.capture();\n\n\t            that._marquee\n\t                .appendTo(document.body)\n\t                .css({\n\t                    left: e.x.client + 1,\n\t                    top: e.y.client + 1,\n\t                    width: 0,\n\t                    height: 0\n\t                });\n\n\t            if (!ctrlKey) {\n\t                that.clear();\n\t            }\n\n\t            target = target.add(that.relatedTarget(target));\n\t            if (selected) {\n\t                that._selectElement(target, true);\n\t                if (ctrlKey) {\n\t                    target.addClass(UNSELECTING);\n\t                }\n\t            }\n\t        },\n\n\t        _move: function(e) {\n\t            var that = this,\n\t                position = {\n\t                    left: e.x.startLocation > e.x.location ? e.x.location : e.x.startLocation,\n\t                    top: e.y.startLocation > e.y.location ? e.y.location : e.y.startLocation,\n\t                    width: abs(e.x.initialDelta),\n\t                    height: abs(e.y.initialDelta)\n\t                };\n\n\t            that._marquee.css(position);\n\n\t            that._invalidateSelectables(position, (e.event.ctrlKey || e.event.metaKey));\n\n\t            e.preventDefault();\n\t        },\n\n\t        _end: function(e) {\n\t            var that = this;\n\n\t            that._marquee.remove();\n\n\t            that._unselect(that.element\n\t                .find(that.options.filter + "." + UNSELECTING))\n\t                .removeClass(UNSELECTING);\n\n\n\t            var target = that.element.find(that.options.filter + "." + ACTIVE);\n\t            target = target.add(that.relatedTarget(target));\n\n\t            that.value(target, e);\n\t            that._lastActive = that._downTarget;\n\t            that._items = null;\n\t        },\n\n\t        _invalidateSelectables: function(position, ctrlKey) {\n\t            var idx,\n\t                length,\n\t                target = this._downTarget[0],\n\t                items = this._items,\n\t                related,\n\t                toSelect;\n\n\t            for (idx = 0, length = items.length; idx < length; idx ++) {\n\t                toSelect = items.eq(idx);\n\t                related = toSelect.add(this.relatedTarget(toSelect));\n\n\t                if (collision(toSelect, position)) {\n\t                    if(toSelect.hasClass(SELECTED)) {\n\t                        if(ctrlKey && target !== toSelect[0]) {\n\t                            related.removeClass(SELECTED).addClass(UNSELECTING);\n\t                        }\n\t                    } else if (!toSelect.hasClass(ACTIVE) && !toSelect.hasClass(UNSELECTING)) {\n\t                        related.addClass(ACTIVE);\n\t                    }\n\t                } else {\n\t                    if (toSelect.hasClass(ACTIVE)) {\n\t                        related.removeClass(ACTIVE);\n\t                    } else if(ctrlKey && toSelect.hasClass(UNSELECTING)) {\n\t                        related.removeClass(UNSELECTING).addClass(SELECTED);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        value: function(val, e) {\n\t            var that = this,\n\t                selectElement = proxy(that._selectElement, that);\n\n\t            if(val) {\n\t                val.each(function() {\n\t                    selectElement(this);\n\t                });\n\n\t                that._notify(CHANGE, e);\n\t                return;\n\t            }\n\n\t            return that.element.find(that.options.filter + "." + SELECTED);\n\t        },\n\n\t        _firstSelectee: function() {\n\t            var that = this,\n\t                selected;\n\n\t            if(that._lastActive !== null) {\n\t                return that._lastActive;\n\t            }\n\n\t            selected = that.value();\n\t            return selected.length > 0 ?\n\t                    selected[0] :\n\t                    that.element.find(that.options.filter)[0];\n\t        },\n\n\t        _selectElement: function(element, preventNotify) {\n\t            var toSelect = $(element),\n\t                isPrevented =  !preventNotify && this._notify("select", { element: element });\n\n\t            toSelect.removeClass(ACTIVE);\n\t            if(!isPrevented) {\n\t                 toSelect.addClass(SELECTED);\n\n\t                if (this.options.aria) {\n\t                    toSelect.attr(ARIASELECTED, true);\n\t                }\n\t            }\n\t        },\n\n\t        _notify: function(name, args) {\n\t            args = args || { };\n\t            return this.trigger(name, args);\n\t        },\n\n\t        _unselect: function(element) {\n\t            if (this.trigger(UNSELECT, { element: element})) {\n\t                return;\n\t            }\n\n\t            element.removeClass(SELECTED);\n\n\t            if (this.options.aria) {\n\t                element.attr(ARIASELECTED, false);\n\t            }\n\n\t            return element;\n\t        },\n\n\t        _select: function(e) {\n\t            if (this._allowSelection(e.event.target)) {\n\t                if (!msie || (msie && !$(kendo._activeElement()).is(this.options.inputSelectors))) {\n\t                    e.preventDefault();\n\t                }\n\t            }\n\t        },\n\n\t        _allowSelection: function(target) {\n\t            if ($(target).is(this.options.inputSelectors)) {\n\t                this.userEvents.cancel();\n\t                this._downTarget = null;\n\t                return false;\n\t            }\n\n\t            return true;\n\t        },\n\n\t        resetTouchEvents: function() {\n\t            this.userEvents.cancel();\n\t        },\n\n\t        clear: function() {\n\t            var items = this.element.find(this.options.filter + "." + SELECTED);\n\t            this._unselect(items);\n\t        },\n\n\t        selectRange: function(start, end, e) {\n\t            var that = this,\n\t                idx,\n\t                tmp,\n\t                items;\n\n\t            that.clear();\n\n\t            if (that.element.length > 1) {\n\t                items = that.options.continuousItems();\n\t            }\n\n\t            if (!items || !items.length) {\n\t                items = that.element.find(that.options.filter);\n\t            }\n\n\t            start = $.inArray($(start)[0], items);\n\t            end = $.inArray($(end)[0], items);\n\n\t            if (start > end) {\n\t                tmp = start;\n\t                start = end;\n\t                end = tmp;\n\t            }\n\n\t            if (!that.options.useAllItems) {\n\t                end += that.element.length - 1;\n\t            }\n\n\t            for (idx = start; idx <= end; idx ++ ) {\n\t                that._selectElement(items[idx]);\n\t            }\n\n\t            that._notify(CHANGE, e);\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            that.element.off(NS);\n\n\t            that.userEvents.destroy();\n\n\t            that._marquee = that._lastActive = that.element = that.userEvents = null;\n\t        }\n\t    });\n\n\t    Selectable.parseOptions = function(selectable) {\n\t        var asLowerString = typeof selectable === "string" && selectable.toLowerCase();\n\n\t        return {\n\t            multiple: asLowerString && asLowerString.indexOf("multiple") > -1,\n\t            cell: asLowerString && asLowerString.indexOf("cell") > -1\n\t        };\n\t    };\n\n\t    function collision(element, position) {\n\t        if (!element.is(":visible")) {\n\t            return false;\n\t        }\n\n\t        var elementPosition = kendo.getOffset(element),\n\t            right = position.left + position.width,\n\t            bottom = position.top + position.height;\n\n\t        elementPosition.right = elementPosition.left + kendo._outerWidth(element);\n\t        elementPosition.bottom = elementPosition.top + kendo._outerHeight(element);\n\n\t        return !(elementPosition.left > right||\n\t            elementPosition.right < position.left ||\n\t            elementPosition.top > bottom ||\n\t            elementPosition.bottom < position.top);\n\t    }\n\n\t    kendo.ui.plugin(Selectable);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.selectable.js?')}}]);