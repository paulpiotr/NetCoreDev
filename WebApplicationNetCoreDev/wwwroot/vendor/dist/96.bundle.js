(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{"./node_modules/@progress/kendo-ui/js/kendo.gantt.list.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.gantt.list.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1224);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1015:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.dom */ "./node_modules/@progress/kendo-ui/js/kendo.dom.js");\n\n/***/ }),\n\n/***/ 1077:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.draganddrop */ "./node_modules/@progress/kendo-ui/js/kendo.draganddrop.js");\n\n/***/ }),\n\n/***/ 1217:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.editable */ "./node_modules/@progress/kendo-ui/js/kendo.editable.js");\n\n/***/ }),\n\n/***/ 1224:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1015), __webpack_require__(1225), __webpack_require__(1077), __webpack_require__(1226), __webpack_require__(1227), __webpack_require__(1217) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function() {\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "gantt.list",\n\t    name: "Gantt List",\n\t    category: "web",\n\t    description: "The Gantt List",\n\t    depends: [ "dom", "touch", "draganddrop", "columnsorter", "datetimepicker", "editable" ],\n\t    hidden: true\n\t};\n\n\t(function($) {\n\t    var kendo = window.kendo;\n\t    var kendoDom = kendo.dom;\n\t    var kendoDomElement = kendoDom.element;\n\t    var kendoTextElement = kendoDom.text;\n\t    var browser = kendo.support.browser;\n\t    var mobileOS = kendo.support.mobileOS;\n\t    var ui = kendo.ui;\n\t    var Widget = ui.Widget;\n\t    var extend = $.extend;\n\t    var outerWidth = kendo._outerWidth;\n\t    var outerHeight = kendo._outerHeight;\n\t    var map = $.map;\n\t    var isFunction = $.isFunction;\n\t    var oldIE = browser.msie && browser.version < 9;\n\t    var keys = kendo.keys;\n\t    var titleFromField = {\n\t        "title": "Title",\n\t        "start": "Start Time",\n\t        "end": "End Time",\n\t        "percentComplete": "% Done",\n\t        "parentId": "Predecessor ID",\n\t        "id": "ID",\n\t        "orderId": "Order ID"\n\t    };\n\t    var STRING = "string";\n\t    var NS = ".kendoGanttList";\n\t    var CLICK = "click";\n\t    var DOT = ".";\n\t    var SIZE_CALCULATION_TEMPLATE = "<table style=\'visibility: hidden;\'>" +\n\t        "<tbody>" +\n\t            "<tr style=\'height:{0}\'>" +\n\t                "<td>&nbsp;</td>" +\n\t            "</tr>" +\n\t        "</tbody>" +\n\t    "</table>";\n\n\t    var listStyles = {\n\t        wrapper: "k-treelist k-grid k-widget",\n\t        header: "k-header",\n\t        alt: "k-alt",\n\t        rtl: "k-rtl",\n\t        editCell: "k-edit-cell",\n\t        group: "k-treelist-group",\n\t        gridHeader: "k-grid-header",\n\t        gridHeaderWrap: "k-grid-header-wrap",\n\t        gridContent: "k-grid-content",\n\t        gridContentWrap: "k-grid-content",\n\t        selected: "k-state-selected",\n\t        icon: "k-icon",\n\t        iconCollapse: "k-i-collapse",\n\t        iconExpand: "k-i-expand",\n\t        iconHidden: "k-i-none",\n\t        iconPlaceHolder: "k-icon k-i-none",\n\t        input: "k-input",\n\t        textbox: "k-textbox",\n\t        link: "k-link",\n\t        resizeHandle: "k-resize-handle",\n\t        resizeHandleInner: "k-resize-handle-inner",\n\t        dropPositions: "k-i-insert-up k-i-insert-down k-i-plus k-i-insert-middle",\n\t        dropTop: "k-i-insert-up",\n\t        dropBottom: "k-i-insert-down",\n\t        dropAdd: "k-i-plus",\n\t        dropMiddle: "k-i-insert-middle",\n\t        dropDenied: "k-i-cancel",\n\t        dragStatus: "k-drag-status",\n\t        dragClue: "k-drag-clue",\n\t        dragClueText: "k-clue-text"\n\t    };\n\n\t    function createPlaceholders(options) {\n\t        var spans = [];\n\t        var className = options.className;\n\n\t        for (var i = 0, level = options.level; i < level; i++) {\n\t            spans.push(kendoDomElement("span", { className: className }));\n\t        }\n\n\t        return spans;\n\t    }\n\n\t    function blurActiveElement() {\n\t        var activeElement = kendo._activeElement();\n\n\t        if (activeElement && activeElement.nodeName.toLowerCase() !== "body") {\n\t            $(activeElement).blur();\n\t        }\n\t    }\n\n\t    var GanttList = ui.GanttList = Widget.extend({\n\t        init: function(element, options) {\n\t            Widget.fn.init.call(this, element, options);\n\n\t            if (this.options.columns.length === 0) {\n\t                this.options.columns.push("title");\n\t            }\n\n\t            this.dataSource = this.options.dataSource;\n\n\t            this._columns();\n\t            this._layout();\n\t            this._domTrees();\n\t            this._header();\n\t            this._sortable();\n\t            this._editable();\n\t            this._selectable();\n\t            this._draggable();\n\t            this._resizable();\n\t            this._attachEvents();\n\t            this._adjustHeight();\n\n\t            this.bind("render", function() {\n\t                var headerCols;\n\t                var tableCols;\n\n\t                if (this.options.resizable) {\n\t                    headerCols = this.header.find("col");\n\t                    tableCols = this.content.find("col");\n\n\t                    this.header.find("th").not(\':last\').each(function(index) {\n\t                        var width = outerWidth($(this));\n\n\t                        headerCols.eq(index).width(width);\n\t                        tableCols.eq(index).width(width);\n\t                    });\n\n\t                    headerCols.last().css("width", "auto");\n\t                    tableCols.last().css("width", "auto");\n\t                }\n\t            }, true);\n\t        },\n\n\t        _adjustHeight: function() {\n\t            if(this.content){\n\t                this.content.height(this.element.height() - outerHeight(this.header.parent()));\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\n\t            if (this._reorderDraggable) {\n\t                this._reorderDraggable.destroy();\n\t            }\n\n\t            if (this._tableDropArea) {\n\t                this._tableDropArea.destroy();\n\t            }\n\n\t            if (this._contentDropArea) {\n\t                this._contentDropArea.destroy();\n\t            }\n\n\t            if (this._columnResizable) {\n\t                this._columnResizable.destroy();\n\t            }\n\n\t            if (this.touch) {\n\t                this.touch.destroy();\n\t            }\n\n\t            if (this.timer) {\n\t                clearTimeout(this.timer);\n\t            }\n\n\t            this.content.off(NS);\n\t            this.header.find("thead").off(NS);\n\t            this.header.find(DOT + GanttList.link).off(NS);\n\n\t            this.header = null;\n\t            this.content = null;\n\t            this.levels = null;\n\n\t            kendo.destroy(this.element);\n\t        },\n\n\t        options: {\n\t            name: "GanttList",\n\t            selectable: true,\n\t            editable: true,\n\t            resizable: false\n\t        },\n\n\t        _attachEvents: function() {\n\t            var that = this;\n\t            var listStyles = GanttList.styles;\n\n\t            that.content\n\t                .on(CLICK + NS, "td > span." + listStyles.icon + ":not(." + listStyles.iconHidden + ")", function(e) {\n\t                    var element = $(this);\n\t                    var model = that._modelFromElement(element);\n\n\t                    model.set("expanded", !model.get("expanded"));\n\n\t                    e.stopPropagation();\n\t                });\n\t        },\n\n\t        _domTrees: function() {\n\t            this.headerTree = new kendoDom.Tree(this.header[0]);\n\t            this.contentTree = new kendoDom.Tree(this.content[0]);\n\t        },\n\n\t        _columns: function() {\n\t            var columns = this.options.columns;\n\t            var model = function() {\n\t                this.field = "";\n\t                this.title = "";\n\t                this.editable = false;\n\t                this.sortable = false;\n\t            };\n\n\t            this.columns = map(columns, function(column) {\n\t                column = typeof column === STRING ? {\n\t                    field: column, title: titleFromField[column]\n\t                } : column;\n\n\t                return extend(new model(), column);\n\t            });\n\t        },\n\n\t        _layout: function () {\n\t            var that = this;\n\t            var options = this.options;\n\t            var element = this.element;\n\t            var listStyles = GanttList.styles;\n\t            var calculateRowHeight = function() {\n\t                var rowHeight = typeof options.rowHeight === STRING ? options.rowHeight :\n\t                    options.rowHeight + "px";\n\t                var table = $(kendo.format(SIZE_CALCULATION_TEMPLATE, rowHeight));\n\t                var height;\n\n\t                that.content.append(table);\n\t                height = outerHeight(table.find("tr"));\n\t                table.remove();\n\n\t                return height;\n\t            };\n\n\t            element\n\t                .addClass(listStyles.wrapper)\n\t                .append("<div class=\'" + listStyles.gridHeader + "\'><div class=\'" + listStyles.gridHeaderWrap + "\'></div></div>")\n\t                .append("<div class=\'" + listStyles.gridContentWrap + "\'></div>");\n\n\t            this.header = element.find(DOT + listStyles.gridHeaderWrap);\n\t            this.content = element.find(DOT + listStyles.gridContent);\n\n\t            if (options.rowHeight) {\n\t                this._rowHeight = calculateRowHeight();\n\t            }\n\t        },\n\n\t        _header: function() {\n\t            var domTree = this.headerTree;\n\t            var colgroup;\n\t            var thead;\n\t            var table;\n\n\t            colgroup = kendoDomElement("colgroup", null, this._cols());\n\t            thead = kendoDomElement("thead", { "role": "rowgroup" }, [kendoDomElement("tr", { "role": "row" }, this._ths())]);\n\t            table = kendoDomElement("table", {\n\t                "style": { "minWidth": this.options.listWidth + "px" },\n\t                "role": "grid"\n\t            }, [colgroup, thead]);\n\n\t            domTree.render([table]);\n\t        },\n\n\t        _render: function(tasks) {\n\t            var colgroup;\n\t            var tbody;\n\t            var table;\n\t            var tableAttr = {\n\t                "style": { "minWidth": this.options.listWidth + "px" },\n\t                "tabIndex": 0,\n\t                "role": "treegrid"\n\t            };\n\n\t            if (this._rowHeight) {\n\t                tableAttr.style.height = (tasks.length * this._rowHeight) + "px";\n\t            }\n\n\t            this.levels = [{ field: null, value: 0 }];\n\n\t            colgroup = kendoDomElement("colgroup", null, this._cols());\n\t            tbody = kendoDomElement("tbody", { "role": "rowgroup" }, this._trs(tasks));\n\t            table = kendoDomElement("table", tableAttr, [colgroup, tbody]);\n\n\t            this.contentTree.render([table]);\n\t            this.trigger("render");\n\t        },\n\n\t        _ths: function() {\n\t            var columns = this.columns;\n\t            var column;\n\t            var attr;\n\t            var ths = [];\n\n\t            for (var i = 0, length = columns.length; i < length; i++) {\n\t                column = columns[i];\n\t                attr = {\n\t                    "data-field": column.field,\n\t                    "data-title": column.title,\n\t                    className: GanttList.styles.header,\n\t                    "role": "columnheader"\n\t                };\n\n\t                ths.push(kendoDomElement("th", attr, [kendoTextElement(column.title)]));\n\t            }\n\n\t            if (this.options.resizable) {\n\t                ths.push(kendoDomElement("th", {\n\t                    className: GanttList.styles.header,\n\t                    "role": "columnheader"\n\t                }));\n\t            }\n\n\t            return ths;\n\t        },\n\n\t        _cols: function() {\n\t            var columns = this.columns;\n\t            var column;\n\t            var style;\n\t            var width;\n\t            var cols = [];\n\n\t            for (var i = 0, length = columns.length; i < length; i++) {\n\t                column = columns[i];\n\t                width = column.width;\n\n\t                if (width && parseInt(width, 10) !== 0) {\n\t                    style = { style: { width: typeof width === STRING ? width : width + "px" } };\n\t                } else {\n\t                    style = null;\n\t                }\n\n\t                cols.push(kendoDomElement("col", style, []));\n\t            }\n\n\t            if (this.options.resizable) {\n\t                cols.push(kendoDomElement("col", { style: { width: "1px" }}));\n\t            }\n\n\t            return cols;\n\t        },\n\n\t        _trs: function(tasks) {\n\t            var task;\n\t            var rows = [];\n\t            var attr;\n\t            var className = [];\n\t            var level;\n\t            var listStyles = GanttList.styles;\n\n\t            for (var i = 0, length = tasks.length; i < length; i++) {\n\t                task = tasks[i];\n\t                level = this._levels({\n\t                    idx: task.parentId,\n\t                    id: task.id,\n\t                    summary: task.summary\n\t                });\n\n\t                attr = {\n\t                    "data-uid": task.uid,\n\t                    "data-level": level,\n\t                    "role": "row"\n\t                };\n\n\t                if (task.summary) {\n\t                    attr["aria-expanded"] = task.expanded;\n\t                }\n\n\t                if (i % 2 !== 0) {\n\t                    className.push(listStyles.alt);\n\t                }\n\n\t                if (task.summary) {\n\t                    className.push(listStyles.group);\n\t                }\n\n\t                if (className.length) {\n\t                    attr.className = className.join(" ");\n\t                }\n\n\t                rows.push(this._tds({\n\t                    task: task,\n\t                    attr: attr,\n\t                    level: level\n\t                }));\n\n\t                className = [];\n\t            }\n\n\t            return rows;\n\t        },\n\n\t        _tds: function(options) {\n\t            var children = [];\n\t            var columns = this.columns;\n\t            var column;\n\n\t            for (var i = 0, l = columns.length; i < l; i++) {\n\t                column = columns[i];\n\n\t                children.push(this._td({ task: options.task, column: column, level: options.level }));\n\t            }\n\n\t            if (this.options.resizable) {\n\t                children.push(kendoDomElement("td", { "role": "gridcell" }));\n\t            }\n\n\t            return kendoDomElement("tr", options.attr, children);\n\t        },\n\n\t        _td: function(options) {\n\t            var children = [];\n\t            var resourcesField = this.options.resourcesField;\n\t            var listStyles = GanttList.styles;\n\t            var task = options.task;\n\t            var column = options.column;\n\t            var value = task.get(column.field);\n\t            var formatedValue;\n\t            var label;\n\n\t            if (column.field == resourcesField) {\n\t                value = value || [];\n\t                formatedValue = [];\n\t                for (var i = 0; i < value.length; i++) {\n\t                    formatedValue.push(kendo.format("{0} [{1}]", value[i].get("name"), value[i].get("formatedValue")));\n\t                }\n\t                formatedValue = formatedValue.join(", ");\n\t            } else {\n\t                formatedValue = column.format ? kendo.format(column.format, value) : value;\n\t            }\n\n\t            if (column.field === "title") {\n\t                children = createPlaceholders({ level: options.level, className: listStyles.iconPlaceHolder });\n\t                children.push(kendoDomElement("span", {\n\t                    className: listStyles.icon + " " + (task.summary ? (task.expanded ? listStyles.iconCollapse : listStyles.iconExpand)\n\t                        : listStyles.iconHidden)\n\t                }));\n\n\t                label = kendo.format("{0}, {1:P0}", formatedValue, task.percentComplete);\n\t            }\n\n\t            children.push(kendoDomElement("span", { "aria-label": label }, [kendoTextElement(formatedValue)]));\n\n\t            return kendoDomElement("td", { "role": "gridcell" }, children);\n\t        },\n\n\t        _levels: function(options) {\n\t            var levels = this.levels;\n\t            var level;\n\t            var summary = options.summary;\n\t            var idx = options.idx;\n\t            var id = options.id;\n\n\t            for (var i = 0, length = levels.length; i < length; i++) {\n\t                level = levels[i];\n\n\t                if (level.field == idx) {\n\n\t                    if (summary) {\n\t                        levels.push({ field: id, value: level.value + 1 });\n\t                    }\n\n\t                    return level.value;\n\t                }\n\t            }\n\t        },\n\n\t        _sortable: function() {\n\t            var that = this;\n\t            var resourcesField = this.options.resourcesField;\n\t            var columns = this.columns;\n\t            var column;\n\t            var sortableInstance;\n\t            var cells = this.header.find("th[" + kendo.attr("field") + "]");\n\t            var cell;\n\t            var changeHandler = function(e) {\n\t                if (that.dataSource.total() === 0 || that.editable && that.editable.trigger(\'validate\')) {\n\t                    e.preventDefault();\n\t                }\n\t            };\n\n\t            for (var idx = 0, length = cells.length; idx < length; idx++) {\n\t                column = columns[idx];\n\n\t                if (column.sortable && column.field !== resourcesField) {\n\t                    cell = cells.eq(idx);\n\n\t                    sortableInstance = cell.data("kendoColumnSorter");\n\n\t                    if (sortableInstance) {\n\t                        sortableInstance.destroy();\n\t                    }\n\n\t                    cell.attr("data-" + kendo.ns + "field", column.field)\n\t                        .kendoColumnSorter({\n\t                            dataSource: this.dataSource,\n\t                            change: changeHandler\n\t                        });\n\t                }\n\t            }\n\t            cells = null;\n\t        },\n\n\t        _selectable: function() {\n\t            var that = this;\n\t            var selectable = this.options.selectable;\n\n\t            if (selectable) {\n\t                this.content\n\t                   .on(CLICK + NS, "tr", function(e) {\n\t                       var element = $(this);\n\n\t                       if (that.editable) {\n\t                           that.editable.trigger("validate");\n\t                       }\n\n\t                       if (!e.ctrlKey) {\n\t                           that.select(element);\n\t                       } else {\n\t                           that.clearSelection();\n\t                       }\n\t                   });\n\t            }\n\t        },\n\n\t        select: function(value) {\n\t            var element = this.content.find(value);\n\t            var selectedClassName = GanttList.styles.selected;\n\n\t            if (element.length) {\n\t                element\n\t                    .siblings(DOT + selectedClassName)\n\t                    .removeClass(selectedClassName)\n\t                    .attr("aria-selected", false)\n\t                    .end()\n\t                    .addClass(selectedClassName)\n\t                    .attr("aria-selected", true);\n\n\t                this.trigger("change");\n\n\t                return;\n\t            }\n\n\t            return this.content.find(DOT + selectedClassName);\n\t        },\n\n\t        clearSelection: function() {\n\t            var selected = this.select();\n\n\t            if (selected.length) {\n\t                selected.removeClass(GanttList.styles.selected);\n\n\t                this.trigger("change");\n\t            }\n\t        },\n\n\t        _setDataSource: function(dataSource) {\n\t            this.dataSource = dataSource;\n\n\t            // Re-initialize sortable columns\n\t            this._sortable();\n\t        },\n\n\t        _editable: function() {\n\t            var that = this;\n\t            var editable = this.options.editable;\n\t            var listStyles = GanttList.styles;\n\t            var iconSelector = "span." + listStyles.icon + ":not(" + listStyles.iconHidden +")";\n\t            var finishEdit = function() {\n\t                var editable = that.editable;\n\n\t                if (editable) {\n\t                    if (editable.end()) {\n\t                        that._closeCell();\n\t                    } else {\n\t                        editable.trigger("validate");\n\t                    }\n\t                }\n\t            };\n\t            var mousedown = function(e) {\n\t                var currentTarget = $(e.currentTarget);\n\n\t                if (!currentTarget.hasClass(listStyles.editCell)) {\n\t                    blurActiveElement();\n\t                }\n\t            };\n\n\t            if (!editable || editable.update === false) {\n\t                return;\n\t            }\n\n\t            this._startEditHandler = function(e) {\n\t                var td = e.currentTarget ? $(e.currentTarget) : e;\n\t                var column = that._columnFromElement(td);\n\n\t                if (that.editable) {\n\t                    return;\n\t                }\n\n\t                if (column && column.editable) {\n\t                    that._editCell({ cell: td, column: column });\n\t                }\n\t            };\n\n\t            that.content\n\t                .on("focusin" + NS, function() {\n\t                    clearTimeout(that.timer);\n\t                    that.timer = null;\n\t                })\n\t                .on("focusout" + NS, function() {\n\t                    that.timer = setTimeout(finishEdit, 1);\n\t                })\n\t                .on("keydown" + NS, function(e) {\n\t                    if (e.keyCode === keys.ENTER) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .on("keyup" + NS, function(e) {\n\t                    var key = e.keyCode;\n\t                    var cell;\n\t                    var model;\n\n\t                    switch (key) {\n\t                        case keys.ENTER:\n\t                            blurActiveElement();\n\t                            finishEdit();\n\t                            break;\n\t                        case keys.ESC:\n\t                            if (that.editable) {\n\t                                cell = that._editableContainer;\n\t                                model = that._modelFromElement(cell);\n\t                                if (!that.trigger("cancel", { model: model, cell: cell })) {\n\t                                    that._closeCell(true);\n\t                                }\n\t                            }\n\t                            break;\n\t                    }\n\t                });\n\n\t            if (!mobileOS) {\n\t                that.content\n\t                    .on("mousedown" + NS, "td", function(e) {\n\t                        mousedown(e);\n\t                    })\n\t                    .on("dblclick" + NS, "td", function(e) {\n\t                        if (!$(e.target).is(iconSelector)) {\n\t                            that._startEditHandler(e);\n\t                        }\n\t                    });\n\t            } else {\n\t                that.touch = that.content\n\t                    .kendoTouch({\n\t                        filter: "td",\n\t                        touchstart: function(e) {\n\t                            mousedown(e.touch);\n\t                        },\n\t                        doubletap: function(e) {\n\t                            if (!$(e.touch.initialTouch).is(iconSelector)) {\n\t                                that._startEditHandler(e.touch);\n\t                            }\n\t                        }\n\t                    }).data("kendoTouch");\n\t            }\n\t        },\n\n\t        _editCell: function(options) {\n\t            var resourcesField = this.options.resourcesField;\n\t            var listStyles = GanttList.styles;\n\t            var cell = options.cell;\n\t            var column = options.column;\n\t            var model = this._modelFromElement(cell);\n\t            var modelCopy = this.dataSource._createNewModel(model.toJSON());\n\t            var field = modelCopy.fields[column.field] || modelCopy[column.field];\n\t            var validation = field.validation;\n\t            var DATATYPE = kendo.attr("type");\n\t            var BINDING = kendo.attr("bind");\n\t            var FORMAT = kendo.attr("format");\n\t            var attr = {\n\t                "name": column.field,\n\t                "required": field.validation ?\n\t                    field.validation.required === true : false\n\t            };\n\t            var editor;\n\n\t            if (column.field === resourcesField) {\n\t                column.editor(cell, modelCopy);\n\t                return;\n\t            }\n\n\t            this._editableContent = cell.children().detach();\n\t            this._editableContainer = cell;\n\n\t            cell.data("modelCopy", modelCopy);\n\n\t            if ((field.type === "date" || $.type(field) === "date") &&\n\t                (!column.format || /H|m|s|F|g|u/.test(column.format))) {\n\n\t                attr[BINDING] = "value:" + column.field;\n\t                attr[DATATYPE] = "date";\n\n\t                if (column.format) {\n\t                    attr[FORMAT] = kendo._extractFormat(column.format);\n\t                }\n\n\t                editor = function(container, options) {\n\t                    $(\'<input type="text"/>\').attr(attr)\n\t                        .appendTo(container).kendoDateTimePicker({ format: options.format });\n\t                };\n\t            }\n\n\t            this.editable = cell\n\t                .addClass(listStyles.editCell)\n\t                .kendoEditable({\n\t                    fields: {\n\t                        field: column.field,\n\t                        format: column.format,\n\t                        editor: column.editor || editor\n\t                    },\n\t                    model: modelCopy,\n\t                    clearContainer: false\n\t                }).data("kendoEditable");\n\n\t            if (validation && validation.dateCompare &&\n\t                isFunction(validation.dateCompare) && validation.message) {\n\t                $(\'<span \' + kendo.attr("for") + \'="\' + column.field + \'" class="k-invalid-msg"/>\')\n\t                    .hide()\n\t                    .appendTo(cell);\n\n\t                cell.find(\'[name=\' + column.field + \']\')\n\t                    .attr(kendo.attr("dateCompare-msg"), validation.message);\n\t            }\n\n\t            this.editable.bind("validate", function(e) {\n\t                var focusable = this.element.find(":kendoFocusable:first").focus();\n\n\t                if (oldIE) {\n\t                    focusable.focus();\n\t                }\n\n\t                e.preventDefault();\n\t            });\n\n\t            if (this.trigger("edit", { model: model, cell: cell })) {\n\t                this._closeCell(true);\n\t            }\n\t        },\n\n\t        _closeCell: function(cancelUpdate) {\n\t            var listStyles = GanttList.styles;\n\t            var cell = this._editableContainer;\n\t            var model = this._modelFromElement(cell);\n\t            var column = this._columnFromElement(cell);\n\t            var field = column.field;\n\t            var copy = cell.data("modelCopy");\n\t            var taskInfo = {};\n\n\t            taskInfo[field] = copy.get(field);\n\n\t            cell.empty()\n\t                .removeData("modelCopy")\n\t                .removeClass(listStyles.editCell)\n\t                .append(this._editableContent);\n\n\t            this.editable.unbind();\n\t            this.editable.destroy();\n\t            this.editable = null;\n\n\t            this._editableContainer = null;\n\t            this._editableContent = null;\n\n\t            if (!cancelUpdate) {\n\t                if (field === "start") {\n\t                    taskInfo.end = new Date(taskInfo.start.getTime() + model.duration());\n\t                }\n\n\t                this.trigger("update", { task: model, updateInfo: taskInfo });\n\t            }\n\t        },\n\n\t        _draggable: function() {\n\t            var that = this;\n\t            var draggedTask = null;\n\t            var dropAllowed = true;\n\t            var dropTarget;\n\t            var listStyles = GanttList.styles;\n\t            var isRtl = kendo.support.isRtl(this.element);\n\t            var selector = \'tr[\' + kendo.attr("level") + \' = 0]:last\';\n\t            var action = {};\n\t            var editable = this.options.editable;\n\t            var clear = function() {\n\t                draggedTask = null;\n\t                dropTarget = null;\n\t                dropAllowed = true;\n\t                action = {};\n\t            };\n\t            var allowDrop = function(task) {\n\t                var parent = task;\n\n\t                while (parent) {\n\t                    if (draggedTask.get("id") === parent.get("id")) {\n\t                        dropAllowed = false;\n\t                        break;\n\t                    }\n\t                    parent = that.dataSource.taskParent(parent);\n\t                }\n\t            };\n\t            var defineLimits = function() {\n\t                var height = $(dropTarget).height();\n\t                var offsetTop = kendo.getOffset(dropTarget).top;\n\n\t                extend(dropTarget, {\n\t                    beforeLimit: offsetTop + height * 0.25,\n\t                    afterLimit: offsetTop + height * 0.75\n\t                });\n\t            };\n\t            var defineAction = function(coordinate) {\n\t                if (!dropTarget) {\n\t                    return;\n\t                }\n\n\t                var location = coordinate.location;\n\t                var className = listStyles.dropAdd;\n\t                var command = "add";\n\t                var level = parseInt(dropTarget.attr(kendo.attr("level")), 10);\n\t                var sibling;\n\n\t                if (location <= dropTarget.beforeLimit) {\n\t                    sibling = dropTarget.prev();\n\t                    className = listStyles.dropTop;\n\t                    command = "insert-before";\n\t                } else if (location >= dropTarget.afterLimit) {\n\t                    sibling = dropTarget.next();\n\t                    className = listStyles.dropBottom;\n\t                    command = "insert-after";\n\t                }\n\n\t                if (sibling && parseInt(sibling.attr(kendo.attr("level")), 10) === level) {\n\t                    className = listStyles.dropMiddle;\n\t                }\n\n\t                action.className = className;\n\t                action.command = command;\n\t            };\n\t            var status = function() {\n\t                return that._reorderDraggable\n\t                            .hint\n\t                            .children(DOT + listStyles.dragStatus)\n\t                            .removeClass(listStyles.dropPositions);\n\t            };\n\n\t            if (!editable || editable.reorder === false || editable.update === false) {\n\t                return;\n\t            }\n\n\t            this._reorderDraggable = this.content\n\t                .kendoDraggable({\n\t                    distance: 10,\n\t                    holdToDrag: mobileOS,\n\t                    group: "listGroup",\n\t                    filter: "tr[data-uid]",\n\t                    ignore: DOT + listStyles.input + ", " + DOT + listStyles.textbox,\n\t                    hint: function(target) {\n\t                        return $(\'<div class="\' + listStyles.header + " " + listStyles.dragClue + \'"/>\')\n\t                                .css({\n\t                                    width: 300,\n\t                                    paddingLeft: target.css("paddingLeft"),\n\t                                    paddingRight: target.css("paddingRight"),\n\t                                    lineHeight: target.height() + "px",\n\t                                    paddingTop: target.css("paddingTop"),\n\t                                    paddingBottom: target.css("paddingBottom")\n\t                                })\n\t                                .append(\'<span class="\' + listStyles.icon + " " + listStyles.dragStatus +\'" ></span><span class="\' + listStyles.dragClueText + \'"></span>\');\n\t                    },\n\t                    cursorOffset: { top: -20, left: 0 },\n\t                    container: this.content,\n\t                    "dragstart": function(e) {\n\t                        var editable = that.editable;\n\n\t                        if (editable && editable.reorder !== false && editable.trigger("validate")) {\n\t                            e.preventDefault();\n\t                            return;\n\t                        }\n\t                        draggedTask = that._modelFromElement(e.currentTarget);\n\t                        this.hint.children(DOT + listStyles.dragClueText)\n\t                            .text(draggedTask.get("title"));\n\n\t                        if (isRtl) {\n\t                            this.hint.addClass(listStyles.rtl);\n\t                        }\n\t                    },\n\t                    "drag": function(e) {\n\t                        if (dropAllowed) {\n\t                            defineAction(e.y);\n\t                            status().addClass(action.className);\n\t                        }\n\t                    },\n\t                    "dragend": function() {\n\t                        clear();\n\t                    },\n\t                    "dragcancel": function() {\n\t                        clear();\n\t                    }\n\t                }).data("kendoDraggable");\n\n\t            this._tableDropArea = this.content\n\t                .kendoDropTargetArea({\n\t                    distance: 0,\n\t                    group: "listGroup",\n\t                    filter: "tr[data-uid]",\n\t                    "dragenter": function(e) {\n\t                        dropTarget = e.dropTarget;\n\t                        allowDrop(that._modelFromElement(dropTarget));\n\t                        defineLimits();\n\t                        status().toggleClass(listStyles.dropDenied, !dropAllowed);\n\t                    },\n\t                    "dragleave": function() {\n\t                        dropAllowed = true;\n\t                        status();\n\t                    },\n\t                    "drop": function() {\n\t                        var target = that._modelFromElement(dropTarget);\n\t                        var orderId = target.orderId;\n\t                        var taskInfo = {\n\t                            parentId: target.parentId\n\t                        };\n\n\t                        if (dropAllowed) {\n\t                            switch (action.command) {\n\t                                case "add":\n\t                                    taskInfo.parentId = target.id;\n\t                                    break;\n\t                                case "insert-before":\n\t                                    if (target.parentId === draggedTask.parentId &&\n\t                                        target.orderId > draggedTask.orderId) {\n\t                                            taskInfo.orderId = orderId - 1;\n\t                                    } else {\n\t                                        taskInfo.orderId = orderId;\n\t                                    }\n\t                                    break;\n\t                                case "insert-after":\n\t                                    if (target.parentId === draggedTask.parentId &&\n\t                                        target.orderId > draggedTask.orderId) {\n\t                                            taskInfo.orderId = orderId;\n\t                                    } else {\n\t                                        taskInfo.orderId = orderId + 1;\n\t                                    }\n\t                                    break;\n\t                            }\n\t                            that.trigger("update", {\n\t                                task: draggedTask,\n\t                                updateInfo: taskInfo\n\t                            });\n\t                        }\n\t                    }\n\t                }).data("kendoDropTargetArea");\n\n\t            this._contentDropArea = this.element\n\t               .kendoDropTargetArea({\n\t                   distance: 0,\n\t                   group: "listGroup",\n\t                   filter: DOT + listStyles.gridContent,\n\t                   "drop": function() {\n\t                       var target = that._modelFromElement(that.content.find(selector));\n\t                       var orderId = target.orderId;\n\t                       var taskInfo = {\n\t                           parentId: null,\n\t                           orderId: draggedTask.parentId !== null ?\n\t                                        orderId + 1 : orderId\n\t                       };\n\n\t                        that.trigger("update", {\n\t                            task: draggedTask,\n\t                            updateInfo: taskInfo\n\t                        });\n\t                   }\n\t               }).data("kendoDropTargetArea");\n\t        },\n\n\t        _resizable: function() {\n\t            var that = this;\n\t            var listStyles = GanttList.styles;\n\t            var positionResizeHandle = function(e) {\n\t                var th = $(e.currentTarget);\n\t                var resizeHandle = that.resizeHandle;\n\t                var position = th.position();\n\t                var left = position.left;\n\t                var cellWidth = outerWidth(th);\n\t                var container = th.closest("div");\n\t                var clientX = e.clientX + $(window).scrollLeft();\n\t                var indicatorWidth = that.options.columnResizeHandleWidth;\n\n\t                left += container.scrollLeft();\n\n\t                if (!resizeHandle) {\n\t                    resizeHandle = that.resizeHandle = $(\n\t                        \'<div class="\' + listStyles.resizeHandle + \'"><div class="\' + listStyles.resizeHandleInner + \'" ></div></div>\'\n\t                    );\n\t                }\n\n\t                var cellOffset = th.offset().left + cellWidth;\n\t                var show = clientX > cellOffset - indicatorWidth && clientX < cellOffset + indicatorWidth;\n\n\t                if (!show) {\n\t                    resizeHandle.hide();\n\t                    return;\n\t                }\n\n\t                container.append(resizeHandle);\n\n\t                resizeHandle\n\t                    .show()\n\t                    .css({\n\t                        top: position.top,\n\t                        left: left + cellWidth - indicatorWidth - 1,\n\t                        height: outerHeight(th),\n\t                        width: indicatorWidth * 3\n\t                    })\n\t                    .data("th", th);\n\t            };\n\n\t            if (!this.options.resizable) {\n\t                return;\n\t            }\n\n\t            if (this._columnResizable) {\n\t                this._columnResizable.destroy();\n\t            }\n\n\t            this.header.find("thead")\n\t               .on("mousemove" + NS, "th", positionResizeHandle);\n\n\t            this._columnResizable = this.header.kendoResizable({\n\t                handle: DOT + listStyles.resizeHandle,\n\t                start: function(e) {\n\t                    var th = $(e.currentTarget).data("th");\n\t                    var colSelector = "col:eq(" + th.index() + ")";\n\t                    var header = that.header.find("table");\n\t                    var contentTable = that.content.find("table");\n\n\t                    that.element.addClass("k-grid-column-resizing");\n\n\t                    this.col = contentTable.children("colgroup").find(colSelector)\n\t                          .add(header.find(colSelector));\n\n\t                    this.th = th;\n\t                    this.startLocation = e.x.location;\n\t                    this.columnWidth = outerWidth(th);\n\t                    this.table = header.add(contentTable);\n\t                    this.totalWidth = (this.table.width() - outerWidth(header.find("th:last")));\n\t                },\n\t                resize: function(e) {\n\t                    var minColumnWidth = 11;\n\t                    var delta = e.x.location - this.startLocation;\n\n\t                    if (this.columnWidth + delta < minColumnWidth) {\n\t                        delta = minColumnWidth - this.columnWidth;\n\t                    }\n\n\t                    this.table.css({\n\t                        "minWidth": (this.totalWidth + delta)\n\t                    });\n\t                    this.col.width(this.columnWidth + delta);\n\t                },\n\t                resizeend: function() {\n\t                    that.element.removeClass("k-grid-column-resizing");\n\n\t                    var oldWidth = Math.floor(this.columnWidth);\n\t                    var newWidth = Math.floor(outerWidth(this.th));\n\t                    var column = that.columns[this.th.index()];\n\n\t                    that.trigger("columnResize", {\n\t                        column: column,\n\t                        oldWidth: oldWidth,\n\t                        newWidth: newWidth\n\t                    });\n\n\t                    this.table = this.col = this.th = null;\n\t                }\n\t            }).data("kendoResizable");\n\t        },\n\n\t        _modelFromElement: function(element) {\n\t            var row = element.closest("tr");\n\t            var model = this.dataSource.getByUid(row.attr(kendo.attr("uid")));\n\n\t            return model;\n\t        },\n\n\t        _columnFromElement: function(element) {\n\t            var td = element.closest("td");\n\t            var tr = td.parent();\n\t            var idx = tr.children().index(td);\n\n\t            return this.columns[idx];\n\t        }\n\t    });\n\n\t    extend(true, ui.GanttList, { styles: listStyles });\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1225:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.touch */ "./node_modules/@progress/kendo-ui/js/kendo.touch.js");\n\n/***/ }),\n\n/***/ 1226:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.columnsorter */ "./node_modules/@progress/kendo-ui/js/kendo.columnsorter.js");\n\n/***/ }),\n\n/***/ 1227:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.datetimepicker */ "./node_modules/@progress/kendo-ui/js/kendo.datetimepicker.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.gantt.list.js?')}}]);