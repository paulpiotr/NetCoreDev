(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{"./node_modules/@progress/kendo-ui/js/kendo.multicolumncombobox.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.multicolumncombobox.js ***!
  \*************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1289);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1021:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.combobox */ "./node_modules/@progress/kendo-ui/js/kendo.combobox.js");\n\n/***/ }),\n\n/***/ 1289:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1021) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "multicolumncombobox",\n\t    name: "MultiColumnComboBox",\n\t    category: "web",\n\t    description: "The MultiColumnComboBox widget allows the selection from pre-defined values or entering a new value where the list popup is rendered in table layout.",\n\t    depends: [ "combobox" ],\n\t    features: [ {\n\t        id: "mobile-scroller",\n\t        name: "Mobile scroller",\n\t        description: "Support for kinetic scrolling in mobile device",\n\t        depends: [ "mobile.scroller" ]\n\t    }, {\n\t        id: "virtualization",\n\t        name: "VirtualList",\n\t        description: "Support for virtualization",\n\t        depends: [ "virtuallist" ]\n\t    } ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        ComboBox = ui.ComboBox,\n\t        percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n\t        MCCOMBOBOX = "k-dropdowngrid",\n\t        POPUPCLASS = "k-dropdowngrid-popup k-popup-flush";\n\n\t    var MultiColumnComboBox = ComboBox.extend({\n\t        init: function(element, options) {\n\t            ComboBox.fn.init.call(this, element, options);\n\t            this.list.addClass(POPUPCLASS);\n\n\t            if (this._allColumnsWidthsAreSet(this.options)) {\n\t                this.list.width(this._calculateDropDownWidth(this.options));\n\t            } else if (this.options.dropDownWidth) {\n\t                this.list.width(this.options.dropDownWidth);\n\t            }\n\t        },\n\n\t        options: {\n\t            name: "MultiColumnComboBox",\n\t            ns: ".kendoMultiColumnComboBox",\n\t            columns: [],\n\t            dropDownWidth: null,\n\t            filterFields: []\n\t        },\n\n\t        setOptions: function(options) {\n\t            ComboBox.fn.setOptions.call(this, options);\n\t            if (this._allColumnsWidthsAreSet(options)) {\n\t                this.list.width(this._calculateDropDownWidth(options));\n\t            } else if (this.options.dropDownWidth) {\n\t                this.list.width(this.options.dropDownWidth);\n\t            }\n\t        },\n\n\t        _allColumnsWidthsAreSet: function (options) {\n\t            var columns = options.columns;\n\n\t            if (!columns || !columns.length) {\n\t                return false;\n\t            }\n\n\t            for (var i = 0; i < columns.length; i++) {\n\t                var currentWidth = columns[i].width;\n\t                if(!currentWidth  || isNaN(parseInt(currentWidth, 10)) || percentageUnitsRegex.test(currentWidth)){\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        },\n\n\t        _calculateDropDownWidth: function (options) {\n\t            var columns = options.columns;\n\t            var totalWidth = kendo.support.scrollbar();\n\n\t            for (var i = 0; i < columns.length; i++) {\n\t                var currentWidth = columns[i].width;\n\t                totalWidth = totalWidth + parseInt(currentWidth, 10);\n\t            }\n\n\t            return totalWidth;\n\t        },\n\n\t        _wrapper: function() {\n\t            ComboBox.fn._wrapper.call(this);\n\t            this.wrapper.addClass(MCCOMBOBOX);\n\t        }\n\t    });\n\n\t    ui.plugin(MultiColumnComboBox);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.multicolumncombobox.js?')},"./node_modules/@progress/kendo-ui/js/kendo.multiselect.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.multiselect.js ***!
  \*****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1290);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1036:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.list */ "./node_modules/@progress/kendo-ui/js/kendo.list.js");\n\n/***/ }),\n\n/***/ 1037:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.mobile.scroller */ "./node_modules/@progress/kendo-ui/js/kendo.mobile.scroller.js");\n\n/***/ }),\n\n/***/ 1038:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.virtuallist */ "./node_modules/@progress/kendo-ui/js/kendo.virtuallist.js");\n\n/***/ }),\n\n/***/ 1290:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1036), __webpack_require__(1037), __webpack_require__(1038) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "multiselect",\n\t    name: "MultiSelect",\n\t    category: "web",\n\t    description: "The MultiSelect widget allows the selection from pre-defined values.",\n\t    depends: [ "list" ],\n\t    features: [ {\n\t        id: "mobile-scroller",\n\t        name: "Mobile scroller",\n\t        description: "Support for kinetic scrolling in mobile device",\n\t        depends: [ "mobile.scroller" ]\n\t    }, {\n\t        id: "virtualization",\n\t        name: "VirtualList",\n\t        description: "Support for virtualization",\n\t        depends: [ "virtuallist" ]\n\t    } ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        List = ui.List,\n\t        keys = $.extend({ A: 65 }, kendo.keys),\n\t        activeElement = kendo._activeElement,\n\t        ObservableArray = kendo.data.ObservableArray,\n\t        proxy = $.proxy,\n\t        ID = "id",\n\t        LI = "li",\n\t        ACCEPT = "accept",\n\t        FILTER = "filter",\n\t        REBIND = "rebind",\n\t        OPEN = "open",\n\t        CLOSE = "close",\n\t        CHANGE = "change",\n\t        PROGRESS = "progress",\n\t        SELECT = "select",\n\t        DESELECT = "deselect",\n\t        ARIA_DISABLED = "aria-disabled",\n\t        FOCUSEDCLASS = "k-state-focused",\n\t        SELECTEDCLASS = "k-state-selected",\n\t        HIDDENCLASS = "k-hidden",\n\t        HOVERCLASS = "k-state-hover",\n\t        STATEDISABLED = "k-state-disabled",\n\t        NOCLICKCLASS = "k-no-click",\n\t        DISABLED = "disabled",\n\t        READONLY = "readonly",\n\t        AUTOCOMPLETEVALUE = "off",\n\t        ns = ".kendoMultiSelect",\n\t        CLICK = "click" + ns,\n\t        KEYDOWN = "keydown" + ns,\n\t        MOUSEENTER = "mouseenter" + ns,\n\t        MOUSELEAVE = "mouseleave" + ns,\n\t        HOVEREVENTS = MOUSEENTER + " " + MOUSELEAVE,\n\t        quotRegExp = /"/g,\n\t        isArray = $.isArray,\n\t        styles = ["font-family",\n\t                  "font-size",\n\t                  "font-stretch",\n\t                  "font-style",\n\t                  "font-weight",\n\t                  "letter-spacing",\n\t                  "text-transform",\n\t                  "line-height"];\n\n\t    var MultiSelect = List.extend({\n\t        init: function(element, options) {\n\t            var that = this, id, disabled;\n\n\t            that.ns = ns;\n\t            List.fn.init.call(that, element, options);\n\n\t            that._optionsMap = {};\n\t            that._customOptions = {};\n\n\t            that._wrapper();\n\t            that._tagList();\n\t            that._input();\n\t            that._textContainer();\n\t            that._loader();\n\t            that._clearButton();\n\n\t            that._tabindex(that.input);\n\n\t            element = that.element.attr("multiple", "multiple").hide();\n\t            options = that.options;\n\n\t            if (!options.placeholder) {\n\t                options.placeholder = element.data("placeholder");\n\t            }\n\n\t            id = element.attr(ID);\n\n\t            if (id) {\n\t                that._tagID = id + "_tag_active";\n\n\t                id = id + "_taglist";\n\t                that.tagList.attr(ID, id);\n\n\t                that.input.attr("aria-describedby", id);\n\t            }\n\n\t            that._initialOpen = true;\n\t            that._ariaLabel();\n\t            that._ariaSetLive();\n\t            that._dataSource();\n\t            that._ignoreCase();\n\t            that._popup();\n\n\t            that._tagTemplate();\n\t            that.requireValueMapper(that.options);\n\t            that._initList();\n\n\t            that._reset();\n\t            that._enable();\n\t            that._placeholder();\n\n\t            if (options.autoBind) {\n\t                that.dataSource.fetch();\n\t            } else if (options.value) {\n\t                that._preselect(options.value);\n\t            }\n\n\t            disabled = $(that.element).parents("fieldset").is(\':disabled\');\n\n\t            if (disabled) {\n\t                that.enable(false);\n\t            }\n\n\t            that._ariaSetSize(that.value().length);\n\n\t            kendo.notify(that);\n\t            that._toggleCloseVisibility();\n\t        },\n\n\t        options: {\n\t            name: "MultiSelect",\n\t            tagMode: "multiple",\n\t            enabled: true,\n\t            autoBind: true,\n\t            autoClose: true,\n\t            highlightFirst: true,\n\t            dataTextField: "",\n\t            dataValueField: "",\n\t            filter: "startswith",\n\t            ignoreCase: true,\n\t            minLength: 1,\n\t            messages: {\n\t                "singleTag": "item(s) selected",\n\t                "clear": "clear",\n\t                "deleteTag": "delete",\n\t                "noData": "No data found."\n\t            },\n\t            enforceMinLength: false,\n\t            delay: 100,\n\t            value: null,\n\t            maxSelectedItems: null,\n\t            placeholder: "",\n\t            height: 200,\n\t            animation: {},\n\t            virtual: false,\n\t            itemTemplate: "",\n\t            tagTemplate: "",\n\t            groupTemplate: "#:data#",\n\t            fixedGroupTemplate: "#:data#",\n\t            clearButton: true,\n\t            autoWidth: false,\n\t            popup: null\n\t        },\n\n\t        events: [\n\t            OPEN,\n\t            CLOSE,\n\t            CHANGE,\n\t            SELECT,\n\t            DESELECT,\n\t            "filtering",\n\t            "dataBinding",\n\t            "dataBound"\n\t        ],\n\n\t        setDataSource: function(dataSource) {\n\t            this.options.dataSource = dataSource;\n\n\t            this._state = "";\n\t            this._dataSource();\n\n\t            this.persistTagList = false;\n\t            this.listView.setDataSource(this.dataSource);\n\n\t            if (this.options.autoBind) {\n\t                this.dataSource.fetch();\n\t            }\n\t        },\n\n\t        setOptions: function(options) {\n\t            var listOptions = this._listOptions(options);\n\n\t            List.fn.setOptions.call(this, options);\n\n\t            this.listView.setOptions(listOptions);\n\n\t            this._accessors();\n\t            this._aria(this.tagList.attr(ID));\n\t            this._tagTemplate();\n\t            this._placeholder();\n\t            this._clearButton();\n\t        },\n\n\t        currentTag: function(candidate) {\n\t            var that = this;\n\n\t            if (candidate !== undefined) {\n\t                if (that._currentTag) {\n\t                    that._currentTag\n\t                        .removeClass(FOCUSEDCLASS)\n\t                        .removeAttr(ID);\n\n\t                    that._currentTag.find(".k-select").attr("aria-hidden", true);\n\n\t                    that.input.removeAttr("aria-activedescendant");\n\t                }\n\n\t                if (candidate) {\n\t                    candidate.addClass(FOCUSEDCLASS).attr(ID, that._tagID);\n\n\t                    candidate.find(".k-select").removeAttr("aria-hidden");\n\n\t                    that.input.attr("aria-activedescendant", that._tagID);\n\t                }\n\n\t                that._currentTag = candidate;\n\t            } else {\n\t                return that._currentTag;\n\t            }\n\t        },\n\n\t        dataItems: function() {\n\t            return this.listView.selectedDataItems();\n\t        },\n\n\t        destroy: function() {\n\t            var that = this,\n\t                ns = that.ns;\n\n\t            clearTimeout(that._busy);\n\t            clearTimeout(that._typingTimeout);\n\n\t            that.wrapper.off(ns);\n\t            that.tagList.off(ns);\n\t            that.input.off(ns);\n\t            that._clear.off(ns);\n\n\t            List.fn.destroy.call(that);\n\t        },\n\n\t        _activateItem: function() {\n\t            if (this.popup.visible()) {\n\t                List.fn._activateItem.call(this);\n\t            }\n\t            this.currentTag(null);\n\t        },\n\n\t        _listOptions: function(options) {\n\t            var that = this;\n\t            var listOptions = List.fn._listOptions.call(that, $.extend(options, {\n\t                selectedItemChange: proxy(that._selectedItemChange, that),\n\t                selectable: "multiple"\n\t            }));\n\n\t            var itemTemplate = this.options.itemTemplate || this.options.template;\n\t            var template = listOptions.itemTemplate || itemTemplate || listOptions.template;\n\n\t            if (!template) {\n\t                template = "#:" + kendo.expr(listOptions.dataTextField, "data") + "#";\n\t            }\n\n\t            listOptions.template = template;\n\n\t            return listOptions;\n\t        },\n\n\t        _setListValue: function() {\n\t            List.fn._setListValue.call(this, this._initialValues.slice(0));\n\t        },\n\n\t        _listChange: function(e) {\n\t            var data = this.dataSource.flatView();\n\t            var optionsMap = this._optionsMap;\n\t            var valueGetter = this._value;\n\n\t            if (this._state === REBIND) {\n\t                this._state = "";\n\t            }\n\n\t            for (var i = 0; i < e.added.length; i++) {\n\t                if (optionsMap[valueGetter(e.added[i].dataItem)] === undefined) {\n\t                    this._render(data); //render select element <option> tags if the item does not persist in the current data view\n\t                    break;\n\t                }\n\t            }\n\n\t            this._selectValue(e.added, e.removed);\n\t        },\n\n\t        _selectedItemChange: function(e) {\n\t            var items = e.items;\n\t            var context;\n\t            var idx;\n\n\t            for (idx = 0; idx < items.length; idx++) {\n\t                context = items[idx];\n\t                this.tagList.children().eq(context.index).children("span:first").html(this.tagTextTemplate(context.item));\n\t            }\n\t        },\n\n\t        _wrapperMousedown: function(e) {\n\t            var that = this;\n\t            var notInput = e.target.nodeName.toLowerCase() !== "input";\n\t            var target = $(e.target);\n\t            var closeButton = target.hasClass("k-select") || target.hasClass("k-icon");\n\n\t            if (closeButton) {\n\t                closeButton = !target.closest(".k-select").children(".k-i-arrow-60-down").length;\n\t            }\n\n\t            if (notInput && !(closeButton && kendo.support.mobileOS) && e.cancelable) {\n\t                e.preventDefault();\n\t            }\n\n\t            if (!closeButton) {\n\t                if (that.input[0] !== activeElement() && notInput) {\n\t                    that.input.focus();\n\t                }\n\n\t                if (that.options.minLength === 1) {\n\t                    that.open();\n\t                }\n\t            }\n\n\t        },\n\n\t        _inputFocus: function() {\n\t            this._placeholder(false);\n\t            this.wrapper.addClass(FOCUSEDCLASS);\n\t        },\n\n\t        _inputFocusout: function() {\n\t            var that = this;\n\n\t            clearTimeout(that._typingTimeout);\n\n\t            that.wrapper.removeClass(FOCUSEDCLASS);\n\n\t            that._placeholder(!that.listView.selectedDataItems()[0], true);\n\t            that.close();\n\n\t            if (that._state === FILTER) {\n\t                that._state = ACCEPT;\n\t                that.listView.skipUpdate(true);\n\t            }\n\n\t            if(that.listView.bound() && that.listView.isFiltered()) {\n\t                that.persistTagList = true;\n\t                that._clearFilter();\n\t            }\n\n\t            that.element.blur();\n\t        },\n\n\t        _removeTag: function(tag, shouldTrigger) {\n\t            var that = this;\n\t            var state = that._state;\n\t            var position = tag.index();\n\t            var listView = that.listView;\n\t            var value = listView.value()[position];\n\t            var dataItem = that.listView.selectedDataItems()[position];\n\t            var customIndex = that._customOptions[value];\n\t            var listViewChildren = listView.element[0].children;\n\t            var option;\n\t            var listViewChild;\n\n\t            if (that.trigger(DESELECT, { dataItem: dataItem, item: tag })) {\n\t                that._close();\n\t                return;\n\t            }\n\n\t            if (customIndex === undefined && (state === ACCEPT || state === FILTER)) {\n\t                customIndex = that._optionsMap[value];\n\t            }\n\n\t            var done = function() {\n\t                that.currentTag(null);\n\t                if (shouldTrigger) {\n\t                    that._change();\n\t                }\n\t                that._close();\n\t            };\n\n\t            if (customIndex === undefined && listView.select().length) {\n\t                that.persistTagList = false;\n\t                listView.select(listView.select()[position]).done(done);\n\t            } else {\n\t                option = that.element[0].children[customIndex];\n\t                if (option) {\n\t                    option.selected = false;\n\t                }\n\n\t                listView.removeAt(position);\n\t                listViewChild = listViewChildren[customIndex];\n\t                if (listViewChild) {\n\t                    listViewChildren[customIndex].classList.remove("k-state-selected");\n\t                }\n\t                if (that.options.tagMode !== "single"){\n\t                    tag.remove();\n\t                } else {\n\t                    that._updateTagListHTML();\n\t                }\n\t                done();\n\t            }\n\t        },\n\n\t        _tagListClick: function(e) {\n\t            e.preventDefault();\n\t            e.stopPropagation();\n\t            var target = $(e.currentTarget);\n\n\t            if (!target.children(".k-i-arrow-60-down").length) {\n\t                this._removeTag(target.closest(LI), true);\n\t            }\n\t        },\n\n\t        _clearValue: function() {\n\t            var that = this;\n\n\t            if (that.options.tagMode === "single"){\n\t                that._clearSingleTagValue();\n\t            } else{\n\t                that.tagList.children().each(function(index, tag) {\n\t                    that._removeTag($(tag), false);\n\t                });\n\t            }\n\n\t            that.input.val("");\n\t            that._search();\n\t            that._change();\n\t            that.focus();\n\t            that._hideClear();\n\n\t            if (that._state === FILTER) {\n\t                that._state = ACCEPT;\n\t            }\n\t        },\n\n\t        _clearSingleTagValue: function() {\n\t            var that = this;\n\t            var items = that.dataItems();\n\t            var tags = that.tagList.children();\n\t            var persistTagList = that.persistTagList;\n\n\t            for (var i = 0; i < items.length; i += 1) {\n\t                if (that.trigger(DESELECT, { dataItem: items[i], item: tags.first() })) {\n\t                    that._close();\n\t                    return;\n\t                }\n\t            }\n\n\t            if (persistTagList) {\n\t                that.persistTagList = false;\n\t            }\n\n\t            that.listView.value([]);\n\t            that.persistTagList = persistTagList;\n\t        },\n\n\t        _focusHandler: function() {\n\t            this.input.focus();\n\t        },\n\n\t        _editable: function(options) {\n\t            var that = this,\n\t                disable = options.disable,\n\t                readonly = options.readonly,\n\t                wrapper = that.wrapper.off(ns),\n\t                tagList = that.tagList.off(ns),\n\t                input = that.element.add(that.input.off(ns));\n\n\t            if (!readonly && !disable) {\n\t                wrapper\n\t                    .removeClass(STATEDISABLED)\n\t                    .removeClass(NOCLICKCLASS)\n\t                    .on(HOVEREVENTS, that._toggleHover)\n\t                    .on("mousedown" + ns + " touchend" + ns, proxy(that._wrapperMousedown, that))\n\t                    .on(CLICK, proxy(that._focusHandler, that));\n\n\t                that.input.on(KEYDOWN, proxy(that._keydown, that))\n\t                    .on("paste" + ns, proxy(that._search, that))\n\t                    .on("input" + ns, proxy(that._search, that))\n\t                    .on("focus" + ns, proxy(that._inputFocus, that))\n\t                    .on("focusout" + ns, proxy(that._inputFocusout, that));\n\n\t                that._clear.on(CLICK + " touchend" + ns, proxy(that._clearValue, that));\n\t                input.removeAttr(DISABLED)\n\t                     .removeAttr(READONLY)\n\t                     .attr(ARIA_DISABLED, false);\n\n\t                tagList\n\t                    .on(MOUSEENTER, LI, function() { $(this).addClass(HOVERCLASS); })\n\t                    .on(MOUSELEAVE, LI, function() { $(this).removeClass(HOVERCLASS); })\n\t                    .on(CLICK + " touchend" + ns, "li.k-button .k-select", proxy(that._tagListClick, that));\n\t            } else {\n\n\t                wrapper.toggleClass(STATEDISABLED, disable)\n\t                       .toggleClass(NOCLICKCLASS, readonly);\n\n\t                input.attr(DISABLED, disable)\n\t                     .attr(READONLY, readonly)\n\t                     .attr(ARIA_DISABLED, disable);\n\t            }\n\t        },\n\n\t        _close: function() {\n\t            var that = this;\n\t            if (that.options.autoClose) {\n\t                that.close();\n\t            } else {\n\t                that.popup.position();\n\t            }\n\t        },\n\n\t        _filterSource: function(filter, force) {\n\t            if(!force) {\n\t                force = this._retrieveData;\n\t            }\n\t            this._retrieveData = false;\n\t            List.fn._filterSource.call(this, filter, force);\n\t        },\n\n\t        close: function() {\n\t            this._activeItem = null;\n\t            this.input.removeAttr("aria-activedescendant");\n\n\t            this.popup.close();\n\t        },\n\n\t        open: function() {\n\t            var that = this;\n\n\t            if (that._request) {\n\t                that._retrieveData = false;\n\t            }\n\n\t            if (that._retrieveData || !that.listView.bound() || that._state === ACCEPT) {\n\t                that._open = true;\n\t                that._state = REBIND;\n\n\t                that.listView.skipUpdate(true);\n\n\t                that.persistTagList = that._initialOpen && !that.listView.bound() ? false : true;\n\t                that._filterSource();\n\t                that._focusItem();\n\t            } else if (that._allowOpening()) {\n\n\t                //selects values in autoBind false and non virtual scenario on initial load\n\t                if (that._initialOpen && !that.options.autoBind && !that.options.virtual && that.options.value && !$.isPlainObject(that.options.value[0])){\n\t                    that.value(that.value() || that._initialValues);\n\t                }\n\n\t                // In some cases when the popup is opened resize is triggered which will cause it to close\n\t                // Setting the below flag will prevent this from happening\n\t                that.popup._hovered = true;\n\t                that._initialOpen = false;\n\t                that.popup.open();\n\t                that._focusItem();\n\t            }\n\t        },\n\n\t        toggle: function(toggle) {\n\t            toggle = toggle !== undefined ? toggle : !this.popup.visible();\n\n\t            this[toggle ? OPEN : CLOSE]();\n\t        },\n\n\t        refresh: function() {\n\t            this.listView.refresh();\n\t        },\n\n\t        _listBound: function() {\n\t            var that = this;\n\t            var data = that.dataSource.flatView();\n\t            var skip = that.listView.skip();\n\n\t            that._render(data);\n\n\t            that._renderFooter();\n\t            that._renderNoData();\n\t            that._toggleNoData(!data.length);\n\n\t            that._resizePopup();\n\n\t            if (that._open) {\n\t                that._open = false;\n\t                that.toggle(that._allowOpening());\n\t            }\n\n\t            that.popup.position();\n\n\t            if (that.options.highlightFirst && (skip === undefined || skip === 0)) {\n\t                that.listView.focusFirst();\n\t            }\n\n\t            if (that._touchScroller) {\n\t                that._touchScroller.reset();\n\t            }\n\n\t            that._hideBusy();\n\t            that._makeUnselectable();\n\n\t            that.trigger("dataBound");\n\t        },\n\n\t        _inputValue: function() {\n\t            var that = this;\n\t            var inputValue = that.input.val();\n\n\t            if (that.options.placeholder === inputValue) {\n\t                inputValue = "";\n\t            }\n\t            return inputValue;\n\t        },\n\n\t        value: function(value) {\n\t            var that = this;\n\t            var listView = that.listView;\n\t            var oldValue = listView.value().slice();\n\t            var maxSelectedItems = that.options.maxSelectedItems;\n\t            var clearFilters = listView.bound() && listView.isFiltered();\n\n\t            if (value === undefined) {\n\t                return oldValue;\n\t            }\n\n\t            that.persistTagList = false;\n\t            that.requireValueMapper(that.options, value);\n\n\t            value = that._normalizeValues(value);\n\n\t            if (maxSelectedItems !== null && value.length > maxSelectedItems) {\n\t                value = value.slice(0, maxSelectedItems);\n\t            }\n\n\t            if (clearFilters) {\n\t                that._clearFilter();\n\t            }\n\n\t            listView.value(value);\n\t            that._old = that._valueBeforeCascade = value.slice(); //get a new array reference\n\n\t            if (!clearFilters) {\n\t                that._fetchData();\n\t            }\n\n\t            that._ariaSetSize(that.value().length);\n\n\t            that._toggleCloseVisibility();\n\t        },\n\n\t        _preselect: function(data, value) {\n\t            var that = this;\n\n\t            if (!isArray(data) && !(data instanceof kendo.data.ObservableArray)) {\n\t                data = [data];\n\t            }\n\n\t            if ($.isPlainObject(data[0]) || data[0] instanceof kendo.data.ObservableObject || !that.options.dataValueField) {\n\t                that.dataSource.data(data);\n\t                that.value(value || that._initialValues);\n\t                that._retrieveData = true;\n\t            }\n\t        },\n\n\t        _setOption: function(value, selected) {\n\t            var option = this.element[0].children[this._optionsMap[value]];\n\n\t            if (option) {\n\t                option.selected = selected;\n\t            }\n\t        },\n\n\t        _fetchData: function() {\n\t            var that = this;\n\t            var hasItems = !!that.dataSource.view().length;\n\t            var isEmptyArray = that.listView.value().length === 0;\n\n\t            if (isEmptyArray || that._request) {\n\t                return;\n\t            }\n\n\t            if (that._retrieveData || (!that._fetch && !hasItems)) {\n\t                that._fetch = true;\n\t                that._retrieveData = false;\n\t                that.dataSource.read().done(function() {\n\t                    that._fetch = false;\n\t                });\n\t            }\n\t        },\n\n\t        _isBound: function() {\n\t            return this.listView.bound() && !this._retrieveData;\n\t        },\n\n\t        _dataSource: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                options = that.options,\n\t                dataSource = options.dataSource || {};\n\n\t            dataSource = isArray(dataSource) ? {data: dataSource} : dataSource;\n\n\t            dataSource.select = element;\n\t            dataSource.fields = [{ field: options.dataTextField },\n\t                                 { field: options.dataValueField }];\n\n\t            if (that.dataSource && that._refreshHandler) {\n\t                that._unbindDataSource();\n\t            } else {\n\t                that._progressHandler = proxy(that._showBusy, that);\n\t                that._errorHandler = proxy(that._hideBusy, that);\n\t            }\n\n\t            that.dataSource = kendo.data.DataSource.create(dataSource)\n\t                                   .bind(PROGRESS, that._progressHandler)\n\t                                   .bind("error", that._errorHandler);\n\t        },\n\n\t        _reset: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                formId = element.attr("form"),\n\t                form = formId ? $("#" + formId) : element.closest("form");\n\n\t            if (form[0]) {\n\t                that._resetHandler = function() {\n\t                    setTimeout(function() {\n\t                        that.value(that._initialValues);\n\t                        that._placeholder();\n\t                    });\n\t                };\n\n\t                that._form = form.on("reset", that._resetHandler);\n\t            }\n\t        },\n\n\t        _initValue: function() {\n\t            var value = this.options.value || this.element.val();\n\n\t            this._old = this._initialValues = this._normalizeValues(value);\n\t        },\n\n\t        _normalizeValues: function(value) {\n\t            var that = this;\n\n\t            if (value === null) {\n\t                value = [];\n\t            } else if (value && $.isPlainObject(value)) {\n\t                value = [that._value(value)];\n\t            } else if (value && $.isPlainObject(value[0])) {\n\t                value = $.map(value, function(dataItem) { return that._value(dataItem); });\n\t            } else if (!isArray(value) && !(value instanceof ObservableArray)) {\n\t                value = [value];\n\t            } else if (isArray(value)) {\n\t                value = value.slice();\n\t            }\n\n\t            return value;\n\t        },\n\n\t        _change: function() {\n\t            var that = this,\n\t                value = that.value();\n\n\t            if (!compare(value, that._old)) {\n\t                that._old = value.slice();\n\n\t                that.trigger(CHANGE);\n\n\t                // trigger the DOM change event so any subscriber gets notified\n\t                that.element.trigger(CHANGE);\n\t            }\n\t            that.popup.position();\n\n\t            that._ariaSetSize(value.length);\n\n\t            that._toggleCloseVisibility();\n\t        },\n\n\t        _click: function(e) {\n\t            var that = this;\n\t            var item = e.item;\n\n\t            e.preventDefault();\n\n\t            that._select(item).done(function() {\n\t                that._activeItem = item;\n\t                that._change();\n\t                that._close();\n\t            });\n\t        },\n\n\t        _getActiveItem: function() {\n\t            return this._activeItem || $(this.listView.items()[this._getSelectedIndices().length - 1]) || this.listView.focus();\n\t        },\n\n\t        _getSelectedIndices: function() {\n\t            return this.listView._selectedIndices || this.listView._selectedIndexes;\n\t        },\n\n\t        _keydown: function(e) {\n\t            var that = this;\n\t            var key = e.keyCode;\n\t            var tag = that._currentTag;\n\t            var listView = that.listView;\n\t            var hasValue = that.input.val();\n\t            var isRtl = kendo.support.isRtl(that.wrapper);\n\t            var visible = that.popup.visible();\n\t            var dir = 0;\n\t            var activeItemIdx;\n\n\t            if(key !== keys.ENTER) {\n\t                this._multipleSelection = false;\n\t            }\n\n\t             if (key === keys.DOWN) {\n\t                e.preventDefault();\n\n\t                if (!visible) {\n\t                    that.open();\n\n\t                    if (!listView.focus()) {\n\t                        listView.focusFirst();\n\t                    }\n\t                    return;\n\t                }\n\n\t                if (listView.focus()) {\n\t                    if (!that._activeItem && e.shiftKey) {\n\t                        that._activeItem = listView.focus();\n\t                        dir = -1;\n\t                    }\n\t                    activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n\n\t                    listView.focusNext();\n\t                    if (!listView.focus()) {\n\t                        listView.focusLast();\n\t                    } else {\n\t                        if (e.shiftKey) {\n\t                            this._multipleSelection = true;\n\t                            that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n\t                        }\n\t                    }\n\t                } else {\n\t                    listView.focusFirst();\n\t                }\n\n\t            } else if (key === keys.UP) {\n\t                if (visible) {\n\t                    if (!that._activeItem && e.shiftKey) {\n\t                        that._activeItem = listView.focus();\n\t                        dir = 1;\n\t                    }\n\t                    activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n\t                    listView.focusPrev();\n\t                    if (!listView.focus()) {\n\t                        that.close();\n\t                    } else {\n\t                        if (e.shiftKey) {\n\t                            this._multipleSelection = true;\n\t                            that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n\t                        }\n\t                    }\n\t                }\n\t                e.preventDefault();\n\t            } else if ((key === keys.LEFT && !isRtl) || (key === keys.RIGHT && isRtl)) {\n\t                if (!hasValue) {\n\t                    tag = tag ? tag.prev() : $(that.tagList[0].lastChild);\n\t                    if (tag[0]) {\n\t                        that.currentTag(tag);\n\t                    }\n\t                }\n\t            } else if ((key === keys.RIGHT && !isRtl) || (key === keys.LEFT && isRtl)) {\n\t                if (!hasValue && tag) {\n\t                    tag = tag.next();\n\t                    that.currentTag(tag[0] ? tag : null);\n\t                }\n\t            } else if (e.ctrlKey && !e.altKey && key === keys.A && visible && !that.options.virtual) {\n\t                this._multipleSelection = true;\n\t                if (this._getSelectedIndices().length === listView.items().length) {\n\t                    that._activeItem = null;\n\t                }\n\n\t                if (listView.items().length) {\n\t                    that._selectRange(0, listView.items().length -1);\n\t                }\n\t            } else if (key === keys.ENTER && visible) {\n\t                if (!listView.focus()) {\n\t                    return;\n\t                }\n\n\t                e.preventDefault();\n\n\t                if (this._multipleSelection) {\n\t                    this._multipleSelection = false;\n\t                     if (listView.focus().hasClass(SELECTEDCLASS)) {\n\t                        that._close();\n\t                        return;\n\t                    }\n\t                }\n\n\t                that._select(listView.focus()).done(function() {\n\t                    that._change();\n\t                    that._close();\n\t                });\n\t            } else if (key === keys.SPACEBAR && e.ctrlKey && visible) {\n\t                if (that._activeItem && listView.focus() && listView.focus()[0] === that._activeItem[0]) {\n\t                    that._activeItem = null;\n\t                }\n\t                if (!$(listView.focus()).hasClass(SELECTEDCLASS)) {\n\t                    that._activeItem = listView.focus();\n\t                }\n\t                that._select(listView.focus()).done(function () {\n\t                    that._change();\n\t                });\n\t                e.preventDefault();\n\t            } else if (key === keys.SPACEBAR && e.shiftKey && visible) {\n\t                var activeIndex = listView.getElementIndex(that._getActiveItem());\n\t                var currentIndex = listView.getElementIndex(listView.focus());\n\n\t                if (activeIndex !== undefined && currentIndex !== undefined) {\n\t                    that._selectRange(activeIndex, currentIndex);\n\t                }\n\n\t                e.preventDefault();\n\t            } else if (key === keys.ESC) {\n\t                if (visible) {\n\t                    e.preventDefault();\n\t                } else {\n\t                    that.tagList.children().each(function(index, tag) {\n\t                        that._removeTag($(tag), false);\n\t                    });\n\t                    that._change();\n\t                }\n\n\t                that.close();\n\t            } else if (key === keys.HOME) {\n\t                if (visible) {\n\t                    if (!listView.focus()) {\n\t                        that.close();\n\t                    } else {\n\t                        if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n\t                            that._selectRange(listView.getElementIndex(listView.focus()[0]), 0);\n\t                        }\n\t                        listView.focusFirst();\n\t                    }\n\t                } else if (!hasValue) {\n\t                    tag = that.tagList[0].firstChild;\n\n\t                    if (tag) {\n\t                        that.currentTag($(tag));\n\t                    }\n\t                }\n\t            } else if (key === keys.END) {\n\t                if (visible) {\n\t                    if (!listView.focus()) {\n\t                        that.close();\n\t                    } else {\n\t                        if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n\t                            that._selectRange(\n\t                                listView.getElementIndex(listView.focus()[0]),\n\t                                listView.element.children().length - 1\n\t                            );\n\t                        }\n\t                        listView.focusLast();\n\t                    }\n\t                } else if (!hasValue) {\n\t                    tag = that.tagList[0].lastChild;\n\n\t                    if (tag) {\n\t                        that.currentTag($(tag));\n\t                    }\n\t                }\n\t            } else if ((key === keys.DELETE || key === keys.BACKSPACE) && !hasValue) {\n\t                that._state = ACCEPT;\n\n\t                if (that.options.tagMode === "single") {\n\t                    that._clearSingleTagValue();\n\n\t                    that._change();\n\t                    that._close();\n\t                    return;\n\t                }\n\n\t                if (key === keys.BACKSPACE && !tag) {\n\t                    tag = $(that.tagList[0].lastChild);\n\t                }\n\n\t                if (tag && tag[0]) {\n\t                    that._removeTag(tag, true);\n\t                }\n\t            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n\t                e.preventDefault();\n\n\t                var direction = key === keys.PAGEDOWN ? 1: -1;\n\t                listView.scrollWith(direction * listView.screenHeight());\n\t            } else {\n\t                clearTimeout(that._typingTimeout);\n\t                setTimeout(function() {\n\t                    that._scale();\n\t                });\n\t                that._search();\n\t            }\n\t        },\n\n\t        _hideBusy: function () {\n\t            var that = this;\n\t            clearTimeout(that._busy);\n\t            that.input.attr("aria-busy", false);\n\t            that._loading.addClass(HIDDENCLASS);\n\t            that._request = false;\n\t            that._busy = null;\n\n\t            that._toggleCloseVisibility();\n\t        },\n\n\t        _showBusyHandler: function() {\n\t            this.input.attr("aria-busy", true);\n\t            this._loading.removeClass(HIDDENCLASS);\n\t            this._hideClear();\n\t        },\n\n\t        _showBusy: function () {\n\t            var that = this;\n\n\t            that._request = true;\n\n\t            if (that._busy) {\n\t                return;\n\t            }\n\n\t            that._busy = setTimeout(proxy(that._showBusyHandler, that), 100);\n\t        },\n\n\t        _placeholder: function(show, skipCaret) {\n\t            var that = this;\n\t            var input = that.input;\n\t            var active = activeElement();\n\t            var placeholder = that.options.placeholder;\n\t            var inputValue = input.val();\n\t            var isActive = input[0] === active;\n\t            var caretPos = inputValue.length;\n\n\t            if (!isActive || that.options.autoClose || inputValue === placeholder) {\n\t                caretPos = 0;\n\t                inputValue = "";\n\t            }\n\n\t            if (show === undefined) {\n\t                show = false;\n\t                if (input[0] !== active) {\n\t                    show = !that.listView.selectedDataItems()[0];\n\t                }\n\t            }\n\n\t            that._prev = inputValue;\n\t            input.toggleClass("k-readonly", show).val(show ? placeholder : inputValue);\n\n\t            if (isActive && !skipCaret) {\n\t                kendo.caret(input[0], caretPos, caretPos);\n\t            }\n\n\t            that._scale();\n\t        },\n\n\t        _scale: function() {\n\t            var that = this,\n\t                wrapper = that.wrapper.find(".k-multiselect-wrap"),\n\t                wrapperWidth = wrapper.width(),\n\t                span = that._span.text(that.input.val()),\n\t                textWidth;\n\n\t            if (!wrapper.is(":visible")) {\n\t                span.appendTo(document.documentElement);\n\t                wrapperWidth = textWidth = span.width() + 25;\n\t                span.appendTo(wrapper);\n\t            } else {\n\t                textWidth = span.width() + 25;\n\t            }\n\n\t            that.input.width(textWidth > wrapperWidth ? wrapperWidth : textWidth);\n\t        },\n\n\t        _option: function(dataValue, dataText, selected) {\n\t            var option = "<option";\n\n\t            if (dataValue !== undefined) {\n\t                dataValue += "";\n\n\t                if (dataValue.indexOf(\'"\') !== -1) {\n\t                    dataValue = dataValue.replace(quotRegExp, "&quot;");\n\t                }\n\n\t                option += \' value="\' + dataValue + \'"\';\n\t            }\n\n\t            if (selected) {\n\t                option += \' selected\';\n\t            }\n\n\t            option += ">";\n\n\t            if (dataText !== undefined) {\n\t                option += kendo.htmlEncode(dataText);\n\t            }\n\n\t            return option += "</option>";\n\t        },\n\n\t        _render: function(data) {\n\t            var selectedItems = this.listView.selectedDataItems();\n\t            var values = this.listView.value();\n\t            var length = data.length;\n\t            var selectedIndex;\n\t            var options = "";\n\t            var dataItem;\n\t            var value;\n\t            var idx;\n\n\t            if (values.length !== selectedItems.length) {\n\t                selectedItems = this._buildSelectedItems(values);\n\t            }\n\n\t            var custom = {};\n\t            var optionsMap = {};\n\n\t            for (idx = 0; idx < length; idx++) {\n\t                dataItem = data[idx];\n\t                value = this._value(dataItem);\n\n\t                selectedIndex = this._selectedItemIndex(value, selectedItems);\n\t                if (selectedIndex !== -1) {\n\t                    selectedItems.splice(selectedIndex, 1);\n\t                }\n\n\t                optionsMap[value] = idx;\n\t                options += this._option(value, this._text(dataItem), selectedIndex !== -1);\n\t            }\n\n\t            if (selectedItems.length) {\n\t                for (idx = 0; idx < selectedItems.length; idx++) {\n\t                    dataItem = selectedItems[idx];\n\n\t                    value = this._value(dataItem);\n\t                    custom[value] = length;\n\t                    optionsMap[value] = length;\n\n\t                    length += 1;\n\t                    options += this._option(value, this._text(dataItem), true);\n\t                }\n\t            }\n\n\t            this._customOptions = custom;\n\t            this._optionsMap = optionsMap;\n\n\t            this.element.html(options);\n\t        },\n\n\t        _buildSelectedItems: function(values) {\n\t            var valueField = this.options.dataValueField;\n\t            var textField = this.options.dataTextField;\n\t            var result = [];\n\t            var item;\n\n\t            for (var idx = 0; idx < values.length; idx++) {\n\t                item = {};\n\t                item[valueField] = values[idx];\n\t                item[textField] = values[idx];\n\n\t                result.push(item);\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _selectedItemIndex: function(value, selectedItems) {\n\t            var valueGetter = this._value;\n\t            var idx = 0;\n\n\t            for (; idx < selectedItems.length; idx++) {\n\t                if (value === valueGetter(selectedItems[idx])) {\n\t                    return idx;\n\t                }\n\t            }\n\n\t            return -1;\n\t        },\n\n\t        _search: function() {\n\t            var that = this;\n\n\t            clearTimeout(that._typingTimeout);\n\n\t            that._typingTimeout = setTimeout(function() {\n\t                var value = that._inputValue();\n\t                if (that._prev !== value) {\n\t                    that._prev = value;\n\t                    that.search(value);\n\t                    that._toggleCloseVisibility();\n\t                }\n\t            }, that.options.delay);\n\t        },\n\n\t        _toggleCloseVisibility: function() {\n\t            if (this.value().length || (this.input.val() && this.input.val() !== this.options.placeholder)) {\n\t                this._showClear();\n\t            } else {\n\t                this._hideClear();\n\t            }\n\t        },\n\n\t        _allowOpening: function() {\n\t            return this._allowSelection() && List.fn._allowOpening.call(this);\n\t        },\n\n\t        _allowSelection: function() {\n\t            var max = this.options.maxSelectedItems;\n\t            return max === null || max > this.listView.value().length;\n\t        },\n\n\t        _angularTagItems: function(cmd) {\n\t            var that = this;\n\n\t            that.angular(cmd, function() {\n\t                return {\n\t                    elements: that.tagList[0].children,\n\t                    data: $.map(that.dataItems(), function(dataItem) {\n\t                        return { dataItem: dataItem };\n\t                    })\n\t                };\n\t            });\n\t        },\n\n\t        updatePersistTagList: function(added, removed){\n\t            if(this.persistTagList.added &&\n\t                this.persistTagList.added.length === removed.length &&\n\t                this.persistTagList.removed &&\n\t                this.persistTagList.removed.length === added.length){\n\t                    this.persistTagList = false;\n\t             }else{\n\t                 this.listView._removedAddedIndexes = this._old.slice();\n\t                 this.persistTagList = {\n\t                     added: added,\n\t                     removed: removed\n\t                 };\n\t             }\n\t        },\n\n\t        _selectValue: function (added, removed) {\n\t            var that = this;\n\t            var total = that.dataSource.total();\n\t            var tagList = that.tagList;\n\t            var getter = that._value;\n\t            var removedItem;\n\t            var addedItem;\n\t            var idx;\n\n\t            if(this.persistTagList){\n\t                this.updatePersistTagList(added, removed);\n\n\t                return;\n\t            }\n\n\t            that._angularTagItems("cleanup");\n\n\t            if (that.options.tagMode === "multiple") {\n\t                for (idx = removed.length - 1; idx > -1; idx--) {\n\t                    removedItem = removed[idx];\n\n\t                    if (tagList.children().length) {\n\t                        tagList[0].removeChild(tagList[0].children[removedItem.position]);\n\t                        that._setOption(getter(removedItem.dataItem), false);\n\t                    }\n\t                }\n\n\t                for (idx = 0; idx < added.length; idx++) {\n\t                    addedItem = added[idx];\n\n\t                    tagList.append(that.tagTemplate(addedItem.dataItem));\n\n\t                    that._setOption(getter(addedItem.dataItem), true);\n\t                }\n\t            } else {\n\t                if (!that._maxTotal || that._maxTotal < total) {\n\t                    that._maxTotal = total;\n\t                }\n\n\t                this._updateTagListHTML();\n\n\t                for (idx = removed.length - 1; idx > -1; idx--) {\n\t                    that._setOption(getter(removed[idx].dataItem), false);\n\t                }\n\n\t                for (idx = 0; idx < added.length; idx++) {\n\t                    that._setOption(getter(added[idx].dataItem), true);\n\t                }\n\t            }\n\n\t            that._angularTagItems("compile");\n\t            that._placeholder();\n\t        },\n\n\t        _updateTagListHTML: function(){\n\t            var that = this;\n\t            var values = that.value();\n\t            var total = that.dataSource.total();\n\t            var tagList = that.tagList;\n\n\t            tagList.html("");\n\n\t            if (values.length) {\n\t                tagList.append(that.tagTemplate({\n\t                    values: values,\n\t                    dataItems: that.dataItems(),\n\t                    maxTotal: that._maxTotal,\n\t                    currentTotal: total\n\t                }));\n\t            }\n\t        },\n\n\t        _select: function(candidate) {\n\t            var resolved = $.Deferred().resolve();\n\n\t            if (!candidate) {\n\t                return resolved;\n\t            }\n\n\t            var that = this;\n\t            var listView = that.listView;\n\t            var dataItem = listView.dataItemByIndex(listView.getElementIndex(candidate));\n\t            var isSelected = candidate.hasClass("k-state-selected");\n\n\t            if (that._state === REBIND) {\n\t                that._state = "";\n\t            }\n\n\t            if (!that._allowSelection() && !isSelected) {\n\t                return resolved;\n\t            }\n\n\t            if (that.trigger(isSelected ? DESELECT : SELECT, { dataItem: dataItem, item: candidate })) {\n\t                that._close();\n\t                return resolved;\n\t            }\n\n\t            that.persistTagList = false;\n\t            return listView.select(candidate).done(function() {\n\t                that._placeholder();\n\n\t                if (that._state === FILTER) {\n\t                    that._state = ACCEPT;\n\t                    listView.skipUpdate(true);\n\t                }\n\t            });\n\t        },\n\n\t        _selectRange: function (startIndex, endIndex) {\n\t            var that = this;\n\t            var listView = this.listView;\n\t            var maxSelectedItems = this.options.maxSelectedItems;\n\t            var indices = this._getSelectedIndices().slice();\n\t            var indicesToSelect = [];\n\t            var i;\n\n\t            var selectIndices = function(indices) {\n\t                listView.select(indices).done(function() {\n\t                    indices.forEach(function(index) {\n\t                        var dataItem  = listView.dataItemByIndex(index);\n\t                        var candidate = listView.element.children()[index];\n\t                        var isSelected = $(candidate).hasClass("k-state-selected");\n\n\t                        that.trigger(isSelected ? SELECT : DESELECT, {dataItem: dataItem, item: $(candidate)});\n\t                    });\n\t                    that._change();\n\t                });\n\t            };\n\n\t            if (indices.length - 1 === endIndex - startIndex) {\n\t                return selectIndices(indices);\n\t            }\n\n\t            if (startIndex < endIndex) {\n\t                for (i = startIndex; i <= endIndex; i++) {\n\t                    indicesToSelect.push(i);\n\t                }\n\t            } else {\n\t                for (i = startIndex; i >= endIndex; i--) {\n\t                    indicesToSelect.push(i);\n\t                }\n\t            }\n\n\t            if (maxSelectedItems !== null && indicesToSelect.length > maxSelectedItems) {\n\t                indicesToSelect = indicesToSelect.slice(0, maxSelectedItems);\n\t            }\n\n\t            for (i = 0; i < indicesToSelect.length; i++) {\n\t                var index = indicesToSelect[i];\n\n\t                if (this._getSelectedIndices().indexOf(index) == -1) {\n\t                    indices.push(index);\n\t                } else {\n\t                    indices.splice(indices.indexOf(index), 1);\n\t                }\n\t            }\n\n\t            if (!indices.length) {\n\t                return;\n\t            }\n\n\t            that.persistTagList = false;\n\t            return selectIndices(indices);\n\t        },\n\n\t        _input: function() {\n\t            var that = this;\n\t            var element = that.element;\n\t            var accessKey = element[0].accessKey;\n\t            var input = that._inputWrapper.children("input.k-input");\n\n\t            if (!input[0]) {\n\t                input = $(\'<input class="k-input" style="width: 25px" />\').appendTo(that._inputWrapper);\n\t            }\n\n\t            element.removeAttr("accesskey");\n\n\t            that._focused = that.input = input.attr({\n\t                "accesskey": accessKey,\n\t                "autocomplete": AUTOCOMPLETEVALUE,\n\t                "role": "listbox",\n\t                "title": element[0].title,\n\t                "aria-expanded": false,\n\t                "aria-haspopup": "listbox",\n\t                "aria-autocomplete": "list"\n\t            });\n\t        },\n\n\t        _tagList: function() {\n\t            var that = this,\n\t                tagList = that._inputWrapper.children("ul");\n\n\t            if (!tagList[0]) {\n\t                tagList = $(\'<ul unselectable="on" class="k-reset"/>\').appendTo(that._inputWrapper);\n\t            }\n\n\t            that.tagList = tagList;\n\t        },\n\n\t        _tagTemplate: function() {\n\t            var that = this;\n\t            var options = that.options;\n\t            var tagTemplate = options.tagTemplate;\n\t            var hasDataSource = options.dataSource;\n\t            var isMultiple = options.tagMode === "multiple";\n\t            var singleTag = options.messages.singleTag;\n\t            var defaultTemplate;\n\n\t            if (that.element[0].length && !hasDataSource) {\n\t                options.dataTextField = options.dataTextField || "text";\n\t                options.dataValueField = options.dataValueField || "value";\n\t            }\n\n\t            defaultTemplate = isMultiple ? kendo.template("#:" + kendo.expr(options.dataTextField, "data") + "#", { useWithBlock: false }) : kendo.template("#:values.length# " + singleTag);\n\n\t            that.tagTextTemplate = tagTemplate = tagTemplate ? kendo.template(tagTemplate) : defaultTemplate;\n\n\t            that.tagTemplate = function(data) {\n\t                return \'<li role="option" aria-selected="true" class="k-button" unselectable="on"><span unselectable="on">\' +\n\t                        tagTemplate(data) + \'</span>\' +\n\t                        \'<span aria-hidden="true" unselectable="on" aria-label="\' +\n\t                        (isMultiple ? (\'delete" title="\' + that.options.messages.deleteTag + \'" aria-label="\' + that.options.messages.deleteTag) : \'open\') +\n\t                        \'" class="k-select"><span class="k-icon \' +\n\t                        (isMultiple ? "k-i-close" : "k-i-arrow-60-down") + \'">\' +\n\t                        \'</span></span></li>\';\n\t            };\n\t        },\n\n\t        _loader: function() {\n\t            this._loading = $(\'<span class="k-icon k-i-loading \' + HIDDENCLASS + \'"></span>\').insertAfter(this.input);\n\t        },\n\n\t        _clearButton: function() {\n\t            List.fn._clearButton.call(this);\n\n\t            if (this.options.clearButton) {\n\t                this._clear.insertAfter(this.input);\n\t                this.wrapper.addClass("k-multiselect-clearable");\n\t            }\n\t        },\n\n\t        _textContainer: function() {\n\t            var computedStyles = kendo.getComputedStyles(this.input[0], styles);\n\n\t            computedStyles.position = "absolute";\n\t            computedStyles.visibility = "hidden";\n\t            computedStyles.top = -3333;\n\t            computedStyles.left = -3333;\n\n\t            this._span = $("<span/>").css(computedStyles).appendTo(this.wrapper);\n\t        },\n\n\t        _wrapper: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                wrapper = element.parent("span.k-multiselect");\n\n\t            if (!wrapper[0]) {\n\t                wrapper = element.wrap(\'<div class="k-widget k-multiselect" unselectable="on" />\').parent();\n\t                wrapper[0].style.cssText = element[0].style.cssText;\n\t                wrapper[0].title = element[0].title;\n\n\t                $(\'<div class="k-multiselect-wrap k-floatwrap" role="listbox" unselectable="on" />\').insertBefore(element);\n\t            }\n\n\t            that.wrapper = wrapper.addClass(element[0].className).removeClass(\'input-validation-error\').css("display", "");\n\t            that._inputWrapper = $(wrapper[0].firstChild);\n\t        },\n\n\t        _ariaSetSize: function(value) {\n\t            var that = this;\n\t            var selectedItems = that.tagList.children();\n\n\t            if(value && selectedItems.length) {\n\t                selectedItems.attr("aria-setsize", value);\n\t            }\n\t        },\n\n\t        _ariaSetLive: function() {\n\t            var that = this;\n\n\t            that.ul.attr("aria-live", !that._isFilterEnabled() ? "off" : "polite");\n\t        }\n\t    });\n\n\t    function compare(a, b) {\n\t        var length;\n\n\t        if ((a === null && b !== null) || (a !== null && b === null)) {\n\t            return false;\n\t        }\n\n\t        length = a.length;\n\t        if (length !== b.length) {\n\t            return false;\n\t        }\n\n\t        while (length--) {\n\t            if (a[length] !== b[length]) {\n\t                return false;\n\t            }\n\t        }\n\n\t        return true;\n\t    }\n\n\t    ui.plugin(MultiSelect);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.multiselect.js?')},"./node_modules/@progress/kendo-ui/js/kendo.multiviewcalendar.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.multiviewcalendar.js ***!
  \***********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1291);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1046:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.selectable */ "./node_modules/@progress/kendo-ui/js/kendo.selectable.js");\n\n/***/ }),\n\n/***/ 1134:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.calendar */ "./node_modules/@progress/kendo-ui/js/kendo.calendar.js");\n\n/***/ }),\n\n/***/ 1291:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018), __webpack_require__(1046), __webpack_require__(1134) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "multiviewcalendar",\n\t    name: "MultiViewCalendar",\n\t    category: "web",\n\t    description: "Multi-view calendar.",\n\t    depends: [ "core", "selectable", "calendar"  ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        calendar = kendo.calendar,\n\t        support = kendo.support,\n\t        isInRange = calendar.isInRange,\n\t        toDateObject = calendar.toDateObject,\n\t        createDate = calendar.createDate,\n\t        isEqualDate = calendar.isEqualDate,\n\t        getToday = calendar.getToday,\n\t        keys = kendo.keys,\n\t        ui = kendo.ui,\n\t        Widget = ui.Widget,\n\t        Selectable = ui.Selectable,\n\t        template = kendo.template,\n\t        mobileOS = support.mobileOS,\n\t        ns = ".kendoMultiViewCalendar",\n\t        CLICK = "click",\n\t        KEYDOWN = "keydown",\n\t        ID = "id",\n\t        MIN = "min",\n\t        MONTH = "month",\n\t        DOT = ".",\n\t        CENTURY = "century",\n\t        DECADE = "decade",\n\t        CHANGE = "change",\n\t        NAVIGATE = "navigate",\n\t        VALUE = "value",\n\t        FOCUSED = "k-state-focused",\n\t        SELECTED = "k-state-selected",\n\t        MID = "k-range-mid",\n\t        SPLITEND = "k-range-split-end",\n\t        SPLITSTART = "k-range-split-start",\n\t        START = "k-range-start",\n\t        END = "k-range-end",\n\t        HOVER = "k-state-hover",\n\t        DISABLED = "k-state-disabled",\n\t        TODAY = "k-nav-today",\n\t        OTHERMONTH = "k-other-month",\n\t        OUTOFRANGE = "k-out-of-range",\n\t        CELLSELECTOR = "td:has(.k-link):not(." + OUTOFRANGE + ")",\n\t        CELLSELECTORVALID = "td:has(.k-link):not(." + DISABLED + "):not(." + OUTOFRANGE + ")",\n\t        BLUR = "blur",\n\t        FOCUS = "focus",\n\t        MOUSEENTER = support.touch ? "touchstart" : "mouseenter",\n\t        MOUSELEAVE_NS = support.touch ? "touchend" + ns + " touchmove" + ns : "mouseleave" + ns,\n\t        PREVARROW = "_prevArrow",\n\t        NEXTARROW = "_nextArrow",\n\t        ARIA_SELECTED = "aria-selected",\n\t        INPUTSELECTOR = "input,a,textarea,.k-multiselect-wrap,select,button,.k-button>span,.k-button>img,span.k-icon.k-i-arrow-60-down,span.k-icon.k-i-arrow-60-up",\n\t        ARIA_DISABLED = "aria-disabled",\n\t        ARIA_LABEL = "aria-label",\n\t        proxy = $.proxy,\n\t        DATE = Date,\n\t        views = {\n\t            month: 0,\n\t            year: 1,\n\t            decade: 2,\n\t            century: 3\n\t        };\n\n\t    var RangeSelectable = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that.userEvents = new kendo.UserEvents(that.element, {\n\t                global: true,\n\t                allowSelection: true,\n\t                filter: that.options.filter,\n\t                tap: proxy(that._tap, that),\n\t                touchAction: "none"\n\t            });\n\t        },\n\n\t        events: [CHANGE],\n\n\t        options: {\n\t            name: "RangeSelectable",\n\t            filter: ">*",\n\t            inputSelectors: INPUTSELECTOR,\n\t            multiple: false,\n\t            dragToSelect: true,\n\t            relatedTarget: $.noop\n\t        },\n\n\t        destroy: function () {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            that.userEvents.destroy();\n\n\t            that._lastActive = that.element = that.userEvents = that._start = that._end = null;\n\t        },\n\n\t        _allowSelection: function(target) {\n\t            if ($(target).is(this.options.inputSelectors)) {\n\t                this.userEvents.cancel();\n\t                return false;\n\t            }\n\n\t            return true;\n\t        },\n\n\t        start: function (element) {\n\t            if (element === undefined) {\n\t                return this._start;\n\t            }\n\t            element.addClass(START + " " + SELECTED);\n\t            this._start = element;\n\t        },\n\n\t        end: function(element) {\n\t            if (element === undefined) {\n\t                return this._start;\n\t            }\n\t            element.addClass(END + " " + SELECTED);\n\t            this._end = element;\n\t        },\n\n\t        mid: function(elements) {\n\t            var tables = this.element.find("table.k-month");\n\n\t            elements.addClass(MID);\n\t            tables.each(function() {\n\t                var that = $(this);\n\t                var lastCell = that.find(CELLSELECTORVALID + ":last");\n\t                var firstCell = that.find(CELLSELECTORVALID + ":first");\n\n\t                if (lastCell.hasClass(MID)) {\n\t                    lastCell.addClass(SPLITEND);\n\t                }\n\n\t                if (firstCell.hasClass(MID)) {\n\t                    firstCell.addClass(SPLITSTART);\n\t                }\n\t            });\n\t        },\n\n\t        clear: function(clearVariables) {\n\t            this.element.find(CELLSELECTOR).removeClass(END + " " + SELECTED + " " + START + " " + MID + " " + SPLITEND + " " + SPLITSTART);\n\n\t            if (clearVariables) {\n\t                this._start = this._end = null;\n\t            }\n\t        },\n\n\t        selectFrom: function(start) {\n\t            var that = this;\n\t            var items;\n\t            var startIdx;\n\n\t            items = that.element.find(CELLSELECTOR);\n\n\t            startIdx = $.inArray($(start)[0], items);\n\n\t            that.clear();\n\t            that.start(start);\n\n\t            items = items.filter(function (index) {\n\t                return index > startIdx;\n\t            });\n\t            that.mid(items);\n\t        },\n\n\t        selectTo: function(end) {\n\t            var that = this;\n\t            var items;\n\t            var endIdx;\n\n\t            items = that.element.find(CELLSELECTOR);\n\n\t            endIdx = $.inArray($(end)[0], items);\n\n\t            that.clear();\n\n\t            items = items.filter(function (index) {\n\t                return index < endIdx;\n\t            });\n\t            that.mid(items);\n\t            that.end($(end));\n\t        },\n\n\t        range: function(start, end) {\n\t            var that = this;\n\t            var items;\n\t            var startIdx;\n\t            var endIdx;\n\t            var temp;\n\n\t            if (start === undefined) {\n\t                return { start: that._start, end: that._end };\n\t            }\n\n\t            items = that.element.find(CELLSELECTOR);\n\n\t            startIdx = $.inArray($(start)[0], items);\n\t            endIdx = $.inArray($(end)[0], items);\n\n\t            if (startIdx > endIdx) {\n\t                temp = end;\n\t                end = start;\n\t                start = temp;\n\t                temp = startIdx;\n\t                startIdx = endIdx;\n\t                endIdx = temp;\n\t            }\n\t            that.clear();\n\t            start.addClass(START + " " + SELECTED);\n\t            that._start = start;\n\n\t            items = items.filter(function (index) {\n\t                return index > startIdx && index < endIdx;\n\t            });\n\t            that.mid(items);\n\t            that.end($(end));\n\t        },\n\n\t        change: function() {\n\t            this.trigger(CHANGE);\n\t        },\n\n\t        _tap: function(e) {\n\t            var target = $(e.target),\n\t                that = this,\n\t                items,\n\t                startIdx,\n\t                endIdx;\n\n\n\t            that._lastActive = target;\n\t            if(!that._start) {\n\t                that.start(target);\n\t                that.trigger(CHANGE);\n\t                return;\n\t            }\n\n\t            if(that._start && !that._end) {\n\t                items = that.element.find(CELLSELECTOR);\n\n\t                startIdx = $.inArray($(that._start)[0], items);\n\t                endIdx = $.inArray($(target)[0], items);\n\n\t                if (+toDateObject($(that._start).find("a")) > +toDateObject($(target).find("a"))) {\n\t                    that.clear();\n\t                    that.start(target);\n\t                    that.trigger(CHANGE);\n\t                    return;\n\t                }\n\n\t                items = items.filter(function (index) {\n\t                    return index > startIdx && index < endIdx;\n\t                });\n\t                that.mid(items);\n\t                that.end($(target));\n\t                that.trigger(CHANGE);\n\t                return;\n\t            }\n\n\t            if (that._start && that._end) {\n\t                if (target.hasClass(MID)) {\n\t                    if (!that._toggling) {\n\t                        that.range(target, that._end);\n\t                    } else {\n\t                        that.range(that._start, target);\n\t                    }\n\t                    that._toggling = !that._toggling;\n\t                    that.trigger(CHANGE);\n\t                    return;\n\t                }\n\t                that._toggling = false;\n\t                that._end = null;\n\t                that.clear();\n\t                that.start(target);\n\t                that.trigger(CHANGE);\n\t            }\n\t        }\n\t    });\n\n\n\t    var MultiViewCalendar = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\t            var id;\n\t            var culture;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            element = that.wrapper = that.element;\n\t            options = that.options;\n\n\t            that.options.disableDates = calendar.disabled(that.options.disableDates);\n\n\t            culture = kendo.getCulture(options.culture);\n\t            options.format = kendo._extractFormat(options.format || culture.calendars.standard.patterns.d);\n\n\t            that._templates();\n\n\t            that._header();\n\n\t            that._wrapper();\n\n\t            id = element\n\t                .addClass("k-widget k-calendar k-calendar-range" + (options.weekNumber ? " k-week-number" : ""))\n\t                .on(KEYDOWN + ns, "table.k-content", proxy(that._move, that))\n\t                .on(BLUR + ns, "table", proxy(that._blur, that))\n\t                .on(CLICK + ns, CELLSELECTORVALID, function(e) {\n\t                    var link = e.currentTarget.firstChild;\n\n\t                    if (link.href.indexOf("#") != -1) {\n\t                        e.preventDefault();\n\t                    }\n\n\t                    that._click($(link));\n\t                })\n\t                .on(MOUSEENTER + ns, CELLSELECTORVALID, proxy(that._mouseEnter, that))\n\t                .on(MOUSELEAVE_NS, CELLSELECTORVALID, function() {\n\t                    $(this).removeClass(HOVER);\n\t                })\n\t                .attr(ID);\n\n\t            if (id) {\n\t                that._cellID = id + "_cell_selected";\n\t            }\n\n\t            that._calendarWidth = that.element.width();\n\n\t            that._range = options.range;\n\n\t            that._initViews({ viewName: options.start, value: options.value});\n\t            that._selectable();\n\n\t            that._footer(that.footer);\n\t            that._selectDates = [];\n\t            that.value(options.value);\n\n\t            if (options.selectable == "multiple") {\n\t                that._selectDates = options.selectDates.length ? options.selectDates : that._selectDates;\n\t                that._restoreSelection();\n\t            }\n\n\t            if (options.selectable == "range") {\n\t                that.selectRange(that._range);\n\t            }\n\n\t            kendo.notify(that);\n\t        },\n\n\t        options: {\n\t            name: "MultiViewCalendar",\n\t            value: null,\n\t            min: new DATE(1900, 0, 1),\n\t            max: new DATE(2099, 11, 31),\n\t            dates: [],\n\t            disableDates: null,\n\t            culture: "",\n\t            footer : "",\n\t            format : "",\n\t            month : {},\n\t            range : { start: null, end: null },\n\t            weekNumber: false,\n\t            views: 2,\n\t            showViewHeader: false,\n\t            selectable: "single",\n\t            selectDates: [],\n\t            start: MONTH,\n\t            depth: MONTH,\n\t            messages: {\n\t                weekColumnHeader: ""\n\t            }\n\t        },\n\n\t        events: [\n\t            CHANGE,\n\t            NAVIGATE\n\t        ],\n\n\t        setOptions: function(options) {\n\t            var that = this;\n\n\t            calendar.normalize(options);\n\n\t            options.disableDates = calendar.disabled(options.disableDates);\n\n\t            Widget.fn.setOptions.call(that, options);\n\n\t            that._selectable();\n\n\t            that._templates();\n\n\t            that._footer(that.footer);\n\n\t            for (var i = 0; i < that._views.length; i++) {\n\t                that._views[i].off(ns).remove();\n\t            }\n\n\t            that._initViews({ viewName: options.start, value: options.value});\n\n\t            that._range = options.range || { start: null, end: null };\n\n\t            that._restoreSelection();\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that._cell = null;\n\t            that._currentView = null;\n\t            that._current = null;\n\n\t            if (that._views) {\n\t                for (var i = 0; i < that._views.length; i++) {\n\t                    that._views[i].off(ns).remove();\n\t                }\n\t            }\n\n\t            that.element.off(ns);\n\n\t            if (that.header) {\n\t                that.header.off(ns);\n\t                that._title = null;\n\t                that.header = null;\n\t            }\n\n\t            if (that.selectable) {\n\t                that.selectable.destroy();\n\t                that.selectable = null;\n\t            }\n\n\t            if (that.rangeSelectable) {\n\t                that.rangeSelectable.destroy();\n\t                that.rangeSelectable = null;\n\t            }\n\n\t            if (that._today) {\n\t                kendo.destroy(that._today.off(ns));\n\t            }\n\n\t            that._views = null;\n\n\t            Widget.fn.destroy.call(that);\n\t        },\n\n\t        current: function() {\n\t            return this._current;\n\t        },\n\n\t        focus: function() {\n\t            var table;\n\n\t            if (this._cell) {\n\t                this._cell.closest("table").trigger("focus");\n\t            } else if (this._current && this._dateInViews(this._current)) {\n\t                this._cell = this._cellByDate(this._current);\n\t                this._cell.closest("table").trigger("focus");\n\t            } else {\n\t                table = this.element.find("table").first().trigger("focus");\n\t                this._cell = table.find(CELLSELECTORVALID + ":first");\n\t                this._current = toDateObject(this._cell.find("a"));\n\t            }\n\t            this._cell.addClass(FOCUSED);\n\t        },\n\n\t        min: function(value) {\n\t            return this._option(MIN, value);\n\t        },\n\n\t        max: function(value) {\n\t            return this._option("max", value);\n\t        },\n\n\t        view: function() {\n\t            return this._currentView;\n\t        },\n\n\t        navigateToPast: function() {\n\t            this._navigate(PREVARROW, -1);\n\t        },\n\n\t        navigateToFuture: function() {\n\t            this._navigate(NEXTARROW, 1);\n\t        },\n\n\t        navigateUp: function() {\n\t            var that = this,\n\t            index = that._index;\n\n\t            if (that._title.hasClass(DISABLED)) {\n\t                return;\n\t            }\n\n\t            that.navigate(that._current, ++index);\n\t        },\n\n\t        navigateDown: function(value) {\n\t            var that = this,\n\t            index = that._index,\n\t            depth = that.options.depth;\n\n\t            if (!value) {\n\t                return;\n\t            }\n\n\t            if (index === views[depth]) {\n\t                if (!isEqualDate(that._value, that._current) || !isEqualDate(that._value, value)) {\n\t                    that.value(value);\n\t                    that.trigger(CHANGE);\n\t                }\n\t                return;\n\t            }\n\n\t            that.navigate(value, --index);\n\t        },\n\n\t        navigate: function(value, view) {\n\t            view = isNaN(view) ? calendar.views[calendar.viewsEnum[view]] : calendar.views[view];\n\n\t            var that = this;\n\t            var options = that.options;\n\t            var min = options.min;\n\t            var max = options.max;\n\n\t            if (!value) {\n\t                that._current = value = new DATE(+calendar.restrictValue(value, min, max));\n\t            } else {\n\t                that._current = value;\n\t            }\n\n\t            if (view === undefined) {\n\t                view = that._currentView;\n\t            }\n\n\t            that._currentView = view;\n\n\t            for (var i = 0; i < that._views.length; i++) {\n\t                that._views[i].off(ns).remove();\n\t            }\n\n\t            that._initViews({ viewName: view.name, value: value });\n\n\t            that._restoreSelection();\n\t        },\n\n\t        _updateHeader: function() {\n\t            var that = this;\n\t            var view = that._currentView;\n\t            var title = that._title;\n\t            var value = that._firstViewValue;\n\t            var options = that.options;\n\t            var visibleRange = that._visibleRange();\n\t            var culture = options.culture;\n\t            var min = options.min;\n\t            var max = options.max;\n\t            var lastDate;\n\t            var disabled;\n\t            var prevDisabled;\n\t            var nextDisabled;\n\n\n\t            if (view.name === DECADE || view.name === CENTURY) {\n\t                lastDate = shiftDate(value, view.name, options.views - 1);\n\t                if (!isInRange(lastDate, min, max)) {\n\t                    lastDate = max;\n\t                }\n\n\t                title.html(view.first(value).getFullYear() + " - " + view.last(lastDate).getFullYear());\n\t            } else {\n\t                title.html(view.title(value, min, max, culture) + " - " + view.title(shiftDate(value, view.name, options.views - 1), min, max, culture));\n\t            }\n\n\t            disabled = view.name === CENTURY;\n\t            title.toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);\n\n\t            prevDisabled = view.compare(visibleRange.start, that.options.min) < 1;\n\t            nextDisabled = view.compare(visibleRange.end, that.options.max) > -1;\n\n\t            if (prevDisabled && nextDisabled) {\n\t                if (that._navContainer) {\n\t                    that._navContainer.remove();\n\t                    that._navContainer = null;\n\t                }\n\t            } else {\n\t                if (!that._navContainer) {\n\t                    that._navContainer = $(\'<span class="k-calendar-nav">\' +\n\t                    \'<a href="#" role="button" class="k-button k-button-icon k-prev-view" \' + ARIA_LABEL + \'="Previous"><span class="k-icon k-i-arrow-60-left"></span></a>\' +\n\t                    \'<a href="#" role="button" class="k-button k-button-icon k-next-view" \' + ARIA_LABEL + \'="Next"><span class="k-icon k-i-arrow-60-right"></span></a>\' +\n\t                    \'</span>\').appendTo(that.header);\n\t                    that[PREVARROW] = that._navContainer.find(".k-prev-view");\n\t                    that[NEXTARROW] = that._navContainer.find(".k-next-view");\n\t                }\n\n\t                that[PREVARROW].toggleClass(DISABLED, prevDisabled).attr(ARIA_DISABLED, prevDisabled);\n\t                if (that[PREVARROW].hasClass(DISABLED)) {\n\t                    that[PREVARROW].removeClass(HOVER);\n\t                }\n\n\t                that[NEXTARROW].toggleClass(DISABLED, nextDisabled).attr(ARIA_DISABLED, nextDisabled);\n\t                if (that[NEXTARROW].hasClass(DISABLED)) {\n\t                    that[NEXTARROW].removeClass(HOVER);\n\t                }\n\t            }\n\t        },\n\n\t        _mouseEnter: function(e) {\n\t            var that = this;\n\t            var cell = $(e.currentTarget);\n\t            var range;\n\t            var items;\n\t            var startIdx;\n\t            var endIdx;\n\n\t            cell.addClass(HOVER);\n\n\t            if (that.rangeSelectable && that._currentView.name === "month") {\n\t                range = that.selectRange();\n\t                if (range.start && !range.end) {\n\t                    if (that._dateInViews(that.selectRange().start)) {\n\t                        items = that.element.find(that.rangeSelectable.options.filter);\n\t                        startIdx = $.inArray($(that.rangeSelectable._start)[0], items);\n\t                        endIdx = $.inArray($(cell)[0], items);\n\t                        if (startIdx > endIdx) {\n\t                            return;\n\t                        }\n\t                        that.rangeSelectable.range(that.rangeSelectable._start, cell);\n\t                    } else if(+toDateObject(that.element.find(CELLSELECTOR + ":first").find("a")) > +range.start) {\n\t                        that.rangeSelectable.selectTo(cell);\n\t                    }\n\t                    that.rangeSelectable._end = null;\n\t                }\n\t            }\n\t        },\n\n\t        _move: function(e, preventFocus) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var key = e.keyCode;\n\t            var index = that._index;\n\t            var min = options.min;\n\t            var max = options.max;\n\t            var focusedCell = that.element.find(DOT+FOCUSED);\n\t            var table = focusedCell.closest("table");\n\t            var currentValue = new DATE(+(that._current || toDateObject(focusedCell.find("a"))));\n\t            var isRtl = kendo.support.isRtl(that.wrapper);\n\t            var navigate = false;\n\t            var value, prevent, method, cell, lastActive, cellIndex;\n\n\t            if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {\n\t                value = 1;\n\t                prevent = true;\n\t            } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {\n\t                value = -1;\n\t                prevent = true;\n\t            } else if (key == keys.UP) {\n\t                value = index === 0 ? -7 : -4;\n\t                prevent = true;\n\t            } else if (key == keys.DOWN) {\n\t                value = index === 0 ? 7 : 4;\n\t                prevent = true;\n\t            }\n\t            else if (key == keys.SPACEBAR) {\n\t                value = 0;\n\t                prevent = true;\n\t            }\n\t            else if (key == keys.HOME) {\n\t                prevent = true;\n\t                cell = table.find(CELLSELECTORVALID).eq(0);\n\t                if (cell.hasClass(FOCUSED)) {\n\t                    table = table.prev();\n\t                    if (table.length) {\n\t                        that._focusCell(table.find(CELLSELECTORVALID).eq(0));\n\t                    } else {\n\t                        navigate = that[PREVARROW] && !that[PREVARROW].hasClass(DISABLED);\n\t                        that._navigate(PREVARROW, -1, preventFocus);\n\t                        that._focusCell(that.element.find("table:first " + CELLSELECTORVALID + ":first"));\n\t                    }\n\t                } else {\n\t                    that._focusCell(cell);\n\t                }\n\t            } else if(key == keys.END) {\n\t                prevent = true;\n\t                cell = table.find(CELLSELECTORVALID).last();\n\t                if (cell.hasClass(FOCUSED)) {\n\t                    table = table.next();\n\t                    if (table.length) {\n\t                        that._focusCell(table.find(CELLSELECTORVALID).last());\n\t                    } else {\n\t                        navigate = that[NEXTARROW] && !that[NEXTARROW].hasClass(DISABLED);\n\t                        that._navigate(NEXTARROW, 1, preventFocus);\n\t                        that._focusCell(that.element.find("table:last " + CELLSELECTORVALID + ":last"));\n\t                    }\n\t                } else {\n\t                    that._focusCell(cell);\n\t                }\n\t            }\n\n\t            if (e.ctrlKey || e.metaKey) {\n\t                if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {\n\t                    navigate = that[NEXTARROW] && !that[NEXTARROW].hasClass(DISABLED);\n\t                    that._navigate(NEXTARROW, 1, preventFocus);\n\t                    prevent = true;\n\t                } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {\n\t                    navigate = that[PREVARROW] && !that[PREVARROW].hasClass(DISABLED);\n\t                    that._navigate(PREVARROW, -1, preventFocus);\n\t                    prevent = true;\n\t                } else if (key == keys.UP) {\n\t                    navigate = !that._title.hasClass(DISABLED);\n\t                    that.navigateUp();\n\t                    that._focusCell(that._cellByDate(that._current), !preventFocus);\n\t                    prevent = true;\n\t                } else if (key == keys.DOWN) {\n\t                    if (that._currentView.name === "month") {\n\t                        that.value(currentValue);\n\t                    } else {\n\t                        that.navigateDown(currentValue);\n\t                        that._focusCell(that._cellByDate(that._current), !preventFocus);\n\t                        navigate = true;\n\t                    }\n\t                    prevent = true;\n\t                } else if ((key == keys.ENTER || key == keys.SPACEBAR)) {\n\t                    if (options.selectable === "multiple") {\n\t                        that._toggleSelection(e);\n\t                    }\n\t                }\n\t            } else if (e.shiftKey && options.selectable !== "single") {\n\t                if (value !== undefined || method) {\n\t                    if (!method) {\n\t                        that._currentView.setDate(currentValue, value);\n\t                    }\n\n\t                    if (that._currentView.name !== "month") {\n\t                        return;\n\t                    }\n\n\t                    if (options.disableDates(currentValue)) {\n\t                        currentValue = that._nextNavigatable(currentValue, value);\n\t                    }\n\n\t                    min = createDate(min.getFullYear(), min.getMonth(), min.getDate());\n\n\t                    if (isInRange(currentValue, min, max)) {\n\t                        if (!that._dateInViews(currentValue)) {\n\t                            if (value > 0) {\n\t                                navigate = that[NEXTARROW] && !that[NEXTARROW].hasClass(DISABLED);\n\t                                that._navigate(NEXTARROW, 1, preventFocus);\n\t                            } else {\n\t                                navigate = that[PREVARROW] && !that[PREVARROW].hasClass(DISABLED);\n\t                                that._navigate(PREVARROW, -1, preventFocus);\n\t                            }\n\t                        }\n\t                        cell = that._cellByDate(currentValue);\n\t                        that._current = currentValue;\n\n\t                        if (that.selectable) {\n\t                            that._selectRange(toDateObject((that.selectable._lastActive || focusedCell).find("a")), currentValue);\n\t                            if (!that.selectable._lastActive) {\n\t                                that.selectable._lastActive = focusedCell;\n\t                            }\n\t                            that.trigger(CHANGE);\n\t                            that._focusCell(cell);\n\t                        }\n\n\t                        if (that.rangeSelectable) {\n\t                            lastActive = toDateObject((that.rangeSelectable._lastActive || focusedCell).find("a"));\n\t                            if (!that._dateInViews(lastActive)) {\n\t                                if (+lastActive > +currentValue) {\n\t                                    that.rangeSelectable._end = that.rangeSelectable._lastActive;\n\t                                    that.rangeSelectable.selectFrom(cell);\n\t                                } else {\n\t                                    that.rangeSelectable.selectTo(cell);\n\t                                }\n\t                            } else {\n\t                                if (that.rangeSelectable._end && that.rangeSelectable._end.is(DOT+FOCUSED)) {\n\t                                    that.rangeSelectable._lastActive = that.rangeSelectable._start;\n\t                                } else {\n\t                                    that.rangeSelectable._lastActive = that._cellByDate(lastActive);\n\t                                }\n\t                                that.rangeSelectable.range(that.rangeSelectable._lastActive, cell);\n\t                            }\n\t                            that.rangeSelectable.change();\n\t                            that._focusCell(cell);\n\t                        }\n\t                    }\n\t                }\n\t            } else {\n\t                if (key == keys.ENTER || key == keys.SPACEBAR) {\n\t                    if (that._currentView.name === "month") {\n\t                        if (that.selectable) {\n\t                            that.selectable._lastActive = that._cellByDate(currentValue);\n\t                        }\n\t                        that.value(currentValue);\n\t                        if (that.rangeSelectable) {\n\t                            that.rangeSelectable.change();\n\t                        }\n\t                    } else {\n\t                        that._click($(that._cell[0].firstChild), preventFocus);\n\t                    }\n\t                    prevent = true;\n\t                } else if (key == keys.PAGEUP || key == keys.PAGEDOWN) {\n\t                    prevent = true;\n\t                    cellIndex = table.find(CELLSELECTORVALID).index(focusedCell);\n\t                    table = key == keys.PAGEUP ? table.prev() : table.next();\n\t                    if (!table.length) {\n\t                        if (key == keys.PAGEUP) {\n\t                            navigate = that[PREVARROW] && !that[PREVARROW].hasClass(DISABLED);\n\t                            that.navigateToPast();\n\t                            table = that.element.find("table:first");\n\t                        } else {\n\t                            navigate = that[NEXTARROW] && !that[NEXTARROW].hasClass(DISABLED);\n\t                            that.navigateToFuture();\n\t                            table = that.element.find("table:last");\n\t                        }\n\t                    }\n\t                    cell = table.find(CELLSELECTORVALID).eq(cellIndex);\n\t                    if (cell.length) {\n\t                        that._focusCell(cell);\n\t                    } else {\n\t                        that._focusCell(table.find(CELLSELECTORVALID).last());\n\t                    }\n\t                }\n\n\t                if (value || method) {\n\t                    if (!method) {\n\t                        that._currentView.setDate(currentValue, value);\n\t                    }\n\n\t                    min = createDate(min.getFullYear(), min.getMonth(), min.getDate());\n\n\t                    if (isInRange(currentValue, min, max)) {\n\t                        if (that.selectable && options.disableDates(currentValue)) {\n\t                            currentValue = that._nextNavigatable(currentValue, value);\n\t                        }\n\t                        if (!that._dateInViews(currentValue)) {\n\t                            if (value > 0) {\n\t                                navigate = that[NEXTARROW] && !that[NEXTARROW].hasClass(DISABLED);\n\t                                that._navigate(NEXTARROW, 1, preventFocus);\n\t                            } else {\n\t                                navigate = that[PREVARROW] && !that[PREVARROW].hasClass(DISABLED);\n\t                                that._navigate(NEXTARROW, -1, preventFocus);\n\t                            }\n\t                        }\n\t                        cell = that._cellByDate(currentValue);\n\t                        that._current = currentValue;\n\t                        that._focusCell(cell, !preventFocus);\n\t                    }\n\t                }\n\t            }\n\n\t            if (navigate) {\n\t                that.trigger(NAVIGATE);\n\t            }\n\n\t            if (prevent) {\n\t                e.preventDefault();\n\t            }\n\n\t            return that._current;\n\n\t        },\n\n\t        _visualizeSelectedDatesInView: function() {\n\t            var that = this;\n\t            var selectedDates = {};\n\t            var cells;\n\n\t            $.each(that._selectDates, function(index, value) {\n\t                selectedDates[kendo.calendar.views[0].toDateString(value)] = value;\n\t            });\n\t            that.selectable.clear();\n\t            cells = that.element.find("table")\n\t                .find(CELLSELECTOR)\n\t                .filter(function(index, element) {\n\t                    return selectedDates[$(element.firstChild).attr(kendo.attr(VALUE))];\n\t                });\n\n\t            if (cells.length > 0) {\n\t                that.selectable._selectElement(cells, true);\n\t            }\n\t        },\n\n\t        _nextNavigatable: function(currentValue, value) {\n\t            var that = this;\n\t            var disabled = true;\n\t            var view = that._currentView;\n\t            var min = that.options.min;\n\t            var max = that.options.max;\n\t            var isDisabled = that.options.disableDates;\n\t            var navigatableDate = new Date(currentValue.getTime());\n\n\t            view.setDate(navigatableDate, -value);\n\t            while (disabled) {\n\t                view.setDate(currentValue, value);\n\t                 if (!isInRange(currentValue, min, max)) {\n\t                    currentValue = navigatableDate;\n\t                    break;\n\t                }\n\t                disabled = isDisabled(currentValue);\n\t            }\n\t            return currentValue;\n\t        },\n\n\t        _toggleSelection: function (event) {\n\t            var that = this;\n\n\t            that.selectable._lastActive = $(that._cell[0]);\n\n\t            if ($(that._cell[0]).hasClass(SELECTED)) {\n\t                that.selectable._unselect($(that._cell[0]));\n\t                that.selectable.trigger(CHANGE, { event: event});\n\t            }\n\t            else {\n\t                that.selectable.value($(that._cell[0]), { event: event});\n\t            }\n\t        },\n\n\t        _option: function(option, value) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var currentValue = that._value || that._current;\n\t            var isBigger;\n\n\t            if (value === undefined) {\n\t                return options[option];\n\t            }\n\n\t            value = kendo.parseDate(value, options.format, options.culture);\n\n\t            if (!value) {\n\t                return;\n\t            }\n\n\t            options[option] = new DATE(+value);\n\n\t            if (option === MIN) {\n\t                isBigger = value > currentValue;\n\t            } else {\n\t                isBigger = currentValue > value;\n\t            }\n\n\t            if (isBigger) {\n\t                that._value = null;\n\t            }\n\n\t            that.navigate(that._value);\n\n\t            that._toggle();\n\t        },\n\n\t        _cellByDate: function(value) {\n\t            if (value instanceof Date) {\n\t                value = this._currentView.toDateString(value);\n\t            }\n\t            return this.element.find("table").find("td:not(." + OTHERMONTH + ")")\n\t            .filter(function() {\n\t                return $(this.firstChild).attr(kendo.attr(VALUE)) === value;\n\t            });\n\t        },\n\n\t        _selectable: function () {\n\t            var that = this;\n\t            var selectable = that.options.selectable;\n\n\t            if (that.selectable) {\n\t                that.selectable.destroy();\n\t                that.selectable = null;\n\t            }\n\n\t            if (that.rangeSelectable) {\n\t                that.rangeSelectable.destroy();\n\t                that.rangeSelectable = null;\n\t            }\n\n\t            if (selectable.toLowerCase() === "range") {\n\t                that.rangeSelectable = new RangeSelectable(that.wrapper, {\n\t                    filter: "table.k-month " + CELLSELECTORVALID,\n\t                    change: proxy(that._rangeSelection, that)\n\t                });\n\t            } else {\n\t                that.selectable = new Selectable(that.wrapper, {\n\t                    aria: true,\n\t                    dragToSelect: false,\n\t                    inputSelectors: "input,textarea,.k-multiselect-wrap,select,button,.k-button>span,.k-button>img,span.k-icon.k-i-arrow-60-down,span.k-icon.k-i-arrow-60-up",\n\t                    multiple: Selectable.parseOptions(selectable).multiple,\n\t                    filter: "table.k-content " + CELLSELECTORVALID,\n\t                    change: proxy(that._selection, that),\n\t                    relatedTarget: proxy(that._onRelatedTarget, that),\n\t                    unselect: proxy(that._unselecting, that)\n\t                });\n\t            }\n\t        },\n\n\t        _onRelatedTarget: function(target) {\n\t            var that = this;\n\n\t            if (that.selectable.options.multiple && target.is(CELLSELECTORVALID) && target.length > 1) {\n\t                that._focusCell(target.first(), true);\n\t            }\n\t        },\n\n\t        _getFirstViewDate: function(currentView) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var ranges = [];\n\t            var start;\n\t            var end;\n\t            var current = new Date(+that._current);\n\t            var i;\n\n\t            for (i = 0; i < options.views; i++) {\n\t                start = currentView.first(current);\n\t                end =  currentView.last(current);\n\n\t                if (+end > +options.max) {\n\t                    if (+start <= +options.max) {\n\t                        ranges.push({start: start, end: new Date(+options.max)});\n\t                    }\n\t                    break;\n\t                }\n\n\t                ranges.push({start: start, end: end});\n\n\t                current = new Date(+shiftDate(end, currentView.name, 1));\n\t            }\n\n\t            current = new Date(+that._current);\n\n\t            for (i = 0; i < options.views; i++) {\n\t                start = currentView.first(current);\n\t                end = currentView.last(current);\n\n\t                if (+start < +options.min) {\n\t                    if (+end >= +options.min) {\n\t                        ranges.push({start: new Date(+options.min), end: end});\n\t                    }\n\t                    break;\n\t                }\n\n\t                ranges.push({start: start, end: end});\n\n\t                current = new Date(+shiftDate(start, currentView.name, -1));\n\t            }\n\n\t            start = ranges[0].start;\n\n\t            for (i = 0; i < options.views + 1; i++) {\n\t                if (!ranges[i]) {\n\t                    break;\n\t                }\n\n\t                if (+start > +ranges[i].start) {\n\t                    start = ranges[i].start;\n\t                }\n\t            }\n\n\t            return new Date(+start);\n\t        },\n\n\t        _canRenderNextView: function(viewDate) {\n\t            var fullYear = viewDate.getFullYear();\n\t            var month = viewDate.getMonth();\n\t            var date = viewDate.getDate();\n\t            var max = this.options.max;\n\t            var maxYear = max.getFullYear();\n\t            var maxMonth = max.getMonth();\n\n\n\t            if (fullYear < maxYear) {\n\t                return true;\n\t            }\n\n\t            if (fullYear === maxYear && month < maxMonth) {\n\t                return true;\n\t            }\n\n\t            if (fullYear === maxYear &&  month === maxMonth &&  date < max.getDate()) {\n\t                return true;\n\t            }\n\n\t            if (fullYear === maxYear &&  month === maxMonth &&  date === max.getDate()) {\n\t                return true;\n\t            }\n\n\t            return false;\n\t        },\n\n\t        _initViews: function(viewOptions) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var index = calendar.viewsEnum[viewOptions.viewName];\n\t            var currentView = calendar.views[index];\n\t            var viewDate;\n\n\t            that._current = new DATE(+calendar.restrictValue(viewOptions.value, options.min, options.max));\n\t            that._views = [];\n\t            that._index = index;\n\t            viewDate = that._getFirstViewDate(currentView);\n\t            viewDate.setDate(1);\n\n\t            that._firstViewValue = new Date(+viewDate);\n\n\t            for (var i = 0; i < options.views; i++) {\n\t                viewDate = i ? shiftDate(viewDate, currentView.name, 1): viewDate;\n\t                viewDate.setDate(1);\n\n\t                if (!that._canRenderNextView(viewDate)) {\n\t                    break;\n\t                }\n\n\t                that._table = $(currentView.content($.extend({\n\t                    min: options.min,\n\t                    max: options.max,\n\t                    date: viewDate,\n\t                    url: options.url,\n\t                    dates: options.dates,\n\t                    format: options.format,\n\t                    culture: options.culture,\n\t                    disableDates: options.disableDates,\n\t                    showHeader: options.showViewHeader,\n\t                    isWeekColumnVisible: options.weekNumber,\n\t                    otherMonth: options.otherMonth,\n\t                    messages: options.messages,\n\t                    contentClasses: "k-content"\n\t                }, that[currentView.name])));\n\n\t                that._table.appendTo(that.tablesWrapper).addClass("k-" + currentView.name);\n\t                that._views.push(that._table);\n\t            }\n\n\t            // that.wrapper.width(visibleViews * that._calendarWidth);\n\n\t            that._currentView = currentView;\n\n\t            that.tablesWrapper.attr("class", "k-calendar-view k-calendar-" + currentView.name + "view");\n\n\t            that._updateHeader();\n\t        },\n\n\t        _rangeSelection: function(e) {\n\t            var that = this;\n\t            var range = e.sender.range();\n\t            var start;\n\t            var end;\n\n\t            if (range.start) {\n\t                start = toDateObject(range.start.find("a"));\n\t            }\n\n\t            if (range.end) {\n\t                end = toDateObject(range.end.find("a"));\n\t            }\n\n\t            that._range = { start: start, end: end };\n\n\t            if (!that._preventChange) {\n\t                that.trigger(CHANGE);\n\t            }\n\t        },\n\n\t        _selection: function(e) {\n\t            var that = this;\n\t            var selectElements = e.sender.value();\n\t            var domEvent = e.event;\n\t            var currentTarget = $(domEvent && domEvent.currentTarget);\n\t            var isCell = currentTarget.is("td");\n\t            var currentValue;\n\n\t            if (that.options.selectable === "single") {\n\t                that._validateValue(selectElements[0] ? toDateObject(selectElements.first().find("a")) : e.sender._lastActive ? toDateObject(e.sender._lastActive.find("a")) : that.value());\n\t            }\n\n\t            if (that.options.selectable == "multiple") {\n\n\t                if (isCell) {\n\t                    currentValue = toDateObject(currentTarget.find("a"));\n\t                }\n\n\t                if (domEvent && domEvent.ctrlKey) {\n\t                    if (isCell) {\n\t                        if (currentTarget.hasClass(SELECTED)) {\n\t                            that._selectDates.push(currentValue);\n\t                        } else {\n\t                            that._deselect(currentValue);\n\t                        }\n\t                    } else {\n\t                        that.element.find("table " + CELLSELECTORVALID).each(function(index, element){\n\t                            var value = toDateObject($(element).find("a"));\n\t                            that._deselect(value);\n\t                        });\n\t                        that._addSelectedCellsToArray();\n\t                    }\n\t                } else if (domEvent && domEvent.shiftKey) {\n\t                    that._selectRange(toDateObject(e.sender._lastActive ? e.sender._lastActive.find("a") : selectElements.first().find("a")), currentValue);\n\t                } else if (isCell) {\n\t                    that._selectDates  = [];\n\t                    that._selectDates.push(currentValue);\n\t                } else {\n\t                    that._selectDates = [];\n\t                    that._addSelectedCellsToArray();\n\t                }\n\t            }\n\n\t            if (!that._preventChange) {\n\t                that.trigger(CHANGE);\n\t            }\n\t        },\n\n\t        _addSelectedCellsToArray: function() {\n\t            var that = this;\n\t            that.selectable.value().each(function(index, item) {\n\t                var date = toDateObject($(item.firstChild));\n\t                if (!that.options.disableDates(date)) {\n\t                    that._selectDates.push(date);\n\t                }\n\t            });\n\t        },\n\n\t        _deselect: function(date) {\n\t            var that = this;\n\t            var currentDateIndex = that._selectDates.map(Number).indexOf(+date);\n\t             if (currentDateIndex != -1) {\n\t                that._selectDates.splice(currentDateIndex, 1);\n\t            }\n\t        },\n\n\t        _unselecting: function(e) {\n\t            var that = this;\n\t            var element = e.element;\n\n\t            if (that.options.selectable === "single" && !mobileOS && element.hasClass(FOCUSED)) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _visibleRange: function () {\n\t            var tables = this.element.find(".k-calendar-view table");\n\t            var firstDateInView = toDateObject(tables.first().find(CELLSELECTOR + ":first").find("a"));\n\t            var lastDateInView = toDateObject(tables.last().find(CELLSELECTOR + ":last").find("a"));\n\t            return { start : firstDateInView, end: lastDateInView };\n\t        },\n\n\t        _dateInViews: function(date) {\n\t            var that = this;\n\t            var tables = that.element.find(".k-calendar-view table");\n\t            var firstDateInView = toDateObject(tables.first().find(CELLSELECTOR + ":first").find("a"));\n\t            var lastDateInView = toDateObject(tables.last().find(CELLSELECTOR + ":last").find("a"));\n\n\t            return +date <= +lastDateInView && +date >= +firstDateInView;\n\t        },\n\n\t        _fillRange: function(start, end) {\n\t            var that = this;\n\t            var daysDifference;\n\n\t            that._selectDates = [];\n\t            daysDifference = daysBetweenTwoDates(start, end);\n\t            addDaysToArray(that._selectDates, daysDifference, start, that.options.disableDates);\n\t        },\n\n\t        _selectRange: function(start, end) {\n\t            var that = this;\n\t            var current;\n\n\t            if (+end < +start) {\n\t                current = end;\n\t                end = start;\n\t                start = current;\n\t            }\n\n\t            that._fillRange(start, end);\n\t            that._visualizeSelectedDatesInView();\n\t        },\n\n\t        _header: function() {\n\t            var that = this;\n\t            var element = that.element;\n\t            var buttons;\n\t            var header = element.find(".k-calendar-header");\n\n\t            if (!header.length) {\n\t                header = $(\'<div class="k-calendar-header">\' +\n\t                    \'<a href="#" role="button" class="k-button k-title" aria-live="assertive" aria-atomic="true"></a>\' +\n\t                    \'<span class="k-calendar-nav">\' +\n\t                        \'<a href="#" role="button" class="k-button k-button-icon k-prev-view" \' + ARIA_LABEL + \'="Previous"><span class="k-icon k-i-arrow-60-left"></span></a>\' +\n\t                        \'<a href="#" role="button" class="k-button k-button-icon k-next-view" \' + ARIA_LABEL + \'="Next"><span class="k-icon k-i-arrow-60-right"></span></a>\' +\n\t                    \'</span>\' +\n\t                \'</div>\').prependTo(element);\n\t            }\n\n\t            that.header = header;\n\n\t            header.on(MOUSEENTER + ns + " " + MOUSELEAVE_NS + " " + FOCUS + ns + " " + BLUR + ns, ".k-button", mousetoggle).on("click", function() { return false; })\n\t                .on(CLICK + ns, ".k-button.k-title", function() { that.navigateUp(); that._focusCell(that._cellByDate(that._current), true); that.trigger(NAVIGATE); })\n\t                .on(CLICK + ns, ".k-button.k-prev-view", function(e) { e.preventDefault(); that.navigateToPast(); that.trigger(NAVIGATE); })\n\t                .on(CLICK + ns, ".k-button.k-next-view", function(e) { e.preventDefault(); that.navigateToFuture(); that.trigger(NAVIGATE); });\n\n\t            buttons = header.find(".k-button");\n\n\t            that._title = buttons.filter(".k-title");\n\t            that._navContainer= header.find(".k-calendar-nav");\n\t            that[PREVARROW] = buttons.filter(".k-prev-view");\n\t            that[NEXTARROW] = buttons.filter(".k-next-view");\n\t        },\n\n\t        _wrapper: function() {\n\t            this.tablesWrapper = $(\'<div class="k-calendar-view" />\').insertAfter(this.element[0].firstChild);\n\t        },\n\n\t        _templates: function() {\n\t            var that = this;\n\t            var options = that.options;\n\t            var month = options.month;\n\t            var content = month.content;\n\t            var weekNumber = month.weekNumber;\n\t            var empty = month.empty;\n\n\t            that.month = {\n\t                content: template(\'<td#=data.cssClass# role="gridcell"><a tabindex="-1" class="k-link#=data.linkClass#" href="#=data.url#" \' + kendo.attr(VALUE) + \'="#=data.dateString#" title="#=data.title#">\' + (content || "#=data.value#") + \'</a></td>\', { useWithBlock: !!content }),\n\t                empty: template(\'<td role="gridcell"\' + (empty ? \'>\' : \' class="k-out-of-range">\') + (empty || "<a class=\'k-link\'></a>") + "</td>", { useWithBlock: !!empty }),\n\t                weekNumber: template(\'<td class="k-alt">\' + (weekNumber || "#= data.weekNumber #") + "</td>", { useWithBlock: !!weekNumber })\n\t            };\n\t        },\n\n\t        _footer: function() {\n\t            var that = this;\n\t            var options = that.options;\n\t            var template = options.footer !== false ? kendo.template(that.options.footer || \'#= kendo.toString(data,"D","\' + options.culture +\'") #\', { useWithBlock: false }) : null;\n\t            var today = getToday();\n\t            var element = that.element;\n\t            var footer = element.find(".k-footer");\n\n\t            if (!template) {\n\t                that._toggle(false);\n\t                footer.hide();\n\t                return;\n\t            }\n\n\t            if (!footer[0]) {\n\t                footer = $(\'<div class="k-footer"><a href="#" class="k-link k-nav-today"></a></div>\').appendTo(element);\n\t            }\n\n\t            that._today = footer.show()\n\t                .find(".k-link")\n\t                .html(template(today))\n\t                .attr("title", kendo.toString(today, "D", that.options.culture));\n\n\t            that._toggle();\n\t        },\n\n\t        _navigate: function(arrow, modifier, preventFocus) {\n\t            var that = this;\n\t            var index = that._index + 1;\n\t            var currentValue = new DATE(+that._current);\n\t            var originaValue = new DATE(+that._current);\n\t            var offset;\n\n\t            arrow = that[arrow];\n\n\t            offset = that._cellByDate(currentValue).closest("table").index();\n\n\t            if (modifier > 0) {\n\t                offset = 1 - offset;\n\t            } else {\n\t                offset = offset + 1;\n\t            }\n\n\t            if (!arrow || !arrow.hasClass(DISABLED)) {\n\t                if (index > 3) {\n\t                    currentValue.setFullYear(currentValue.getFullYear() + 100 * (modifier * offset));\n\t                } else {\n\t                    calendar.views[index].setDate(currentValue, (modifier * offset));\n\t                }\n\n\t                that.navigate(currentValue);\n\n\t                if (that._dateInViews(originaValue)) {\n\t                    that._focusCell(that._cellByDate(originaValue), !preventFocus);\n\t                    that._current = originaValue;\n\t                } else {\n\t                    if (index > 3) {\n\t                        originaValue.setFullYear(originaValue.getFullYear() + 100 * modifier);\n\t                    } else {\n\t                        calendar.views[index].setDate(originaValue, modifier);\n\t                    }\n\t                    that._focusCell(that._cellByDate(originaValue), !preventFocus);\n\t                    that._current = originaValue;\n\t                }\n\t            }\n\t        },\n\n\t        _toggle: function(toggle) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var isTodayDisabled = options.selectable !== "range" && that.options.disableDates(getToday());\n\t            var link = that._today;\n\n\t            if (toggle === undefined) {\n\t                toggle = isInRange(getToday(), options.min, options.max);\n\t            }\n\n\t            if (link) {\n\t                link.off(CLICK + ns);\n\n\t                if (toggle && !isTodayDisabled) {\n\t                    link.addClass(TODAY)\n\t                    .removeClass(DISABLED)\n\t                    .on(CLICK + ns, proxy(that._todayClick, that));\n\t                } else {\n\t                    link.removeClass(TODAY)\n\t                    .addClass(DISABLED)\n\t                    .on(CLICK + ns, function prevent (e) {\n\t                        e.preventDefault();\n\t                    });\n\t                }\n\t            }\n\t        },\n\n\t        _click: function(link, preventFocus) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var currentValue = new Date(+that._current);\n\t            var value = toDateObject(link);\n\n\t            kendo.date.adjustDST(value, 0);\n\n\t            that._currentView.setDate(currentValue, value);\n\t            that._current = value;\n\n\t            if (that._currentView.name !== options.depth) {\n\t                that.navigateDown(calendar.restrictValue(currentValue, options.min, options.max));\n\t                that._focusCell(that._cellByDate(that._current), !preventFocus);\n\t                that.trigger(NAVIGATE);\n\t            } else {\n\t                that._focusCell(link.closest("td"), !preventFocus);\n\t            }\n\t        },\n\n\t        _blur: function() {\n\t            var that = this;\n\n\t            if (that._cell) {\n\t                that._cell.removeClass(FOCUSED);\n\t            }\n\t        },\n\n\t        _focus: function(e) {\n\t            var that = this;\n\t            var table = $(e.currentTarget);\n\t            var cell = that._cell;\n\n\t            if (!cell || !$.contains(table[0], cell[0])) {\n\t                cell = table.find(CELLSELECTORVALID + ":first");\n\t            }\n\n\t            that._focusCell(cell);\n\t        },\n\n\t        _focusCell: function(cell, focusTable) {\n\t            var that = this;\n\t            var cellId = that._cellID;\n\t            var table = cell.closest("table");\n\n\t            if (that._cell && that._cell.length) {\n\t                that._cell[0].removeAttribute(ARIA_SELECTED);\n\t                that._cell[0].removeAttribute(ARIA_LABEL);\n\t                that._cell.removeClass(FOCUSED);\n\t                that._cell[0].removeAttribute(ID);\n\t                that._cell.closest("table")[0].removeAttribute("aria-activedescendant");\n\t            }\n\n\t            that._cell = cell;\n\n\t            if (focusTable) {\n\t                table.trigger("focus");\n\t            }\n\n\t            if (cellId) {\n\t                cell.attr(ID, cellId);\n\t                table.attr("aria-activedescendant", cellId);\n\t            }\n\n\t            cell.attr(ARIA_SELECTED, true).addClass(FOCUSED);\n\n\t            if (cell.length && that._currentView.name == "month") {\n\t                that._current = toDateObject(cell.find("a"));\n\t            }\n\t        },\n\n\t        _todayClick: function(e) {\n\t            var that = this;\n\t            var disabled = that.options.disableDates;\n\t            var today = getToday();\n\t            var navigate = false;\n\n\t            e.preventDefault();\n\n\t            if (disabled(today)) {\n\t                return;\n\t            }\n\n\t            that._value = today;\n\n\t            if (that.options.selectable === "multiple") {\n\t                that._selectDates = [today];\n\t            }\n\n\t            if (that.options.selectable === "range") {\n\t                that.rangeSelectable.clear(true);\n\t                that._range = { start: today, end: null };\n\t            }\n\n\t            if (that._currentView.name != "month" || !that._dateInViews(today)) {\n\t                navigate = true;\n\t            }\n\n\t            that.navigate(today, that.options.depth);\n\n\t            if (that.options.selectable === "single") {\n\t                that.selectable._lastActive = null;\n\t            }\n\n\t            if (navigate) {\n\t                that.trigger(NAVIGATE);\n\t            }\n\n\t            that.trigger(CHANGE);\n\t        },\n\n\t        _validateValue: function(value) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var min = options.min;\n\t            var max = options.max;\n\n\t            value = kendo.parseDate(value, options.format, options.culture);\n\n\t            if (value !== null) {\n\t                value = new DATE(+value);\n\n\t                if (!isInRange(value, min, max)) {\n\t                    value = null;\n\t                }\n\t            }\n\n\t            if (value === null || !that.options.disableDates(new Date(+value))) {\n\t                that._value = value;\n\t            } else if (that._value === undefined) {\n\t                that._value = null;\n\t            }\n\n\t            return that._value;\n\t        },\n\n\t        clearSelection: function () {\n\t            var that = this;\n\n\t            if (that.selectable) {\n\t                that.element.find(DOT+SELECTED).removeClass(SELECTED);\n\t            }\n\n\t            if (that.rangeSelectable) {\n\t                that.rangeSelectable.clear(true);\n\t            }\n\t        },\n\n\t        _restoreSelection: function() {\n\t            var that = this;\n\t            var range;\n\t            var selectable = that.options.selectable;\n\n\t            if (that._currentView.name !== that.options.depth) {\n\t                return;\n\t            }\n\n\t            that._preventChange = true;\n\n\t            if (selectable === "range") {\n\t                range = that.selectRange();\n\n\t                if (!range || !range.start) {\n\t                    that._preventChange = false;\n\t                    return;\n\t                }\n\n\t                that.selectRange(range);\n\t            }\n\n\t            if (selectable === "single" && that.value()) {\n\t                that.selectable.value(that._cellByDate(that.value()));\n\t            }\n\n\t            if (selectable === "multiple") {\n\t                that._visualizeSelectedDatesInView();\n\t            }\n\n\t            that._preventChange = false;\n\t        },\n\n\t        value: function(value) {\n\t            var that = this;\n\t            var cell;\n\n\t            if (value === undefined) {\n\t                return that._value;\n\t            }\n\n\t            value = that._validateValue(value);\n\n\t            that.clearSelection();\n\n\t            if (value && !that._dateInViews(value)) {\n\t                that.navigate(value);\n\t            }\n\n\t            if (value !== null && that._currentView.name === MONTH) {\n\t                cell = that._cellByDate(value);\n\n\t                if (that.selectable) {\n\t                    that.selectable.value(cell);\n\t                }\n\n\t                if (that.rangeSelectable) {\n\t                    that.rangeSelectable.start(cell);\n\t                    that.rangeSelectable._lastActive = cell;\n\t                }\n\t            }\n\t        },\n\n\t        selectDates: function(dates) {\n\t            var that = this;\n\t            var validSelectedDates;\n\t            var datesUnique;\n\n\t            if(dates === undefined) {\n\t                return that._selectDates;\n\t            }\n\n\t            datesUnique = dates\n\t                .map(function (date) { return date.getTime(); })\n\t                .filter(function (date, position, array) {\n\t                    return array.indexOf(date) === position;\n\t                })\n\t                .map(function (time) { return new Date(time); });\n\n\t            validSelectedDates = $.grep(datesUnique, function(value) {\n\t                if(value) {\n\t                    return +that._validateValue(new Date(value.setHours(0, 0, 0, 0))) === +value;\n\t                }\n\t            });\n\t            that._selectDates = validSelectedDates.length > 0 ? validSelectedDates : (datesUnique.length === 0 ? datesUnique : that._selectDates);\n\t            that._visualizeSelectedDatesInView();\n\t        },\n\n\t        selectRange: function(range) {\n\t            var that = this;\n\t            var startInRange;\n\t            var endInRange;\n\t            var visibleRange;\n\n\t            if (range === undefined) {\n\t                return that._range;\n\t            }\n\n\t            that._range = range;\n\n\t            if (!range.start) {\n\t                return;\n\t            }\n\n\t            visibleRange = that._visibleRange();\n\n\t            startInRange = that._dateInViews(range.start);\n\t            endInRange = range.end && that._dateInViews(range.end);\n\n\t            if (!startInRange && endInRange) {\n\t                that.rangeSelectable.selectTo(that._cellByDate(range.end));\n\t            }\n\n\t            if (startInRange && endInRange) {\n\t                that.rangeSelectable.range(that._cellByDate(range.start), that._cellByDate(range.end));\n\t            }\n\n\t            if (range.end && startInRange && !endInRange) {\n\t                that.rangeSelectable.selectFrom(that._cellByDate(range.start));\n\t            }\n\n\t            if (!range.end && startInRange) {\n\t                that.rangeSelectable.start(that._cellByDate(range.start));\n\t            }\n\n\t            if (+visibleRange.start > +range.start && +visibleRange.end < +range.end) {\n\t                that.rangeSelectable.mid(that.element.find(CELLSELECTORVALID));\n\t            }\n\t        }\n\t    });\n\n\t    kendo.ui.plugin(MultiViewCalendar);\n\n\t    function mousetoggle(e) {\n\t        var disabled = $(this).hasClass("k-state-disabled");\n\n\t        if (!disabled) {\n\t            $(this).toggleClass(HOVER, MOUSEENTER.indexOf(e.type) > -1 || e.type == FOCUS);\n\t        }\n\t    }\n\n\t    function addDaysToArray(array, numberOfDays, fromDate, disableDates) {\n\t        for(var i = 0; i <= numberOfDays; i++) {\n\t            var nextDay = new Date(fromDate.getTime());\n\t            nextDay = new Date(nextDay.setDate(nextDay.getDate() + i));\n\t            if(!disableDates(nextDay)) {\n\t                array.push(nextDay);\n\t            }\n\t        }\n\t    }\n\n\t    function daysBetweenTwoDates(startDate, endDate) {\n\t        if(+endDate < +startDate) {\n\t            var temp = +startDate;\n\t            calendar.views[0].setDate(startDate, endDate);\n\t            calendar.views[0].setDate(endDate, new Date(temp));\n\t        }\n\t        var fromDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());\n\t        var endDateUTC = Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());\n\n\t        return Math.ceil((+endDateUTC - +fromDateUTC) / kendo.date.MS_PER_DAY);\n\t    }\n\n\t    function shiftDate(value, dimension, numberOfViews) {\n\t        var current;\n\t        if (dimension === "month") {\n\t            current = new DATE(value.getFullYear(), value.getMonth() + numberOfViews, value.getDate());\n\t            current.setFullYear(value.getFullYear());\n\t            if (Math.abs(current.getMonth() - value.getMonth()) > numberOfViews || numberOfViews > 10) {\n\t                current.setMonth(value.getMonth() + numberOfViews);\n\t                current = calendar.views[0].last(current);\n\t            }\n\t            return current;\n\t        } else if (dimension === "year") {\n\t            current = new DATE(1, value.getMonth(), value.getDate());\n\t            current.setFullYear(value.getFullYear() + numberOfViews);\n\t            if (Math.abs(current.getFullYear() - value.getFullYear()) > numberOfViews) {\n\t                current = new DATE(1, value.getMonth(), 1);\n\t                current.setFullYear(value.getFullYear() + numberOfViews);\n\t                current = calendar.views[1].last(current);\n\t            }\n\t            return current;\n\t        } else if (dimension === "decade") {\n\t            current = new DATE(1, value.getMonth(), value.getDate());\n\t            current.setFullYear(value.getFullYear() + 10*numberOfViews);\n\t            if (Math.abs(current.getFullYear() - value.getFullYear()) > 10*numberOfViews) {\n\t                current = new DATE(1, value.getMonth(), 1);\n\t                current.setFullYear(value.getFullYear() + 10*numberOfViews);\n\t                current = calendar.views[2].last(current);\n\t            }\n\t            return current;\n\t        } else if (dimension === "century") {\n\t            current = new DATE(1, value.getMonth(), value.getDate());\n\t            current.setFullYear(value.getFullYear() + 100*numberOfViews);\n\t            if (Math.abs(current.getFullYear() - value.getFullYear()) > 100*numberOfViews) {\n\t                current = new DATE(1, value.getMonth(), 1);\n\t                current.setFullYear(value.getFullYear() + 100*numberOfViews);\n\t                current = calendar.views[3].last(current);\n\t            }\n\t            return current;\n\t        }\n\t    }\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.multiviewcalendar.js?')}}]);