(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{"./node_modules/@progress/kendo-ui/js/filemanager/commands.js":
/*!********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/filemanager/commands.js ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1001);\n\tmodule.exports = __webpack_require__(1001);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1001:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (f, define) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function () {\n\n\t    (function ($, undefined) {\n\t        var kendo = window.kendo,\n\t            extend = $.extend,\n\t            Class = kendo.Class;\n\n\t        var Command = Class.extend({\n\t            init: function (options) {\n\t                this.options = options;\n\t                this.filemanager = options.filemanager;\n\t            }\n\t        });\n\n\t        var CreateFolderCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    filemanager = that.filemanager,\n\t                    dataSource = filemanager._viewDataSource || filemanager.dataSource;\n\n\t                    dataSource.add();\n\t            }\n\t        });\n\n\t        var RenameCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    target = that.options.target,\n\t                    viewItem = that.filemanager._view.widgetComponent.dataItem(target);\n\n\t                if(target && viewItem){\n\t                    that.filemanager._view.edit(target);\n\t                } else {\n\t                    that._renameTreeViewItem(target);\n\t                }\n\t            },\n\t            _renameTreeViewItem: function(target){\n\t                var that = this,\n\t                    uid = target.data("uid"),\n\t                    item = that.filemanager.treeView.widgetComponent.dataSource.getByUid(uid),\n\t                    realItem = that.filemanager.dataSource.get(item.id);\n\n\t                that.filemanager._prompt({\n\t                    type: "rename",\n\t                    defaultInput: realItem.name,\n\t                    target: target\n\t                }).done(function(newName){\n\t                    realItem.set("name", newName);\n\t                });\n\t            }\n\t        });\n\n\t        var DeleteCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    target = that.options.target,\n\t                    filemanager = that.filemanager,\n\t                    items = filemanager.getSelected(),\n\t                    viewItem = that.filemanager._view.widgetComponent.dataItem(target),\n\t                    itemsToRemove;\n\n\t                if(target && target.is(".k-state-selected") && items && items.length) {\n\t                    itemsToRemove = items;\n\t                } else if(target && viewItem) {\n\t                    itemsToRemove = viewItem;\n\t                } else if(target) {\n\t                    var uid = target.data("uid");\n\t                    var item = that.filemanager.treeView.widgetComponent.dataSource.getByUid(uid);\n\t                    var realItem = that.filemanager.dataSource.get(item.id);\n\n\t                    itemsToRemove = realItem;\n\t                }\n\n\t                filemanager._confirm({\n\t                    type: "delete",\n\t                    target: target\n\t                })\n\t                .done(function () {\n\t                    that.removeItems(itemsToRemove);\n\t                });\n\t            },\n\t            removeItems: function(items) {\n\t                var itemsToRemove = Array.isArray(items) ? items : [items];\n\n\t                for (var i = 0; i < itemsToRemove.length; i++) {\n\t                    this.filemanager.dataSource.remove(itemsToRemove[i]);\n\t                }\n\t            }\n\t        });\n\n\t        var CopyCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                filemanager = that.filemanager,\n\t                dataSource = filemanager.dataSource,\n\t                items = that.options.items,\n\t                target = dataSource.get(that.options.target),\n\t                targetDataSource = target.children;\n\n\t                for (var i = 0; i < items.length; i++) {\n\t                    var item = dataSource.get(items[i]).toJSON();\n\t                    item.fileManagerNewItem = true;\n\t                    targetDataSource.add(item);\n\t                }\n\t            }\n\t        });\n\n\t        var MoveCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    filemanager = that.filemanager,\n\t                    dataSource = filemanager.dataSource,\n\t                    items = that.options.items,\n\t                    target = dataSource.get(that.options.target),\n\t                    targetDataSource = target.children;\n\n\t                for (var i = 0; i < items.length; i++) {\n\t                    var item = dataSource.get(items[i]);\n\t                    var cloning = item.toJSON();\n\t                    cloning.fileManagerNewItem = true;\n\t                    targetDataSource.add(cloning);\n\t                    dataSource.remove(item);\n\t                }\n\t            }\n\t        });\n\n\t        var SortCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    options = that.options,\n\t                    filemanager = that.filemanager,\n\t                    sortOptions = filemanager.defaultSortOption;\n\n\t                extend(sortOptions, {\n\t                    dir: options.dir,\n\t                    field: options.field\n\t                });\n\n\t                filemanager._view.widgetComponent.dataSource.sort([ filemanager.folderSortOption, sortOptions ]);\n\t            }\n\t        });\n\n\t        var SearchCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    options = that.options,\n\t                    filemanager = that.filemanager,\n\t                    filter = {\n\t                        field: options.field,\n\t                        operator: options.operator,\n\t                        value: options.value\n\t                    };\n\n\t                filemanager._view.widgetComponent.dataSource.filter(filter);\n\t            }\n\t        });\n\n\t        var ChangeViewCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    options = that.options,\n\t                    filemanager = that.filemanager;\n\n\t                filemanager.view(options.value);\n\t                filemanager.resize(true);\n\t            }\n\t        });\n\n\t        var OpenDialogCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    filemanager = that.filemanager,\n\t                    dialog = filemanager[that.options.type];\n\n\t                if (dialog) {\n\t                    dialog.open();\n\t                } else {\n\t                    window.console.warn(kendo.format("The {0} dialog is not available!", that.options.type));\n\t                }\n\t            }\n\t        });\n\n\t        var TogglePaneCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function() {\n\t                var that = this,\n\t                    filemanager = that.filemanager,\n\t                    pane = filemanager[that.options.type],\n\t                    resizable = that.getResizable();\n\n\t                if (pane) {\n\t                    pane.toggle();\n\n\t                    if (resizable) {\n\t                        filemanager.wrapper\n\t                            .find(resizable.options.handle)\n\t                            .toggle();\n\t                    }\n\t                }\n\t            },\n\t            getResizable: function() {\n\t                var that = this,\n\t                    filemanager = that.filemanager,\n\t                    type = that.options.type;\n\n\t                if (!filemanager._resizeDraggable) {\n\t                    return;\n\t                }\n\n\t                return filemanager._resizeDraggable[type];\n\t            }\n\t        });\n\n\t        extend(kendo.ui, {\n\t            filemanager: {\n\t                FileManagerCommand: Command,\n\t                commands: {\n\t                    CreateFolderCommand: CreateFolderCommand,\n\t                    RenameCommand: RenameCommand,\n\t                    DeleteCommand: DeleteCommand,\n\t                    MoveCommand: MoveCommand,\n\t                    CopyCommand: CopyCommand,\n\t                    SortCommand: SortCommand,\n\t                    SearchCommand: SearchCommand,\n\t                    ChangeViewCommand: ChangeViewCommand,\n\t                    OpenDialogCommand: OpenDialogCommand,\n\t                    TogglePaneCommand: TogglePaneCommand\n\t                }\n\t            }\n\t        });\n\n\t    })(window.kendo.jQuery);\n\n\t    return window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/filemanager/commands.js?')},"./node_modules/@progress/kendo-ui/js/filemanager/contextmenu.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/filemanager/contextmenu.js ***!
  \***********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1002);\n\tmodule.exports = __webpack_require__(1002);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1002:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1003)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        extend = $.extend,\n\t        proxy = $.proxy,\n\t        template = kendo.template,\n\t        ContextMenu = kendo.ui.ContextMenu,\n\n\t        ACTION = "action";\n\n\t    var FileManagerContextMenu = ContextMenu.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            ContextMenu.fn.init.call(that, element, options);\n\n\t            that._overrideTemplates();\n\t            that._extendItems();\n\n\t            that.bind("select", proxy(that._onSelect, that));\n\t        },\n\n\t        _overrideTemplates: function(){\n\t            this.templates.sprite = template("#if(spriteCssClass) {#<span class=\'#= spriteCssClass #\'></span>#}#");\n\t        },\n\n\t        defaultItems: {\n\t            "rename": { text: "Rename", spriteCssClass: "k-icon k-i-edit", command: "RenameCommand" },\n\t            "delete": { text: "Delete", spriteCssClass: "k-icon k-i-delete", command: "DeleteCommand" }\n\t        },\n\n\t        events: ContextMenu.fn.events.concat([\n\t            ACTION\n\t        ]),\n\n\t        _extendItems: function(){\n\t            var that = this,\n\t                items = that.options.items,\n\t                item, isBuiltInTool;\n\n\t            if(items && items.length){\n\t                for (var i = 0; i < items.length; i++) {\n\t                    item = items[i];\n\t                    isBuiltInTool =  $.isPlainObject(item) && Object.keys(item).length === 1 && item.name;\n\n\t                    if(isBuiltInTool){\n\t                        item = item.name;\n\t                    }\n\n\t                    if($.isPlainObject(item) ) {\n\t                        that._extendItem(item);\n\t                        that.append(item);\n\t                    } else if (that.defaultItems[item]){\n\t                        item = that.defaultItems[item];\n\t                        that._extendItem(item);\n\t                        that.append(item);\n\t                    }\n\t                }\n\t            } else {\n\t                for (var key in that.defaultItems) {\n\t                    item = that.defaultItems[key];\n\t                    that._extendItem(item);\n\t                    that.append(item);\n\t                }\n\t            }\n\t        },\n\n\t        _extendItem: function(item) {\n\t            var that = this,\n\t                messages = that.options.messages;\n\n\t            extend(item, {\n\t                text: messages[item.text],\n\t                spriteCssClass: item.spriteCssClass || "",\n\t                attr: {\n\t                    "data-command": item.command\n\t                }\n\t            });\n\t        },\n\n\t        _onSelect: function(ev) {\n\t            var command = $(ev.item).data("command");\n\t            var target = $(ev.target);\n\n\t            if (!command) {\n\t                return;\n\t            }\n\n\t            this.action({\n\t                command: command,\n\t                options: { target: target }\n\t            });\n\t        },\n\n\t        action: function (args) {\n\t            this.trigger(ACTION, args);\n\t        }\n\t    });\n\n\t    extend(kendo.ui.filemanager, {\n\t        ContextMenu: FileManagerContextMenu\n\t    });\n\n\t    })(window.kendo.jQuery);\n\n\t    return window.kendo;\n\n\t    }, __webpack_require__(3));\n\n/***/ }),\n\n/***/ 1003:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.menu */ "./node_modules/@progress/kendo-ui/js/kendo.menu.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/filemanager/contextmenu.js?')},"./node_modules/@progress/kendo-ui/js/filemanager/data.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/filemanager/data.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1004);\n\tmodule.exports = __webpack_require__(1004);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 5:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.data */ "./node_modules/@progress/kendo-ui/js/kendo.data.js");\n\n/***/ }),\n\n/***/ 1004:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        extend = $.extend,\n\t        data = kendo.data,\n\t        Node = data.Node,\n\t        HierarchicalDataSource = data.HierarchicalDataSource,\n\t        DataSource = data.DataSource;\n\n\t    extend(true, kendo.data, {\n\t        schemas: {\n\t            "filemanager": {\n\t                data: function(data) {\n\t                    return data.items || data || [];\n\t                },\n\t                model: {\n\t                    id: "path",\n\t                    hasChildren: "hasDirectories",\n\t                    fields: {\n\t                        name: {editable: true, type: "String", defaultValue: "New Folder" },\n\t                        size: {editable: false, type: "Number"},\n\t                        path: {editable: false, type: "String"},\n\t                        extension: {editable: false, type: "String"},\n\t                        isDirectory: {editable: false, defaultValue: true, type: "Boolean"},\n\t                        hasDirectories: {editable: false, defaultValue: false, type: "Boolean"},\n\t                        created: { type: "Date", editable: false},\n\t                        createdUtc: { type: "Date", editable: false },\n\t                        modified: { type: "Date", editable: false},\n\t                        modifiedUtc: { type: "Date", editable: false }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    var FileEntry = Node.define({\n\t        init: function(value){\n\t            var that = this,\n\t                isDirectory = this.isDirectory;\n\n\t            Node.fn.init.call(this, value);\n\n\t            if(typeof isDirectory === "string"){\n\t            isDirectory = kendo.getter(isDirectory);\n\t            }\n\n\t            if (kendo.isFunction(isDirectory)) {\n\t                var isDirectoryObject = isDirectory.call(that, that);\n\n\t                if(isDirectoryObject && isDirectoryObject.length === 0){\n\t                    that.isDirectory = false;\n\t                } else{\n\t                    that.isDirectory = !!isDirectoryObject;\n\t                }\n\t            }\n\n\t            if (that.isDirectory) {\n\t                that._initChildren();\n\t            }\n\t        },\n\t        _initChildren: function() {\n\t            var that = this;\n\t            var children, transport, parameterMap;\n\n\t            if (!(that.children instanceof kendo.data.FileManagerDataSource)) {\n\t                children = that.children = new kendo.data.FileManagerDataSource(that._childrenOptions);\n\n\t                transport = children.transport;\n\t                parameterMap = transport.parameterMap;\n\n\t                transport.parameterMap = function(data, type) {\n\t                    if(type === "read" || type === "create") {\n\t                        data.target = that.id;\n\t                    }\n\n\t                    if (parameterMap) {\n\t                        data = parameterMap.call(that, data, type);\n\t                    }\n\n\t                    return data;\n\t                };\n\n\t                children.parent = function(){\n\t                    return that;\n\t                };\n\n\t                children.bind("change", function(e){\n\t                    e.node = e.node || that;\n\t                    that.trigger("change", e);\n\t                });\n\n\t                children.bind("error", function(e){\n\t                    var collection = that.parent();\n\n\t                    if (collection) {\n\t                        e.node = e.node || that;\n\t                        collection.trigger("error", e);\n\t                    }\n\t                });\n\n\t                that._updateChildrenField();\n\t            }\n\t        },\n\t        isNew: function() {\n\t            if(this.fileManagerNewItem) {\n\t                delete this.fileManagerNewItem;\n\t                return true;\n\t            }\n\n\t            return this.id === this._defaultId;\n\t        }\n\t    });\n\n\n\t    var FileManagerDataSource = HierarchicalDataSource.extend({\n\t        init: function(options) {\n\t            var fileEntry = FileEntry.define({\n\t                children: options\n\t            });\n\n\t            if(options.filter && !options.serverFiltering){\n\t                this._hierarchicalFilter = options.filter;\n\t                options.filter = null;\n\t            }\n\n\t            DataSource.fn.init.call(this, $.extend(true, {}, { schema: { modelBase: fileEntry, model: fileEntry } }, options));\n\n\t            this.isLocalBinding = this.transport instanceof kendo.data.LocalTransport;\n\n\t            this._attachBubbleHandlers();\n\t        },\n\t        insert: function(index, model) {\n\t            var parentNode = this.parent();\n\n\t            if (parentNode && parentNode._initChildren) {\n\t                if(model && model.isDirectory) {\n\t                    parentNode.hasDirectories = true;\n\t                }\n\t                parentNode.hasChildren = true;\n\t                parentNode._initChildren();\n\t            }\n\n\t            return DataSource.fn.insert.call(this, index, model);\n\t        },\n\t        remove: function(node){\n\t            var parentNode = node.parentNode(),\n\t                dataSource = this,\n\t                result;\n\n\t            if (parentNode && parentNode._initChildren) {\n\t                dataSource = parentNode.children;\n\t            }\n\n\t            result = DataSource.fn.remove.call(dataSource, node);\n\n\t            if (parentNode && (dataSource.data() && !dataSource.data().length)) {\n\t                parentNode.hasChildren = false;\n\t            } else if(parentNode && !this._hasDirectories(parentNode)) {\n\t                parentNode.hasDirectories = false;\n\t            }\n\n\t            return result;\n\t        },\n\t        _hasDirectories: function(node){\n\t            var result;\n\n\t            if(!node.children.data()) {\n\t                return false;\n\t            }\n\n\t            result = node.children.data().filter(function(item){\n\t                return item.isDirectory;\n\t            });\n\n\t            return !!result.length;\n\t        }\n\t    });\n\n\t    FileManagerDataSource.create = function(options) {\n\t        options = options && options.push ? { data: options } : options;\n\n\t        var dataSource = options || {},\n\t            data = dataSource.data;\n\n\t        if (data && data._dataSource) {\n\t            return data._dataSource;\n\t        }\n\n\t        dataSource.data = data;\n\n\t        return dataSource instanceof FileManagerDataSource ? dataSource : new FileManagerDataSource(dataSource);\n\t    };\n\n\t    extend(kendo.data, {\n\t        FileManagerDataSource: FileManagerDataSource,\n\t        FileEntry: FileEntry\n\t    });\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/filemanager/data.js?')},"./node_modules/@progress/kendo-ui/js/filemanager/toolbar.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/filemanager/toolbar.js ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1005);\n\tmodule.exports = __webpack_require__(1005);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1005:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1006), __webpack_require__(1007)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        extend = $.extend,\n\t        proxy = $.proxy,\n\t        ToolBar = kendo.ui.ToolBar,\n\t        Item = kendo.toolbar.Item,\n\n\t        CLICK = "click",\n\t        TOGGLE = "toggle",\n\t        CLOSE = "close",\n\t        ACTION = "action",\n\t        CHANGE = "change",\n\t        NS = ".fileManagerToolbar";\n\n\t    var FileManagerToolBar = ToolBar.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            that._extendOptions(options);\n\n\t            ToolBar.fn.init.call(that, element, options);\n\n\t            that._attachEvents();\n\t        },\n\n\t        events: ToolBar.fn.events.concat([\n\t            ACTION\n\t        ]),\n\n\t        defaultTools: {\n\t            createFolder: { type: "button", text: "New Folder", name: "createFolder", command: "CreateFolderCommand", rules: "{ \\"remote\\": true }" },\n\t            upload: { type: "button",  text: "Upload", name: "upload", command: "OpenDialogCommand", options: "{ \\"type\\": \\"uploadDialog\\" }", rules: "{ \\"remote\\": true }" },\n\t            sortDirection: { type: "buttonGroup", text: "Sort Direction", name:"sortDirection",\n\t                buttons: [\n\t                    { name: "sortDirectionAsc", icon: "sort-asc-sm", togglable: true, group: "sortDirection", command: "SortCommand", options: "{ \\"dir\\": \\"asc\\" }", selected: true },\n\t                    { name: "sortDirectionDesc", icon: "sort-desc-sm", togglable: true, group: "sortDirection", command: "SortCommand", options: "{ \\"dir\\": \\"desc\\" }" }\n\t                ]\n\t            },\n\t            sortField: { type: "splitButton", text: "Sort By", name: "sortField", command: "SortCommand", menuButtons: [\n\t                { name: "nameField", text: "Name", options: "{\\"field\\": \\"name\\"}", command: "SortCommand" },\n\t                { name: "typeField", text: "Type", options: "{\\"field\\": \\"extension\\"}", command: "SortCommand" },\n\t                { name: "sizeField", text: "Size", options: "{\\"field\\": \\"size\\"}", command: "SortCommand" },\n\t                { name: "dateCreatedField", text: "Date created", options: "{\\"field\\": \\"createdUtc\\"}", command: "SortCommand" },\n\t                { name: "dateModifiedField", text: "Date modified", options: "{\\"field\\": \\"modifiedUtc\\"}", command: "SortCommand" }\n\t            ] },\n\t            changeView: { type: "buttonGroup", text: "Change View", name:"changeView",\n\t                buttons: [\n\t                    { name: "gridView", icon: "grid-layout", togglable: true, group: "changeView", command: "ChangeViewCommand", options: "grid" },\n\t                    { name: "listView", icon: "grid", togglable: true, group: "changeView", command: "ChangeViewCommand", options: "list" }\n\t                ]\n\t            },\n\t            spacer: { type: "spacer" },\n\t            details: { type: "fileManagerDetailsToggle", text: "View Details", name: "details", overflow: "never", command: "TogglePaneCommand", options: "{ \\"type\\": \\"preview\\" }"},\n\t            search: { type: "fileManagerSearch", text: "Search", name: "search", command: "SearchCommand", icon: "search", overflow: "never", options: "{ \\"field\\": \\"name\\", \\"operator\\": \\"startswith\\" }" }\n\t        },\n\n\t        _attachEvents: function() {\n\t            var that = this;\n\n\t            that.bind(TOGGLE, proxy(that._click, that));\n\t            that.bind(CLOSE, proxy(that._click, that));\n\t            that.bind(CLICK, proxy(that._click, that));\n\t            that.bind(CHANGE, proxy(that._change, that));\n\t        },\n\n\t        _extendOptions: function(options) {\n\t            var that = this,\n\t                tools = options.items ? options.items : Object.keys(that.defaultTools);\n\n\t            that.options = options;\n\n\t            that.options.items = that._extendToolsOptions(tools);\n\t        },\n\n\t        _extendToolsOptions: function(tools) {\n\t            var that = this,\n\t                messages = that.options.messages;\n\n\t            if (!tools.length) {\n\t                return;\n\t            }\n\n\t            return tools.map(function (tool) {\n\t                var isBuiltInTool =  $.isPlainObject(tool) && Object.keys(tool).length === 1 && tool.name,\n\t                    toolOptions, toolRules;\n\n\t                tool = isBuiltInTool ? tool.name : tool;\n\t                toolOptions = $.isPlainObject(tool) ? tool : extend({}, that.defaultTools[tool]);\n\t                toolRules = toolOptions.rules ? JSON.parse(toolOptions.rules) : {};\n\n\t                kendo.deepExtend(toolOptions, {\n\t                    id: toolOptions.name + "-" + kendo.guid(),\n\t                    name: toolOptions.name,\n\t                    text: messages[toolOptions.name],\n\t                    attributes: {\n\t                        "aria-label": messages[toolOptions.name],\n\t                        "title": messages[toolOptions.name],\n\t                        "data-command": toolOptions.command,\n\t                        "data-options": toolOptions.options\n\t                    },\n\t                    overflow: toolOptions.overflow\n\t                });\n\n\t                if(toolOptions.type === "buttonGroup") {\n\t                    toolOptions.buttons = toolOptions.buttons.map(proxy(that._mapButtonGroups, that));\n\t                }\n\n\t                if(toolOptions.type === "splitButton") {\n\t                    toolOptions.menuButtons = toolOptions.menuButtons.map(proxy(that._mapMenuButtons, that));\n\t                }\n\n\t                if (toolRules.remote && that.options.filemanager.dataSource.isLocalBinding) {\n\t                    toolOptions.hidden = true;\n\t                }\n\n\t                return toolOptions;\n\t            }, that);\n\t        },\n\n\t        _mapButtonGroups: function(button) {\n\t            var that = this,\n\t                messages = that.options.messages;\n\n\t            if(button.group === "changeView" && button.options === that.options.filemanager.options.initialView) {\n\t                button.selected = true;\n\t            }\n\n\t            return kendo.deepExtend(button,{\n\t                attributes: extend({}, button.attributes, {\n\t                    "aria-label": messages[button.name],\n\t                    "title": messages[button.name],\n\t                    "data-command": button.command,\n\t                    "data-options": button.options\n\t                })\n\t            });\n\t        },\n\n\t        _mapMenuButtons: function(button) {\n\t            var that = this,\n\t                messages = that.options.messages;\n\n\t            return kendo.deepExtend(button,{\n\t                text: messages[button.name],\n\t                attributes: extend({}, button.attributes, {\n\t                    "aria-label": messages[button.name],\n\t                    "title": messages[button.name],\n\t                    "data-command": button.command,\n\t                    "data-options": button.options\n\t                })\n\t            });\n\t        },\n\n\t        _click: function(ev) {\n\t            var command = $(ev.target).data("command"),\n\t                options = $(ev.target).data("options");\n\n\t            if (!command) {\n\t                return;\n\t            }\n\n\t            this.action({\n\t                command: command,\n\t                options: options\n\t            });\n\t        },\n\n\t        _change: function (ev) {\n\t            var command = $(ev.target).data("command"),\n\t                options = $(ev.target).data("options");\n\n\t            options = extend({}, options, { value: $(ev.target).val() });\n\n\t            if (!command) {\n\t                return;\n\t            }\n\n\t            this.action({\n\t                command: command,\n\t                options: options\n\t            });\n\t        },\n\n\t        isToolEnabled: function(toolName) {\n\t            var that = this,\n\t                options = that.options,\n\t                found = false;\n\n\t            for(var i = 0; i < options.items.length; i++) {\n\t                if (options.items[i].name == toolName) {\n\t                    found = true;\n\t                    break;\n\t                }\n\t            }\n\n\t            return options.items[toolName] || found;\n\t        },\n\n\t        action: function (args) {\n\t            this.trigger(ACTION, args);\n\t        },\n\n\t        destroy: function () {\n\t            if(this.fileManagerSearch) {\n\t                this.fileManagerSearch.destroy();\n\t            }\n\n\t            ToolBar.fn.destroy.call(this);\n\t        }\n\t    });\n\n\t    var SearchTool = Item.extend({\n\t        init: function(options, toolbar) {\n\t            var that = this,\n\t                element = $("<div class=\'k-filemanager-search-tool k-textbox\'></div>"),\n\t                input = $("<input class=\'k-input\' autocomplete=\'off\' />"),\n\t                iconWrapper = $("<span class=\'k-input-icon\'></span>"),\n\t                icon = $("<span />");\n\n\t            that.element = element;\n\t            that.input = input;\n\t            that.iconWrapper = iconWrapper;\n\t            that.icon = icon;\n\t            that.options = options;\n\t            that.options.type = "fileManagerSearch";\n\t            that.toolbar = toolbar;\n\n\t            that.attributes();\n\t            that.renderIcon();\n\t            that.addUidAttr();\n\t            that.addIdAttr();\n\t            that.addOverflowAttr();\n\n\t            that.input.attr({\n\t                placeholder: that.options.text,\n\t                title: that.options.text\n\t            });\n\n\t            that.iconWrapper.append(icon);\n\n\t            that.element.append(that.input).append(iconWrapper);\n\n\t            that._bindEvents();\n\t            that.toolbar.fileManagerSearch = that;\n\t        },\n\t        attributes: function () {\n\t            if (this.options.attributes) {\n\t                this.input.attr(this.options.attributes);\n\t            }\n\t        },\n\t        renderIcon: function() {\n\t            if (this.options.icon) {\n\t                this.icon.addClass("k-icon k-i-" + this.options.icon);\n\t            }\n\t        },\n\t        _bindEvents: function(){\n\t            this._inputHandler = proxy(this._input, this);\n\t            this.input.on("input" + NS, this._inputHandler);\n\t        },\n\t        _input: function (ev) {\n\t            this.toolbar.trigger(CHANGE, {target: ev.target});\n\t        },\n\t        destroy: function(){\n\t            this.element.off(NS);\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("fileManagerSearch", SearchTool);\n\n\t    var FileManagerDetailsToggle = Item.extend({\n\t        init: function(options, toolbar) {\n\t            var that = this,\n\t                element = $("<div class=\'k-filemanager-details-toggle\'></div>"),\n\t                label = $("<label>" + options.text + "</label>"),\n\t                switchElement = $("<input title=\'"+ options.text +"\' />");\n\n\t            that.element = element;\n\t            that.input = switchElement;\n\t            that.label = label;\n\t            that.options = options;\n\t            that.toolbar = toolbar;\n\n\t            that.attributes();\n\t            that.addUidAttr();\n\t            that.addIdAttr();\n\t            that.addOverflowAttr();\n\n\t            that.element.append(that.label);\n\t            that.element.append(that.input);\n\n\t            that.switchInstance = new kendo.ui.Switch(that.input, {\n\t                change: proxy(that._change, that),\n\t                messages: {\n\t                    checked: toolbar.options.messages.detailsChecked,\n\t                    unchecked: toolbar.options.messages.detailsUnchecked\n\t                }\n\t            });\n\n\t            that.label.on(CLICK + NS, proxy(that._click, that));\n\n\t            that.toolbar.fileManagerDetailsToggle = that;\n\t        },\n\t        _change: function (ev) {\n\t            this.toolbar.trigger(CHANGE, { target: ev.sender.wrapper.parent() });\n\t        },\n\t        _click: function(ev) {\n\t            this.switchInstance.toggle();\n\n\t            this.toolbar.trigger(CHANGE, { target: $(ev.target).parent() });\n\t        },\n\t        destroy: function() {\n\t            this.element.off(NS);\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("fileManagerDetailsToggle", FileManagerDetailsToggle);\n\n\t    extend(kendo.ui.filemanager, {\n\t        ToolBar: FileManagerToolBar\n\t    });\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ }),\n\n/***/ 1006:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.toolbar */ "./node_modules/@progress/kendo-ui/js/kendo.toolbar.js");\n\n/***/ }),\n\n/***/ 1007:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.switch */ "./node_modules/@progress/kendo-ui/js/kendo.switch.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/filemanager/toolbar.js?')},"./node_modules/@progress/kendo-ui/js/filemanager/view.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/filemanager/view.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1008);\n\tmodule.exports = __webpack_require__(1008);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 932:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.treeview */ "./node_modules/@progress/kendo-ui/js/kendo.treeview.js");\n\n/***/ }),\n\n/***/ 1008:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1009), __webpack_require__(932)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function($, undefined) {\n\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        Observable = kendo.Observable,\n\t        extend = $.extend,\n\t        proxy = $.proxy,\n\t        keys = kendo.keys,\n\n\t        NAVIGATE = "navigate",\n\t        SELECT = "select",\n\t        EXPAND = "expand",\n\t        CHANGE = "change",\n\t        OPEN = "open",\n\t        LOAD = "load",\n\t        KEYDOWN = "keydown",\n\t        KEYDOWNACTION = "keydownAction",\n\n\t        NS = ".kendoFileManagerViewComponent",\n\n\t        fileManagerDraggables = [],\n\t        fileManagerDragOrigin = null;\n\n\t    var registerViewComponent = function(componentName, component) {\n\t        ui.filemanager.ViewComponents[componentName] = component;\n\t    };\n\n\t    var getViewComponent = function(componentName) {\n\t        return ui.filemanager.ViewComponents[componentName] || null;\n\t    };\n\n\t    var Component = Observable.extend({\n\t        init: function(widget, element, options) {\n\t            var that = this;\n\n\t            that.element = element;\n\t            that.options = options;\n\n\t            if(widget) {\n\t                that.widgetComponent = new widget(element, options);\n\t            } else {\n\t                throw new Error("The widget for the ViewComponent is not available! Please add the corresponding scripts!");\n\t            }\n\n\t            Observable.fn.init.call(that);\n\t        },\n\n\t        _bindEvents: function(){\n\t            this.widgetComponent.bind("dataBinding", proxy(this._binding, this));\n\t            this.widgetComponent.bind("dataBound", proxy(this._bound, this));\n\t        },\n\n\t        _binding: function(ev){\n\t            if(this.trigger("dataBinding", ev)) {\n\t                ev.preventDefault();\n\t            }\n\t        },\n\n\t        _bound: function(){\n\t            this.trigger("dataBound");\n\t        },\n\n\t        _setDSOptions: function (options, dataSourceOptions) {\n\t            if(!options.dataSource && dataSourceOptions) {\n\t                options.dataSource = dataSourceOptions;\n\t            }\n\t        },\n\n\t        _initDragAndDrop: function (element, filter) {\n\t            var that = this;\n\n\t            filter = filter || that.options.dropFilter;\n\t            element = element || that.element;\n\n\t            that.draggable = element.kendoDraggable({\n\t                filter: filter,\n\t                hint: proxy(that._hint, that),\n\t                cursorOffset: { top: -10, left: -50 },\n\t                holdToDrag: true,\n\t                ignore: "input, .k-focusable",\n\t                hold: proxy(that._hold, that)\n\t            }).data("kendoDraggable");\n\n\t            that.draggable.userEvents.minHold = 150;\n\n\t            that.droptarget = element.kendoDropTargetArea({\n\t                filter: filter,\n\t                drop: proxy(that._onDrop, that),\n\t                dragenter: function(ev){\n\t                    ev.dropTarget.addClass("k-filemanager-drop-target");\n\t                },\n\t                dragleave: function(ev){\n\t                    ev.dropTarget.removeClass("k-filemanager-drop-target");\n\t                }\n\t            }).data("kendoDraggable");\n\t        },\n\n\t        _hold: function (ev){\n\t            var that = this,\n\t                target = ev.currentTarget;\n\n\t            if(!target.is(".k-state-selected")) {\n\t                if(that.widgetComponent.selectable) {\n\t                    that.widgetComponent.selectable.clear();\n\t                }\n\t                that.widgetComponent.select(target);\n\t            }\n\n\t            if(that.widgetComponent.selectable) {\n\t                that.widgetComponent.selectable.userEvents.cancel();\n\t            }\n\t        },\n\n\t        _hint: function(target){\n\t            var that = this,\n\t                item = that.widgetComponent.dataItem(target),\n\t                selectedItems = that.widgetComponent.select();\n\n\t            fileManagerDragOrigin = that.widgetComponent;\n\t            fileManagerDraggables = selectedItems;\n\n\t            if(selectedItems.length > 1) {\n\t                return kendo.format("<div class=\'k-filemanager-drag-hint\'><span class=\'k-icon k-i-{0}\'></span> <span>{1} {2}</span></div>", "file", selectedItems.length, that.options.messages.items);\n\t            }\n\n\t            return kendo.format("<div class=\'k-filemanager-drag-hint\'><span class=\'k-icon k-i-{0}\'></span> <span>{1}</span></div>", (item.isDirectory ? "folder" : "file"), item.name);\n\t        },\n\n\t        _onDrop: function (ev){\n\t            var that = this,\n\t                target = that.widgetComponent.dataItem(ev.dropTarget),\n\t                targetId = target.id,\n\t                itemIds = [];\n\n\t            if(!target.isDirectory) {\n\t                return;\n\t            }\n\n\t            for (var i = 0; i < fileManagerDraggables.length; i++) {\n\t                var id = fileManagerDragOrigin.dataItem(fileManagerDraggables[i]).id;\n\t                itemIds.push(id);\n\t            }\n\n\t            this.trigger("drop",{target: targetId, items: itemIds});\n\t        },\n\n\t        getSelected: function(){\n\t            throw new Error("Not Implemented!");\n\t        },\n\n\t        refresh: function (dataSource) {\n\t            this.widgetComponent.setDataSource(dataSource);\n\t        },\n\n\t        destroy: function() {\n\t            kendo.destroy(this.element);\n\t        }\n\t    });\n\n\t    extend(kendo.ui.filemanager, {\n\t            ViewComponent: Component,\n\t            ViewComponents: {},\n\t            registerViewComponent: registerViewComponent,\n\t            getViewComponent: getViewComponent\n\t        }\n\t    );\n\n\t    var ListView = Component.extend({\n\t        init: function(element, options, explicitOptions) {\n\t            var that = this,\n\t                dataSourceOptions = explicitOptions.dataSource,\n\t                messages = explicitOptions.messages; // jshint ignore:line\n\n\t            options = extend({}, that.defaultOptions, options, {\n\t                messages: messages\n\t            });\n\n\t            that._setDSOptions(options, dataSourceOptions);\n\t            options.kendoKeydown = options.kendoKeydown || proxy(that._kendoKeydown , that);\n\n\t            Component.fn.init.call(this, ui.ListView, element, options);\n\n\t            that.listView = that.widgetComponent;\n\t            that._bindEvents();\n\n\t            if(explicitOptions.draggable !== false && !dataSourceOptions.isLocalBinding) {\n\t                that._initDragAndDrop();\n\t            }\n\t        },\n\n\t        defaultOptions: {\n\t            layout: "flex",\n\t            flex: {\n\t                direction: "row",\n\t                wrap: "wrap"\n\t            },\n\t            selectable: kendo.support.mobileOS ? "row" : "multiple",\n\t            template: "<div class=\'k-listview-item\' title=\'#:name##:extension#\'>" +\n\t                            "<div class=\'k-file-preview\'><span class=\'k-file-icon k-icon k-i-#= !isDirectory ? kendo.getFileGroup(extension, true) : \'folder\' #\'></span></div>" +\n\t                            "<div class=\'k-file-name file-name\'>#:name##:extension#</div>" +\n\t                      "</div>",\n\t            editTemplate: "<div class=\'k-listview-item\'>" +\n\t                                "<div class=\'k-file-preview\'><span class=\'k-file-icon k-icon k-i-#= !isDirectory ? kendo.getFileGroup(extension, true) : \'folder\' #\'></span></div>" +\n\t                                "<div class=\'k-file-name\'><input type=\'text\' class=\'k-textbox\' data-bind=\'value:name\' name=\'name\' required=\'required\' /></div>" +\n\t                          "</div>",\n\t            dropFilter: ".k-listview-item",\n\t            navigatable: true\n\t        },\n\n\t        _bindEvents: function (){\n\t            var that = this,\n\t                listView = that.listView;\n\n\t            listView.bind(CHANGE, proxy(that._select, that));\n\t            listView.element.on("dblclick" + NS, proxy(that._dblClick, that));\n\t            listView.element.on("mousedown" + NS, ".k-listview-item:not(.k-edit-item)", proxy(that._mousedown, that));\n\t            listView.element.on(KEYDOWN + NS, ".k-edit-item", proxy(that._keydown, that));\n\t            listView.element.on(KEYDOWN + NS, proxy(that._keydownAction, that));\n\n\t            listView.bind("edit", function(ev){\n\t                var sender = ev.sender;\n\t                ev.item.find("input").on("blur", function(){\n\t                    sender._closeEditable();\n\t                });\n\t            });\n\n\t            Component.fn._bindEvents.call(this);\n\t        },\n\n\t        _select: function () {\n\t            var that = this,\n\t                dataItems = that.getSelected();\n\n\t            that.trigger(SELECT, {entries: dataItems});\n\t        },\n\n\t        _keydown: function(ev){\n\t            var that = this;\n\t            if (ev.keyCode === kendo.keys.ESC) {\n\t                that.listView._closeEditable();\n\t            }\n\t        },\n\n\t        _keydownAction: function(ev) {\n\t            var that = this,\n\t                target = $(ev.target).find(".k-state-focused");\n\n\t            if(target.length && !target.is(".k-edit-item")) {\n\t                that.trigger(KEYDOWNACTION, { target: target, keyCode: ev.keyCode });\n\t            }\n\t        },\n\n\t        _mousedown: function(ev){\n\t            var that = this,\n\t                node = $(ev.target).closest(".k-listview-item");\n\n\t            if(ev.which === 3 && !node.is(".k-state-selected")) {\n\t                that.listView.selectable.clear();\n\t                that.listView.select(node);\n\t            }\n\t        },\n\n\t        _kendoKeydown : function (ev) {\n\t            var that = this,\n\t                node = that.listView.current();\n\n\t            if(ev.keyCode === keys.ENTER && !ev.preventKendoKeydown){\n\t                that._triggerOpen(node);\n\t                ev.preventKendoKeydown = true;\n\t            }\n\t        },\n\n\t        _dblClick: function(ev){\n\t            var that = this,\n\t                node = $(ev.target).closest(".k-listview-item");\n\n\t            that._triggerOpen(node);\n\t        },\n\n\t        _triggerOpen: function (node){\n\t            var that = this;\n\n\t            if(node.is(".k-edit-item")) {\n\t                return;\n\t            }\n\n\t            var item = that.listView.dataItem(node);\n\n\t            if(item) {\n\t                that.trigger(OPEN, { entry: item });\n\t            }\n\t        },\n\n\t        addFolder: function () {\n\t            this.listView.add();\n\t        },\n\n\t        edit: function (target) {\n\t            var that = this,\n\t                selected = that.listView.select();\n\n\t            that.listView.edit(target || selected);\n\t        },\n\n\t        getSelected: function(){\n\t            var that = this,\n\t            items = that.listView.select(),\n\t            dataItems = [];\n\n\t            for (var i = 0; i < items.length; i++) {\n\t                var item = that.listView.dataItem(items[i]);\n\n\t                if (item) {\n\t                    dataItems.push(item);\n\t                }\n\t            }\n\n\t            return dataItems;\n\t        },\n\n\t        destroy: function() {\n\t            this.listView.element.off(NS);\n\t            Component.fn.destroy.call(this);\n\t        }\n\t    });\n\n\t    ui.filemanager.registerViewComponent("list", ListView);\n\n\t    var TreeView = Component.extend({\n\t        init: function(element, options, explicitOptions) {\n\t            var that = this,\n\t                messages = explicitOptions.messages; // jshint ignore:line\n\n\t            options = extend({}, that.defaultOptions, options, {\n\t                messages: messages\n\t            });\n\n\t            Component.fn.init.call(this, ui.TreeView, element, options);\n\n\t            that.treeView = that.widgetComponent;\n\t            that._bindEvents();\n\n\t            if(explicitOptions.draggable !== false && !explicitOptions.isLocalBinding) {\n\t                that._initDragAndDrop();\n\t            }\n\t        },\n\n\t        defaultOptions: {\n\t            dataTextField: "name",\n\t            dropFilter: ".k-item"\n\t        },\n\n\t        _refreshDataSource: function(ev){\n\t            var that = this,\n\t                treeView = that.treeView,\n\t                action = ev.action,\n\t                node = ev.node,\n\t                parentNode = null,\n\t                items = ev.items.filter(function(item){\n\t                    return item.isDirectory;\n\t                }).map(function(item){\n\t                    return extend({}, item.toJSON(), {\n\t                        id: item.id || kendo.guid(),\n\t                        hasChildren: item.hasChildren,\n\t                        items: []\n\t                    });\n\t                });\n\n\t            if (node) {\n\t                parentNode = treeView.findByUid(treeView.dataSource.get(node.id).uid);\n\t                treeView._progress(parentNode, false);\n\t            }\n\n\t            if(!items.length) {\n\t                return;\n\t            }\n\n\t            if (action == "itemloaded" || (parentNode && action === "sync")) {\n\t                parentNode.find(".k-item").each(function(index, item){\n\t                    treeView.remove(item);\n\t                });\n\t                treeView.append(items, parentNode);\n\n\t                if (that._shouldFocus) {\n\t                    treeView.current(parentNode);\n\t                    treeView.focus();\n\t                }\n\t            } else if (action == "remove") {\n\t                this._remove(items[0].id);\n\t            } else if (action == "itemchange") {\n\t                var existingItem = treeView.dataSource.get(items[0].id);\n\n\t                if(existingItem) {\n\t                    existingItem.set(ev.field, items[0][ev.field]);\n\t                } else {\n\t                    treeView.append(items[0], parentNode);\n\t                }\n\t            } else if (!treeView.dataSource.data().length) {\n\t                treeView.append(items);\n\t            } else if (action === "sync" || (action === undefined && !parentNode)) {\n\t                treeView.items().each(function(index, item){\n\t                    treeView.remove(item);\n\t                });\n\t                treeView.append(items);\n\n\t                if (that._shouldFocus) {\n\t                    treeView.current(treeView._nextVisible($()));\n\t                    treeView.focus();\n\t                }\n\t            }\n\n\t        },\n\n\t        _remove: function(id){\n\t            var that = this,\n\t                treeView = that.treeView,\n\t                dataSource = treeView.dataSource,\n\t                item = dataSource.get(id),\n\t                node;\n\n\t            if(item) {\n\t                node = treeView.findByUid(item.uid);\n\t                treeView.remove(node);\n\t            }\n\t        },\n\n\t        _bindEvents: function () {\n\t            var that = this;\n\n\t            that.treeView.bind(SELECT, proxy(that._navigate, that));\n\t            that.treeView.bind(EXPAND, proxy(that._expand, that));\n\t            that.treeView.element.bind(KEYDOWN, proxy(that._keydownAction, that));\n\t        },\n\n\t        _keydownAction: function (ev) {\n\t            var that = this,\n\t                target = $(ev.target).find(".k-state-focused").closest(".k-item");\n\n\t            that.trigger(KEYDOWNACTION, { target: target, keyCode: ev.keyCode });\n\t        },\n\n\t        _expand: function (ev) {\n\t            var that = this,\n\t                treeView = that.treeView,\n\t                entry = treeView.dataItem(ev.node);\n\n\t            ev.preventDefault();\n\t            that.trigger(LOAD, { entryId: entry.id });\n\t        },\n\n\t        _navigate: function (ev) {\n\t            var that= this,\n\t                node = ev.node,\n\t                entry = that.treeView.dataItem(node),\n\t                path = entry.id;\n\n\t            ev.preventDefault();\n\n\t            that.trigger(NAVIGATE, {path: path, entry: entry.toJSON()});\n\t        },\n\n\t        _hold: $.noop,\n\n\t        getSelected: function () {\n\t            var that = this,\n\t                selectedItem = that.treeView.element.find(".k-state-selected").closest(".k-item"),\n\t                item = that.treeView.dataItem(selectedItem);\n\n\t            return item;\n\t        },\n\n\t        refresh: function (id) {\n\t            var that = this,\n\t                treeView = that.treeView,\n\t                entry = treeView.dataSource.get(id),\n\t                node = entry && treeView.findByUid(entry.uid);\n\n\t            if(entry && node) {\n\t                treeView.element.find(".k-state-selected").removeClass("k-state-selected");\n\t                node.find("> div .k-in").removeClass("k-state-hover").addClass("k-state-selected");\n\t            }\n\t        },\n\n\t        reload: function () {\n\t            this.treeView.dataSource.read();\n\t        }\n\t    });\n\n\t    ui.filemanager.registerViewComponent("tree", TreeView);\n\n\t    if(kendo.ui.Grid) {\n\t        var Grid = Component.extend({\n\t            init: function(element, options, explicitOptions) {\n\t                var that = this,\n\t                    dataSourceOptions = explicitOptions.dataSource,\n\t                    messages = explicitOptions.messages;\n\n\t                options = extend({}, that.defaultOptions, options, {\n\t                    messages: messages\n\t                });\n\n\t                that._setDSOptions(options, dataSourceOptions);\n\t                that._setupColumns(options, messages);\n\t                options.kendoKeydown = options.kendoKeydown || proxy(that._kendoKeydown , that);\n\n\t                Component.fn.init.call(this, ui.Grid, element, options);\n\n\t                that.grid = that.widgetComponent;\n\t                that._bindEvents();\n\n\t                if(explicitOptions.draggable !== false && !dataSourceOptions.isLocalBinding) {\n\t                    that._initDragAndDrop();\n\t                }\n\t            },\n\n\t            defaultOptions: {\n\t                selectable: kendo.support.mobileOS ? "row" : "multiple",\n\t                editable: {\n\t                    mode: "inline",\n\t                    confirmation: false\n\t                },\n\t                sortable: true,\n\t                dropFilter: "tr:not(.k-grid-edit-row)",\n\t                navigatable: true\n\t            },\n\n\t            _setupColumns: function (options, messages) {\n\t                if(!options.columns) {\n\t                    options.columns = [\n\t                        { field: "name", title: messages.nameField || "Name", template: function(item) {\n\t                            var icon = !item.isDirectory ? kendo.getFileGroup(item.extension, true) : "folder";\n\n\t                            var template = "<div class=\'file-group-icon\'>" +\n\t                                                "<span class=\'k-icon k-i-" + icon + "\'></span>" +\n\t                                            "</div>" +\n\t                                            "<div class=\'file-name\'>" + item.name + item.extension + "<div>";\n\n\t                            return template;\n\t                        }},\n\t                        { field: "created", title: messages.dateCreatedField , format: "{0:G}" },\n\t                        { field: "size", title: messages.sizeField, template: function(item){\n\t                            if(item.size > 0) {\n\t                                return kendo.getFileSizeMessage(item.size);\n\t                            } else {\n\t                                return "";\n\t                            }\n\t                        } }\n\t                    ];\n\t                }\n\t            },\n\n\t            _bindEvents: function (){\n\t                var that = this,\n\t                    grid = that.grid;\n\n\t                grid.bind(CHANGE, proxy(that._select, that));\n\t                grid.table.on("dblclick" + NS, proxy(that._dblClick, that));\n\t                grid.table.on("mousedown" + NS, "tr:not(.k-grid-edit-row)", proxy(that._mousedown, that));\n\t                grid.table.on(KEYDOWN + NS, ".k-grid-edit-row", proxy(that._keydown, that));\n\t                grid.table.on(KEYDOWN + NS, proxy(that._keydownAction, that));\n\n\t                grid.bind("edit", function(){\n\t                    that._toggleFocusable(true);\n\t                });\n\n\t                grid.saveRow = $.noop;\n\n\t                Component.fn._bindEvents.call(this);\n\t            },\n\n\t            _kendoKeydown : function(ev){\n\t                var that = this,\n\t                    current = that.grid.current(),\n\t                    node = current ? current.closest("tr[data-uid]") : null;\n\n\t                if(node && ev.keyCode === keys.ENTER && !ev.preventKendoKeydown){\n\t                    that._triggerOpen(node);\n\t                    ev.preventKendoKeydown = true;\n\t                }\n\t            },\n\n\t            _keydownAction: function(ev) {\n\t                var that = this,\n\t                    target = $(ev.target).find(".k-state-focused").closest("tr");\n\n\t                if(target.length && !target.is(".k-grid-edit-row")) {\n\t                    that.trigger(KEYDOWNACTION, { target: target, keyCode: ev.keyCode });\n\t                }\n\t            },\n\n\t            _keydown: function(ev){\n\t                var that = this,\n\t                    grid = that.grid;\n\n\t                if (!$(ev.target).closest(".k-grid-edit-row").length) {\n\t                    return;\n\t                }\n\n\t                if(ev.keyCode === kendo.keys.ENTER) {\n\t                    setTimeout(function(){\n\t                        that._closeEditable();\n\t                    });\n\n\t                    that._tryCancel();\n\t                }\n\n\t                if (ev.keyCode === kendo.keys.ESC) {\n\t                    grid.cancelChanges();\n\t                }\n\t            },\n\n\t            _mousedown: function(ev){\n\t                var that = this,\n\t                    node = $(ev.target).closest("tr[data-uid]");\n\n\t                if(ev.which === 1 && that.grid.editable) {\n\t                    setTimeout(function(){\n\t                        that._closeEditable();\n\t                    });\n\n\t                    that._tryCancel();\n\t                }\n\n\t                if(ev.which === 3 && !node.is(".k-state-selected")) {\n\t                    that.grid.selectable.clear();\n\t                    that.grid.select(node);\n\t                }\n\t            },\n\n\t            _tryCancel: function() {\n\t                var that = this,\n\t                    grid = that.grid,\n\t                    container;\n\n\t                if (grid.editable) {\n\t                    container = grid._editContainer;\n\t                    if (!container.find("input").val()) {\n\t                        grid.cancelChanges();\n\t                    }\n\t                }\n\n\t                setTimeout(function() {\n\t                    that._toggleFocusable(false);\n\t                });\n\n\t            },\n\n\t            _toggleFocusable: function(state) {\n\t                var that = this,\n\t                    grid = that.grid;\n\n\t                grid.table.find("tr,td").children().addBack().toggleClass("k-focusable", state);\n\t            },\n\n\t            _closeEditable: function(){\n\t                var that = this,\n\t                    container;\n\n\t                if(that.grid.editable && !that.grid.editable.options.model.dirty){\n\t                    container = that.grid._editContainer;\n\t                    that.grid._destroyEditable();\n\t                    that.grid._displayRow(container);\n\t                }\n\t            },\n\n\t            _select: function () {\n\t                var that = this,\n\t                    dataItems = that.getSelected();\n\n\t                that.trigger(SELECT, {entries: dataItems});\n\t            },\n\n\t            _dblClick: function(ev){\n\t                var that = this,\n\t                    node = $(ev.target).closest("tr[data-uid]");\n\n\t                that._triggerOpen(node);\n\t            },\n\n\t            _triggerOpen: function (node) {\n\t                var that = this;\n\n\t                if(node.is(".k-grid-edit-row")) {\n\t                    return;\n\t                }\n\n\t                var item = that.grid.dataItem(node);\n\n\t                if(item) {\n\t                    that.trigger(OPEN, { entry: item });\n\t                }\n\t            },\n\n\t            getSelected: function(){\n\t                var that = this,\n\t                items = that.grid.select(),\n\t                dataItems = [];\n\n\t                for (var i = 0; i < items.length; i++) {\n\t                    dataItems.push(that.grid.dataItem(items[i]));\n\t                }\n\n\t                return dataItems;\n\t            },\n\n\t            addFolder: function () {\n\t                this.grid.addRow();\n\t            },\n\n\t            edit: function (target) {\n\t                var that = this,\n\t                    selected = that.grid.select();\n\n\t                that.grid.editRow(target || selected);\n\t            },\n\n\t            destroy: function(){\n\t                this.grid.table.off(NS);\n\t                this.grid.element.off(NS);\n\t                Component.fn.destroy.call(this);\n\t            }\n\t        });\n\n\t        ui.filemanager.registerViewComponent("grid", Grid);\n\t    }\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1009:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.listview */ "./node_modules/@progress/kendo-ui/js/kendo.listview.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/filemanager/view.js?')}}]);