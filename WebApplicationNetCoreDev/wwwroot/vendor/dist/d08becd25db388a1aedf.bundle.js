(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{"./node_modules/@progress/kendo-ui/js/kendo.gantt.data.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.gantt.data.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1258);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1059:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ "./node_modules/@progress/kendo-ui/js/kendo.data.js");\n\n/***/ }),\n\n/***/ 1258:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1059), __webpack_require__(1259)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "gantt.data",\n\t    name: "GanttData",\n\t    category: "web",\n\t    description: "The Gantt Data.",\n\t    depends: [ "data", "treelist" ],\n\t    hidden: true\n\t};\n\n\t(function($, undefined) {\n\t    var isArray = $.isArray,\n\t        extend = $.extend,\n\t        map = $.map,\n\n\t        kendoData = kendo.data,\n\t        Query = kendoData.Query,\n\t        DataSource = kendoData.DataSource,\n\t        TreeListDataSource = kendoData.TreeListDataSource,\n\t        TreeListModel = kendoData.TreeListModel,\n\n\t        PARENTIDFIELD = "parentId";\n\n\t    var createDataSource = function(type, name) {\n\t        return function(options) {\n\t            options = isArray(options) ? { data: options } : options;\n\n\t            var dataSource = options || {};\n\t            var data = dataSource.data;\n\n\t            dataSource.data = data;\n\n\t            if (!(dataSource instanceof type) && dataSource instanceof DataSource) {\n\t                throw new Error("Incorrect DataSource type. Only " + name + " instances are supported");\n\t            }\n\n\t            return dataSource instanceof type ? dataSource : new type(dataSource);\n\t        };\n\t    };\n\n\t    var dateCompareValidator = function(input) {\n\t        if (input.filter("[name=end], [name=start], [name=plannedEnd], [name=plannedStart]").length) {\n\t            var field = input.attr("name"),\n\t                picker = kendo.widgetInstance(input, kendo.ui),\n\t                dates = {},\n\t                container = input,\n\t                editable,\n\t                model;\n\n\t            while (container !== window && !editable) {\n\t                container = container.parent();\n\n\t                editable = container.data("kendoEditable");\n\t            }\n\n\t            model = editable ? editable.options.model : null;\n\n\t            if (!model) {\n\t                return true;\n\t            }\n\n\t            if(field.indexOf("planned") >= 0) {\n\t                dates.plannedStart = model.plannedStart;\n\t                dates.plannedEnd = model.plannedEnd;\n\t            } else {\n\t                dates.start = model.start;\n\t                dates.end = model.end;\n\t            }\n\n\t            dates[field] = picker ? picker.value() : kendo.parseDate(input.val());\n\n\t            if(field.indexOf("planned") >= 0) {\n\t                return dates.plannedStart <= dates.plannedEnd;\n\t            } else {\n\t                return dates.start <= dates.end;\n\t            }\n\t        }\n\n\t        return true;\n\t    };\n\n\t    var GanttDependency = kendo.data.Model.define({\n\t        id: "id",\n\t        fields: {\n\t            id: { type: "number", editable: false },\n\t            predecessorId: { type: "number" },\n\t            successorId: { type: "number" },\n\t            type: { type: "number" }\n\t        }\n\t    });\n\n\t    var GanttDependencyDataSource = DataSource.extend({\n\t        init: function(options) {\n\t            DataSource.fn.init.call(this, extend(true, {}, {\n\t                schema: {\n\t                    modelBase: GanttDependency,\n\t                    model: GanttDependency\n\t                }\n\t            }, options));\n\t        },\n\n\t        dependencies: function(id) {\n\t            var predecessors = this.predecessors(id),\n\t                successors = this.successors(id);\n\n\t            predecessors.push.apply(predecessors, successors);\n\n\t            return predecessors;\n\t        },\n\n\t        predecessors: function(id) {\n\t            return this._dependencies("successorId", id);\n\t        },\n\n\t        successors: function(id) {\n\t            return this._dependencies("predecessorId", id);\n\t        },\n\n\t        _dependencies: function(field, id) {\n\t            var data = this.view();\n\t            var filter = {\n\t                field: field,\n\t                operator: "eq",\n\t                value: id\n\t            };\n\n\t            data = new Query(data).filter(filter).toArray();\n\n\t            return data;\n\t        }\n\t    });\n\n\t    GanttDependencyDataSource.create = createDataSource(GanttDependencyDataSource, "GanttDependencyDataSource");\n\n\t    var GanttTask = TreeListModel.define({\n\t        fields: {\n\t            id: { type: "number", editable: false },\n\t            parentId: { type: "number", defaultValue: null, validation: { required: true }, nullable: true },\n\t            orderId: { type: "number", validation: { required: true } },\n\t            title: { type: "string", defaultValue: "New task" },\n\t            start: { type: "date", validation: { required: true } },\n\t            end: {\n\t                type: "date",\n\t                validation: {\n\t                    required: true,\n\t                    dateCompare: dateCompareValidator,\n\t                    message: "End date should be after or equal to the start date"\n\t                }\n\t            },\n\t            percentComplete: { type: "number", validation: { required: true, min:0, max: 1, step: 0.01 } },\n\t            summary: { type: "boolean" },\n\t            expanded: { type: "boolean", defaultValue: true },\n\t            plannedStart: { type: "date", defaultValue: null, nullable: true },\n\t            plannedEnd: {\n\t                type: "date",\n\t                defaultValue: null,\n\t                nullable: true,\n\t                validation: {\n\t                    dateCompare: dateCompareValidator,\n\t                    message: "Planned end date should be after or equal to the planned start date"\n\t                }\n\t            }\n\t        },\n\n\t        duration: function() {\n\t            var end = this.end,\n\t                start = this.start;\n\n\t            return end - start;\n\t        },\n\n\t        isMilestone: function() {\n\t            return this.duration() === 0;\n\t        },\n\n\t        _offset: function(value) {\n\t            var field = ["start", "end"],\n\t                newValue;\n\n\t            for (var i = 0; i < field.length; i++) {\n\t                newValue = new Date(this.get(field[i]).getTime() + value);\n\t                this.set(field[i], newValue);\n\t            }\n\t        },\n\n\t        _offsetPlanned: function(value) {\n\t            var field = ["plannedStart", "plannedEnd"],\n\t                newValue;\n\n\t            for (var i = 0; i < field.length; i++) {\n\t                newValue = new Date(this.get(field[i]).getTime() + value);\n\t                this.set(field[i], newValue);\n\t            }\n\t        }\n\t    });\n\n\t    GanttTask.define = function(base, options) {\n\t        if (options === undefined) {\n\t            options = base;\n\t            base = GanttTask;\n\t        }\n\n\t        var parentId = options.parentId || PARENTIDFIELD;\n\n\t        options.parentIdField = parentId;\n\n\t        var model = TreeListModel.define(base, options);\n\n\t        if (parentId) {\n\t            model.parentIdField = parentId;\n\t        }\n\n\t        return model;\n\t    };\n\n\t    var GanttDataSource = TreeListDataSource.extend({\n\t        init: function(options) {\n\t            TreeListDataSource.fn.init.call(this, extend(true, {}, {\n\t                schema: {\n\t                    modelBase: GanttTask,\n\t                    model: GanttTask\n\t                },\n\t                sort: { field: "orderId", dir: "asc" }\n\t            }, options));\n\t        },\n\n\t        add: function(task) {\n\t            if (!task) {\n\t                return;\n\t            }\n\n\t            task = this._toGanttTask(task);\n\n\t            return this.insert(this.taskSiblings(task).length, task);\n\t        },\n\n\t        insert: function(index, task) {\n\t            if (!task) {\n\t                return;\n\t            }\n\n\t            task = this._toGanttTask(task);\n\n\t            task.set("orderId", index);\n\n\t            task = DataSource.fn.insert.call(this, index, task);\n\n\t            this._reorderSiblings(task, this.taskSiblings(task).length - 1);\n\t            this._resolveSummaryFields(this.taskParent(task));\n\n\t            return task;\n\t        },\n\n\t        remove: function(task) {\n\t            var parentId = task.get("parentId"),\n\t                children = this.taskAllChildren(task);\n\n\t            this._removeItems(children);\n\n\t            task = TreeListDataSource.fn.remove.call(this, task);\n\n\t            this._childRemoved(parentId, task.get("orderId"));\n\n\t            return task;\n\t        },\n\n\t        taskAllChildren: function(task) {\n\t            var data = [],\n\t                that = this;\n\t            var callback = function(task) {\n\t                var tasks = that.taskChildren(task);\n\n\t                data.push.apply(data, tasks);\n\t                map(tasks, callback);\n\t            };\n\n\t            if (!!task) {\n\t                callback(task);\n\t            } else {\n\t                data = this.view();\n\t            }\n\n\t            return data;\n\t        },\n\n\t        taskChildren: function(task) {\n\t            // has been changed, so it gets all data from .view() to .data()\n\t            var data = this.view();\n\t            var filter = {\n\t                field: "parentId",\n\t                operator: "eq",\n\t                value: null\n\t            };\n\n\t            var order = (this._sort && this._sort.length) ? this._sort : {\n\t                field: "orderId",\n\t                dir: "asc"\n\t            };\n\t            var taskId;\n\n\t            if (!!task) {\n\t                taskId = task.get("id");\n\n\t                if (taskId === undefined || taskId === null || taskId === "") {\n\t                    return [];\n\t                }\n\n\t                filter.value = taskId;\n\t            }\n\n\t            data = new Query(data).filter(filter).sort(order).toArray();\n\n\t            return data;\n\t        },\n\n\t        taskLevel: function(task) {\n\t            var level = 0,\n\t                parent = this.taskParent(task);\n\n\t            while (parent !== null) {\n\t                level += 1;\n\t                parent = this.taskParent(parent);\n\t            }\n\n\t            return level;\n\t        },\n\n\t        taskParent: function(task) {\n\t            if (!task || task.get("parentId") === null) {\n\t                return null;\n\t            }\n\t            return this.get(task.parentId);\n\t        },\n\n\t        taskSiblings: function(task) {\n\t            if (!task) {\n\t                return null;\n\t            }\n\n\t            var parent = this.taskParent(task);\n\n\t            return this.taskChildren(parent);\n\t        },\n\n\t        taskTree: function(task) {\n\t            var data = [],\n\t                current,\n\t                tasks = this.taskChildren(task);\n\n\t            for (var i = 0, l = tasks.length; i < l; i++) {\n\t                current = tasks[i];\n\t                data.push(current);\n\n\t                if (current.get("expanded")) {\n\t                    var children = this.taskTree(current);\n\n\t                    data.push.apply(data, children);\n\t                }\n\t            }\n\n\t            return data;\n\t        },\n\n\t        update: function(task, taskInfo) {\n\t            var that = this,\n\t                oldValue;\n\n\t            var offsetChildren = function(parentTask, offset) {\n\t                var children = that.taskAllChildren(parentTask);\n\n\t                for (var i = 0, l = children.length; i < l; i++) {\n\t                    children[i]._offset(offset);\n\t                }\n\t            };\n\n\t            var offsetChildrenPlanned = function(parentTask, offset) {\n\t                var children = that.taskAllChildren(parentTask);\n\n\t                for (var i = 0, l = children.length; i < l; i++) {\n\t                    children[i]._offsetPlanned(offset);\n\t                }\n\t            };\n\n\t            var modelChangeHandler = function(e) {\n\t                var field = e.field,\n\t                    model = e.sender;\n\n\t                switch (field) {\n\t                    case "start":\n\t                        that._resolveSummaryStart(that.taskParent(model));\n\n\t                        offsetChildren(model, model.get(field).getTime() - oldValue.getTime());\n\t                        break;\n\t                    case "end":\n\t                        that._resolveSummaryEnd(that.taskParent(model));\n\t                        break;\n\t                    case "plannedStart":\n\t                        that._resolveSummaryPlannedStart(that.taskParent(model));\n\n\t                        if(model.get(field) && oldValue) {\n\t                            offsetChildrenPlanned(model, model.get(field).getTime() - oldValue.getTime());\n\t                        }\n\t                        break;\n\t                    case "plannedEnd":\n\t                        that._resolveSummaryPlannedEnd(that.taskParent(model));\n\t                        break;\n\t                    case "percentComplete":\n\t                        that._resolveSummaryPercentComplete(that.taskParent(model));\n\t                        break;\n\t                    case "orderId":\n\t                        that._reorderSiblings(model, oldValue);\n\t                        break;\n\t                }\n\t            };\n\n\t            if (taskInfo.parentId !== undefined) {\n\t                oldValue = task.get("parentId");\n\n\t                if (oldValue !== taskInfo.parentId) {\n\t                    task.set("parentId", taskInfo.parentId);\n\n\t                    that._childRemoved(oldValue, task.get("orderId"));\n\n\t                    task.set("orderId", that.taskSiblings(task).length - 1);\n\t                    that._resolveSummaryFields(that.taskParent(task));\n\t                }\n\n\t                delete taskInfo.parentId;\n\t            }\n\n\t            task.bind("change", modelChangeHandler);\n\n\t            for (var field in taskInfo) {\n\t                oldValue = task.get(field);\n\n\t                if(field === "plannedStart" || field === "plannedEnd") {\n\t                    // Update plannedStart and plannedEnd only when oldValue is not undefined or new value is not null\n\t                    // That limitation is needed to avoid redundant update requests when custom edit template is used\n\t                    // and the plannedStart and plannedEnd fields are not updated upon edit\n\t                    if(oldValue !== undefined || taskInfo[field] !== null) {\n\t                        task.set(field, taskInfo[field]);\n\t                    }\n\t                } else {\n\t                    task.set(field, taskInfo[field]);\n\t                }\n\t            }\n\n\t            task.unbind("change", modelChangeHandler);\n\t        },\n\n\t        _childRemoved: function(parentId, index) {\n\t            var parent = parentId === null ? null : this.get(parentId),\n\t                children = this.taskChildren(parent);\n\n\t            for (var i = index, l = children.length; i < l; i++) {\n\t                children[i].set("orderId", i);\n\t            }\n\n\t            this._resolveSummaryFields(parent);\n\t        },\n\n\t        _resolveSummaryFields: function(summary) {\n\t            if (!summary) {\n\t                return;\n\t            }\n\n\t            this._updateSummary(summary);\n\n\t            if (!this.taskChildren(summary).length) {\n\t                return;\n\t            }\n\n\t            this._resolveSummaryStart(summary);\n\t            this._resolveSummaryEnd(summary);\n\t            this._resolveSummaryPlannedStart(summary);\n\t            this._resolveSummaryPlannedEnd(summary);\n\t            this._resolveSummaryPercentComplete(summary);\n\t        },\n\n\t        _resolveSummaryStart: function(summary) {\n\t            var that = this;\n\t            var getSummaryStart = function(parentTask) {\n\t                var children = that.taskChildren(parentTask);\n\t                var min = children[0].start.getTime();\n\t                var currentMin;\n\n\t                for (var i = 1, l = children.length; i < l; i++) {\n\t                    currentMin = children[i].start.getTime();\n\t                    if (currentMin < min) {\n\t                        min = currentMin;\n\t                    }\n\t                }\n\n\t                return new Date(min);\n\t            };\n\n\t            this._updateSummaryRecursive(summary, "start", getSummaryStart);\n\t        },\n\n\t        _resolveSummaryEnd: function(summary) {\n\t            var that = this;\n\t            var getSummaryEnd = function(parentTask) {\n\t                var children = that.taskChildren(parentTask);\n\t                var max = children[0].end.getTime();\n\t                var currentMax;\n\n\t                for (var i = 1, l = children.length; i < l; i++) {\n\t                    currentMax = children[i].end.getTime();\n\t                    if (currentMax > max) {\n\t                        max = currentMax;\n\t                    }\n\t                }\n\n\t                return new Date(max);\n\t            };\n\n\t            this._updateSummaryRecursive(summary, "end", getSummaryEnd);\n\t        },\n\n\t        _resolveSummaryPlannedStart: function(summary) {\n\t            var that = this;\n\t            var getSummaryPlannedStart = function(parentTask) {\n\t                var children = that.taskChildren(parentTask),\n\t                    min = null,\n\t                    currentMin;\n\n\t                for (var i = 0, l = children.length; i < l; i++) {\n\t                    if(children[i].plannedStart) {\n\t                        currentMin = children[i].plannedStart.getTime();\n\t                        if (!min || currentMin < min) {\n\t                            min = currentMin;\n\t                        }\n\t                    }\n\t                }\n\n\t                if(!min) {\n\t                    return null;\n\t                }\n\n\t                return new Date(min);\n\t            };\n\n\t            this._updateSummaryRecursive(summary, "plannedStart", getSummaryPlannedStart);\n\t        },\n\n\t        _resolveSummaryPlannedEnd: function(summary) {\n\t            var that = this;\n\t            var getSummaryPlannedEnd = function(parentTask) {\n\t                var children = that.taskChildren(parentTask),\n\t                    max = null,\n\t                    currentMax;\n\n\t                for (var i = 0, l = children.length; i < l; i++) {\n\t                    if(children[i].plannedEnd) {\n\t                        currentMax = children[i].plannedEnd.getTime();\n\t                        if (!max || currentMax > max) {\n\t                            max = currentMax;\n\t                        }\n\t                    }\n\t                }\n\n\t                if(!max) {\n\t                    return null;\n\t                }\n\n\t                return new Date(max);\n\t            };\n\n\t            this._updateSummaryRecursive(summary, "plannedEnd", getSummaryPlannedEnd);\n\t        },\n\n\t        _resolveSummaryPercentComplete: function(summary) {\n\t            var that = this;\n\t            var getSummaryPercentComplete = function(parentTask) {\n\t                var children = that.taskChildren(parentTask);\n\t                var percentComplete = new Query(children).aggregate([{\n\t                    field: "percentComplete",\n\t                    aggregate: "average"\n\t                }]);\n\n\t                return percentComplete.percentComplete.average;\n\t            };\n\n\t            this._updateSummaryRecursive(summary, "percentComplete", getSummaryPercentComplete);\n\t        },\n\n\t        _reorderSiblings: function(task, oldOrderId) {\n\t            var orderId = task.get("orderId"),\n\t                direction = orderId > oldOrderId,\n\t                startIndex = direction ? oldOrderId : orderId,\n\t                endIndex = direction ? orderId : oldOrderId,\n\t                newIndex = direction ? startIndex : startIndex + 1,\n\t                siblings = this.taskSiblings(task);\n\n\t            if(!siblings.length){\n\t                return;\n\t            }\n\n\t            endIndex = Math.min(endIndex, siblings.length - 1);\n\n\t            for (var i = startIndex; i <= endIndex; i++) {\n\t                if (siblings[i] === task) {\n\t                    continue;\n\t                }\n\n\t                siblings[i].set("orderId", newIndex);\n\n\t                newIndex += 1;\n\t            }\n\t        },\n\n\t        _toGanttTask: function(task) {\n\t            if (!(task instanceof GanttTask)) {\n\t                var taskInfo = task;\n\n\t                task = DataSource.fn._createNewModel.call(this);\n\t                task.accept(taskInfo);\n\t            }\n\n\t            return task;\n\t        },\n\n\t        _updateSummary: function(task) {\n\t            if (task !== null) {\n\t                var childCount = this.taskChildren(task).length;\n\n\t                task.set("summary", childCount > 0);\n\t            }\n\t        },\n\n\t        _updateSummaryRecursive: function(summary, field, callback) {\n\t            if (!summary) {\n\t                return;\n\t            }\n\n\t            var value = callback(summary);\n\n\t            summary.set(field, value);\n\n\t            var parent = this.taskParent(summary);\n\n\t            if (parent) {\n\t                this._updateSummaryRecursive(parent, field, callback);\n\t            }\n\t        }\n\t    });\n\n\t    GanttDataSource.create = createDataSource(GanttDataSource, "GanttDataSource");\n\n\t    extend(true, kendo.data, {\n\t        GanttDataSource: GanttDataSource,\n\t        GanttTask: GanttTask,\n\t        GanttDependencyDataSource: GanttDependencyDataSource,\n\t        GanttDependency: GanttDependency\n\t    });\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1259:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.treelist */ "./node_modules/@progress/kendo-ui/js/kendo.treelist.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.gantt.data.js?')},"./node_modules/@progress/kendo-ui/js/kendo.gantt.editors.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.gantt.editors.js ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1260);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1059:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ "./node_modules/@progress/kendo-ui/js/kendo.data.js");\n\n/***/ }),\n\n/***/ 1086:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.popup */ "./node_modules/@progress/kendo-ui/js/kendo.popup.js");\n\n/***/ }),\n\n/***/ 1187:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.numerictextbox */ "./node_modules/@progress/kendo-ui/js/kendo.numerictextbox.js");\n\n/***/ }),\n\n/***/ 1191:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.window */ "./node_modules/@progress/kendo-ui/js/kendo.window.js");\n\n/***/ }),\n\n/***/ 1253:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.gantt.data */ "./node_modules/@progress/kendo-ui/js/kendo.gantt.data.js");\n\n/***/ }),\n\n/***/ 1260:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1059), __webpack_require__(1086), __webpack_require__(1191), __webpack_require__(1253), __webpack_require__(1261), __webpack_require__(1262), __webpack_require__(1187)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "gantt.editors",\n\t    name: "GanttEditors",\n\t    category: "web",\n\t    description: "The Gantt component editors.",\n\t    depends: [ "data", "popup", "window", "gantt.data", "grid", "datetimepicker", "numerictextbox"],\n\t    hidden: true\n\t};\n\n\t(function($, undefined) {\n\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        browser = kendo.support.browser,\n\t        Observable = kendo.Observable,\n\t        Widget = ui.Widget,\n\t        outerWidth = kendo._outerWidth,\n\n\t        keys = $.extend({F10: 121}, kendo.keys),\n\n\t        proxy = $.proxy,\n\t        extend = $.extend,\n\t        isPlainObject = $.isPlainObject,\n\n\t        NS = ".kendoGantt",\n\t        PERCENTAGE_FORMAT = "p0",\n\t        TABINDEX = "tabIndex",\n\t        CLICK = "click",\n\t        WIDTH = "width",\n\t        STRING = "string",\n\t        ARIA_DESCENDANT = "aria-activedescendant",\n\t        ACTIVE_OPTION = "action-option-focused",\n\t        DOT = ".",\n\n\t        DIRECTIONS = {\n\t            "down": {\n\t                origin: "bottom left",\n\t                position: "top left"\n\t            },\n\t            "up": {\n\t                origin: "top left",\n\t                position: "bottom left"\n\t            }\n\t        },\n\n\t        TASK_DROPDOWN_TEMPLATE = kendo.template(\'<div class="#=styles.popupWrapper#">\' +\n\t            \'<ul class="#=styles.popupList#" role="listbox">\' +\n\t                \'#for(var i = 0, l = actions.length; i < l; i++){#\' +\n\t                    \'<li class="#=styles.item#" data-action="#=actions[i].data#" role="option">#=actions[i].text#</span>\' +\n\t                \'#}#\' +\n\t            \'</ul>\' +\n\t        \'</div>\');\n\n\t    var ganttStyles = {\n\t        buttonDelete: "k-gantt-delete",\n\t        buttonCancel: "k-gantt-cancel",\n\t        buttonSave: "k-gantt-update",\n\t        focused: "k-state-focused",\n\t        gridContent: "k-grid-content",\n\t        hovered: "k-state-hover",\n\t        item: "k-item",\n\t        popupWrapper: "k-list-container",\n\t        popupList: "k-list k-reset",\n\t        popup: {\n\t            form: "k-popup-edit-form",\n\t            editForm: "k-gantt-edit-form",\n\t            formContainer: "k-edit-form-container",\n\t            resourcesFormContainer: "k-resources-form-container",\n\t            message: "k-popup-message",\n\t            buttonsContainer: "k-edit-buttons k-state-default",\n\t            button: "k-button",\n\t            editField: "k-edit-field",\n\t            editLabel: "k-edit-label",\n\t            resourcesField: "k-gantt-resources"\n\t        },\n\t        primary: "k-primary",\n\t        toolbar: {\n\t            appendButton: "k-gantt-create"\n\t        }\n\t    };\n\n\t    var DATERANGEEDITOR = function(container, options) {\n\t        var attr = { name: options.field, title: options.title };\n\t        var validationRules = options.model.fields[options.field].validation;\n\n\t        if (validationRules && isPlainObject(validationRules) && validationRules.message) {\n\t            attr[kendo.attr("dateCompare-msg")] = validationRules.message;\n\t        }\n\n\t        $(\'<input type="text" required \' +\n\t                kendo.attr("type") + \'="date" \' +\n\t                kendo.attr("role") + \'="datetimepicker" \' +\n\t                kendo.attr("bind") + \'="value:\' +\n\t                options.field +\'" \' +\n\t                kendo.attr("validate") + "=\'true\' />")\n\t            .attr(attr)\n\t            .appendTo(container);\n\n\t        $(\'<span \' + kendo.attr("for") + \'="\' + options.field + \'" class="k-invalid-msg"/>\')\n\t            .hide()\n\t            .appendTo(container);\n\t    };\n\n\t    var RESOURCESEDITOR = function(container, options) {\n\t        $(\'<a href="#" class="\' + options.styles.button + \'">\' + options.messages.assignButton + \'</a>\').click(options.click).appendTo(container);\n\t    };\n\n\t    var TaskDropDown = Observable.extend({\n\t        init: function(element, options) {\n\n\t            Observable.fn.init.call(this);\n\n\t            this.element = element;\n\t            this.options = extend(true, {}, this.options, options);\n\n\t            this._popup();\n\t        },\n\n\t        options: {\n\t            direction: "down",\n\t            navigatable: false\n\t        },\n\n\t        destroy: function() {\n\t            clearTimeout(this._focusTimeout);\n\t            this.popup.destroy();\n\t            this.element.off(NS);\n\t            this.list.off(NS);\n\t            this.unbind();\n\t        },\n\n\t        _adjustListWidth: function() {\n\t            var list = this.list;\n\t            var width = list[0].style.width;\n\t            var wrapper = this.element;\n\t            var listOuterWidth = outerWidth(list);\n\t            var computedStyle;\n\t            var computedWidth;\n\n\t            if (!list.data(WIDTH) && width) {\n\t                return;\n\t            }\n\n\t            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;\n\t            computedWidth = computedStyle ? parseFloat(computedStyle.width) : outerWidth(wrapper);\n\n\t            if (computedStyle && (browser.mozilla || browser.msie)) { // getComputedStyle returns different box in FF and IE.\n\t                computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);\n\t            }\n\n\t            if (list.css("box-sizing") !== "border-box") {\n\t                width = computedWidth - (outerWidth(list) - list.width());\n\t            } else {\n\t                width = computedWidth;\n\t            }\n\n\t            if (listOuterWidth > width) {\n\t                width = listOuterWidth;\n\t            }\n\n\t            list.css({\n\t                fontFamily: wrapper.css("font-family"),\n\t                width: width\n\t            })\n\t            .data(WIDTH, width);\n\t        },\n\n\t        _current: function(method) {\n\t            var current = this.list\n\t                .find(DOT + ganttStyles.focused);\n\t            var sibling = current[method]();\n\n\t            if (sibling.length) {\n\t                current\n\t                    .removeClass(ganttStyles.focused)\n\t                    .removeAttr("id");\n\t                sibling\n\t                    .addClass(ganttStyles.focused)\n\t                    .attr("id", ACTIVE_OPTION);\n\n\t                this.list.find("ul")\n\t                    .removeAttr(ARIA_DESCENDANT)\n\t                    .attr(ARIA_DESCENDANT, ACTIVE_OPTION);\n\t            }\n\t        },\n\n\t        _popup: function() {\n\t            var that = this;\n\t            var itemSelector = "li" + DOT + ganttStyles.item;\n\t            var actions = this.options.messages.actions;\n\t            var navigatable = this.options.navigatable;\n\n\t            this.list = $(TASK_DROPDOWN_TEMPLATE({\n\t                styles: ganttStyles,\n\t                actions: [\n\t                    {\n\t                        data: "add",\n\t                        text: actions.addChild\n\t                    },\n\t                    {\n\t                        data: "insert-before",\n\t                        text: actions.insertBefore\n\t                    },\n\t                    {\n\t                        data: "insert-after",\n\t                        text: actions.insertAfter\n\t                    }\n\t                ]\n\t            }));\n\n\t            this.element.append(this.list);\n\n\t            this.popup = new kendo.ui.Popup(this.list,\n\t                extend({\n\t                    anchor: this.element,\n\t                    open: function() {\n\t                        that._adjustListWidth();\n\t                    },\n\t                    animation: this.options.animation\n\t                }, DIRECTIONS[this.options.direction])\n\t            );\n\n\t            this.element\n\t                .on(CLICK + NS, function(e) {\n\t                    var target = $(this);\n\t                    var action = target.attr(kendo.attr("action"));\n\n\t                    e.preventDefault();\n\n\t                    if (action) {\n\t                        that.trigger("command", { type: action });\n\t                    } else {\n\t                        that.popup.open();\n\n\t                        if (navigatable) {\n\t                            that.list\n\t                                .find("li:first")\n\t                                .addClass(ganttStyles.focused)\n\t                                .attr("id", ACTIVE_OPTION)\n\t                                .end()\n\t                                .find("ul")\n\t                                .attr({\n\t                                    TABINDEX: 0,\n\t                                    "aria-activedescendant": ACTIVE_OPTION\n\t                                })\n\t                                .focus();\n\t                        }\n\t                    }\n\t                });\n\n\t            this.list\n\t                .find(itemSelector)\n\t                .hover(function() {\n\t                    $(this).addClass(ganttStyles.hovered);\n\t                }, function() {\n\t                    $(this).removeClass(ganttStyles.hovered);\n\t                })\n\t                .end()\n\t                .on(CLICK + NS, itemSelector, function() {\n\t                    that.trigger("command", { type: $(this).attr(kendo.attr("action")) });\n\t                    that.popup.close();\n\t                });\n\n\t            if (navigatable) {\n\t                this.popup\n\t                    .bind("close", function() {\n\t                        that.list\n\t                            .find(itemSelector)\n\t                            .removeClass(ganttStyles.focused)\n\t                            .end()\n\t                            .find("ul")\n\t                            .attr(TABINDEX, 0);\n\n\t                        that.element\n\t                            .parents(\'[\' + kendo.attr("role") + \'="gantt"]\')\n\t                            .find(DOT + ganttStyles.gridContent + " > table:first")\n\t                            .focus();\n\t                    });\n\n\t                this.list\n\t                    .find("ul")\n\t                    .on("keydown" + NS, function(e) {\n\t                        var key = e.keyCode;\n\n\t                        switch (key) {\n\t                            case keys.UP:\n\t                                e.preventDefault();\n\t                                that._current("prev");\n\t                                break;\n\t                            case keys.DOWN:\n\t                                e.preventDefault();\n\t                                that._current("next");\n\t                                break;\n\t                            case keys.ENTER:\n\t                                that.list\n\t                                    .find(DOT + ganttStyles.focused)\n\t                                    .click();\n\t                                break;\n\t                            case keys.ESC:\n\t                                e.preventDefault();\n\t                                that.popup.close();\n\t                                break;\n\t                        }\n\t                    });\n\t            }\n\t        }\n\t    });\n\n\t    var editors = {\n\t        desktop: {\n\t            dateRange: DATERANGEEDITOR,\n\t            resources: RESOURCESEDITOR\n\t        }\n\t    };\n\n\t    var Editor = kendo.Observable.extend({\n\t        init: function(element, options) {\n\t            kendo.Observable.fn.init.call(this);\n\n\t            this.element = element;\n\t            this.options = extend(true, {}, this.options, options);\n\t            this.createButton = this.options.createButton;\n\t        },\n\n\t        fields: function(editors, model, plannedEditors) {\n\t            var that = this;\n\t            var options = this.options;\n\t            var messages = options.messages.editor;\n\t            var resources = options.resources;\n\t            var fields;\n\n\t            var click = function(e) {\n\t                e.preventDefault();\n\t                resources.editor(that.container.find(DOT + ganttStyles.popup.resourcesField), model);\n\t            };\n\n\t            if (options.editable.template) {\n\t                fields = $.map(model.fields, function(value, key) {\n\t                            return { field: key };\n\t                        });\n\t            } else {\n\t                fields = [\n\t                    { field: "title", title: messages.title },\n\t                    { field: "start", title: messages.start, editor: editors.dateRange },\n\t                    { field: "end", title: messages.end, editor: editors.dateRange },\n\t                    { field: "percentComplete", title: messages.percentComplete, format: PERCENTAGE_FORMAT }\n\t                ];\n\n\t                if(plannedEditors) {\n\t                    fields.splice.apply(fields, [1, 0].concat([\n\t                        { field: "plannedStart", title: messages.plannedStart, editor: editors.dateRange },\n\t                        { field: "plannedEnd", title: messages.plannedEnd, editor: editors.dateRange }\n\t                    ]));\n\t                }\n\n\t                if (model.get(resources.field)) {\n\t                    fields.push({ field: resources.field, title: messages.resources, messages: messages, editor: editors.resources, click: click, styles: ganttStyles.popup });\n\t                }\n\t            }\n\n\t            return fields;\n\t        },\n\n\t        _buildEditTemplate: function(model, fields, editableFields) {\n\t            var resources = this.options.resources;\n\t            var template = this.options.editable.template;\n\t            var settings = extend({}, kendo.Template, this.options.templateSettings);\n\t            var paramName = settings.paramName;\n\t            var popupStyles = ganttStyles.popup;\n\t            var html = "";\n\n\t            if (template) {\n\t                if (typeof template === STRING) {\n\t                    template = kendo.unescape(template);\n\t                }\n\n\t                html += (kendo.template(template, settings))(model);\n\t            } else {\n\t                for (var i = 0, length = fields.length; i < length; i++) {\n\t                    var field = fields[i];\n\n\t                    html += \'<div class="\' + popupStyles.editLabel + \'"><label for="\' + field.field + \'">\' + (field.title || field.field || "") + \'</label></div>\';\n\n\t                    if (field.field === resources.field) {\n\t                        html += \'<div class="\' + popupStyles.resourcesField + \'" style="display:none"></div>\';\n\t                    }\n\n\t                    if ((!model.editable || model.editable(field.field))) {\n\t                        editableFields.push(field);\n\t                        html += \'<div \' + kendo.attr("container-for") + \'="\' + field.field + \'" class="\' + popupStyles.editField + \'"></div>\';\n\t                    } else {\n\t                        var tmpl = "#:";\n\n\t                        if (field.field) {\n\t                            field = kendo.expr(field.field, paramName);\n\t                            tmpl += field + "==null?\'\':" + field;\n\t                        } else {\n\t                            tmpl += "\'\'";\n\t                        }\n\n\t                        tmpl += "#";\n\n\t                        tmpl = kendo.template(tmpl, settings);\n\n\t                        html += \'<div class="\' + popupStyles.editField + \'">\' + tmpl(model) + \'</div>\';\n\t                    }\n\t                }\n\t            }\n\n\t            return html;\n\t        }\n\t    });\n\n\t    var PopupEditor = Editor.extend({\n\t        destroy: function() {\n\t            this.close();\n\t            this.unbind();\n\t        },\n\n\t        close: function() {\n\t            var that = this;\n\n\t            var destroy = function() {\n\t                if (that.editable) {\n\t                    that.editable.destroy();\n\t                    that.editable = null;\n\t                    that.container = null;\n\t                }\n\n\t                if (that.popup) {\n\t                    that.popup.destroy();\n\t                    that.popup = null;\n\t                }\n\t            };\n\n\t            if (this.editable && this.container.is(":visible")) {\n\t                that.trigger("close", { window: that.container });\n\t                this.container.data("kendoWindow").bind("deactivate", destroy).close();\n\t            } else {\n\t                destroy();\n\t            }\n\t        },\n\n\t        editTask: function(task, plannedEditors) {\n\t            this.editable = this._createPopupEditor(task, plannedEditors);\n\t        },\n\n\t        showDialog: function(options) {\n\t            var buttons = options.buttons;\n\t            var popupStyles = ganttStyles.popup;\n\n\t            var html = kendo.format(\'<div class="{0}"><div class="{1}"><p class="{2}">{3}</p><div class="{4}">\',\n\t                popupStyles.form, popupStyles.formContainer, popupStyles.message, options.text, popupStyles.buttonsContainer);\n\n\t            for (var i = 0, length = buttons.length; i < length; i++) {\n\t                html += this.createButton(buttons[i]);\n\t            }\n\n\t            html += \'</div></div></div>\';\n\n\t            var wrapper = this.element;\n\n\t            if (this.popup) {\n\t                this.popup.destroy();\n\t            }\n\n\t            var popup = this.popup = $(html).appendTo(wrapper)\n\t                .eq(0)\n\t                .on("click", DOT + popupStyles.button, function(e) {\n\t                    e.preventDefault();\n\n\t                    popup.close();\n\n\t                    var buttonIndex = $(e.currentTarget).index();\n\n\t                    buttons[buttonIndex].click();\n\t                })\n\t                .kendoWindow({\n\t                    modal: true,\n\t                    autoFocus: false,\n\t                    resizable: false,\n\t                    draggable: false,\n\t                    title: options.title,\n\t                    visible: false,\n\t                    deactivate: function() {\n\t                        this.destroy();\n\t                        wrapper.focus();\n\t                    }\n\t                })\n\t                .getKendoWindow();\n\n\t            popup.center().open();\n\n\t            popup.element.find(".k-primary").focus();\n\t        },\n\n\t        _createPopupEditor: function(task, plannedEditors) {\n\t            var that = this;\n\t            var options = {};\n\t            var messages = this.options.messages;\n\t            var popupStyles = ganttStyles.popup;\n\n\t            var html = kendo.format(\'<div {0}="{1}" class="{2} {3}"><div class="{4}">\',\n\t                kendo.attr("uid"), task.uid, popupStyles.form, popupStyles.editForm, popupStyles.formContainer);\n\n\t            var fields = this.fields(editors.desktop, task, plannedEditors);\n\t            var editableFields = [];\n\n\t            html += this._buildEditTemplate(task, fields, editableFields);\n\n\t            html += \'<div class="\' + popupStyles.buttonsContainer + \'">\';\n\t            html += this.createButton({ name: "update", text: messages.save, className: ganttStyles.primary });\n\t            html += this.createButton({ name: "cancel", text: messages.cancel });\n\t            if (that.options.editable.destroy !== false) {\n\t                html += this.createButton({ name: "delete", text: messages.destroy });\n\t            }\n\n\t            html += \'</div></div></div>\';\n\n\t            var container = this.container = $(html).appendTo(this.element)\n\t                .eq(0)\n\t                .kendoWindow(extend({\n\t                    modal: true,\n\t                    resizable: false,\n\t                    draggable: true,\n\t                    title: messages.editor.editorTitle,\n\t                    visible: false,\n\t                    close: function(e) {\n\t                        if (e.userTriggered) {\n\t                            if (that.trigger("cancel", { container: container, model: task })) {\n\t                                e.preventDefault();\n\t                            }\n\t                        }\n\t                    }\n\t                }, options));\n\n\t            var editableWidget = container\n\t                .kendoEditable({\n\t                    fields: editableFields,\n\t                    model: task,\n\t                    clearContainer: false,\n\t                    validateOnBlur: true,\n\t                    target: that.options.target\n\t                })\n\t                .data("kendoEditable");\n\n\t            kendo.cycleForm(container);\n\n\t            if (!this.trigger("edit", { container: container, model: task })) {\n\t                container.data("kendoWindow").center().open();\n\n\t                container.on(CLICK + NS, DOT + ganttStyles.buttonCancel, function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\n\t                    that.trigger("cancel", { container: container, model: task });\n\t                });\n\n\t                container.on(CLICK + NS, DOT + ganttStyles.buttonSave, function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\n\t                    var fields = that.fields(editors.desktop, task, plannedEditors);\n\t                    var updateInfo = {};\n\t                    var field;\n\n\t                    for (var i = 0, length = fields.length; i < length; i++) {\n\t                        field = fields[i].field;\n\t                        updateInfo[field] = task.get(field);\n\t                    }\n\n\t                    that.trigger("save", { container: container, model: task, updateInfo: updateInfo });\n\t                });\n\n\t                container.on(CLICK + NS, DOT + ganttStyles.buttonDelete, function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\n\t                    that.trigger("remove", { container: container, model: task });\n\t                });\n\t            } else {\n\t                that.trigger("cancel", { container: container, model: task });\n\t            }\n\n\t            return editableWidget;\n\t        }\n\t    });\n\n\t    var ResourceEditor = Widget.extend({\n\t        init: function(element, options) {\n\t            Widget.fn.init.call(this, element, options);\n\n\t            this.wrapper = this.element;\n\t            this.model = this.options.model;\n\t            this.resourcesField = this.options.resourcesField;\n\t            this.createButton = this.options.createButton;\n\n\t            this._initContainer();\n\t            this._attachHandlers();\n\t        },\n\n\t        events: [\n\t            "save"\n\t        ],\n\n\t        close: function() {\n\t            this.window.bind("deactivate", proxy(this.destroy, this)).close();\n\t        },\n\n\t        destroy: function() {\n\t            this._dettachHandlers();\n\n\t            this.grid.destroy();\n\t            this.grid = null;\n\n\t            this.window.destroy();\n\t            this.window = null;\n\n\t            Widget.fn.destroy.call(this);\n\n\t            kendo.destroy(this.wrapper);\n\n\t            this.element = this.wrapper = null;\n\t        },\n\n\t        open: function() {\n\t            this.window.center().open();\n\t        },\n\n\t        _attachHandlers: function() {\n\t            var grid = this.grid;\n\n\t            var closeHandler = this._cancelProxy = proxy(this._cancel, this);\n\t            this.container.on(CLICK + NS, DOT + ganttStyles.buttonCancel, this._cancelProxy);\n\n\t            this._saveProxy = proxy(this._save, this);\n\t            this.container.on(CLICK + NS, DOT + ganttStyles.buttonSave, this._saveProxy);\n\n\t            this.window.bind("close", function(e) {\n\t                if (e.userTriggered) {\n\t                    closeHandler(e);\n\t                }\n\t            });\n\n\t            grid.wrapper.on(CLICK + NS, "input[type=\'checkbox\']", function() {\n\t                var element = $(this);\n\t                var row = $(element).closest("tr");\n\t                var model = grid.dataSource.getByUid(row.attr(kendo.attr("uid")));\n\t                var value = $(element).is(":checked") ? 1 : "";\n\n\t                model.set("value", value);\n\t            });\n\t        },\n\n\t        _cancel: function(e) {\n\t            e.preventDefault();\n\t            this.close();\n\t        },\n\n\t        _createButtons: function() {\n\t            var buttons = this.options.buttons;\n\t            var html = \'<div class="\' + ganttStyles.popup.buttonsContainer + \'">\';\n\n\t            for (var i = 0, length = buttons.length; i < length; i++) {\n\t                html += this.createButton(buttons[i]);\n\t            }\n\n\t            html += "</div>";\n\n\t            this.container.append(html);\n\t        },\n\n\t        _dettachHandlers: function() {\n\t            this._cancelProxy = null;\n\t            this._saveProxy = null;\n\t            this.container.off(NS);\n\t            this.grid.wrapper.off();\n\t        },\n\n\t        _initContainer: function() {\n\t            var that = this;\n\t            var popupStyles = ganttStyles.popup;\n\t            var dom = kendo.format(\'<div class="{0} {1}"><div class="{2} {3}"></div></div>"\',\n\t                popupStyles.form, popupStyles.editForm, popupStyles.formContainer, popupStyles.resourcesFormContainer);\n\n\t            dom = $(dom);\n\n\t            this.container = dom.find(DOT + popupStyles.resourcesFormContainer);\n\n\t            this.window = dom.kendoWindow({\n\t                modal: true,\n\t                resizable: false,\n\t                draggable: true,\n\t                visible: false,\n\t                title: this.options.messages.resourcesEditorTitle,\n\t                open: function() {\n\t                      that.grid.resize(true);\n\t                }\n\t            }).data("kendoWindow");\n\n\t            this._resourceGrid();\n\t            this._createButtons();\n\t        },\n\n\t        _resourceGrid: function() {\n\t            var that = this;\n\t            var messages = this.options.messages;\n\t            var element = $(\'<div id="resources-grid"/>\').appendTo(this.container);\n\n\t            this.grid = new kendo.ui.Grid(element, {\n\t                columns: [\n\t                    {\n\t                        field: "name",\n\t                        title: messages.resourcesHeader,\n\t                        template:\n\t                            "<label><input type=\'checkbox\' value=\'#=name#\'" +\n\t                                "# if (value > 0 && value !== null) {#" +\n\t                                       "checked=\'checked\'" +\n\t                                "# } #" +\n\t                            "/>#=name#</labe>"\n\t                    },\n\t                    {\n\t                        field: "value",\n\t                        title: messages.unitsHeader,\n\t                        template: function(dataItem) {\n\t                            var valueFormat = dataItem.format;\n\t                            var value = dataItem.value !== null ? dataItem.value : "";\n\n\t                            return valueFormat ? kendo.toString(value, valueFormat) : value;\n\t                        }\n\t                    }\n\t                ],\n\t                height: 280,\n\t                sortable: true,\n\t                editable: true,\n\t                filterable: true,\n\t                dataSource: {\n\t                    data: that.options.data,\n\t                    schema: {\n\t                        model: {\n\t                            id: "id",\n\t                            fields: {\n\t                                id: { from: "id" },\n\t                                name: { from: "name", type: "string", editable: false},\n\t                                value: { from: "value", type: "number", validation: this.options.unitsValidation },\n\t                                format: { from: "format", type: "string" }\n\t                            }\n\t                        }\n\t                    }\n\t                },\n\t                save: function(e) {\n\t                    var value = !!e.values.value;\n\t                    e.container.parent().find("input[type=\'checkbox\']").prop("checked", value);\n\t                }\n\t            });\n\t        },\n\n\t        _save: function(e) {\n\t            e.preventDefault();\n\n\t            this._updateModel();\n\n\t            if (!this.wrapper.is(DOT + ganttStyles.popup.resourcesField)) {\n\t                this.trigger("save", { container: this.wrapper, model: this.model });\n\t            }\n\n\t            this.close();\n\t        },\n\n\t        _updateModel: function() {\n\t            var resources = [];\n\t            var value;\n\t            var data = this.grid.dataSource.data();\n\n\t            for (var i = 0, length = data.length; i < length; i++) {\n\t                value = data[i].get("value");\n\t                if (value !== null && value > 0) {\n\t                    resources.push(data[i]);\n\t                }\n\t            }\n\n\t            this.model[this.resourcesField] = resources;\n\t        }\n\t    });\n\n\t    kendo.gantt = {\n\t        TaskDropDown: TaskDropDown,\n\t        Editor: Editor,\n\t        PopupEditor: PopupEditor,\n\t        ResourceEditor: ResourceEditor\n\t    };\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ }),\n\n/***/ 1261:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.grid */ "./node_modules/@progress/kendo-ui/js/kendo.grid.js");\n\n/***/ }),\n\n/***/ 1262:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.datetimepicker */ "./node_modules/@progress/kendo-ui/js/kendo.datetimepicker.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.gantt.editors.js?')}}]);