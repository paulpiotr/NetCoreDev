(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{"./node_modules/@progress/kendo-ui/js/kendo.toolbar.js":
/*!*************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.toolbar.js ***!
  \*************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1389);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1017:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1054:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.popup */ "./node_modules/@progress/kendo-ui/js/kendo.popup.js");\n\n/***/ }),\n\n/***/ 1056:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.userevents */ "./node_modules/@progress/kendo-ui/js/kendo.userevents.js");\n\n/***/ }),\n\n/***/ 1389:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018), __webpack_require__(1056), __webpack_require__(1054) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "toolbar",\n\t    name: "ToolBar",\n\t    category: "web",\n\t    description: "The ToolBar widget displays one or more command buttons divided into groups.",\n\t    depends: [ "core" ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        Class = kendo.Class,\n\t        Widget = kendo.ui.Widget,\n\t        proxy = $.proxy,\n\t        isFunction = kendo.isFunction,\n\t        keys = kendo.keys,\n\t        outerWidth = kendo._outerWidth,\n\t        ns = ".kendoToolBar",\n\t        TOOLBAR = "k-toolbar",\n\t        BUTTON = "k-button",\n\t        OVERFLOW_BUTTON = "k-overflow-button",\n\t        TOGGLE_BUTTON = "k-toggle-button",\n\t        BUTTON_GROUP = "k-button-group",\n\t        SPLIT_BUTTON = "k-split-button",\n\t        SEPARATOR = "k-separator",\n\t        SPACER_CLASS = "k-spacer",\n\t        SPACER = "spacer",\n\t        POPUP = "k-popup",\n\n\t        RESIZABLE_TOOLBAR = "k-toolbar-resizable",\n\t        STATE_ACTIVE = "k-state-active",\n\t        STATE_DISABLED = "k-state-disabled",\n\t        STATE_HIDDEN = "k-state-hidden",\n\t        HIDDEN = "k-hidden",\n\t        GROUP_START = "k-group-start",\n\t        GROUP_END = "k-group-end",\n\t        PRIMARY = "k-primary",\n\n\t        ARIA_DISABLED = "aria-disabled",\n\t        ARIA_PRESSED = "aria-pressed",\n\n\t        ICON = "k-icon",\n\t        ICON_PREFIX = "k-i-",\n\t        BUTTON_ICON = "k-button-icon",\n\t        BUTTON_ICON_TEXT = "k-button-icontext",\n\n\t        LIST_CONTAINER = "k-list-container k-split-container",\n\t        SPLIT_BUTTON_ARROW = "k-split-button-arrow",\n\n\t        OVERFLOW_ANCHOR = "k-overflow-anchor",\n\t        OVERFLOW_CONTAINER = "k-overflow-container",\n\t        FIRST_TOOLBAR_VISIBLE = "k-toolbar-first-visible",\n\t        LAST_TOOLBAR_VISIBLE = "k-toolbar-last-visible",\n\n\t        CLICK = "click",\n\t        TOGGLE = "toggle",\n\t        OPEN = "open",\n\t        CLOSE = "close",\n\t        OVERFLOW_OPEN = "overflowOpen",\n\t        OVERFLOW_CLOSE = "overflowClose",\n\n\t        OVERFLOW_NEVER = "never",\n\t        OVERFLOW_AUTO = "auto",\n\t        OVERFLOW_ALWAYS = "always",\n\t        OVERFLOW_HIDDEN = "k-overflow-hidden",\n\n\t        OPTION_LIST_SUFFIX = "_optionlist",\n\n\t        KENDO_UID_ATTR = kendo.attr("uid");\n\n\t        kendo.toolbar = {};\n\n\t        var components = {\n\t            overflowAnchor: \'<div tabindex="0" class="k-overflow-anchor k-button"></div>\',\n\t            overflowContainer: \'<ul class="k-overflow-container k-list-container"></ul>\'\n\t        };\n\n\t        kendo.toolbar.registerComponent = function(name, toolbar, overflow) {\n\t            components[name] = {\n\t                toolbar: toolbar,\n\t                overflow: overflow\n\t            };\n\t        };\n\n\t        var Item = kendo.Class.extend({\n\t            addOverflowAttr: function() {\n\t                this.element.attr(kendo.attr("overflow"), this.options.overflow || OVERFLOW_AUTO);\n\t            },\n\n\t            addUidAttr: function() {\n\t                this.element.attr(KENDO_UID_ATTR, this.options.uid);\n\t            },\n\n\t            addIdAttr: function() {\n\t                if (this.options.id) {\n\t                    this.element.attr("id", this.options.id);\n\t                }\n\t            },\n\n\t            addOverflowIdAttr: function() {\n\t                if (this.options.id) {\n\t                    this.element.attr("id", this.options.id + "_overflow");\n\t                }\n\t            },\n\n\t            attributes: function() {\n\t                if (this.options.attributes) {\n\t                    this.element.attr(this.options.attributes);\n\t                }\n\t            },\n\n\t            show: function() {\n\t                this.element.removeClass(STATE_HIDDEN);\n\t                this.element.removeClass(HIDDEN);\n\t                this.options.hidden = false;\n\t            },\n\n\t            hide: function() {\n\t                this.element.addClass(STATE_HIDDEN);\n\t                this.element.addClass(HIDDEN);\n\n\t                if (this.overflow && this.overflowHidden){\n\t                    this.overflowHidden();\n\t                }\n\t                this.options.hidden = true;\n\t            },\n\n\t            remove: function() {\n\t                this.element.remove();\n\t            },\n\n\t            enable: function(isEnabled) {\n\t                if (isEnabled === undefined) {\n\t                    isEnabled = true;\n\t                }\n\t                this.element.toggleClass(STATE_DISABLED, !isEnabled);\n\t                this.element.attr(ARIA_DISABLED, !isEnabled);\n\n\t                this.options.enable = isEnabled;\n\t            },\n\n\t            twin: function() {\n\t                var uid = this.element.attr(KENDO_UID_ATTR);\n\t                if (this.overflow && this.options.splitContainerId) {\n\t                    return $("#" + this.options.splitContainerId)\n\t                            .find("[" + KENDO_UID_ATTR + "=\'" + uid + "\']")\n\t                            .data(this.options.type);\n\t                } else if (this.overflow) {\n\t                    return this.toolbar\n\t                            .element\n\t                            .find("[" + KENDO_UID_ATTR + "=\'" + uid + "\']")\n\t                            .data(this.options.type);\n\t                } else if (this.toolbar.options.resizable) {\n\t                    return this.toolbar\n\t                            .popup.element\n\t                            .find("[" + KENDO_UID_ATTR + "=\'" + uid + "\']")\n\t                            .data(this.options.type);\n\t                }\n\t            }\n\t        });\n\n\t        kendo.toolbar.Item = Item;\n\n\t        var Button = Item.extend({\n\t            init: function(options, toolbar) {\n\t                var element = options.useButtonTag ? $(\'<button tabindex="0"></button>\') : $(\'<a role="button" href tabindex="0"></a>\');\n\n\t                this.element = element;\n\t                this.options = options;\n\t                this.toolbar = toolbar;\n\n\t                this.attributes();\n\n\t                if (options.primary) {\n\t                    element.addClass(PRIMARY);\n\t                }\n\n\t                if (options.togglable) {\n\t                    element.addClass(TOGGLE_BUTTON);\n\t                    this.toggle(options.selected);\n\t                }\n\n\t                if (options.url !== undefined && !options.useButtonTag) {\n\t                    element.attr("href", options.url);\n\t                    if (options.mobile) {\n\t                        element.attr(kendo.attr("role"), "button");\n\t                    }\n\t                }\n\n\t                if (options.group) {\n\t                    element.attr(kendo.attr("group"), options.group);\n\t                    this.group = this.toolbar.addToGroup(this, options.group);\n\t                }\n\n\t                if (!options.togglable && options.click && isFunction(options.click)) {\n\t                    this.clickHandler = options.click;\n\t                }\n\n\t                if (options.togglable && options.toggle && isFunction(options.toggle)) {\n\t                    this.toggleHandler = options.toggle;\n\t                }\n\t            },\n\n\t            toggle: function(state, propagate) {\n\t                state = !!state;\n\n\t                if (this.group && state) {\n\t                    this.group.select(this);\n\t                } else if (!this.group) {\n\t                    this.select(state);\n\t                }\n\n\t                if (propagate && this.twin()) {\n\t                    this.twin().toggle(state);\n\t                }\n\t            },\n\n\t            getParentGroup: function() {\n\t                if (this.options.isChild) {\n\t                    return this.element.closest("." + BUTTON_GROUP).data("buttonGroup");\n\t                }\n\t            },\n\n\t            _addGraphics: function() {\n\t                var element = this.element,\n\t                    icon = this.options.icon,\n\t                    spriteCssClass = this.options.spriteCssClass,\n\t                    imageUrl = this.options.imageUrl,\n\t                    isEmpty, span, img;\n\n\t                if (spriteCssClass || imageUrl || icon) {\n\t                    isEmpty = true;\n\n\t                    element.contents().filter(function() {\n\t                        return (!$(this).hasClass("k-sprite") && !$(this).hasClass(ICON) && !$(this).hasClass("k-image"));\n\t                    }).each(function(idx, el){\n\t                        if (el.nodeType == 1 || el.nodeType == 3 && kendo.trim(el.nodeValue).length > 0) {\n\t                            isEmpty = false;\n\t                        }\n\t                    });\n\n\t                    if (isEmpty) {\n\t                        element.addClass(BUTTON_ICON);\n\t                    } else {\n\t                        element.addClass(BUTTON_ICON_TEXT);\n\t                    }\n\t                }\n\t                if (icon) {\n\t                    span = element.children("span." + ICON).first();\n\t                    if (!span[0]) {\n\t                        span = $(\'<span class="\' + ICON + \'"></span>\').prependTo(element);\n\t                    }\n\t                    span.addClass(ICON_PREFIX + icon);\n\t                } else if (spriteCssClass) {\n\t                    span = element.children("span.k-sprite").first();\n\t                    if (!span[0]) {\n\t                        span = $(\'<span class="k-sprite \' + ICON + \'"></span>\').prependTo(element);\n\t                    }\n\t                    span.addClass(spriteCssClass);\n\t                } else if (imageUrl) {\n\t                    img = element.children("img.k-image").first();\n\t                    if (!img[0]) {\n\t                        img = $(\'<img alt="icon" class="k-image" />\').prependTo(element);\n\t                    }\n\t                    img.attr("src", imageUrl);\n\t                }\n\t            }\n\t        });\n\n\t        kendo.toolbar.Button = Button;\n\n\t        var ToolBarButton = Button.extend({\n\t            init: function(options, toolbar) {\n\t                Button.fn.init.call(this, options, toolbar);\n\n\t                var element = this.element;\n\n\t                element.addClass(BUTTON);\n\n\t                this.addIdAttr();\n\n\t                if (options.align) {\n\t                    element.addClass("k-align-" + options.align);\n\t                }\n\n\t                if (options.showText != "overflow" && options.text) {\n\t                    if (options.mobile) {\n\t                        element.html(\'<span class="km-text">\' + options.text + "</span>");\n\t                    } else {\n\t                        element.html(options.text);\n\t                    }\n\t                }\n\n\t                options.hasIcon = (options.showIcon != "overflow") && (options.icon || options.spriteCssClass || options.imageUrl);\n\t                if (options.hasIcon) {\n\t                    this._addGraphics();\n\t                }\n\n\t                this.addUidAttr();\n\t                this.addOverflowAttr();\n\t                this.enable(options.enable);\n\n\t                if (options.hidden) {\n\t                    this.hide();\n\t                }\n\n\t                this.element.data({\n\t                    type: "button",\n\t                    button: this\n\t                });\n\t            },\n\n\t            select: function(selected) {\n\t                if (selected === undefined) {\n\t                    selected = false;\n\t                }\n\n\t                if (this.options.togglable) {\n\t                    this.element.attr(ARIA_PRESSED, selected);\n\t                }\n\n\t                this.element.toggleClass(STATE_ACTIVE, selected);\n\t                this.options.selected = selected;\n\t            }\n\t        });\n\n\t        kendo.toolbar.ToolBarButton = ToolBarButton;\n\n\t        var OverflowButton = Button.extend({\n\t            init: function(options, toolbar) {\n\t                this.overflow = true;\n\n\t                Button.fn.init.call(this, $.extend({}, options), toolbar);\n\n\t                var element = this.element;\n\n\t                if (options.showText != "toolbar" && options.text) {\n\t                    if (options.mobile) {\n\t                        element.html(\'<span class="km-text">\' + options.text + "</span>");\n\t                    } else {\n\t                        element.html(\'<span class="k-text">\' + options.text + "</span>");\n\t                    }\n\t                }\n\n\t                options.hasIcon = (options.showIcon != "toolbar") && (options.icon || options.spriteCssClass || options.imageUrl);\n\t                if (options.hasIcon) {\n\t                    this._addGraphics();\n\t                }\n\n\t                if (!options.isChild) {\n\t                    this._wrap();\n\t                }\n\n\t                this.addOverflowIdAttr();\n\t                this.attributes();\n\t                this.addUidAttr();\n\t                this.addOverflowAttr();\n\t                this.enable(options.enable);\n\n\t                element.addClass(OVERFLOW_BUTTON + " " + BUTTON);\n\n\t                if (options.hidden) {\n\t                    this.hide();\n\t                }\n\n\t                if (options.togglable){\n\t                    this.toggle(options.selected);\n\t                }\n\n\t                this.element.data({\n\t                    type: "button",\n\t                    button: this\n\t                });\n\t            },\n\n\t            _wrap: function() {\n\t                this.element = this.element.wrap("<li></li>").parent();\n\t            },\n\n\t            overflowHidden: function() {\n\t                this.element.addClass(OVERFLOW_HIDDEN);\n\t            },\n\n\t            select: function(selected) {\n\t                if (selected === undefined) {\n\t                    selected = false;\n\t                }\n\n\t                if (this.options.isChild) {\n\t                    this.element.toggleClass(STATE_ACTIVE, selected);\n\t                } else {\n\t                    this.element.find(".k-button").toggleClass(STATE_ACTIVE, selected);\n\t                }\n\t                this.options.selected = selected;\n\t            }\n\t        });\n\n\t        kendo.toolbar.OverflowButton = OverflowButton;\n\t        kendo.toolbar.registerComponent("button", ToolBarButton, OverflowButton);\n\n\t        var ButtonGroup = Item.extend({\n\t            createButtons: function(buttonConstructor) {\n\t                var options = this.options;\n\t                var items = options.buttons || [];\n\t                var item;\n\n\t                for (var i = 0; i < items.length; i++) {\n\t                    if (!items[i].uid) {\n\t                        items[i].uid = kendo.guid();\n\t                    }\n\t                    item = new buttonConstructor($.extend({ mobile: options.mobile, isChild: true, type: "button" }, items[i]), this.toolbar);\n\t                    item.element.appendTo(this.element);\n\t                }\n\t            },\n\n\t            refresh: function() {\n\t                this.element.children().filter(":not(\'." + STATE_HIDDEN + "\'):first").addClass(GROUP_START);\n\t                this.element.children().filter(":not(\'." + STATE_HIDDEN + "\'):last").addClass(GROUP_END);\n\t            }\n\t        });\n\n\t        kendo.toolbar.ButtonGroup = ButtonGroup;\n\n\t        var ToolBarButtonGroup = ButtonGroup.extend({\n\t            init: function(options, toolbar) {\n\t                var element = this.element = $(\'<div></div>\');\n\t                this.options = options;\n\t                this.toolbar = toolbar;\n\n\t                this.addIdAttr();\n\n\t                if (options.align) {\n\t                    element.addClass("k-align-" + options.align);\n\t                }\n\n\t                this.createButtons(ToolBarButton);\n\t                this.attributes();\n\t                this.addUidAttr();\n\t                this.addOverflowAttr();\n\t                this.refresh();\n\n\t                element.addClass(BUTTON_GROUP);\n\n\t                this.element.data({\n\t                    type: "buttonGroup",\n\t                    buttonGroup: this\n\t                });\n\t            }\n\t        });\n\n\t        kendo.toolbar.ToolBarButtonGroup = ToolBarButtonGroup;\n\n\t        var OverflowButtonGroup = ButtonGroup.extend({\n\t            init: function(options, toolbar) {\n\t                var element = this.element = $(\'<li></li>\');\n\t                this.options = options;\n\t                this.toolbar = toolbar;\n\t                this.overflow = true;\n\n\t                this.addOverflowIdAttr();\n\n\t                this.createButtons(OverflowButton);\n\t                this.attributes();\n\t                this.addUidAttr();\n\t                this.addOverflowAttr();\n\t                this.refresh();\n\n\t                element.addClass((options.mobile ? "" : BUTTON_GROUP) + " k-overflow-group");\n\n\t                this.element.data({\n\t                    type: "buttonGroup",\n\t                    buttonGroup: this\n\t                });\n\t            },\n\n\t            overflowHidden: function() {\n\t                this.element.addClass(OVERFLOW_HIDDEN);\n\t            }\n\t        });\n\n\t        kendo.toolbar.OverflowButtonGroup = OverflowButtonGroup;\n\t        kendo.toolbar.registerComponent("buttonGroup", ToolBarButtonGroup, OverflowButtonGroup);\n\n\t        var ToolBarSplitButton = Item.extend({\n\t            init: function(options, toolbar) {\n\t                var element = this.element = $(\'<div class="\' + SPLIT_BUTTON + \'" tabindex="0"></div>\');\n\n\t                this.options = options;\n\t                this.toolbar = toolbar;\n\n\t                this.mainButton = new ToolBarButton($.extend({}, options, { hidden: false }), toolbar);\n\t                this.arrowButton = $(\'<a class="\' + BUTTON + " " + SPLIT_BUTTON_ARROW + \'"><span class="\' + (options.mobile ? "km-icon km-arrowdown" : "k-icon k-i-arrow-60-down") + \'"></span></a>\');\n\t                this.popupElement = $(\'<ul class="\' + LIST_CONTAINER + \'"></ul>\');\n\n\t                this.mainButton.element\n\t                    .removeAttr("href tabindex")\n\t                    .appendTo(element);\n\n\t                this.arrowButton.appendTo(element);\n\t                this.popupElement.appendTo(element);\n\n\t                if (options.align) {\n\t                    element.addClass("k-align-" + options.align);\n\t                }\n\n\t                if (!options.id) {\n\t                    options.id = options.uid;\n\t                }\n\n\t                element.attr("id", options.id + "_wrapper");\n\n\t                this.addOverflowAttr();\n\t                this.addUidAttr();\n\n\t                this.createMenuButtons();\n\t                this.createPopup();\n\t                this._navigatable();\n\n\t                this.mainButton.main = true;\n\n\t                this.enable(options.enable);\n\n\t                if (options.hidden) {\n\t                    this.hide();\n\t                }\n\n\t                element.data({\n\t                    type: "splitButton",\n\t                    splitButton: this,\n\t                    kendoPopup: this.popup\n\t                });\n\t            },\n\n\t            _navigatable: function() {\n\t                var that = this;\n\n\t                that.popupElement.on("keydown" + ns, "." + BUTTON, function(e) {\n\t                    var li = $(e.target).parent();\n\n\t                    e.preventDefault();\n\n\t                    if (e.keyCode === keys.ESC || e.keyCode === keys.TAB || (e.altKey && e.keyCode === keys.UP)) {\n\t                        that.toggle();\n\t                        that.focus();\n\t                    } else if (e.keyCode === keys.DOWN) {\n\t                        findFocusableSibling(li, "next").focus();\n\t                    } else if (e.keyCode === keys.UP) {\n\t                        findFocusableSibling(li, "prev").focus();\n\t                    } else if (e.keyCode === keys.SPACEBAR || e.keyCode === keys.ENTER) {\n\t                        that.toolbar.userEvents.trigger("tap", { target: $(e.target) });\n\t                    } else if (e.keyCode === keys.HOME) {\n\t                        li.parent().find(":kendoFocusable").first().focus();\n\t                    } else if (e.keyCode === keys.END) {\n\t                        li.parent().find(":kendoFocusable").last().focus();\n\t                    }\n\t                });\n\t            },\n\n\t            createMenuButtons: function() {\n\t                var options = this.options;\n\t                var items = options.menuButtons;\n\t                var item;\n\n\t                for (var i = 0; i < items.length; i++) {\n\t                    item = new ToolBarButton($.extend({ mobile: options.mobile, type: "button", click: options.click }, items[i]), this.toolbar);\n\t                    item.element.wrap("<li></li>").parent().appendTo(this.popupElement);\n\t                }\n\t            },\n\n\t            createPopup: function() {\n\t                var that = this;\n\t                var options = this.options;\n\t                var element = this.element;\n\n\t                this.popupElement\n\t                        .attr("id", options.id + OPTION_LIST_SUFFIX)\n\t                        .attr(KENDO_UID_ATTR, options.rootUid);\n\n\t                if (options.mobile) {\n\t                    this.popupElement = actionSheetWrap(this.popupElement);\n\t                }\n\n\t                this.popup = this.popupElement.kendoPopup({\n\t                    appendTo: options.mobile ? $(options.mobile).children(".km-pane") : null,\n\t                    anchor: element,\n\t                    isRtl: this.toolbar._isRtl,\n\t                    copyAnchorStyles: false,\n\t                    animation: options.animation,\n\t                    open: function(e){\n\t                        var isDefaultPrevented = that.toolbar.trigger(OPEN, { target: element });\n\n\t                        if(isDefaultPrevented){\n\t                            e.preventDefault();\n\t                            return;\n\t                        }\n\n\t                        that.adjustPopupWidth(e.sender);\n\t                    },\n\t                    activate: function() {\n\t                        this.element.find(":kendoFocusable").first().focus();\n\t                    },\n\t                    close: function(e) {\n\t                        var isDefaultPrevented = that.toolbar.trigger(CLOSE, { target: element });\n\t                        if(isDefaultPrevented){\n\t                            e.preventDefault();\n\t                        }\n\t                        element.focus();\n\t                    }\n\t                }).data("kendoPopup");\n\n\t                this.popup.element.on(CLICK + ns, "a.k-button", preventClick);\n\t            },\n\n\t            adjustPopupWidth: function (popup) {\n\t                var anchor = popup.options.anchor,\n\t                    computedWidth = outerWidth(anchor),\n\t                    width;\n\n\t                kendo.wrap(popup.element).addClass("k-split-wrapper");\n\n\t                if (popup.element.css("box-sizing") !== "border-box") {\n\t                    width = computedWidth - (outerWidth(popup.element) - popup.element.width());\n\t                } else {\n\t                    width = computedWidth;\n\t                }\n\n\t                popup.element.css({\n\t                    fontFamily: anchor.css("font-family"),\n\t                    "min-width": width\n\t                });\n\t            },\n\n\t            remove: function() {\n\t                this.popup.element.off(CLICK + ns, "a.k-button");\n\t                this.popup.destroy();\n\t                this.element.remove();\n\t            },\n\n\t            toggle: function() {\n\t                if(this.options.enable || this.popup.visible()){\n\t                    this.popup.toggle();\n\t                }\n\t            },\n\n\t            enable: function(isEnabled) {\n\t                if (isEnabled === undefined) {\n\t                    isEnabled = true;\n\t                }\n\n\t                this.mainButton.enable(isEnabled);\n\t                this.element.toggleClass(STATE_DISABLED, !isEnabled);\n\t                this.element.attr(ARIA_DISABLED, !isEnabled);\n\t                this.options.enable = isEnabled;\n\t            },\n\n\t            focus: function() {\n\t                this.element.focus();\n\t            },\n\n\t            hide: function() {\n\t                if (this.popup) {\n\t                    this.popup.close();\n\t                }\n\n\t                this.element.addClass(STATE_HIDDEN);\n\t                this.element.addClass(HIDDEN);\n\t                this.options.hidden = true;\n\t            },\n\n\t            show: function() {\n\t                this.element.removeClass(STATE_HIDDEN);\n\t                this.element.removeClass(HIDDEN);\n\t                this.options.hidden = false;\n\t            }\n\t        });\n\n\t        kendo.toolbar.ToolBarSplitButton = ToolBarSplitButton;\n\n\t        var OverflowSplitButton = Item.extend({\n\t            init: function(options, toolbar) {\n\t                var element = this.element = $(\'<li class="\' + SPLIT_BUTTON + \'"></li>\'),\n\t                    items = options.menuButtons,\n\t                    item, splitContainerId;\n\n\t                this.options = options;\n\t                this.toolbar = toolbar;\n\t                this.overflow = true;\n\t                splitContainerId = (options.id || options.uid) + OPTION_LIST_SUFFIX;\n\n\t                this.mainButton = new OverflowButton($.extend({ isChild: true }, options));\n\t                this.mainButton.element.appendTo(element);\n\n\t                for (var i = 0; i < items.length; i++) {\n\t                    item = new OverflowButton($.extend({ mobile: options.mobile, type: "button", splitContainerId: splitContainerId, isChild: true }, items[i]), this.toolbar);\n\t                    item.element.appendTo(element);\n\t                }\n\n\t                this.addUidAttr();\n\t                this.addOverflowAttr();\n\n\t                this.mainButton.main = true;\n\n\t                element.data({\n\t                    type: "splitButton",\n\t                    splitButton: this\n\t                });\n\t            },\n\n\t            overflowHidden: function() {\n\t                this.element.addClass(OVERFLOW_HIDDEN);\n\t            }\n\t        });\n\n\t        kendo.toolbar.OverflowSplitButton = OverflowSplitButton;\n\t        kendo.toolbar.registerComponent("splitButton", ToolBarSplitButton, OverflowSplitButton);\n\n\t        var ToolBarSeparator = Item.extend({\n\t            init: function(options, toolbar) {\n\t                var element = this.element = $(\'<div>&nbsp;</div>\');\n\n\t                this.element = element;\n\t                this.options = options;\n\t                this.toolbar = toolbar;\n\n\t                this.attributes();\n\t                this.addIdAttr();\n\t                this.addUidAttr();\n\t                this.addOverflowAttr();\n\n\t                element.addClass(SEPARATOR);\n\n\t                element.data({\n\t                    type: "separator",\n\t                    separator: this\n\t                });\n\t            }\n\t        });\n\n\t        var OverflowSeparator = Item.extend({\n\t            init: function(options, toolbar) {\n\t                var element = this.element = $(\'<li>&nbsp;</li>\');\n\n\t                this.element = element;\n\t                this.options = options;\n\t                this.toolbar = toolbar;\n\t                this.overflow = true;\n\n\t                this.attributes();\n\t                this.addUidAttr();\n\t                this.addOverflowIdAttr();\n\n\t                element.addClass(SEPARATOR);\n\n\t                element.data({\n\t                    type: "separator",\n\t                    separator: this\n\t                });\n\t            },\n\n\t            overflowHidden: function() {\n\t                this.element.addClass(OVERFLOW_HIDDEN);\n\t            }\n\t        });\n\n\t        kendo.toolbar.registerComponent("separator", ToolBarSeparator, OverflowSeparator);\n\n\t        var ToolBarSpacer = Item.extend({\n\t            init: function(options, toolbar) {\n\t                var element = this.element = $(\'<div>&nbsp;</div>\');\n\n\t                this.element = element;\n\t                this.options = options;\n\t                this.toolbar = toolbar;\n\n\t                element.addClass(SPACER_CLASS);\n\n\t                element.data({\n\t                    type: SPACER\n\t                });\n\t            }\n\t        });\n\n\t        kendo.toolbar.registerComponent(SPACER, ToolBarSpacer);\n\n\t        var TemplateItem = Item.extend({\n\t            init: function(template, options, toolbar) {\n\t                var element = isFunction(template) ? template(options) : template;\n\n\t                if (!(element instanceof jQuery)) {\n\t                    element = $("<div></div>").html(element);\n\t                } else {\n\t                    element = element.wrap("<div></div>").parent();\n\t                }\n\n\t                this.element = element;\n\t                this.options = options;\n\t                this.options.type = "template";\n\t                this.toolbar = toolbar;\n\n\t                this.attributes();\n\t                this.addUidAttr();\n\t                this.addIdAttr();\n\t                this.addOverflowAttr();\n\n\t                element.data({\n\t                    type: "template",\n\t                    template: this\n\t                });\n\t            }\n\t        });\n\n\t        kendo.toolbar.TemplateItem = TemplateItem;\n\n\t        var OverflowTemplateItem = Item.extend({\n\t            init: function(template, options, toolbar) {\n\t                var element = isFunction(template) ? $(template(options)) : $(template);\n\n\t                if (!(element instanceof jQuery)) {\n\t                    element = $("<li></li>").html(element);\n\t                } else {\n\t                    element = element.wrap("<li></li>").parent();\n\t                }\n\n\t                this.element = element;\n\t                this.options = options;\n\t                this.options.type = "template";\n\t                this.toolbar = toolbar;\n\t                this.overflow = true;\n\n\t                this.attributes();\n\t                this.addUidAttr();\n\t                this.addOverflowIdAttr();\n\t                this.addOverflowAttr();\n\n\t                element.data({\n\t                    type: "template",\n\t                    template: this\n\t                });\n\t            },\n\n\t            overflowHidden: function() {\n\t                this.element.addClass(OVERFLOW_HIDDEN);\n\t            }\n\t        });\n\n\t        kendo.toolbar.OverflowTemplateItem = OverflowTemplateItem;\n\n\t        function toggleActive(e) {\n\t            if (!e.target.is(".k-toggle-button")) {\n\t                e.target.toggleClass(STATE_ACTIVE, e.type == "press");\n\t            }\n\t        }\n\n\t        function actionSheetWrap(element) {\n\t            element = $(element);\n\n\t            return element.hasClass("km-actionsheet") ? element.closest(".km-popup-wrapper") : element.addClass("km-widget km-actionsheet")\n\t                             .wrap(\'<div class="km-actionsheet-wrapper km-actionsheet-tablet km-widget km-popup"></div>\').parent()\n\t                             .wrap(\'<div class="km-popup-wrapper k-popup"></div>\').parent();\n\t        }\n\n\t        function preventClick(e) {\n\t            if ($(e.target).closest("a.k-button").length) {\n\t                e.preventDefault();\n\t            }\n\t        }\n\n\t        function findFocusableSibling (element, dir) {\n\t            var getSibling = dir === "next" ? $.fn.next : $.fn.prev;\n\t            var getter = dir === "next" ? $.fn.first : $.fn.last;\n\t            var candidate = getSibling.call(element);\n\n\t            if(!candidate.length && element.is("." + OVERFLOW_ANCHOR)){\n\t                return element;\n\t            }\n\n\t            if (candidate.is(":kendoFocusable") || !candidate.length) {\n\t                return candidate;\n\t            }\n\n\t            if (candidate.find(":kendoFocusable").length) {\n\t                return getter.call(candidate.find(":kendoFocusable"));\n\t            }\n\n\t            return findFocusableSibling(candidate, dir);\n\t        }\n\n\t        var Group = Class.extend({\n\t            init: function(name) {\n\t                this.name = name;\n\t                this.buttons = [];\n\t            },\n\n\t            add: function(button) {\n\t                this.buttons[this.buttons.length] = button;\n\t            },\n\n\t            remove: function(button) {\n\t                var index = $.inArray(button, this.buttons);\n\t                this.buttons.splice(index, 1);\n\t            },\n\n\t            select: function(button) {\n\t                var tmp;\n\t                for (var i = 0; i < this.buttons.length; i ++) {\n\t                    tmp = this.buttons[i];\n\n\t                    tmp.select(false);\n\t                }\n\n\t                button.select(true);\n\t                if (button.twin()) {\n\t                    button.twin().select(true);\n\t                }\n\t            }\n\t        });\n\n\t        var ToolBar = Widget.extend({\n\t            init: function(element, options) {\n\t                var that = this;\n\t                Widget.fn.init.call(that, element, options);\n\n\t                options = that.options;\n\t                element = that.wrapper = that.element;\n\n\t                element.addClass(TOOLBAR + " k-widget");\n\n\t                this.uid = kendo.guid();\n\t                this._isRtl = kendo.support.isRtl(element);\n\t                this._groups = {};\n\t                element.attr(KENDO_UID_ATTR, this.uid);\n\n\t                that.isMobile = (typeof options.mobile === "boolean") ? options.mobile : that.element.closest(".km-root")[0];\n\t                that.animation = that.isMobile ? { open: { effects: "fade" } } : {};\n\n\t                if (that.isMobile) {\n\t                    element.addClass("km-widget");\n\t                    ICON = "km-icon";\n\t                    ICON_PREFIX = "km-";\n\t                    BUTTON = "km-button";\n\t                    BUTTON_GROUP = "km-buttongroup";\n\t                    STATE_ACTIVE = "km-state-active";\n\t                    STATE_DISABLED = "km-state-disabled";\n\t                }\n\n\t                if(options.resizable) {\n\t                    that._renderOverflow();\n\t                    element.addClass(RESIZABLE_TOOLBAR);\n\n\t                    that.overflowUserEvents = new kendo.UserEvents(that.element, {\n\t                        threshold: 5,\n\t                        allowSelection: true,\n\t                        filter: "." + OVERFLOW_ANCHOR,\n\t                        tap: proxy(that._toggleOverflow, that)\n\t                    });\n\n\t                    that._resizeHandler = kendo.onResize(function() {\n\t                        that.resize();\n\t                    });\n\t                } else {\n\t                    that.popup = { element: $([]) };\n\t                }\n\n\t                if(options.items && options.items.length) {\n\t                    for (var i = 0; i < options.items.length; i++) {\n\t                        that.add(options.items[i]);\n\t                    }\n\n\t                    if(options.resizable) {\n\t                        that._shrink(that.element.innerWidth());\n\t                    }\n\t                }\n\n\t                that.userEvents = new kendo.UserEvents(document, {\n\t                    threshold: 5,\n\t                    allowSelection: true,\n\t                    filter:\n\t                        "[" + KENDO_UID_ATTR + "=" + this.uid + "] a." + BUTTON + ", " +\n\t                        "[" + KENDO_UID_ATTR + "=" + this.uid + "] ." + OVERFLOW_BUTTON,\n\t                    tap: proxy(that._buttonClick, that),\n\t                    press: toggleActive,\n\t                    release: toggleActive\n\t                });\n\n\t                that.element.on(CLICK + ns, "a.k-button", preventClick);\n\t                that._navigatable();\n\n\t                if (options.resizable) {\n\t                    that.popup.element.on(CLICK + ns, + "a.k-button", preventClick);\n\t                }\n\n\t                if (options.resizable) {\n\t                    this._toggleOverflowAnchor();\n\t                }\n\n\t                kendo.notify(that);\n\t            },\n\n\t            events: [\n\t                CLICK,\n\t                TOGGLE,\n\t                OPEN,\n\t                CLOSE,\n\t                OVERFLOW_OPEN,\n\t                OVERFLOW_CLOSE\n\t            ],\n\n\t            options: {\n\t                name: "ToolBar",\n\t                items: [],\n\t                resizable: true,\n\t                mobile: null\n\t            },\n\n\t            addToGroup: function(button, groupName) {\n\t                var group;\n\n\t                if (!this._groups[groupName]) {\n\t                    group = this._groups[groupName] = new Group();\n\t                } else {\n\t                    group = this._groups[groupName];\n\t                }\n\n\t                group.add(button);\n\t                return group;\n\t            },\n\n\t            destroy: function() {\n\t                var that = this;\n\n\t                that.element.find("." + SPLIT_BUTTON).each(function(idx, element) {\n\t                    $(element).data("kendoPopup").destroy();\n\t                });\n\n\t                that.element.off(ns, "a.k-button");\n\n\t                that.userEvents.destroy();\n\n\t                if (that.options.resizable) {\n\t                    kendo.unbindResize(that._resizeHandler);\n\t                    that.overflowUserEvents.destroy();\n\t                    that.popup.element.off(ns, "a.k-button");\n\t                    that.popup.destroy();\n\t                }\n\n\t                Widget.fn.destroy.call(that);\n\t            },\n\n\t            add: function(options) {\n\t                var component = components[options.type],\n\t                    template = options.template,\n\t                    tool, that = this,\n\t                    itemClasses = that.isMobile ? "" : "k-item k-state-default",\n\t                    overflowTemplate = options.overflowTemplate,\n\t                    overflowTool;\n\n\t                $.extend(options, {\n\t                    uid: kendo.guid(),\n\t                    animation: that.animation,\n\t                    mobile: that.isMobile,\n\t                    rootUid: that.uid\n\t                });\n\n\t                if (options.menuButtons) {\n\t                    for (var i = 0; i < options.menuButtons.length; i++) {\n\t                        $.extend(options.menuButtons[i], {\n\t                            uid: kendo.guid()\n\t                        });\n\t                    }\n\t                }\n\n\t                if ((template && !overflowTemplate) || options.type === SPACER) {\n\t                    options.overflow = OVERFLOW_NEVER;\n\t                } else if (!options.overflow) {\n\t                    options.overflow = OVERFLOW_AUTO;\n\t                }\n\n\t                //add the command in the overflow popup\n\t                if (options.overflow !== OVERFLOW_NEVER && that.options.resizable) {\n\t                    if (overflowTemplate) { //template command\n\t                         overflowTool = new OverflowTemplateItem(overflowTemplate, options, that);\n\t                    } else if (component) { //build-in command\n\t                        overflowTool = new component.overflow(options, that);\n\t                        overflowTool.element.addClass(itemClasses);\n\t                    }\n\n\t                    if (overflowTool) {\n\t                        if (options.overflow === OVERFLOW_AUTO) {\n\t                            overflowTool.overflowHidden();\n\t                        }\n\n\t                        overflowTool.element.appendTo(that.popup.container);\n\t                        that.angular("compile", function(){\n\t                            return { elements: overflowTool.element.get() };\n\t                        });\n\t                    }\n\t                }\n\n\t                //add the command in the toolbar container\n\t                if (options.overflow !== OVERFLOW_ALWAYS) {\n\t                    if (template) { //template command\n\t                        tool = new TemplateItem(template, options, that);\n\t                    } else if (component) { //build-in command\n\t                        tool = new component.toolbar(options, that);\n\t                    }\n\n\t                    if (tool) {\n\t                        tool.element.appendTo(that.element);\n\n\t                        that.angular("compile", function(){\n\t                            return { elements: tool.element.get() };\n\t                        });\n\t                    }\n\t                }\n\t            },\n\n\t            _getItem: function(candidate) {\n\t                var element,\n\t                    toolbarItem,\n\t                    overflowItem,\n\t                    isResizable = this.options.resizable,\n\t                    type;\n\n\t                //find toolbar item\n\n\t                element = this.element.find(candidate);\n\t                if (!element.length) {\n\t                    element = $(".k-split-container[data-uid=" + this.uid + "]").find(candidate);\n\t                }\n\n\t                type = element.length ? element.data("type") : "";\n\t                toolbarItem = element.data(type);\n\n\t                if (toolbarItem) {\n\t                    if (toolbarItem.main) {\n\t                        element = element.parent("." + SPLIT_BUTTON);\n\t                        type = "splitButton";\n\t                        toolbarItem = element.data(type);\n\t                    }\n\n\t                    if (isResizable) {\n\t                        overflowItem = toolbarItem.twin();\n\t                    }\n\t                } else if (isResizable) { //find overflow item\n\t                    element = this.popup.element.find(candidate);\n\t                    type = element.length ? element.data("type") : "";\n\t                    overflowItem = element.data(type);\n\n\t                    if (overflowItem && overflowItem.main) {\n\t                        element = element.parent("." + SPLIT_BUTTON);\n\t                        type = "splitButton";\n\t                        overflowItem = element.data(type);\n\t                    }\n\t                }\n\n\t                return {\n\t                    type: type,\n\t                    toolbar: toolbarItem,\n\t                    overflow: overflowItem\n\t                };\n\t            },\n\n\t            remove: function(candidate) {\n\t                var item = this._getItem(candidate);\n\n\t                if (item.toolbar) { item.toolbar.remove(); }\n\t                if (item.overflow) { item.overflow.remove(); }\n\n\t                this.resize(true);\n\t            },\n\n\t            hide: function(candidate) {\n\t                var item = this._getItem(candidate);\n\t                var buttonGroupInstance;\n\n\t                if (item.toolbar) {\n\t                    if (item.toolbar.options.type === "button" && item.toolbar.options.isChild) {\n\t                        buttonGroupInstance = item.toolbar.getParentGroup();\n\n\t                        item.toolbar.hide();\n\n\t                        if (buttonGroupInstance) {\n\t                            buttonGroupInstance.refresh();\n\t                        }\n\t                    } else if (!item.toolbar.options.hidden) {\n\t                        item.toolbar.hide();\n\t                    }\n\t                }\n\n\t                if (item.overflow) {\n\t                    if (item.overflow.options.type === "button" && item.overflow.options.isChild) {\n\t                        buttonGroupInstance = item.overflow.getParentGroup();\n\n\t                        item.overflow.hide();\n\n\t                        if(buttonGroupInstance) {\n\t                            buttonGroupInstance.refresh();\n\t                        }\n\t                    } else if(!item.overflow.options.hidden) {\n\t                        item.overflow.hide();\n\t                    }\n\t                }\n\n\t                this.resize(true);\n\t            },\n\n\t            show: function(candidate) {\n\t                var item = this._getItem(candidate);\n\t                var buttonGroupInstance;\n\n\t                if (item.toolbar) {\n\t                    if (item.toolbar.options.type === "button" && item.toolbar.options.isChild) {\n\t                        buttonGroupInstance = item.toolbar.getParentGroup();\n\t                        item.toolbar.show();\n\n\t                        if (buttonGroupInstance) {\n\t                            buttonGroupInstance.refresh();\n\t                        }\n\t                    } else if(item.toolbar.options.hidden) {\n\t                        item.toolbar.show();\n\t                    }\n\t                }\n\n\t                if (item.overflow) {\n\t                    if (item.overflow.options.type === "button" && item.overflow.options.isChild) {\n\t                        buttonGroupInstance = item.overflow.getParentGroup();\n\n\t                        item.toolbar.show();\n\n\t                        if (buttonGroupInstance) {\n\t                            buttonGroupInstance.refresh();\n\t                        }\n\t                    } else if(item.overflow.options.hidden) {\n\t                        item.overflow.show();\n\t                    }\n\t                }\n\n\t                this.resize(true);\n\t            },\n\n\t            enable: function(element, enable) {\n\t                var item = this._getItem(element);\n\n\t                if (typeof enable == "undefined") {\n\t                    enable = true;\n\t                }\n\n\t                if (item.toolbar) { item.toolbar.enable(enable); }\n\t                if (item.overflow) { item.overflow.enable(enable); }\n\t            },\n\n\t            getSelectedFromGroup: function(groupName) {\n\t                return this.element.find("." + TOGGLE_BUTTON + "[data-group=\'" + groupName + "\']").filter("." + STATE_ACTIVE);\n\t            },\n\n\t            toggle: function(button, checked) {\n\t                var element = $(button),\n\t                    item = element.data("button");\n\n\t                if (item.options.togglable) {\n\t                    if (checked === undefined) {\n\t                        checked = true;\n\t                    }\n\t                    item.toggle(checked, true);\n\t                }\n\t            },\n\n\t            _renderOverflow: function() {\n\t                var that = this,\n\t                    overflowContainer = components.overflowContainer,\n\t                    isRtl = that._isRtl,\n\t                    horizontalDirection = isRtl ? "left" : "right";\n\n\t                that.overflowAnchor = $(components.overflowAnchor).addClass(BUTTON);\n\n\t                that.element.append(that.overflowAnchor);\n\n\t                if (that.isMobile) {\n\t                    that.overflowAnchor.append(\'<span class="km-icon km-more"></span>\');\n\t                    overflowContainer = actionSheetWrap(overflowContainer);\n\t                } else {\n\t                    that.overflowAnchor.append(\'<span class="k-icon k-i-more-vertical"></span>\');\n\t                }\n\n\t                that.popup = new kendo.ui.Popup(overflowContainer, {\n\t                    origin: "bottom " + horizontalDirection,\n\t                    position: "top " + horizontalDirection,\n\t                    anchor: that.overflowAnchor,\n\t                    isRtl: isRtl,\n\t                    animation: that.animation,\n\t                    appendTo: that.isMobile ? $(that.isMobile).children(".km-pane") : null,\n\t                    copyAnchorStyles: false,\n\t                    open: function (e) {\n\t                        var wrapper = kendo.wrap(that.popup.element)\n\t                            .addClass("k-overflow-wrapper");\n\n\t                        if (!that.isMobile) {\n\t                            wrapper.css("margin-left", (isRtl ? -1 : 1) * ((outerWidth(wrapper) - wrapper.width()) / 2 + 1));\n\t                        } else {\n\t                            that.popup.container.css("max-height", (parseFloat($(".km-content:visible").innerHeight()) - 15) + "px");\n\t                        }\n\n\t                        if (that.trigger(OVERFLOW_OPEN)) {\n\t                            e.preventDefault();\n\t                        }\n\t                    },\n\t                    activate: function() {\n\t                        this.element.find(":kendoFocusable").first().focus();\n\t                    },\n\t                    close: function (e) {\n\t                        if (that.trigger(OVERFLOW_CLOSE)) {\n\t                            e.preventDefault();\n\t                        }\n\n\t                        this.element.focus();\n\t                    }\n\t                });\n\n\t                that.popup.element.on("keydown" + ns, "." + BUTTON, function(e) {\n\t                    var target = $(e.target),\n\t                        li = target.parent(),\n\t                        isComplexTool = li.is("." + BUTTON_GROUP) || li.is("." + SPLIT_BUTTON),\n\t                        element;\n\n\t                    e.preventDefault();\n\n\t                    if (e.keyCode === keys.ESC || e.keyCode === keys.TAB || (e.altKey && e.keyCode === keys.UP)) {\n\n\t                        that._toggleOverflow();\n\t                        that.overflowAnchor.focus();\n\t                    } else if (e.keyCode === keys.DOWN) {\n\t                        element = !isComplexTool || (isComplexTool && target.is(":last-child")) ? li : target;\n\t                        findFocusableSibling(element, "next").focus();\n\t                    } else if (e.keyCode === keys.UP) {\n\t                        element = !isComplexTool || (isComplexTool && target.is(":first-child")) ? li : target;\n\t                        findFocusableSibling(element, "prev").focus();\n\t                    } else if (e.keyCode === keys.SPACEBAR || e.keyCode === keys.ENTER) {\n\t                        that.userEvents.trigger("tap", { target: $(e.target) });\n\t                        that.overflowAnchor.focus();\n\t                    } else if (e.keyCode === keys.HOME) {\n\t                        li.parent().find(":kendoFocusable").first().focus();\n\t                    } else if (e.keyCode === keys.END) {\n\t                        li.parent().find(":kendoFocusable").last().focus();\n\t                    }\n\t                });\n\n\t                if (that.isMobile) {\n\t                    that.popup.container = that.popup.element.find("." + OVERFLOW_CONTAINER);\n\t                } else {\n\t                    that.popup.container = that.popup.element;\n\t                }\n\n\t                that.popup.container.attr(KENDO_UID_ATTR, this.uid);\n\t            },\n\n\t            _toggleOverflowAnchor: function() {\n\t                var hasVisibleChildren = false;\n\t                var paddingEnd = this._isRtl ? "padding-left" : "padding-right";\n\n\t                if (this.options.mobile) {\n\t                    hasVisibleChildren = this.popup.element.find("." + OVERFLOW_CONTAINER).children(":not(." + OVERFLOW_HIDDEN + ", ." + POPUP + ")").length > 0;\n\t                } else {\n\t                    hasVisibleChildren = this.popup.element.children(":not(." + OVERFLOW_HIDDEN + ", ." + POPUP + ")").length > 0;\n\t                }\n\n\t                if (hasVisibleChildren) {\n\t                    this.overflowAnchor.css({\n\t                        visibility: "visible",\n\t                        width: ""\n\t                    });\n\t                    this.wrapper.css(paddingEnd, this.overflowAnchor.outerWidth(true));\n\t                } else {\n\t                    this.overflowAnchor.css({\n\t                        visibility: "hidden",\n\t                        width: "1px"\n\t                    });\n\t                    this.wrapper.css(paddingEnd, "");\n\t                }\n\t            },\n\n\t            _buttonClick: function(e) {\n\t                var that = this, popup,\n\t                    target, item, splitContainer,\n\t                    isSplitButtonArrow = e.target.closest("." + SPLIT_BUTTON_ARROW).length,\n\t                    handler, eventData, urlTarget;\n\n\t                e.preventDefault();\n\n\t                if (isSplitButtonArrow) {\n\t                    that._toggle(e);\n\t                    return;\n\t                }\n\n\t                target = $(e.target).closest("." + BUTTON, that.element);\n\n\t                if (target.hasClass(OVERFLOW_ANCHOR)) {\n\t                    return;\n\t                }\n\n\t                item = target.data("button");\n\n\t                if (!item && that.popup) {\n\t                    target = $(e.target).closest("." + OVERFLOW_BUTTON, that.popup.container);\n\t                    item = target.parent("li").data("button");\n\t                }\n\n\t                if (!item || !item.options.enable) {\n\t                    return;\n\t                }\n\n\t                if (item.options.togglable) {\n\t                    handler = isFunction(item.toggleHandler) ? item.toggleHandler : null;\n\n\t                    item.toggle(!item.options.selected, true);\n\t                    eventData = { target: target, group: item.options.group, checked: item.options.selected, id: item.options.id, item: item };\n\n\t                    if (handler) { handler.call(that, eventData); }\n\t                    that.trigger(TOGGLE, eventData);\n\t                } else {\n\t                    handler = isFunction(item.clickHandler) ? item.clickHandler : null;\n\t                    eventData = { sender: that, target: target, id: item.options.id, item: item };\n\n\t                    if (handler) { handler.call(that, eventData); }\n\t                    that.trigger(CLICK, eventData);\n\t                }\n\n\t                if (item.options.url) {\n\t                    if (item.options.attributes && item.options.attributes.target) {\n\t                        urlTarget = item.options.attributes.target;\n\t                    }\n\t                    window.open(item.options.url, urlTarget || "_self");\n\t                }\n\n\t                if (target.hasClass(OVERFLOW_BUTTON)) {\n\t                    that.popup.close();\n\t                }\n\n\t                splitContainer = target.closest(".k-split-container");\n\t                if (splitContainer[0]) {\n\t                    popup = splitContainer.data("kendoPopup");\n\t                    (popup ? popup : splitContainer.parents(".km-popup-wrapper").data("kendoPopup")).close();\n\t                }\n\t            },\n\n\t            _navigatable: function() {\n\t                var that = this;\n\n\t                that.element\n\t                    .attr("tabindex", 0)\n\t                    .on("focusin" + ns, function(ev) {\n\t                        var target = $(ev.target);\n\t                        var element = $(this).find(":kendoFocusable:first");\n\n\t                        if (!target.is("." + TOOLBAR) || element.length === 0) {\n\t                            return;\n\t                        }\n\n\t                        if (element.is("." + OVERFLOW_ANCHOR)) {\n\t                            element = findFocusableSibling(element, "next");\n\t                        }\n\n\t                        if(element.length) {\n\t                            element[0].focus();\n\t                        }\n\t                    })\n\t                    .on("keydown" + ns, proxy(that._keydown, that));\n\t            },\n\n\t            _keydown: function(e) {\n\t                var target = $(e.target),\n\t                    keyCode = e.keyCode,\n\t                    items = this.element.children(":not(.k-separator):visible"),\n\t                    direction = this._isRtl ? -1 : 1;\n\n\t                if (keyCode === keys.TAB) {\n\t                    var element = target.parentsUntil(this.element).last(),\n\t                        lastHasFocus = false,\n\t                        firstHasFocus = false,\n\t                        isOnlyOverflowAnchor = false;\n\n\t                    if(!items.not("." + OVERFLOW_ANCHOR).length){\n\t                        isOnlyOverflowAnchor = true;\n\t                    }\n\n\t                    if (!element.length) {\n\t                        element = target;\n\t                    }\n\n\t                    if (element.is("." + OVERFLOW_ANCHOR) && !isOnlyOverflowAnchor) {\n\t                        var lastItemNotOverflowAnchor = items.last();\n\n\t                        if (e.shiftKey) {\n\t                            e.preventDefault();\n\t                        }\n\n\t                        if (lastItemNotOverflowAnchor.is(":kendoFocusable")) {\n\t                            items.last().focus();\n\t                        } else {\n\t                            items.last().find(":kendoFocusable").last().focus();\n\t                        }\n\t                    }\n\n\t                    if (!e.shiftKey && items.index(element) === items.length - 1) {\n\t                        if (element.is("." + BUTTON_GROUP)) {\n\t                            lastHasFocus = target.is(":last-child");\n\t                        } else {\n\t                            lastHasFocus = true;\n\t                        }\n\t                    }\n\n\t                    var isFirstTool = items.index(element) === items.not(".k-overflow-anchor").first().index();\n\t                    if (e.shiftKey && isFirstTool) {\n\t                        if (element.is("." + BUTTON_GROUP)) {\n\t                            firstHasFocus = target.is(":first-child");\n\t                        } else {\n\t                            firstHasFocus = true;\n\t                        }\n\t                    }\n\n\t                    if (lastHasFocus && this.overflowAnchor && this.overflowAnchor.css("visibility") !== "hidden" && !isOnlyOverflowAnchor) {\n\t                        e.preventDefault();\n\t                        this.overflowAnchor.focus();\n\t                    }\n\n\t                    if (firstHasFocus || (isOnlyOverflowAnchor && e.shiftKey)) {\n\t                        e.preventDefault();\n\t                        var prevFocusable = this._getPrevFocusable(this.wrapper);\n\t                        if (prevFocusable) {\n\t                            prevFocusable.focus();\n\t                        }\n\t                    }\n\t                    this._preventNextFocus = false;\n\t                }\n\n\t                if (e.altKey && keyCode === keys.DOWN) {\n\t                    var splitButton = $(document.activeElement).data("splitButton");\n\t                    var isOverflowAnchor = $(document.activeElement).is("." + OVERFLOW_ANCHOR);\n\n\t                    if (splitButton) {\n\t                        splitButton.toggle();\n\t                    } else if (isOverflowAnchor) {\n\t                        this._toggleOverflow();\n\t                    }\n\n\t                    return;\n\t                }\n\n\t                if ((keyCode === keys.SPACEBAR || keyCode === keys.ENTER) && !target.is("input, checkbox")) {\n\n\t                    if(keyCode === keys.SPACEBAR){\n\t                        e.preventDefault(); //prevent spacebar to scroll the page down\n\t                    }\n\n\t                    if (target.is("." + SPLIT_BUTTON)) {\n\t                        target = target.children().first();\n\t                        this.userEvents.trigger("tap", { target: target });\n\t                    } else if (keyCode === keys.SPACEBAR) {\n\t                        this.userEvents.trigger("tap", { target: target });\n\t                    }\n\n\t                    return;\n\t                }\n\n\t                if (keyCode === keys.HOME) {\n\t                    if (target.is(".k-dropdown") || target.is("input")) {\n\t                        return;\n\t                    }\n\n\t                    if (this.overflowAnchor) {\n\t                        items.eq(1).focus();\n\t                    } else {\n\t                        items.first().focus();\n\t                    }\n\t                    e.preventDefault();\n\t                } else if (keyCode === keys.END) {\n\t                    if (target.is(".k-dropdown") || target.is("input")) {\n\t                        return;\n\t                    }\n\t                    if (this.overflowAnchor && $(this.overflowAnchor).css("visibility") != "hidden") {\n\t                        this.overflowAnchor.focus();\n\t                    } else {\n\t                        items.last().focus();\n\t                    }\n\t                    e.preventDefault();\n\t                } else if (keyCode === keys.RIGHT && !this._preventNextFocus && !target.is("input, select, .k-dropdown, .k-colorpicker") && this._getNextElement(e.target, 1 * direction)) {\n\t                    this._getNextElement(e.target, 1 * direction).focus();\n\t                    e.preventDefault();\n\t                } else if (keyCode === keys.LEFT && !this._preventNextFocus && !target.is("input, select, .k-dropdown, .k-colorpicker") && this._getNextElement(e.target, -1 * direction)) {\n\t                    this._getNextElement(e.target, -1 * direction).focus();\n\t                    e.preventDefault();\n\t                }\n\t            },\n\n\t            _getNextElement: function (item, direction) {\n\t                var items = this.element.children(":not(.k-separator):visible");\n\t                var itemIndex = items.index(item) === -1 ? items.index(item.parentElement) : items.index(item);\n\t                var startIndex = this.overflowAnchor ? 1 : 0;\n\t                var directionNumber = direction;\n\t                var searchIndex = direction === 1 ? items.length - 1 : startIndex;\n\t                var index = direction === 1 ? startIndex : items.length - 1;\n\t                var focusableItem = items[itemIndex + direction];\n\t                this._preventNextFocus = false;\n\n\t                if ($(item).closest("." + BUTTON_GROUP).length && !$(item).is(direction === 1 ? ":last-child" : ":first-child")) {\n\t                    return $(item)\n\t                        .closest("." + BUTTON_GROUP)\n\t                        .children()[$(item)\n\t                        .closest("." + BUTTON_GROUP)\n\t                        .children()\n\t                        .index(item) + direction];\n\t                }\n\n\t                if (this.overflowAnchor && item === this.overflowAnchor[0] && direction === -1) {\n\t                    focusableItem = items[items.length - 1];\n\t                }\n\n\t                if (itemIndex === searchIndex) {\n\t                    focusableItem = !this.overflowAnchor ||\n\t                        (this.overflowAnchor &&\n\t                        $(this.overflowAnchor).css("visibility") === "hidden") ? items[index] : this.overflowAnchor;\n\t                }\n\n\t                while (!$(focusableItem).is(":kendoFocusable")) {\n\t                    if (direction === -1 && $(focusableItem).closest("." + BUTTON_GROUP).length) {\n\t                        focusableItem = $(focusableItem).children(":not(label, div)").last();\n\t                    } else {\n\t                        focusableItem = $(focusableItem).children(":not(label, div)").first();\n\t                    }\n\t                    if (!focusableItem.length) {\n\t                        directionNumber = directionNumber + direction;\n\t                        focusableItem = items[itemIndex + directionNumber];\n\t                        if (!focusableItem) {\n\t                            return this.overflowAnchor;\n\t                        }\n\t                    }\n\t                    this._preventNextFocus = $(focusableItem).closest("." + BUTTON_GROUP).length ? false : true;\n\t                }\n\n\t                return focusableItem;\n\t            },\n\n\t            _getPrevFocusable: function(element) {\n\t                if (element.is("html")) {\n\t                    return element;\n\t                }\n\n\t                var elementToFocus, prevElement,\n\t                    prevElements = element.prevAll();\n\t                prevElements.each(function(){\n\t                    prevElement = $(this);\n\t                    if (prevElement.is(":kendoFocusable")) {\n\t                        elementToFocus = prevElement;\n\t                        return false;\n\t                    } else if (prevElement.find(":kendoFocusable").length > 0) {\n\t                        elementToFocus = prevElement.find(":kendoFocusable").last();\n\t                        return false;\n\t                    }\n\t                });\n\t                if (elementToFocus) {\n\t                    return elementToFocus;\n\t                } else {\n\t                    return this._getPrevFocusable(element.parent());\n\t                }\n\t            },\n\n\t            _toggle: function(e) {\n\t                var splitButton = $(e.target).closest("." + SPLIT_BUTTON).data("splitButton");\n\n\t                e.preventDefault();\n\n\t                if (!splitButton.options.enable) {\n\t                    return;\n\t                }\n\n\t                splitButton.toggle();\n\t            },\n\n\t            _toggleOverflow: function() {\n\t                this.popup.toggle();\n\t            },\n\n\t            _resize: function(e) {\n\t                var containerWidth = e.width;\n\n\t                if (!this.options.resizable) {\n\t                    return;\n\t                }\n\n\t                this.popup.close();\n\n\t                this._shrink(containerWidth);\n\t                this._stretch(containerWidth);\n\n\t                this._markVisibles();\n\n\t                this._toggleOverflowAnchor();\n\t            },\n\n\t            _childrenWidth: function() {\n\t                var childrenWidth = 0;\n\n\t                this.element.children(":visible:not(." + STATE_HIDDEN + ", ." + SPACER_CLASS + ")").each(function() {\n\t                    childrenWidth += outerWidth($(this), true);\n\t                });\n\n\t                return Math.ceil(childrenWidth);\n\t            },\n\n\t            _shrink: function(containerWidth) {\n\t                var commandElement,\n\t                    visibleCommands;\n\n\t                if (containerWidth < this._childrenWidth()) {\n\t                    visibleCommands = this.element.children(":visible:not([data-overflow=\'never\'], ." + OVERFLOW_ANCHOR + ")");\n\n\t                    for (var i = visibleCommands.length - 1; i >= 0; i--) {\n\t                        commandElement = visibleCommands.eq(i);\n\n\t                        if (containerWidth > this._childrenWidth()) {\n\t                            break;\n\t                        } else {\n\t                            this._hideItem(commandElement);\n\t                        }\n\t                    }\n\t                }\n\t            },\n\n\t            _stretch: function(containerWidth) {\n\t                var commandElement,\n\t                    hiddenCommands;\n\n\t                if (containerWidth > this._childrenWidth()) {\n\t                    hiddenCommands = this.element.children(":hidden:not(\'." + STATE_HIDDEN + "\')");\n\n\t                    for (var i = 0; i < hiddenCommands.length ; i++) {\n\t                        commandElement = hiddenCommands.eq(i);\n\t                        if (containerWidth < this._childrenWidth() || !this._showItem(commandElement, containerWidth)) {\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t            },\n\n\t            _hideItem: function(item) {\n\t                item.addClass(HIDDEN);\n\n\t                if (this.popup) {\n\t                    this.popup.container\n\t                        .find(">li[data-uid=\'" + item.data("uid") + "\']")\n\t                        .removeClass(OVERFLOW_HIDDEN);\n\t                }\n\t            },\n\n\t            _showItem: function(item, containerWidth) {\n\t                // From jquery.outerWidth docs:\n\t                //  > jQuery will attempt to temporarily show and then re-hide an element\n\t                //  > in order to measure its dimensions, but this is unreliable\n\t                // Thus we show and hide the item\n\t                item.removeClass(HIDDEN);\n\t                var itemOuterWidth = outerWidth(item, true);\n\t                item.addClass(HIDDEN);\n\n\t                if (item.length && containerWidth > this._childrenWidth() + itemOuterWidth) {\n\n\t                    item.removeClass(HIDDEN);\n\n\t                    if (this.popup) {\n\t                        this.popup.container\n\t                            .find(">li[data-uid=\'" + item.data("uid") + "\']")\n\t                            .addClass(OVERFLOW_HIDDEN);\n\t                    }\n\n\t                    return true;\n\t                }\n\n\t                return false;\n\t            },\n\n\t            _markVisibles: function() {\n\t                var overflowItems = this.popup.container.children(),\n\t                    toolbarItems = this.element.children(":not(.k-overflow-anchor)"),\n\t                    visibleOverflowItems = overflowItems.filter(":not(.k-overflow-hidden)"),\n\t                    visibleToolbarItems = toolbarItems.filter(":visible");\n\n\t                overflowItems.add(toolbarItems).removeClass(FIRST_TOOLBAR_VISIBLE + " " + LAST_TOOLBAR_VISIBLE);\n\t                visibleOverflowItems.first().add(visibleToolbarItems.first()).addClass(FIRST_TOOLBAR_VISIBLE);\n\t                visibleOverflowItems.last().add(visibleToolbarItems.last()).addClass(LAST_TOOLBAR_VISIBLE);\n\t            }\n\n\t        });\n\n\t    kendo.ui.plugin(ToolBar);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1017)))\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.toolbar.js?')},"./node_modules/@progress/kendo-ui/js/kendo.tooltip.js":
/*!*************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.tooltip.js ***!
  \*************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1390);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1017:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1054:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.popup */ "./node_modules/@progress/kendo-ui/js/kendo.popup.js");\n\n/***/ }),\n\n/***/ 1072:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.fx */ "./node_modules/@progress/kendo-ui/js/kendo.fx.js");\n\n/***/ }),\n\n/***/ 1390:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018), __webpack_require__(1054), __webpack_require__(1072) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "tooltip",\n\t    name: "Tooltip",\n\t    category: "web",\n\t    description: "The Tooltip widget displays a popup hint for a given html element.",\n\t    depends: [ "core", "popup" ],\n\t    features: [ {\n\t        id: "tooltip-fx",\n\t        name: "Animation",\n\t        description: "Support for animation",\n\t        depends: [ "fx" ]\n\t    } ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        Widget = kendo.ui.Widget,\n\t        Popup = kendo.ui.Popup,\n\t        isFunction = kendo.isFunction,\n\t        isPlainObject = $.isPlainObject,\n\t        extend = $.extend,\n\t        proxy = $.proxy,\n\t        DOCUMENT = $(document),\n\t        isLocalUrl = kendo.isLocalUrl,\n\t        ARIAIDSUFFIX = "_tt_active",\n\t        DESCRIBEDBY = "aria-describedby",\n\t        SHOW = "show",\n\t        HIDE = "hide",\n\t        ERROR = "error",\n\t        CONTENTLOAD = "contentLoad",\n\t        REQUESTSTART = "requestStart",\n\t        KCONTENTFRAME = "k-content-frame",\n\t        TEMPLATE = \'<div role="tooltip" class="k-widget k-tooltip#if (!autoHide) {# k-tooltip-closable#}#">\' +\n\t            \'<div class="k-tooltip-content"></div>\' +\n\t            \'#if (!autoHide) {# <div class="k-tooltip-button"><a href="\\\\#" class="k-icon k-i-close" title="Close"></a></div> #}#\' +\n\t            \'#if (callout){ #<div class="k-callout k-callout-#=dir#"></div>#}#\' +\n\t        \'</div>\',\n\t        IFRAMETEMPLATE = kendo.template(\n\t            "<iframe frameborder=\'0\' class=\'" + KCONTENTFRAME + "\' src=\'#= content.url #\'>" +\n\t                "This page requires frames in order to show content" +\n\t            "</iframe>"\n\t        ),\n\t        NS = ".kendoTooltip",\n\t        POSITIONS = {\n\t            bottom: {\n\t                origin: "bottom center",\n\t                position: "top center"\n\t            },\n\t            top: {\n\t                origin: "top center",\n\t                position: "bottom center"\n\t            },\n\t            left: {\n\t                origin: "center left",\n\t                position: "center right",\n\t                collision: "fit flip"\n\t            },\n\t            right: {\n\t                origin: "center right",\n\t                position: "center left",\n\t                collision: "fit flip"\n\t            },\n\t            center: {\n\t                position: "center center",\n\t                origin: "center center"\n\t            }\n\t        },\n\t        REVERSE = {\n\t            "top": "bottom",\n\t            "bottom": "top",\n\t            "left": "right",\n\t            "right": "left",\n\t            "center": "center"\n\t        },\n\t        DIRCLASSES = {\n\t            bottom: "n",\n\t            top: "s",\n\t            left: "e",\n\t            right: "w",\n\t            center: "n"\n\t        },\n\t        DIMENSIONS = {\n\t            "horizontal": { offset: "top", size: "outerHeight" },\n\t            "vertical": { offset: "left", size: "outerWidth" }\n\t        },\n\t        DEFAULTCONTENT = function(e) {\n\t            return e.target.data(kendo.ns + "title");\n\t        };\n\n\t    function restoreTitle(element) {\n\t        while(element.length) {\n\t            if (restoreTitleAttributeForElement(element)) {\n\t                break;\n\t            }\n\t            element = element.parent();\n\t        }\n\t    }\n\n\t    function restoreTitleAttributeForElement(element) {\n\t        var title = element.data(kendo.ns + "title");\n\t        if (title) {\n\t            element.attr("title", title);\n\t            element.removeData(kendo.ns + "title");\n\t            return true;\n\t        }\n\t    }\n\n\t    function saveTitleAttributeForElement(element) {\n\t        var title = element.attr("title");\n\t        if (title) {\n\t            element.data(kendo.ns + "title", title);\n\t            element.attr("title", "");\n\t            return true;\n\t        }\n\t    }\n\n\t    function saveTitleAttributes(element) {\n\t        while(element.length && !element.is("body")) {\n\t            if (saveTitleAttributeForElement(element)) {\n\t                break;\n\t            }\n\t            element = element.parent();\n\t        }\n\t    }\n\n\t    var Tooltip = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this,\n\t                axis;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            axis = that.options.position.match(/left|right/) ? "horizontal" : "vertical";\n\n\t            that.dimensions = DIMENSIONS[axis];\n\n\t            that._documentKeyDownHandler = proxy(that._documentKeyDown, that);\n\n\t            if (kendo.support.touch && this._isShownOnMouseEnter()) {\n\t                that.element.on(kendo.support.mousedown + NS, that.options.filter, proxy(that._showOn, that));\n\t            }\n\n\t            that.element.on(that.options.showOn + NS, that.options.filter, proxy(that._showOn, that));\n\n\t            if (this._isShownOnMouseEnter() || this._isShownOnClick()) {\n\t                that.element.on("mouseenter" + NS, that.options.filter, proxy(that._mouseenter, that));\n\t            }\n\n\t            if (this.options.autoHide && this._isShownOnMouseEnter()) {\n\t                that.element.on("mouseleave" + NS, that.options.filter, proxy(that._mouseleave, that));\n\t            }\n\n\t            if (this.options.autoHide && this._isShownOnFocus()) {\n\t                that.element.on("blur" + NS, that.options.filter, proxy(that._blur, that));\n\t            }\n\n\t            if (kendo.support.touch) {\n\t                that.element.on(kendo.support.mousedown + NS, that.options.filter, proxy(that._mouseenter, that));\n\t            }\n\t        },\n\n\t        options: {\n\t            name: "Tooltip",\n\t            filter: "",\n\t            content: DEFAULTCONTENT,\n\t            showAfter: 100,\n\t            hideAfter: 100,\n\t            callout: true,\n\t            offset: 0,\n\t            position: "bottom",\n\t            showOn: "mouseenter",\n\t            autoHide: true,\n\t            width: null,\n\t            height: null,\n\t            animation: {\n\t                open: {\n\t                    effects: "fade:in",\n\t                    duration: 0\n\t                },\n\t                close: {\n\t                    duration: 40,\n\t                    hide: true\n\t                }\n\t            }\n\t        },\n\n\t        events: [ SHOW, HIDE, CONTENTLOAD, ERROR, REQUESTSTART ],\n\n\t        _isShownOnFocus: function(){\n\t            return this.options.showOn && this.options.showOn.match(/focus/);\n\t        },\n\n\t        _isShownOnMouseEnter: function(){\n\t            return this.options.showOn && this.options.showOn.match(/mouseenter/);\n\t        },\n\n\t        _isShownOnClick: function(){\n\t            return this.options.showOn && this.options.showOn.match(/click/);\n\t        },\n\n\t        _mouseenter: function(e) {\n\t            saveTitleAttributes($(e.currentTarget));\n\t        },\n\n\t        _showOn: function(e) {\n\t            var that = this;\n\n\t            var currentTarget = $(e.currentTarget);\n\t            if (that._isShownOnClick() && !that._isShownOnMouseEnter()) {\n\t                that._show(currentTarget);\n\t            } else if (that._isShownOnFocus()) {\n\t                saveTitleAttributes(currentTarget);\n\t                that._show(currentTarget);\n\t            } else {\n\t                clearTimeout(that.timeout);\n\n\t                that.timeout = setTimeout(function() {\n\t                    that._show(currentTarget);\n\t                }, that.options.showAfter);\n\t            }\n\t        },\n\n\t        _appendContent: function(target) {\n\t            var that = this,\n\t                contentOptions = that.options.content,\n\t                element = that.content,\n\t                showIframe = that.options.iframe,\n\t                iframe;\n\n\t            if (isPlainObject(contentOptions) && contentOptions.url) {\n\t                if (!("iframe" in that.options)) {\n\t                    showIframe = !isLocalUrl(contentOptions.url);\n\t                }\n\n\t                that.trigger(REQUESTSTART, { options: contentOptions, target: target });\n\n\t                if (!showIframe) {\n\t                    element.empty();\n\t                    kendo.ui.progress(element, true);\n\n\t                    // perform AJAX request\n\t                    that._ajaxRequest(contentOptions);\n\t                } else {\n\t                    element.hide();\n\n\t                    iframe = element.find("." + KCONTENTFRAME)[0];\n\n\t                    if (iframe) {\n\t                        // refresh existing iframe\n\t                        iframe.src = contentOptions.url || iframe.src;\n\t                    } else {\n\t                        element.html(IFRAMETEMPLATE({ content: contentOptions }));\n\t                    }\n\n\t                    element.find("." + KCONTENTFRAME)\n\t                        .off("load" + NS)\n\t                        .on("load" + NS, function(){\n\t                            that.trigger(CONTENTLOAD);\n\t                            element.show();\n\t                        });\n\t                }\n\t            } else if (contentOptions && isFunction(contentOptions)) {\n\t                contentOptions = contentOptions({ sender: this, target: target });\n\t                element.html(contentOptions || "");\n\t            } else {\n\t                element.html(contentOptions);\n\t            }\n\n\t            that.angular("compile", function(){\n\t                return { elements: element };\n\t            });\n\t        },\n\n\t        _ajaxRequest: function(options) {\n\t            var that = this;\n\n\t            jQuery.ajax(extend({\n\t                type: "GET",\n\t                dataType: "html",\n\t                cache: false,\n\t                error: function (xhr, status) {\n\t                    kendo.ui.progress(that.content, false);\n\n\t                    that.trigger(ERROR, { status: status, xhr: xhr });\n\t                },\n\t                success: proxy(function (data) {\n\t                    kendo.ui.progress(that.content, false);\n\n\t                    that.content.html(data);\n\n\t                    that.trigger(CONTENTLOAD);\n\t                }, that)\n\t            }, options));\n\t        },\n\n\t        _documentKeyDown: function(e) {\n\t            if (e.keyCode === kendo.keys.ESC) {\n\t                this.hide();\n\t            }\n\t        },\n\n\t        refresh: function() {\n\t            var that = this,\n\t                popup = that.popup;\n\n\t            if (popup && popup.options.anchor) {\n\t                that._appendContent(popup.options.anchor);\n\t            }\n\t        },\n\n\t        hide: function() {\n\t            if (this.popup) {\n\t                this.popup.close();\n\t            }\n\t        },\n\n\t        show: function(target) {\n\t            target = target || this.element;\n\n\t            saveTitleAttributes(target);\n\t            this._show(target);\n\t        },\n\n\t        _show: function(target) {\n\t            var that = this,\n\t                current = that.target();\n\n\t            if (!that.popup) {\n\t                that._initPopup();\n\t            }\n\n\t            if (current && current[0] != target[0]) {\n\t                that.popup.close();\n\t                that.popup.element.kendoStop(true, true);// animation can be too long to hide the element before it is shown again\n\t            }\n\n\t            if (!current || current[0] != target[0]) {\n\t                that._appendContent(target);\n\t                that.popup.options.anchor = target;\n\t            }\n\n\t            that.popup.one("deactivate", function() {\n\t                restoreTitle(target);\n\t                target.removeAttr(DESCRIBEDBY);\n\n\t                this.element\n\t                    .removeAttr("id")\n\t                    .attr("aria-hidden", true);\n\n\t                DOCUMENT.off("keydown" + NS, that._documentKeyDownHandler);\n\t            });\n\n\t            that.popup._hovered = true;\n\t            that.popup.open();\n\t        },\n\n\t        _initPopup: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                wrapper = $(kendo.template(TEMPLATE)({\n\t                    callout: options.callout && options.position !== "center",\n\t                    dir: DIRCLASSES[options.position],\n\t                    autoHide: options.autoHide\n\t                }));\n\n\t            that.popup = new Popup(wrapper, extend({\n\t                autosize:true,\n\t                activate: function() {\n\t                    var anchor = this.options.anchor,\n\t                        ariaId = anchor[0].id || that.element[0].id;\n\n\t                    if (ariaId) {\n\t                        anchor.attr(DESCRIBEDBY, ariaId + ARIAIDSUFFIX);\n\t                        this.element.attr("id", ariaId + ARIAIDSUFFIX);\n\t                    }\n\n\t                    if (options.callout) {\n\t                        that._positionCallout();\n\t                    } else {\n\t                        that._offset(that.options.position, that.options.offset);\n\t                    }\n\n\t                    this.element.removeAttr("aria-hidden");\n\n\t                    DOCUMENT.on("keydown" + NS, that._documentKeyDownHandler);\n\n\t                    that.trigger(SHOW);\n\t                    that.popup._hovered = undefined;\n\t                },\n\t                close: function() {\n\t                    that.trigger(HIDE);\n\t                },\n\t                copyAnchorStyles: false,\n\t                animation: options.animation\n\t            }, POSITIONS[options.position]));\n\n\t            wrapper.css({\n\t                width: options.width,\n\t                height: options.height\n\t            });\n\n\t            that.content = wrapper.find(".k-tooltip-content");\n\t            that.arrow = wrapper.find(".k-callout");\n\n\t            if (options.autoHide && this._isShownOnMouseEnter()) {\n\t                wrapper.on("mouseleave" + NS, proxy(that._mouseleave, that));\n\t            } else {\n\t                wrapper.on("click" + NS, ".k-tooltip-button", proxy(that._closeButtonClick, that));\n\t            }\n\t        },\n\n\t        _closeButtonClick: function(e) {\n\t            e.preventDefault();\n\t            this.hide();\n\t        },\n\n\t        _mouseleave: function(e) {\n\t            var that = this;\n\n\t            clearTimeout(that.timeout);\n\n\t            that.timeout = setTimeout(function() {\n\t                that._closePopup(e.currentTarget);\n\t            }, that.options.hideAfter);\n\t        },\n\n\t        _blur: function(e){\n\t            this._closePopup(e.currentTarget);\n\t        },\n\n\t        _closePopup: function(target){\n\t            if (this.popup && !this.popup._hovered) {\n\t                this.popup.close();\n\t            } else {\n\t                restoreTitle($(target));\n\t            }\n\t        },\n\n\t        target: function() {\n\t            if (this.popup) {\n\t                return this.popup.options.anchor;\n\t            }\n\t            return null;\n\t        },\n\n\t        _positionCallout: function() {\n\t            var that = this,\n\t                position = that.options.position,\n\t                dimensions = that.dimensions,\n\t                offset = dimensions.offset,\n\t                popup = that.popup,\n\t                anchor = popup.options.anchor,\n\t                anchorOffset = $(anchor).offset(),\n\t                elementOffset = $(popup.element).offset(),\n\t                cssClass = DIRCLASSES[popup.flipped ? REVERSE[position] : position],\n\t                offsetAmount = anchorOffset[offset] - elementOffset[offset] + ($(anchor)[dimensions.size]() / 2);\n\n\t            that._offset(position, that.options.offset);\n\n\t            that.arrow\n\t               .removeClass("k-callout-n k-callout-s k-callout-w k-callout-e")\n\t               .addClass("k-callout-" + cssClass)\n\t               .css(offset, offsetAmount);\n\t        },\n\n\t        destroy: function() {\n\t            var popup = this.popup;\n\n\t            if (popup) {\n\t                popup.element.off(NS);\n\t                popup.destroy();\n\t            }\n\n\t            clearTimeout(this.timeout);\n\n\t            this.element.off(NS);\n\n\t            DOCUMENT.off("keydown" + NS, this._documentKeyDownHandler);\n\n\t            Widget.fn.destroy.call(this);\n\t        },\n\n\t        _offset: function(position, offsetAmount) {\n\t            var that = this,\n\t                isTopLeft = position == "top" || position == "left",\n\t                isFlipped = that.popup.flipped,\n\t                direction = (isTopLeft && isFlipped) || (!isTopLeft && !isFlipped) ? 1 : -1,\n\t                marginRule = isTopLeft ? "margin-" + position : "margin-" + REVERSE[position],\n\t                offset = (kendo._outerWidth(that.arrow) / 2) + offsetAmount;\n\n\t            that.popup.wrapper.css(marginRule, offset * direction + "px");\n\t        }\n\n\t    });\n\n\t    kendo.ui.plugin(Tooltip);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1017)))\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.tooltip.js?')},"./node_modules/@progress/kendo-ui/js/kendo.touch.js":
/*!***********************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.touch.js ***!
  \***********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1391);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1056:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.userevents */ "./node_modules/@progress/kendo-ui/js/kendo.userevents.js");\n\n/***/ }),\n\n/***/ 1391:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\r\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018), __webpack_require__(1056) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t})(function(){\r\n\r\n\tvar __meta__ = { // jshint ignore:line\r\n\t    id: "touch",\r\n\t    name: "Touch",\r\n\t    category: "mobile",\r\n\t    description: "The kendo Touch widget provides a cross-platform compatible API for handling user-initiated touch events, multi-touch gestures and event sequences (drag, swipe, etc.). ",\r\n\t    depends: [ "core", "userevents" ]\r\n\t};\r\n\r\n\t(function($, undefined) {\r\n\t    var kendo = window.kendo,\r\n\t        Widget = kendo.ui.Widget,\r\n\t        proxy = $.proxy,\r\n\t        abs = Math.abs,\r\n\t        MAX_DOUBLE_TAP_DISTANCE = 20;\r\n\r\n\t    var Touch = Widget.extend({\r\n\t        init: function(element, options) {\r\n\t            var that = this;\r\n\r\n\t            Widget.fn.init.call(that, element, options);\r\n\t            options = that.options;\r\n\r\n\t            element = that.element;\r\n\t            that.wrapper = element;\r\n\r\n\t            function eventProxy(name) {\r\n\t                return function(e) {\r\n\t                    that._triggerTouch(name, e);\r\n\t                };\r\n\t            }\r\n\r\n\t            function gestureEventProxy(name) {\r\n\t                return function(e) {\r\n\t                    that.trigger(name, { touches: e.touches, distance: e.distance, center: e.center, event: e.event });\r\n\t                };\r\n\t            }\r\n\r\n\t            that.events = new kendo.UserEvents(element, {\r\n\t                filter: options.filter,\r\n\t                surface: options.surface,\r\n\t                minHold: options.minHold,\r\n\t                multiTouch: options.multiTouch,\r\n\t                allowSelection: true,\r\n\t                fastTap: options.fastTap,\r\n\t                press: eventProxy("touchstart"),\r\n\t                hold: eventProxy("hold"),\r\n\t                tap: proxy(that, "_tap"),\r\n\t                gesturestart: gestureEventProxy("gesturestart"),\r\n\t                gesturechange: gestureEventProxy("gesturechange"),\r\n\t                gestureend: gestureEventProxy("gestureend")\r\n\t            });\r\n\r\n\t            if (options.enableSwipe) {\r\n\t                that.events.bind("start", proxy(that, "_swipestart"));\r\n\t                that.events.bind("move", proxy(that, "_swipemove"));\r\n\t            } else {\r\n\t                that.events.bind("start", proxy(that, "_dragstart"));\r\n\t                that.events.bind("move", eventProxy("drag"));\r\n\t                that.events.bind("end", eventProxy("dragend"));\r\n\t            }\r\n\r\n\t            kendo.notify(that);\r\n\t        },\r\n\r\n\t        events: [\r\n\t            "touchstart",\r\n\t            "dragstart",\r\n\t            "drag",\r\n\t            "dragend",\r\n\t            "tap",\r\n\t            "doubletap",\r\n\t            "hold",\r\n\t            "swipe",\r\n\t            "gesturestart",\r\n\t            "gesturechange",\r\n\t            "gestureend"\r\n\t        ],\r\n\r\n\t        options: {\r\n\t            name: "Touch",\r\n\t            surface: null,\r\n\t            global: false,\r\n\t            fastTap: false,\r\n\t            filter: null,\r\n\t            multiTouch: false,\r\n\t            enableSwipe: false,\r\n\t            minXDelta: 30,\r\n\t            maxYDelta: 20,\r\n\t            maxDuration: 1000,\r\n\t            minHold: 800,\r\n\t            doubleTapTimeout: 800\r\n\t        },\r\n\r\n\t        cancel: function() {\r\n\t            this.events.cancel();\r\n\t        },\r\n\r\n\t        destroy: function() {\r\n\t            Widget.fn.destroy.call(this);\r\n\r\n\t            this.events.destroy();\r\n\t        },\r\n\r\n\t        _triggerTouch: function(type, e) {\r\n\t            if (this.trigger(type, { touch: e.touch, event: e.event })) {\r\n\t                e.preventDefault();\r\n\t            }\r\n\t        },\r\n\r\n\t        _tap: function(e) {\r\n\t            var that = this,\r\n\t                lastTap = that.lastTap,\r\n\t                touch = e.touch;\r\n\r\n\t            if (lastTap &&\r\n\t                (touch.endTime - lastTap.endTime < that.options.doubleTapTimeout) &&\r\n\t                kendo.touchDelta(touch, lastTap).distance < MAX_DOUBLE_TAP_DISTANCE\r\n\t                ) {\r\n\r\n\t               that._triggerTouch("doubletap", e);\r\n\t               that.lastTap = null;\r\n\t            } else {\r\n\t                that._triggerTouch("tap", e);\r\n\t                that.lastTap = touch;\r\n\t            }\r\n\t        },\r\n\r\n\t        _dragstart: function(e) {\r\n\t            this._triggerTouch("dragstart", e);\r\n\t        },\r\n\r\n\t        _swipestart: function(e) {\r\n\t            if (abs(e.x.velocity) * 2 >= abs(e.y.velocity)) {\r\n\t                e.sender.capture();\r\n\t            }\r\n\t        },\r\n\r\n\t        _swipemove: function(e) {\r\n\t            var that = this,\r\n\t                options = that.options,\r\n\t                touch = e.touch,\r\n\t                duration = e.event.timeStamp - touch.startTime,\r\n\t                direction = touch.x.initialDelta > 0 ? "right" : "left";\r\n\r\n\t            if (\r\n\t                abs(touch.x.initialDelta) >= options.minXDelta &&\r\n\t                abs(touch.y.initialDelta) < options.maxYDelta &&\r\n\t                duration < options.maxDuration\r\n\t                )\r\n\t            {\r\n\t                that.trigger("swipe", {\r\n\t                    direction: direction,\r\n\t                    touch: e.touch\r\n\t                });\r\n\r\n\t                touch.cancel();\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    kendo.ui.plugin(Touch);\r\n\t})(window.kendo.jQuery);\r\n\r\n\treturn window.kendo;\r\n\r\n\t}, __webpack_require__(3));\r\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.touch.js?')}}]);