(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{"./node_modules/@progress/kendo-ui/js/imageeditor/commands.js":
/*!********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/imageeditor/commands.js ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1034);\n\tmodule.exports = __webpack_require__(1034);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1034:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (f, define) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1035), __webpack_require__(1036)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function () {\n\n\t    (function ($, undefined) {\n\t        var kendo = window.kendo,\n\t            imageeditorNS = kendo.ui.imageeditor,\n\t            extend = $.extend,\n\t            proxy = $.proxy,\n\t            Class = kendo.Class;\n\n\t        var Command = Class.extend({\n\t            init: function (options) {\n\t                this.options = extend({}, options, this.options);\n\t                this.imageeditor = options.imageeditor;\n\t            }\n\t        });\n\n\t        var OpenPaneImageEditorCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    imageeditor = that.imageeditor,\n\t                    pane = new imageeditorNS.panes[that.options.value](imageeditor);\n\n\t                    pane.open();\n\t            }\n\t        });\n\n\t        var ZoomImageEditorCommand = Command.extend({\n\t            options: {\n\t                zoomStep: 0.05,\n\t                spacing: 20\n\t            },\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    options = that.options,\n\t                    value = options.value,\n\t                    imageeditor = that.imageeditor,\n\t                    imgHeight = imageeditor._image.height,\n\t                    currentZoom = imageeditor.getZoomLevel(),\n\t                    newHeight = imgHeight;\n\n\t                    if(!isNaN(value)) {\n\t                        value = parseFloat(value);\n\t                    } else if (typeof value === "string") {\n\t                        value = that._processStringValue(value, currentZoom);\n\t                    }\n\n\t                    newHeight = Math.round(imgHeight * value);\n\n\t                    if(newHeight > 0) {\n\t                        $(imageeditor._canvas).css("height", newHeight);\n\t                        imageeditor._zoomLevel = value;\n\t                    }\n\n\t                    if (imageeditor.currentPaneTool) {\n\t                        imageeditor.currentPaneTool.refresh();\n\t                    }\n\t            },\n\t            _processStringValue: function (value, initialZoom) {\n\t                var that = this,\n\t                    options = that.options,\n\t                    imageeditor = that.imageeditor,\n\t                    imgHeight = imageeditor._image.height,\n\t                    expectedHeight = imageeditor.canvasWrapper.height() - options.spacing,\n\t                    zoomStep = options.zoomStep;\n\n\t                switch (value) {\n\t                    case "zoomIn":\n\t                        return initialZoom + zoomStep;\n\t                    case "zoomOut":\n\t                        return initialZoom - zoomStep;\n\t                    case "fitToScreen":\n\t                        return Math.round((expectedHeight / imgHeight) * 100) / 100;\n\t                    default:\n\t                        return 1;\n\t                }\n\t            }\n\t        });\n\n\t        var CropImageEditorCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    options = that.options,\n\t                    imageeditor = that.imageeditor,\n\t                    canvas = imageeditor.getCanvasElement(),\n\t                    ctx = imageeditor.getCurrent2dContext(),\n\t                    croppedImage = ctx.getImageData(options.left, options.top, options.width, options.height);\n\n\t                ctx.clearRect(0, 0, canvas.width, canvas.height);\n\t                canvas.width = options.width;\n\t                canvas.height = options.height;\n\t                ctx.putImageData(croppedImage, 0, 0);\n\n\t                imageeditor.drawImage(canvas.toDataURL()).done(function(image){\n\t                    imageeditor.drawCanvas(image);\n\t                }).fail(function (ev) {\n\t                    imageeditor.trigger("error", ev);\n\t                });\n\t            }\n\t        });\n\n\t        var ResizeImageEditorCommand = Command.extend({\n\t            init: function (options) {\n\t                Command.fn.init.call(this, options);\n\t            },\n\t            exec: function () {\n\t                var that = this,\n\t                    options = that.options,\n\t                    imageeditor = that.imageeditor,\n\t                    canvas = imageeditor.getCanvasElement(),\n\t                    ctx = imageeditor.getCurrent2dContext(),\n\t                    image = imageeditor.getCurrentImage();\n\n\t                ctx.clearRect(0, 0, canvas.width, canvas.height);\n\t                canvas.width = options.width;\n\t                canvas.height = options.height;\n\t                ctx.drawImage(image, 0, 0, options.width, options.height);\n\n\t                imageeditor.drawImage(canvas.toDataURL()).done(function(image){\n\t                    imageeditor.drawCanvas(image);\n\t                }).fail(function (ev) {\n\t                    imageeditor.trigger("error", ev);\n\t                });\n\t            }\n\t        });\n\n\t        var UndoImageEditorCommand = Command.extend({\n\t            exec: function () {\n\t                var that = this,\n\t                    imageeditor = that.imageeditor,\n\t                    canvas = imageeditor.getCanvasElement(),\n\t                    ctx = imageeditor.getCurrent2dContext(),\n\t                    image = imageeditor.undoStack.pop();\n\n\t                if(image) {\n\t                    imageeditor.redoStack.push(imageeditor.getCurrentImage());\n\t                    delete imageeditor._image;\n\n\t                    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\t                    canvas.width = image.width;\n\t                    canvas.height = image.height;\n\t                    ctx.drawImage(image, 0, 0, image.width, image.height);\n\n\t                    imageeditor.drawImage(canvas.toDataURL()).done(function(image){\n\t                        imageeditor.drawCanvas(image);\n\t                    }).fail(function (ev) {\n\t                        imageeditor.trigger("error", ev);\n\t                    });\n\t                }\n\t            }\n\t        });\n\n\t        var RedoImageEditorCommand = Command.extend({\n\t            exec: function () {\n\t                var that = this,\n\t                    imageeditor = that.imageeditor,\n\t                    canvas = imageeditor.getCanvasElement(),\n\t                    ctx = imageeditor.getCurrent2dContext(),\n\t                    image = imageeditor.redoStack.pop();\n\n\t                if(image) {\n\t                    imageeditor.undoStack.push(imageeditor.getCurrentImage());\n\t                    delete imageeditor._image;\n\n\t                    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\t                    canvas.width = image.width;\n\t                    canvas.height = image.height;\n\t                    ctx.drawImage(image, 0, 0, image.width, image.height);\n\n\t                    imageeditor.drawImage(canvas.toDataURL()).done(function(image){\n\t                        imageeditor.drawCanvas(image);\n\t                    }).fail(function (ev) {\n\t                        imageeditor.trigger("error", ev);\n\t                    });\n\t                }\n\t            }\n\t        });\n\n\t        var SaveImageEditorCommand = Command.extend({\n\t            exec: function () {\n\t                var that = this,\n\t                    imageeditor = that.imageeditor,\n\t                    canvas = imageeditor.getCanvasElement();\n\n\t                kendo.saveAs(extend({}, imageeditor.options.saveAs, {\n\t                    dataURI: canvas.toDataURL()\n\t                }));\n\t            }\n\t        });\n\n\t        var OpenImageEditorCommand = Command.extend({\n\t            exec: function () {\n\t                var that = this,\n\t                    imageeditor = that.imageeditor,\n\t                    upload = imageeditor._upload;\n\n\t                if (!upload) {\n\t                    var input = $("<input type=\'file\' />");\n\t                    input.kendoUpload({\n\t                        select: proxy(that.onSelect, that),\n\t                        error: proxy(that.onError, that),\n\t                        multiple: false,\n\t                        validation: {\n\t                            allowedExtensions: [".jpg", ".jpeg", ".gif", ".png", ".bmp", ".tiff", ".webp"]\n\t                        }\n\t                    });\n\n\t                    imageeditor._upload = upload = input.getKendoUpload();\n\n\t                }\n\n\t                upload.element.click();\n\t            },\n\t            onSelect: function (ev) {\n\t                var that = this,\n\t                    imageeditor = that.imageeditor,\n\t                    file = ev.files[0].rawFile,\n\t                    reader = new FileReader();\n\n\t                reader.addEventListener("load", function () {\n\t                    imageeditor.drawImage(reader.result).done(function(image){\n\t                        if (!imageeditor.trigger("imageLoaded", { image: image })) {\n\t                            imageeditor.drawCanvas(image);\n\t                            imageeditor._initUndoRedoStack();\n\t                            imageeditor._toggleTools();\n\t                        }\n\t                    }).fail(function (ev) {\n\t                        imageeditor.trigger("error", ev);\n\t                    });\n\t                }, false);\n\n\n\t                if (file) {\n\t                    reader.readAsDataURL(file);\n\t                }\n\n\t            },\n\t            onError: function(ev){\n\t                var that = this,\n\t                    imageeditor= that.imageeditor;\n\n\t                imageeditor.trigger("error", ev);\n\t            }\n\t        });\n\n\t        extend(kendo.ui.imageeditor, {\n\t            ImageEditorCommand: Command,\n\t            commands: {\n\t                OpenPaneImageEditorCommand: OpenPaneImageEditorCommand,\n\t                ZoomImageEditorCommand: ZoomImageEditorCommand,\n\t                CropImageEditorCommand: CropImageEditorCommand,\n\t                ResizeImageEditorCommand:ResizeImageEditorCommand,\n\t                UndoImageEditorCommand: UndoImageEditorCommand,\n\t                RedoImageEditorCommand: RedoImageEditorCommand,\n\t                SaveImageEditorCommand: SaveImageEditorCommand,\n\t                OpenImageEditorCommand: OpenImageEditorCommand\n\t            }\n\t    });\n\n\t    })(window.kendo.jQuery);\n\n\t    return window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ }),\n\n/***/ 1035:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./pane */ "./node_modules/@progress/kendo-ui/js/imageeditor/pane.js");\n\n/***/ }),\n\n/***/ 1036:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.upload */ "./node_modules/@progress/kendo-ui/js/kendo.upload.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/imageeditor/commands.js?')},"./node_modules/@progress/kendo-ui/js/imageeditor/pane.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/imageeditor/pane.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1037);\n\tmodule.exports = __webpack_require__(1037);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 23:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.draganddrop */ "./node_modules/@progress/kendo-ui/js/kendo.draganddrop.js");\n\n/***/ }),\n\n/***/ 1037:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (f, define) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20), __webpack_require__(1038), __webpack_require__(1039), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function () {\n\n\t    (function ($, undefined) {\n\t        var kendo = window.kendo,\n\t            extend = $.extend,\n\t            proxy = $.proxy,\n\t            Class = kendo.Class,\n\n\t            NS = ".k-imageeditor-pane",\n\n\t            CLICK = "click";\n\n\t        var paneStyles = {\n\t            form: "k-imageeditor-pane-form",\n\t            button: "k-imageeditor-pane-button",\n\t            confirmButton: "k-imageeditor-pane-confirm-button",\n\t            cropOverlay: "k-imageeditor-crop-overlay",\n\t            crop: "k-imageeditor-crop",\n\t            resizeHandle: "k-resize-handle",\n\t            resizeHandlePrefix: "k-resize-"\n\t        };\n\n\t        var round = function(f) {\n\t            return Math.round(f * 1000) / 1000;\n\t        };\n\n\t        var Pane = Class.extend({\n\t            init: function (imageeditor) {\n\t                var that = this;\n\n\t                that.imageeditor = imageeditor;\n\n\t                if (that.imageeditor.currentPaneTool) {\n\t                    that.imageeditor.currentPaneTool.destroy();\n\t                }\n\n\t                that.element = $("<div></div>").addClass(paneStyles.form);\n\t            },\n\t            open: function () {\n\t                var that = this,\n\t                    imageeditor = that.imageeditor,\n\t                    commonMessages = imageeditor.options.messages.common;\n\n\t                imageeditor.paneWrapper.append(that.element);\n\t                that.formWidget = new kendo.ui.Form(that.element, extend(that.formSettings(), {\n\t                    buttonsTemplate: kendo.format("<button class=\'{0} k-button\' data-action=\'cancel\'>{2}</button>" +\n\t                                                    "<button class=\'{0} {1} k-button k-primary\' data-action=\'confirm\'>{3}</button>",\n\t                                                    paneStyles.button,\n\t                                                    paneStyles.confirmButton,\n\t                                                    commonMessages.cancel,\n\t                                                    commonMessages.confirm)\n\t                }));\n\n\t                that.bindButtonEvents();\n\t                imageeditor.paneWrapper.show();\n\t                imageeditor.currentPaneTool = that;\n\t            },\n\t            bindButtonEvents: function () {\n\t                var that = this,\n\t                    formWidget = that.formWidget,\n\t                    buttons = formWidget.element.find("." + paneStyles.button);\n\n\t                that._clickHandler = proxy(that._click, that);\n\n\t                buttons.on(CLICK + NS, that._clickHandler);\n\t            },\n\t            _click: function (ev) {\n\t                var that = this,\n\t                    target = $(ev.target),\n\t                    action = target.data("action");\n\n\t                if(that[action]) {\n\t                    that[action]();\n\t                }\n\t            },\n\t            cancel: function () {\n\t                this.destroy();\n\t            },\n\t            confirm: function () {\n\t                window.console.error("Pane\'s confirm method is not implemented!");\n\t                this.destroy();\n\t            },\n\t            refresh: function () {\n\t            },\n\t            destroy: function () {\n\t                var that = this,\n\t                    imageeditor = that.imageeditor;\n\n\t                that.formWidget.element.find("." + paneStyles.button).off(NS);\n\t                that.formWidget.destroy();\n\t                imageeditor.paneWrapper.html("");\n\t                imageeditor.paneWrapper.hide();\n\t                delete imageeditor.currentPaneTool;\n\t            }\n\t        });\n\n\t        var CropPane = Pane.extend({\n\t            init: function (imageeditor) {\n\t                var that = this;\n\t                Pane.fn.init.call(that, imageeditor);\n\t                that.buildCropModel();\n\t                that.canvasUI();\n\t            },\n\t            confirm: function () {\n\t                var that = this,\n\t                    model = that.formWidget._model.toJSON();\n\n\t                that.destroy();\n\t                that.imageeditor.executeCommand({command: "CropImageEditorCommand", options: model });\n\t            },\n\t            formSettings: function () {\n\t                var that = this,\n\t                    cropMessages = that.imageeditor.options.messages.panes.crop,\n\t                    commonMessages = that.imageeditor.options.messages.common,\n\t                    aspectRatioItems = cropMessages.aspectRatioItems,\n\t                    aspectRatioDS = [];\n\n\t                if(aspectRatioItems) {\n\t                    for (var key in aspectRatioItems) {\n\t                        aspectRatioDS.push({value: key, text: aspectRatioItems[key]});\n\t                    }\n\t                } else {\n\t                    aspectRatioDS = [\n\t                        { value: "originalRatio", text: "Original ratio"},\n\t                        { value: "1:1", text: "1:1 (Square)"},\n\t                        { value: "4:5", text: "4:5 (8:10)"},\n\t                        { value: "5:7", text: "5:7"},\n\t                        { value: "2:3", text: "2:3 (4:6)"},\n\t                        { value: "16:9", text: "16:9"}\n\t                    ];\n\t                }\n\n\t                return {\n\t                    formData: that._model,\n\t                    change: proxy(that.onChange, that),\n\t                    items: [{\n\t                        type: "group",\n\t                        label: cropMessages.title || "Crop Image",\n\t                        layout: "grid",\n\t                        grid: { cols: 2, gutter: "0 8px" },\n\t                        items: [{\n\t                                label: cropMessages.aspectRatio || "Aspect ratio:",\n\t                                field: "aspectRatio",\n\t                                editor: "DropDownList",\n\t                                editorOptions: {\n\t                                    dataValueField: "value",\n\t                                    dataTextField: "text",\n\t                                    dataSource: aspectRatioDS\n\t                                },\n\t                                colSpan: 2\n\t                            }, {\n\t                                label: cropMessages.orientation,\n\t                                field: "orientation",\n\t                                editor: $.proxy(that._orientationEditor, that),\n\t                                colSpan: 2\n\t                            }, {\n\t                                label: commonMessages.width || "Width:",\n\t                                field: "width",\n\t                                attributes: { style: "max-width: 100px;" },\n\t                                editor: "NumericTextBox",\n\t                                editorOptions: {\n\t                                    format: "n0",\n\t                                    max: that._model.width,\n\t                                    min: 0\n\t                                },\n\t                                colSpan: 1\n\t                            }, {\n\t                                label: commonMessages.height || "Height:",\n\t                                field: "height",\n\t                                attributes: { style: "max-width: 100px;" },\n\t                                editor: "NumericTextBox",\n\t                                editorOptions: {\n\t                                    format: "n0",\n\t                                    max: that._model.height,\n\t                                    min: 0\n\t                                },\n\t                                colSpan: 1\n\t                            }, {\n\t                                label: commonMessages.lockAspectRatio || "Lock aspect ratio",\n\t                                field: "lockAspectRatio",\n\t                                colSpan: 2\n\t                            }\n\t                        ]\n\t                    }]\n\t                };\n\t            },\n\t            _orientationEditor: function(container, options){\n\t                var that = this,\n\t                    cropMessages = that.imageeditor.options.messages.panes.crop,\n\t                    value = options.model[options.field];\n\n\t                $("<div name=\'" + options.field + "\'></div>")\n\t                    .appendTo(container)\n\t                    .kendoButtonGroup({\n\t                        items: [\n\t                            { text: cropMessages.portrait || "Portrait", attributes: { "data-value": "portrait" }, selected: value === "portrait" },\n\t                            { text: cropMessages.landscape || "Landscape", attributes: { "data-value": "landscape" }, selected : value === "landscape" }\n\t                        ],\n\t                        select: function (ev) {\n\t                            var value = ev.sender.wrapper.find(".k-state-active").data("value");\n\t                            options.model.set(options.field, value);\n\t                        }\n\t                    });\n\t            },\n\t            buildCropModel: function () {\n\t                var that = this,\n\t                    imageeditor = that.imageeditor,\n\t                    canvas = imageeditor.getCanvasElement(),\n\t                    width = canvas.width,\n\t                    height = canvas.height;\n\n\t                    that._model = {\n\t                        top: 0,\n\t                        left: 0,\n\t                        aspectRatio: "originalRatio",\n\t                        width: width,\n\t                        height: height,\n\t                        orientation: (width - height < 0) ? "portrait" : "landscape",\n\t                        lockAspectRatio: true\n\t                    };\n\t            },\n\t            canvasUI: function () {\n\t                var that = this,\n\t                    imageeditor = that.imageeditor,\n\t                    canvasContainer = that.imageeditor.canvasContainer,\n\t                    cropOverlay = $("<div></div>").addClass(paneStyles.cropOverlay),\n\t                    cropElement = $("<div></div>").addClass(paneStyles.crop),\n\t                    handle = "<span class=\'" + paneStyles.resizeHandle + "\'></span>",\n\t                    handles = [ "nw", "n", "ne", "w", "e", "sw", "s", "se" ],\n\t                    zoomLevel = imageeditor.getZoomLevel();\n\n\t                for (var i = 0; i < handles.length; i++) {\n\t                    var handleElm = $(handle)\n\t                        .addClass(paneStyles.resizeHandlePrefix + handles[i])\n\t                        .attr("data-orientation", handles[i]);\n\n\t                    that._initResizeHandle(handleElm);\n\n\t                    cropElement.append(handleElm);\n\t                }\n\n\t                that.cropElement = cropElement;\n\n\t                that._canvasUI = cropOverlay\n\t                    .append(cropElement)\n\t                    .appendTo(canvasContainer);\n\n\t                var width = Math.round(that._model.width * zoomLevel);\n\t                var height = Math.round(that._model.height * zoomLevel);\n\t                var borderWidth = parseInt(that.cropElement.css("border-top-width"), 10);\n\n\t                that.cropElement.css({\n\t                    width: width,\n\t                    height: height,\n\t                    backgroundImage: "url(\'"+ imageeditor._image.src + "\')",\n\t                    backgroundSize: kendo.format("{0}px {1}px", width, height),\n\t                    backgroundClip: "content-box",\n\t                    backgroundPosition: kendo.format("-{0}px -{0}px", borderWidth)\n\t                });\n\n\t                that.cropElement.kendoDraggable({\n\t                    ignore: "." + paneStyles.resizeHandle,\n\t                    drag: function (ev) {\n\t                        that._adjustTopLeft(ev.target.offsetTop + ev.y.delta, ev.target.offsetLeft + ev.x.delta);\n\t                    }\n\t                });\n\t            },\n\t            refresh: function () {\n\t                var that = this,\n\t                    newModel = that.formWidget._model,\n\t                    zoomLevel = that.imageeditor.getZoomLevel(),\n\t                    width = Math.round(newModel.width * zoomLevel),\n\t                    height = Math.round(newModel.height * zoomLevel),\n\t                    top = Math.round(newModel.top * zoomLevel),\n\t                    left = Math.round(newModel.left * zoomLevel),\n\t                    borderWidth = parseInt(that.cropElement.css("border-top-width"), 10);\n\n\t                that.cropElement.css({\n\t                    top: top,\n\t                    left: left,\n\t                    width: width,\n\t                    height: height,\n\t                    backgroundSize: kendo.format("{0}px {1}px", that._model.width * zoomLevel, that._model.height * zoomLevel),\n\t                    backgroundPosition: kendo.format("-{0}px -{1}px", left + borderWidth, top + borderWidth)\n\t                });\n\t            },\n\t            _initResizeHandle: function (handle) {\n\t                var that = this;\n\n\t                handle.kendoDraggable({\n\t                    drag: function (ev) {\n\t                        var $target = $(ev.sender.element),\n\t                            newModel = that.formWidget._model,\n\t                            oldModel = that._model,\n\t                            orientation = $target.data("orientation"),\n\t                            adjustments = {},\n\t                            zoomLevel = that.imageeditor.getZoomLevel(),\n\t                            correctedLeft = newModel.left * zoomLevel,\n\t                            correctedTop = newModel.top * zoomLevel;\n\n\t                        if (orientation.indexOf("w") >= 0) {\n\t                            adjustments.left = that.cropElement[0].offsetLeft + ev.x.delta;\n\t                            adjustments.width = that.cropElement[0].offsetWidth - ev.x.delta;\n\t                        } else if (orientation.indexOf("e") >= 0) {\n\t                            adjustments.width = that.cropElement[0].offsetWidth + ev.x.delta;\n\t                        }\n\n\t                        if (orientation.indexOf("n") >= 0) {\n\t                            adjustments.top = that.cropElement[0].offsetTop + ev.y.delta;\n\t                            adjustments.height = that.cropElement[0].offsetHeight - ev.y.delta;\n\t                        } else if(orientation.indexOf("s") >= 0) {\n\t                            adjustments.height = that.cropElement[0].offsetHeight + ev.y.delta;\n\t                        }\n\n\t                        if(adjustments.width && ((adjustments.left || correctedLeft) + adjustments.width <= oldModel.width * zoomLevel)) {\n\t                            newModel.set("width", Math.round(adjustments.width / zoomLevel));\n\t                        }\n\n\t                        if(adjustments.height && ((adjustments.top || correctedTop) + adjustments.height <= oldModel.height * zoomLevel)) {\n\t                            newModel.set("height", Math.round(adjustments.height / zoomLevel));\n\t                        }\n\n\t                        if(adjustments.top || adjustments.left) {\n\t                            that._adjustTopLeft(adjustments.top, adjustments.left);\n\t                        }\n\t                    }\n\t                });\n\t            },\n\t            _adjustTopLeft: function (top, left, compare) {\n\t                var that = this,\n\t                    compareModel = compare || that.formWidget._model,\n\t                    newModel = that.formWidget._model,\n\t                    oldModel = that._model,\n\t                    zoomLevel = that.imageeditor.getZoomLevel();\n\n\t                if(top >= 0 && (top / zoomLevel) + compareModel.height <= oldModel.height) {\n\t                    newModel.set("top", Math.round(top / zoomLevel));\n\t                }\n\n\t                if(left >= 0 && (left / zoomLevel) + compareModel.width <= oldModel.width) {\n\t                    newModel.set("left", Math.round(left / zoomLevel));\n\t                }\n\t            },\n\t            onChange: function (ev) {\n\t                var that = this,\n\t                    zoomLevel = that.imageeditor.getZoomLevel(),\n\t                    newModel = ev.sender._model,\n\t                    oldModel = that._model,\n\t                    maxWidth = oldModel.width,\n\t                    maxHeight = oldModel.height,\n\t                    originalRatio = oldModel.width + ":" + oldModel.height,\n\t                    gcd = that._gcd(oldModel.width, oldModel.height);\n\n\t                originalRatio = oldModel.width/gcd + ":" + oldModel.height/gcd;\n\n\t                if(ev.field === "aspectRatio" && ev.value === "originalRatio") {\n\t                    newModel.set("top", 0);\n\t                    newModel.set("left", 0);\n\t                    newModel.set("width", oldModel.width);\n\t                    newModel.set("height", oldModel.height);\n\t                    newModel.set("orientation", oldModel.orientation);\n\t                } else if (ev.field === "orientation") {\n\t                    var tempModel = extend({}, newModel, {\n\t                        width: newModel.height,\n\t                        height: newModel.width\n\t                    });\n\n\t                    var newSize = that._calcSize(tempModel, originalRatio, maxWidth, maxHeight);\n\n\t                    newModel.set("width", newSize.width);\n\t                    newModel.set("height", newSize.height);\n\t                } else if(newModel.lockAspectRatio) {\n\t                    var force = ev.field;\n\t                    var size = that._calcSize(newModel, originalRatio, maxWidth, maxHeight, force);\n\t                    newModel.set("width", size.width);\n\t                    newModel.set("height", size.height);\n\t                }\n\n\t                var width = Math.round(newModel.width * zoomLevel);\n\t                var height = Math.round(newModel.height * zoomLevel);\n\t                var top = Math.round(newModel.top * zoomLevel);\n\t                var left = Math.round(newModel.left * zoomLevel);\n\t                var borderWidth = parseInt(that.cropElement.css("border-top-width"), 10);\n\n\t                that.cropElement.css({\n\t                    top: top,\n\t                    left: left,\n\t                    width: width,\n\t                    height: height,\n\t                    backgroundPosition: kendo.format("-{0}px -{1}px", left + borderWidth, top + borderWidth)\n\t                });\n\t            },\n\t            _calcSize: function (model, originalRatio, maxWidth, maxHeight, force) {\n\t                var width = Math.min(model.width, maxWidth),\n\t                    height = Math.min(model.height, maxHeight),\n\t                    isPortrait = model.orientation === "portrait",\n\t                    ratios = model.aspectRatio;\n\n\t                if(ratios.indexOf(":") < 0) {\n\t                    ratios = originalRatio;\n\t                }\n\n\t                ratios = ratios.split(":").map(function (value) {\n\t                    return parseInt(value, 10);\n\t                });\n\n\t                var wRatio = isPortrait ? Math.min(ratios[0], ratios[1]) : Math.max(ratios[0], ratios[1]);\n\t                var hRatio = !isPortrait ? Math.min(ratios[0], ratios[1]) : Math.max(ratios[0], ratios[1]);\n\t                var expectedRatio = round(wRatio/hRatio);\n\t                var realRatio = round(width/height);\n\n\t                var sizeByRatio = {\n\t                    width: Math.round(height * expectedRatio),\n\t                    height: Math.round(width / expectedRatio)\n\t                };\n\n\t                if (force === "width") {\n\t                    return {\n\t                        width: width,\n\t                        height: sizeByRatio.height\n\t                    };\n\t                }\n\n\t                if (force === "height") {\n\t                    return {\n\t                        width: sizeByRatio.width,\n\t                        height: height\n\t                    };\n\t                }\n\n\t                if (realRatio > expectedRatio) {\n\t                    width = sizeByRatio.width;\n\t                } else if (realRatio < expectedRatio){\n\t                    height = sizeByRatio.height;\n\t                }\n\n\t                return {\n\t                    width: width,\n\t                    height: height\n\t                };\n\t            },\n\t            _gcd: function (a, b) {\n\t                return (b === 0) ? a : this._gcd (b, a%b);\n\t            },\n\t            destroy: function () {\n\t                kendo.destroy(this._canvasUI);\n\t                this._canvasUI.remove();\n\t                Pane.fn.destroy.call(this);\n\t            }\n\t        });\n\n\t        var ResizePane = Pane.extend({\n\t            init: function (imageeditor) {\n\t                Pane.fn.init.call(this, imageeditor);\n\t                this.buildResizeModel();\n\t            },\n\t            confirm: function () {\n\t                var that = this,\n\t                    originalWidth = that._model.width,\n\t                    originalHeight = that._model.height,\n\t                    model = that.formWidget._model.toJSON();\n\n\t                if(model.measure === "percents") {\n\t                    model.width = originalWidth * (model.width / 100);\n\t                    model.height = originalHeight * (model.height / 100);\n\t                }\n\n\t                that.imageeditor.executeCommand({command: "ResizeImageEditorCommand", options: model });\n\t                that.destroy();\n\t            },\n\t            formSettings: function () {\n\t                var that = this,\n\t                    resizeMessages = that.imageeditor.options.messages.panes.resize,\n\t                    commonMessages = that.imageeditor.options.messages.common;\n\n\t                return {\n\t                    formData: that._model,\n\t                    change: proxy(that.onChange, that),\n\t                    items: [{\n\t                        type: "group",\n\t                        label: resizeMessages.title || "Resize image",\n\t                        layout: "grid",\n\t                        grid: { cols: 2, gutter: "0 8px" },\n\t                        items: [{\n\t                            label: commonMessages.width || "Width:",\n\t                            field: "width",\n\t                            attributes: { style: "max-width: 100px;" },\n\t                            editor: "NumericTextBox",\n\t                            editorOptions: {\n\t                                format: "n0",\n\t                                min: 0\n\t                            },\n\t                            colSpan: 1\n\t                        }, {\n\t                            field: "measureW",\n\t                            editor: "DropDownList",\n\t                            attributes: { style: "max-width: 100px;" },\n\t                            label: { text: "&nbsp;", encoded: false },\n\t                            editorOptions: {\n\t                                dataTextField: "text",\n\t                                dataValueField: "value",\n\t                                dataSource: [\n\t                                    { text: resizeMessages.pixels || "Pixels", value: "pixels" },\n\t                                    { text: resizeMessages.percents || "Percents", value: "percents" }\n\t                                ]\n\t                            },\n\t                            colSpan: 1\n\t                        }, {\n\t                            label: commonMessages.height || "Height:",\n\t                            field: "height",\n\t                            attributes: { style: "max-width: 100px;" },\n\t                            editor: "NumericTextBox",\n\t                            editorOptions: {\n\t                                format: "n0",\n\t                                min: 0\n\t                            },\n\t                            colSpan: 1\n\t                        }, {\n\t                            field: "measureH",\n\t                            label: { text: "&nbsp;", encoded: false },\n\t                            attributes: { style: "max-width: 100px;" },\n\t                            editor: "DropDownList",\n\t                            editorOptions: {\n\t                                dataTextField: "text",\n\t                                dataValueField: "value",\n\t                                dataSource: [\n\t                                    { text: resizeMessages.pixels || "Pixels", value: "pixels" },\n\t                                    { text: resizeMessages.percents || "Percents", value: "percents" }\n\t                                ]\n\t                            },\n\t                            colSpan: 1\n\t                        }, {\n\t                            label: commonMessages.lockAspectRatio || "Lock aspect ratio",\n\t                            field: "lockAspectRatio",\n\t                            colSpan: 2\n\t                        }]\n\t                    }]\n\t                };\n\t            },\n\t            buildResizeModel: function () {\n\t                var that = this,\n\t                    imageeditor = that.imageeditor,\n\t                    canvas = imageeditor.getCanvasElement(),\n\t                    width = canvas.width,\n\t                    height = canvas.height;\n\n\t                    that._model = {\n\t                        width: width,\n\t                        height: height,\n\t                        measure: "pixels",\n\t                        measureW: "pixels",\n\t                        measureH: "pixels",\n\t                        lockAspectRatio: true,\n\t                        ratio: round(width/height)\n\t                    };\n\t            },\n\t            onChange: function (ev) {\n\t                var that = this,\n\t                    newModel = ev.sender._model,\n\t                    aspectRatioLocked = newModel.lockAspectRatio;\n\n\t                if (ev.field === "measureW" || ev.field === "measureH") {\n\t                    newModel.set("measureW", ev.value);\n\t                    newModel.set("measureH", ev.value);\n\t                    newModel.set("measure", ev.value);\n\t                } else if (ev.field === "measure") {\n\t                    that.resetNumericsTo(ev.value);\n\t                } else if (ev.field === "width" && aspectRatioLocked && !that._preventChange) {\n\t                    newModel.set("height", newModel.width / newModel.ratio);\n\t                } else if (ev.field === "height" && aspectRatioLocked && !that._preventChange) {\n\t                    newModel.set("width", newModel.height * newModel.ratio);\n\t                }\n\n\t                newModel.set("ratio", round(newModel.width/newModel.height));\n\t            },\n\t            resetNumericsTo: function (type) {\n\t                var that = this,\n\t                    originalWidth = that._model.width,\n\t                    originalHeight = that._model.height,\n\t                    formWidget = that.formWidget,\n\t                    model = formWidget._model,\n\t                    widthNumeric = formWidget.element.find("[name=width]").data("kendoNumericTextBox"),\n\t                    heightNumeric = formWidget.element.find("[name=height]").data("kendoNumericTextBox"),\n\t                    isPercent = type === "percents",\n\t                    options = {\n\t                        percents: {\n\t                            format: "#\\\\\\%"\n\t                        },\n\t                        pixels: {\n\t                            format: "n0"\n\t                        }\n\t                    };\n\n\n\n\t                widthNumeric.setOptions(options[type]);\n\t                heightNumeric.setOptions(options[type]);\n\n\t                that._preventChange = true;\n\t                model.set("width", isPercent ? (originalWidth / widthNumeric.value()) * 100 : originalWidth * (widthNumeric.value() / 100));\n\t                model.set("height", isPercent ? (originalHeight / heightNumeric.value()) * 100 : originalHeight * (heightNumeric.value() / 100));\n\t                that._preventChange = false;\n\t            }\n\t        });\n\n\t        extend(kendo.ui.imageeditor, {\n\t            ImageEditorPane: Pane,\n\t            panes: {\n\t                crop: CropPane,\n\t                resize: ResizePane\n\t            }\n\t    });\n\n\t    })(window.kendo.jQuery);\n\n\t    return window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ }),\n\n/***/ 1038:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.form */ "./node_modules/@progress/kendo-ui/js/kendo.form.js");\n\n/***/ }),\n\n/***/ 1039:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.buttongroup */ "./node_modules/@progress/kendo-ui/js/kendo.buttongroup.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/imageeditor/pane.js?')},"./node_modules/@progress/kendo-ui/js/imageeditor/toolbar.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/imageeditor/toolbar.js ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1040);\n\tmodule.exports = __webpack_require__(1040);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 967:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.dropdownlist */ "./node_modules/@progress/kendo-ui/js/kendo.dropdownlist.js");\n\n/***/ }),\n\n/***/ 1030:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.toolbar */ "./node_modules/@progress/kendo-ui/js/kendo.toolbar.js");\n\n/***/ }),\n\n/***/ 1040:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1030), __webpack_require__(967)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        extend = $.extend,\n\t        proxy = $.proxy,\n\t        ToolBar = kendo.ui.ToolBar,\n\t        Item = kendo.toolbar.Item,\n\n\t        CLICK = "click",\n\t        DROPDOWNCHANGE = "dropDownChange",\n\t        ACTION = "action";\n\n\t    var ImageEditorToolBar = ToolBar.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            that._extendOptions(options);\n\n\t            ToolBar.fn.init.call(that, element, options);\n\n\t            that._attachEvents();\n\t            that.toggleTools();\n\t        },\n\n\t        events: ToolBar.fn.events.concat([\n\t            DROPDOWNCHANGE,\n\t            ACTION\n\t        ]),\n\n\t        defaultTools: {\n\t            open: { type: "button", icon: "upload", name: "open", command: "OpenImageEditorCommand", showText: "overflow" },\n\t            save: { type: "button", icon: "download", name: "save", command: "SaveImageEditorCommand", showText: "overflow", toggleCondition:"canExport" },\n\t            separator: { type: "separator" },\n\t            undo: { type: "button", icon: "undo", name: "undo", command: "UndoImageEditorCommand", showText: "overflow", toggleCondition:"undo" },\n\t            redo: { type: "button", icon: "redo", name: "redo", command: "RedoImageEditorCommand", showText: "overflow", toggleCondition:"redo" },\n\t            separator1: { type: "separator" },\n\t            crop: { type: "button", icon: "crop", name: "crop", command: "OpenPaneImageEditorCommand", options: "crop", showText: "overflow", toggleCondition:"canExport"  },\n\t            resize: { type: "button", icon: "image-resize", name: "resize", command: "OpenPaneImageEditorCommand", options: "resize", showText: "overflow", toggleCondition:"canExport"  },\n\t            zoomIn: { type: "button", icon: "zoom-in", name: "zoomIn", command: "ZoomImageEditorCommand", showText: "overflow", options: "zoomIn", toggleCondition:"enable"  },\n\t            zoomOut: { type: "button", icon: "zoom-out", name: "zoomOut", command: "ZoomImageEditorCommand", showText: "overflow", options: "zoomOut", toggleCondition:"enable"  },\n\t            zoomDropdown: { type: "imageEditorZoomDropDown", name: "zoomDropdown", command: "ZoomImageEditorCommand", text: "Zoom options", toggleCondition:"enable" , items: [\n\t                { name: "zoomActualSize", icon: "zoom-actual-size", text: "Show actual size", options: "actualSize" },\n\t                { name: "zoomFitToScreen", icon: "zoom-best-fit", text: "Fit to screen", options: "fitToScreen" }\n\t            ]}\n\t        },\n\n\t        _attachEvents: function() {\n\t            var that = this;\n\n\t            that.bind(DROPDOWNCHANGE, proxy(that._dropDownChange, that));\n\t            that.bind(CLICK, proxy(that._click, that));\n\t        },\n\n\t        _extendOptions: function(options) {\n\t            var that = this,\n\t                tools = options.items ? options.items : Object.keys(that.defaultTools);\n\n\t            that.options = options;\n\n\t            that.options.items = that._extendToolsOptions(tools);\n\t        },\n\n\t        _extendToolsOptions: function(tools) {\n\t            var that = this,\n\t                messages = that.options.messages;\n\n\t            if (!tools.length) {\n\t                return;\n\t            }\n\n\t            return tools.map(function (tool) {\n\t                var isBuiltInTool =  $.isPlainObject(tool) && Object.keys(tool).length === 1 && tool.name,\n\t                    toolOptions, text;\n\n\t                tool = isBuiltInTool ? tool.name : tool;\n\t                toolOptions = $.isPlainObject(tool) ? tool : extend({}, that.defaultTools[tool]);\n\n\t                text = messages[toolOptions.name] || toolOptions.text;\n\n\t                kendo.deepExtend(toolOptions, {\n\t                    id: toolOptions.name + "-" + kendo.guid(),\n\t                    name: toolOptions.name,\n\t                    text: text,\n\t                    attributes: {\n\t                        "aria-label": text,\n\t                        "title": text,\n\t                        "data-command": toolOptions.command,\n\t                        "data-options": toolOptions.options,\n\t                        "data-toggle": toolOptions.toggleCondition\n\t                    },\n\t                    overflow: toolOptions.overflow\n\t                });\n\n\t                if(toolOptions.type === "imageEditorZoomDropDown") {\n\t                    toolOptions.items = that._extendToolsOptions(toolOptions.items);\n\t                }\n\n\t                return toolOptions;\n\t            }, that);\n\t        },\n\n\t        _click: function(ev) {\n\t            var command = $(ev.target).data("command"),\n\t                options = $(ev.target).data("options");\n\n\t            if (!command) {\n\t                return;\n\t            }\n\n\t            this.action({\n\t                command: command,\n\t                options: options\n\t            });\n\t        },\n\n\t        _dropDownChange: function (ev) {\n\t            if (!ev.command) {\n\t                return;\n\t            }\n\n\t            this.action({\n\t                command: ev.command,\n\t                options: ev.options\n\t            });\n\t        },\n\n\t        action: function (args) {\n\t            this.trigger(ACTION, args);\n\t        },\n\n\t        toggleTools: function (conditions) {\n\t            var that = this,\n\t                tools = that.element.find("[data-toggle]");\n\n\t            tools.each(function(index, elm){\n\t                var tool = $(elm),\n\t                    widget = null,\n\t                    condition = tool.data("toggle"),\n\t                    toToggle = conditions && conditions[condition];\n\n\t                if (tool.is("[data-role]")) {\n\t                    widget = kendo.widgetInstance(tool);\n\t                }\n\n\t                if (widget && widget.enable){\n\t                    widget.enable(toToggle || false);\n\t                } else {\n\t                    that.enable(tool, toToggle);\n\t                }\n\t            });\n\t        },\n\n\t        destroy: function () {\n\t            var that = this;\n\n\t            if (that.zoomDropdown) {\n\t                that.zoomDropdown.destroy();\n\t            }\n\n\t            ToolBar.fn.destroy.call(this);\n\t        }\n\t    });\n\n\t    var ImageEditorZoomDropDown = Item.extend({\n\t        init: function(options, toolbar) {\n\t            var that = this,\n\t                element =  $("<div></div>"),\n\t                input = $("<input />").attr(options.attributes),\n\t                template = "<span class=\\"k-icon k-i-#:icon#\\"></span> #:text#";\n\n\t                that.element = element;\n\t                that.input = input;\n\t                that.toolbar = toolbar;\n\n\t                that.dropDown = new ui.DropDownList(that.input, {\n\t                    optionLabel: { text: options.text, icon: "" },\n\t                    dataTextField: "text",\n\t                    dataSource: options.items,\n\t                    template: template,\n\t                    change: proxy(that._change, that)\n\t                });\n\n\t                that.element.append(that.dropDown.wrapper);\n\t                that.dropDown.list.find(".k-list-optionlabel").hide();\n\n\t                that.toolbar.zoomDropdown = that;\n\t        },\n\t        _change: function (ev) {\n\t            var that = this;\n\t            that.toolbar.trigger(DROPDOWNCHANGE, {\n\t                command: ev.sender.element.data("command"),\n\t                options: ev.sender.dataItem().options\n\t            });\n\t        },\n\t        destroy: function(){\n\t            this.dropDown.destroy();\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("imageEditorZoomDropDown", ImageEditorZoomDropDown);\n\n\t    extend(kendo.ui, {\n\t        imageeditor: {\n\t            ToolBar: ImageEditorToolBar,\n\t            ZoomDropDown: ImageEditorZoomDropDown\n\t        }\n\t    });\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/imageeditor/toolbar.js?')}}]);