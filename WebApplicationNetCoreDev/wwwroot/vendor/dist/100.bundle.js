(window.webpackJsonp = window.webpackJsonp || []).push([
  [100], {
    "./node_modules/@progress/kendo-ui/js/kendo.mobile.listview.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.mobile.listview.js ***!
  \*********************************************************************/
/*! no static exports found */function(module, exports, __webpack_require__) {
      eval(
        'module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1276);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1027:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ "./node_modules/@progress/kendo-ui/js/kendo.data.js");\n\n/***/ }),\n\n/***/ 1056:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.userevents */ "./node_modules/@progress/kendo-ui/js/kendo.userevents.js");\n\n/***/ }),\n\n/***/ 1262:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.mobile.button */ "./node_modules/@progress/kendo-ui/js/kendo.mobile.button.js");\n\n/***/ }),\n\n/***/ 1276:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1027), __webpack_require__(1056), __webpack_require__(1262) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "mobile.listview",\n\t    name: "ListView",\n\t    category: "mobile",\n\t    description: "The Kendo Mobile ListView widget is used to display flat or grouped list of items.",\n\t    depends: [ "data", "userevents", "mobile.button" ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        Node = window.Node,\n\t        mobile = kendo.mobile,\n\t        ui = mobile.ui,\n\t        outerHeight = kendo._outerHeight,\n\t        DataSource = kendo.data.DataSource,\n\t        Widget = ui.DataBoundWidget,\n\t        ITEM_SELECTOR = ".km-list > li, > li:not(.km-group-container)",\n\t        HIGHLIGHT_SELECTOR = ".km-listview-link, .km-listview-label",\n\t        ICON_SELECTOR = "[" + kendo.attr("icon") + "]",\n\t        proxy = $.proxy,\n\t        attrValue = kendo.attrValue,\n\t        GROUP_CLASS = "km-group-title",\n\t        ACTIVE_CLASS = "km-state-active",\n\t        GROUP_WRAPPER = \'<div class="\' + GROUP_CLASS + \'"><div class="km-text"></div></div>\',\n\t        GROUP_TEMPLATE = kendo.template(\'<li><div class="\' + GROUP_CLASS + \'"><div class="km-text">#= this.headerTemplate(data) #</div></div><ul>#= kendo.render(this.template, data.items)#</ul></li>\'),\n\t        WRAPPER = \'<div class="km-listview-wrapper"></div>\',\n\t        SEARCH_TEMPLATE = kendo.template(\'<form class="km-filter-form"><div class="km-filter-wrap"><input type="search" placeholder="#=placeholder#"/><a href="\\\\#" class="km-filter-reset" title="Clear"><span class="km-icon km-clear"></span><span class="km-text">Clear</span></a></div></form>\'),\n\t        NS = ".kendoMobileListView",\n\t        STYLED = "styled",\n\t        DATABOUND = "dataBound",\n\t        DATABINDING = "dataBinding",\n\t        ITEM_CHANGE = "itemChange",\n\t        CLICK = "click",\n\t        CHANGE = "change",\n\t        PROGRESS = "progress",\n\t        FUNCTION = "function",\n\n\t        whitespaceRegExp = /^\\s+$/,\n\t        buttonRegExp = /button/;\n\n\t    function whitespace() {\n\t        return this.nodeType === Node.TEXT_NODE && this.nodeValue.match(whitespaceRegExp);\n\t    }\n\n\t    function addIcon(item, icon) {\n\t        if (icon && !item[0].querySelector(".km-icon")) {\n\t            item.prepend(\'<span class="km-icon km-\' + icon + \'"/>\');\n\t        }\n\t    }\n\n\t    function enhanceItem(item) {\n\t        addIcon(item, attrValue(item, "icon"));\n\t        addIcon(item, attrValue(item.children(ICON_SELECTOR), "icon"));\n\t    }\n\n\t    function enhanceLinkItem(item) {\n\t        var parent = item.parent(),\n\t            itemAndDetailButtons = item.add(parent.children(kendo.roleSelector("detailbutton"))),\n\t            otherNodes = parent.contents().not(itemAndDetailButtons).not(whitespace);\n\n\t        if (otherNodes.length) {\n\t            return;\n\t        }\n\n\t        item.addClass("km-listview-link")\n\t            .attr(kendo.attr("role"), "listview-link");\n\n\t        addIcon(item, attrValue(parent, "icon"));\n\t        addIcon(item, attrValue(item, "icon"));\n\t    }\n\n\t    function enhanceCheckBoxItem(label) {\n\t        if (!label[0].querySelector("input[type=checkbox],input[type=radio]")) {\n\t            return;\n\t        }\n\n\t        var item = label.parent();\n\n\t        if (item.contents().not(label).not(function() { return this.nodeType == 3; })[0]) {\n\t            return;\n\t        }\n\n\t        label.addClass("km-listview-label");\n\n\t        label.children("[type=checkbox],[type=radio]").addClass("km-widget km-icon km-check");\n\t    }\n\n\t    function putAt(element, top) {\n\t        $(element).css(\'transform\', \'translate3d(0px, \' + top + \'px, 0px)\');\n\t    }\n\n\t    var HeaderFixer = kendo.Class.extend({\n\t        init: function(listView) {\n\t            var scroller = listView.scroller();\n\n\t            if (!scroller) {\n\t                return;\n\t            }\n\n\t            this.options = listView.options;\n\t            this.element = listView.element;\n\t            this.scroller = listView.scroller();\n\t            this._shouldFixHeaders();\n\n\t            var headerFixer = this;\n\n\t            var cacheHeaders = function() {\n\t                headerFixer._cacheHeaders();\n\t            };\n\n\t            listView.bind("resize", cacheHeaders);\n\n\t            listView.bind(STYLED, cacheHeaders);\n\t            listView.bind(DATABOUND, cacheHeaders);\n\n\t            this._scrollHandler = function(e) {\n\t                headerFixer._fixHeader(e);\n\t            };\n\t            scroller.bind("scroll", this._scrollHandler);\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\t            if (that.scroller) {\n\t                that.scroller.unbind("scroll", that._scrollHandler);\n\t            }\n\t        },\n\n\t        _fixHeader: function(e) {\n\t            if (!this.fixedHeaders) {\n\t                return;\n\t            }\n\n\t            var i = 0,\n\t                scroller = this.scroller,\n\t                headers = this.headers,\n\t                scrollTop = e.scrollTop,\n\t                headerPair,\n\t                offset,\n\t                header;\n\n\t            do {\n\t                headerPair = headers[i++];\n\t                if (!headerPair) {\n\t                    header = $("<div />");\n\t                    break;\n\t                }\n\t                offset = headerPair.offset;\n\t                header = headerPair.header;\n\t            } while (offset + 1 > scrollTop);\n\n\t            if (this.currentHeader != i) {\n\t                scroller.fixedContainer.html(header.clone());\n\t                this.currentHeader = i;\n\t            }\n\t        },\n\n\t        _shouldFixHeaders: function() {\n\t            this.fixedHeaders = this.options.type === "group" && this.options.fixedHeaders;\n\t        },\n\n\t        _cacheHeaders: function() {\n\t            this._shouldFixHeaders();\n\n\t            if (!this.fixedHeaders) {\n\t                return;\n\t            }\n\n\t            var headers = [], offset = this.scroller.scrollTop;\n\n\t            this.element.find("." + GROUP_CLASS).each(function(_, header) {\n\t                header = $(header);\n\t                headers.unshift({\n\t                    offset: header.position().top + offset,\n\t                    header: header\n\t                });\n\t            });\n\n\t            this.headers = headers;\n\t            this._fixHeader({ scrollTop: offset });\n\t        }\n\t    });\n\n\t    var DEFAULT_PULL_PARAMETERS = function() {\n\t        return { page: 1 };\n\t    };\n\n\t    var RefreshHandler = kendo.Class.extend({\n\t        init: function(listView) {\n\t            var handler = this,\n\t                options = listView.options,\n\t                scroller = listView.scroller(),\n\t                pullParameters = options.pullParameters || DEFAULT_PULL_PARAMETERS;\n\n\t            this.listView = listView;\n\t            this.scroller = scroller;\n\n\t            listView.bind("_dataSource", function(e) {\n\t                handler.setDataSource(e.dataSource);\n\t            });\n\n\t            scroller.setOptions({\n\t                pullToRefresh: true,\n\t                pull: function() {\n\t                    if (!handler._pulled) {\n\t                        handler._pulled = true;\n\t                        handler.dataSource.read(pullParameters.call(listView, handler._first));\n\t                    }\n\t                },\n\t                messages: {\n\t                    pullTemplate: options.messages.pullTemplate,\n\t                    releaseTemplate: options.messages.releaseTemplate,\n\t                    refreshTemplate: options.messages.refreshTemplate\n\t                }\n\t            });\n\t        },\n\n\t        setDataSource: function(dataSource) {\n\t            var handler = this;\n\n\t            this._first = dataSource.view()[0];\n\t            this.dataSource = dataSource;\n\n\t            dataSource.bind("change", function() {\n\t                handler._change();\n\t            });\n\n\t            dataSource.bind("error", function() {\n\t                handler._change();\n\t            });\n\t        },\n\n\t        _change: function() {\n\t            var scroller = this.scroller,\n\t                dataSource = this.dataSource;\n\n\t            if (this._pulled) {\n\t                scroller.pullHandled();\n\t            }\n\n\t            if (this._pulled || !this._first) {\n\t                var view = dataSource.view();\n\n\t                if (view[0]) {\n\t                    this._first = view[0];\n\t                }\n\t            }\n\n\t            this._pulled = false;\n\t        }\n\t    });\n\n\t    var VirtualList = kendo.Observable.extend({\n\t        init: function(options) {\n\t            var list = this;\n\n\t            kendo.Observable.fn.init.call(list);\n\n\t            list.buffer = options.buffer;\n\t            list.height = options.height;\n\t            list.item = options.item;\n\t            list.items = [];\n\t            list.footer = options.footer;\n\n\t            list.buffer.bind("reset", function() {\n\t                list.refresh();\n\t            });\n\n\t        },\n\n\t        refresh: function() {\n\t            var buffer = this.buffer,\n\t                items = this.items,\n\t                endReached = false;\n\n\t            while(items.length) {\n\t                items.pop().destroy();\n\t            }\n\n\t            this.offset = buffer.offset;\n\n\t            var itemConstructor = this.item,\n\t                prevItem,\n\t                item;\n\n\t            for (var idx = 0; idx < buffer.viewSize; idx ++) {\n\t                if (idx === buffer.total()) {\n\t                    endReached = true;\n\t                    break;\n\t                }\n\t                item = itemConstructor(this.content(this.offset + items.length));\n\t                item.below(prevItem);\n\t                prevItem = item;\n\t                items.push(item);\n\t            }\n\n\t            this.itemCount = items.length;\n\n\t            this.trigger("reset");\n\n\t            this._resize();\n\n\t            if (endReached) {\n\t                this.trigger("endReached");\n\t            }\n\t        },\n\n\t        totalHeight: function() {\n\t            if (!this.items[0]) {\n\t                return 0;\n\t            }\n\n\t            var list = this,\n\t                items = list.items,\n\t                top = items[0].top,\n\t                bottom = items[items.length - 1].bottom,\n\t                averageItemHeight = (bottom - top) / list.itemCount,\n\t                remainingItemsCount = list.buffer.length - list.offset - list.itemCount;\n\n\t            return (this.footer ? this.footer.height : 0) + bottom + remainingItemsCount * averageItemHeight;\n\t        },\n\n\t        batchUpdate: function(top) {\n\t            var height = this.height(),\n\t                items = this.items,\n\t                item,\n\t                initialOffset = this.offset;\n\n\t            if (!items[0]) {\n\t                return;\n\t            }\n\n\t            if (this.lastDirection) { // scrolling up\n\t                while(items[items.length - 1].bottom > top + height * 2) {\n\t                    if (this.offset === 0) {\n\t                        break;\n\t                    }\n\n\t                    this.offset --;\n\t                    item = items.pop();\n\t                    item.update(this.content(this.offset));\n\t                    item.above(items[0]);\n\t                    items.unshift(item);\n\t                }\n\t            } else { // scrolling down\n\t                while (items[0].top < top - height) {\n\t                    var nextIndex = this.offset + this.itemCount; // here, it should be offset + 1 + itemCount - 1.\n\n\t                    if (nextIndex === this.buffer.total()) {\n\t                        this.trigger("endReached");\n\t                        break;\n\t                    }\n\n\t                    if (nextIndex === this.buffer.length) {\n\t                        break;\n\t                    }\n\n\t                    item = items.shift();\n\t                    item.update(this.content(this.offset + this.itemCount));\n\t                    item.below(items[items.length - 1]);\n\t                    items.push(item);\n\t                    this.offset ++;\n\t                }\n\t            }\n\n\t            if (initialOffset !== this.offset) {\n\t                this._resize();\n\t            }\n\t        },\n\n\t        update: function(top) {\n\t            var list = this,\n\t                items = this.items,\n\t                item,\n\t                firstItem,\n\t                lastItem,\n\t                height = this.height(),\n\t                itemCount = this.itemCount,\n\t                padding = height / 2,\n\t                up = (this.lastTop || 0) > top,\n\t                topBorder = top - padding,\n\t                bottomBorder = top + height + padding;\n\n\t            if (!items[0]) {\n\t                return;\n\t            }\n\n\t            this.lastTop = top;\n\t            this.lastDirection = up;\n\n\t            if (up) { // scrolling up\n\t               if (items[0].top > topBorder &&  // needs reorder\n\t                   items[items.length - 1].bottom > bottomBorder + padding && // enough padding below\n\t                   this.offset > 0 // we are not at the top\n\t                  )\n\t               {\n\t                    this.offset --;\n\t                    item = items.pop();\n\t                    firstItem = items[0];\n\t                    item.update(this.content(this.offset));\n\t                    items.unshift(item);\n\n\t                    item.above(firstItem);\n\t                    list._resize();\n\t               }\n\t            } else { // scrolling down\n\t                if (\n\t                    items[items.length - 1].bottom < bottomBorder && // needs reorder\n\t                    items[0].top < topBorder - padding // enough padding above\n\t                )\n\t                {\n\t                    var nextIndex = this.offset + itemCount; // here, it should be offset + 1 + itemCount - 1.\n\n\t                    if (nextIndex === this.buffer.total()) {\n\t                        this.trigger("endReached");\n\t                    } else if (nextIndex !== this.buffer.length) {\n\t                        item = items.shift();\n\t                        lastItem = items[items.length - 1];\n\t                        items.push(item);\n\t                        item.update(this.content(this.offset + this.itemCount));\n\t                        list.offset ++;\n\n\t                        item.below(lastItem);\n\t                        list._resize();\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        content: function(index) {\n\t            return this.buffer.at(index);\n\t        },\n\n\t        destroy: function() {\n\t            this.unbind();\n\t        },\n\n\t        _resize: function() {\n\t            var items = this.items,\n\t                top = 0,\n\t                bottom = 0,\n\t                firstItem = items[0],\n\t                lastItem = items[items.length - 1];\n\n\t            if (firstItem) {\n\t                top = firstItem.top;\n\t                bottom = lastItem.bottom;\n\t            }\n\n\t            this.trigger("resize", { top: top, bottom: bottom });\n\n\t            if (this.footer) {\n\t                this.footer.below(lastItem);\n\t            }\n\t        }\n\t    });\n\n\t    // export for testing purposes\n\t    kendo.mobile.ui.VirtualList = VirtualList;\n\n\t    var VirtualListViewItem = kendo.Class.extend({\n\t        init: function(listView, dataItem) {\n\t            var element = listView.append([dataItem], true)[0],\n\t                height = element.offsetHeight;\n\n\t            $.extend(this, {\n\t                top: 0,\n\t                element: element,\n\t                listView: listView,\n\t                height: height,\n\t                bottom: height\n\t            });\n\t        },\n\n\t        update: function(dataItem) {\n\t            this.element = this.listView.setDataItem(this.element, dataItem);\n\t        },\n\n\t        above: function(item) {\n\t            if (item) {\n\t                this.height = this.element.offsetHeight;\n\t                this.top = item.top - this.height;\n\t                this.bottom = item.top;\n\t                putAt(this.element, this.top);\n\t            }\n\t        },\n\n\t        below: function(item) {\n\t            if (item) {\n\t                this.height = this.element.offsetHeight;\n\t                this.top = item.bottom;\n\t                this.bottom = this.top + this.height;\n\t                putAt(this.element, this.top);\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            kendo.destroy(this.element);\n\t            $(this.element).remove();\n\t        }\n\t    });\n\n\t    var LOAD_ICON = \'<div><span class="km-icon"></span><span class="km-loading-left"></span><span class="km-loading-right"></span></div>\';\n\t    var VirtualListViewLoadingIndicator = kendo.Class.extend({\n\t        init: function(listView) {\n\t            this.element = $(\'<li class="km-load-more km-scroller-refresh" style="display: none"></li>\').appendTo(listView.element);\n\t            this._loadIcon = $(LOAD_ICON).appendTo(this.element);\n\t        },\n\n\t        enable: function() {\n\t            this.element.show();\n\t            this.height = outerHeight(this.element, true);\n\t        },\n\n\t        disable: function() {\n\t            this.element.hide();\n\t            this.height = 0;\n\t        },\n\n\t        below: function(item) {\n\t            if (item) {\n\t                this.top = item.bottom;\n\t                this.bottom = this.height + this.top;\n\t                putAt(this.element, this.top);\n\t            }\n\t        }\n\t    });\n\n\t    var VirtualListViewPressToLoadMore = VirtualListViewLoadingIndicator.extend({\n\t        init: function(listView, buffer) {\n\n\t            this._loadIcon = $(LOAD_ICON).hide();\n\t            this._loadButton = $(\'<a class="km-load">\' + listView.options.messages.loadMoreText + \'</a>\').hide();\n\t            this.element = $(\'<li class="km-load-more" style="display: none"></li>\').append(this._loadIcon).append(this._loadButton).appendTo(listView.element);\n\n\t            var loadMore = this;\n\n\t            this._loadButton.kendoMobileButton().data("kendoMobileButton").bind("click", function() {\n\t                loadMore._hideShowButton();\n\t                buffer.next();\n\t            });\n\n\t            buffer.bind("resize", function() {\n\t                loadMore._showLoadButton();\n\t            });\n\n\t            this.height = outerHeight(this.element, true);\n\t            this.disable();\n\t        },\n\n\t        _hideShowButton: function() {\n\t            this._loadButton.hide();\n\t            this.element.addClass("km-scroller-refresh");\n\t            this._loadIcon.css(\'display\', \'block\');\n\t        },\n\n\t        _showLoadButton: function() {\n\t            this._loadButton.show();\n\t            this.element.removeClass("km-scroller-refresh");\n\t            this._loadIcon.hide();\n\t        }\n\t    });\n\n\t    var VirtualListViewItemBinder = kendo.Class.extend({\n\t        init: function(listView) {\n\t            var binder = this;\n\n\t            this.chromeHeight = outerHeight(listView.wrapper.children().not(listView.element));\n\t            this.listView = listView;\n\t            this.scroller = listView.scroller();\n\t            this.options = listView.options;\n\n\t            listView.bind("_dataSource", function(e) {\n\t                binder.setDataSource(e.dataSource, e.empty);\n\t            });\n\n\t            listView.bind("resize", function() {\n\t                if (!binder.list.items.length) {\n\t                    return;\n\t                }\n\n\t                binder.scroller.reset();\n\t                binder.buffer.range(0);\n\t                binder.list.refresh();\n\t            });\n\n\t            this.scroller.makeVirtual();\n\n\t            this._scroll = function(e) {\n\t                binder.list.update(e.scrollTop);\n\t            };\n\t            this.scroller.bind(\'scroll\', this._scroll);\n\t            this._scrollEnd = function(e) {\n\t                binder.list.batchUpdate(e.scrollTop);\n\t            };\n\t            this.scroller.bind(\'scrollEnd\', this._scrollEnd);\n\t        },\n\n\t        destroy: function() {\n\t            this.list.unbind();\n\t            this.buffer.unbind();\n\t            this.scroller.unbind(\'scroll\', this._scroll);\n\t            this.scroller.unbind(\'scrollEnd\', this._scrollEnd);\n\t        },\n\n\t        setDataSource: function(dataSource, empty) {\n\t            var binder = this,\n\t                options = this.options,\n\t                listView = this.listView,\n\t                scroller = listView.scroller(),\n\t                pressToLoadMore = options.loadMore,\n\t                pageSize,\n\t                buffer,\n\t                footer;\n\n\t            this.dataSource = dataSource;\n\n\t            pageSize = dataSource.pageSize() || options.virtualViewSize;\n\n\t            if (!pageSize && !empty) {\n\t                throw new Error("the DataSource does not have page size configured. Page Size setting is mandatory for the mobile listview virtual scrolling to work as expected.");\n\t            }\n\n\t            if (this.buffer) {\n\t                this.buffer.destroy();\n\t            }\n\n\t            buffer = new kendo.data.Buffer(dataSource, Math.floor(pageSize / 2), pressToLoadMore);\n\n\t            if (pressToLoadMore) {\n\t                footer = new VirtualListViewPressToLoadMore(listView, buffer);\n\t            } else {\n\t                footer = new VirtualListViewLoadingIndicator(listView);\n\t            }\n\n\t            if (this.list) {\n\t                this.list.destroy();\n\t            }\n\n\t            var list = new VirtualList({\n\t                buffer: buffer,\n\t                footer: footer,\n\t                item: function(dataItem) { return new VirtualListViewItem(listView, dataItem); },\n\t                height: function() { return scroller.height(); }\n\t            });\n\n\t            list.bind("resize", function() {\n\t                binder.updateScrollerSize();\n\t                listView.updateSize();\n\t            });\n\n\t            list.bind("reset", function() {\n\t                binder.footer.enable();\n\t            });\n\n\t            list.bind("endReached", function() {\n\t                footer.disable();\n\t                binder.updateScrollerSize();\n\t            });\n\n\t            buffer.bind("expand", function() {\n\t                list.lastDirection = false; // expand down\n\t                list.batchUpdate(scroller.scrollTop);\n\t            });\n\n\t            $.extend(this, {\n\t                buffer: buffer,\n\t                scroller: scroller,\n\t                list: list,\n\t                footer: footer\n\t            });\n\t        },\n\n\t        updateScrollerSize: function() {\n\t            this.scroller.virtualSize(0, this.list.totalHeight() + this.chromeHeight);\n\t        },\n\n\t        refresh: function() {\n\t            this.list.refresh();\n\t        },\n\n\t        reset: function() {\n\t            this.buffer.range(0);\n\t            this.list.refresh();\n\t        }\n\t    });\n\n\t    var ListViewItemBinder = kendo.Class.extend({\n\t        init: function(listView) {\n\t            var binder = this;\n\t            this.listView = listView;\n\t            this.options = listView.options;\n\n\t            var itemBinder = this;\n\n\t            this._refreshHandler = function(e) {\n\t                itemBinder.refresh(e);\n\t            };\n\n\t            this._progressHandler = function() {\n\t                listView.showLoading();\n\t            };\n\n\t            listView.bind("_dataSource", function(e) {\n\t                binder.setDataSource(e.dataSource);\n\t            });\n\t        },\n\n\t        destroy: function() {\n\t            this._unbindDataSource();\n\t        },\n\n\t        reset: function() { },\n\n\t        refresh: function(e) {\n\t            var action = e && e.action,\n\t                dataItems = e && e.items,\n\t                listView = this.listView,\n\t                dataSource = this.dataSource,\n\t                prependOnRefresh = this.options.appendOnRefresh,\n\t                view = dataSource.view(),\n\t                groups = dataSource.group(),\n\t                groupedMode = groups && groups[0],\n\t                item;\n\n\n\t            if (action === "itemchange") {\n\t                if(!listView._hasBindingTarget()) {\n\t                    item = listView.findByDataItem(dataItems)[0];\n\t                    if (item) {\n\t                        listView.setDataItem(item, dataItems[0]);\n\t                    }\n\t                }\n\t                return;\n\t            }\n\n\t            var removedItems, addedItems, addedDataItems;\n\t            var adding = (action === "add" && !groupedMode) || (prependOnRefresh && !listView._filter);\n\t            var removing = action === "remove" && !groupedMode;\n\n\t            if (adding) {\n\t                // no need to unbind anything\n\t                removedItems = [];\n\t            } else if (removing) {\n\t                // unbind the items about to be removed;\n\t                removedItems = listView.findByDataItem(dataItems);\n\t            }\n\n\t            if (listView.trigger(DATABINDING, { action: action || "rebind", items: dataItems, removedItems: removedItems, index: e && e.index })) {\n\t                if (this._shouldShowLoading()) {\n\t                    listView.hideLoading();\n\t                }\n\t                return;\n\t            }\n\n\t            if (action === "add" && !groupedMode) {\n\t                var index = view.indexOf(dataItems[0]);\n\t                if (index > -1) {\n\t                    addedItems = listView.insertAt(dataItems, index);\n\t                    addedDataItems = dataItems;\n\t                }\n\t            } else if (action === "remove" && !groupedMode) {\n\t                addedItems = [];\n\t                listView.remove(dataItems);\n\t            } else if (groupedMode) {\n\t                listView.replaceGrouped(view);\n\t            }\n\t            else if (prependOnRefresh && !listView._filter) {\n\t                addedItems = listView.prepend(view);\n\t                addedDataItems = view;\n\t            }\n\t            else {\n\t                listView.replace(view);\n\t            }\n\n\t            if (this._shouldShowLoading()) {\n\t                listView.hideLoading();\n\t            }\n\n\t            listView.trigger(DATABOUND, { ns: ui, addedItems: addedItems, addedDataItems: addedDataItems });\n\t        },\n\n\t        setDataSource: function(dataSource) {\n\t            if (this.dataSource) {\n\t                this._unbindDataSource();\n\t            }\n\n\t            this.dataSource = dataSource;\n\t            dataSource.bind(CHANGE, this._refreshHandler);\n\n\t            if (this._shouldShowLoading()) {\n\t                this.dataSource.bind(PROGRESS, this._progressHandler);\n\t            }\n\t        },\n\n\t        _unbindDataSource: function() {\n\t            this.dataSource.unbind(CHANGE, this._refreshHandler).unbind(PROGRESS, this._progressHandler);\n\t        },\n\n\t        _shouldShowLoading: function() {\n\t            var options = this.options;\n\t            return !options.pullToRefresh && !options.loadMore && !options.endlessScroll;\n\t        }\n\t    });\n\n\t    var ListViewFilter = kendo.Class.extend({\n\t        init: function(listView) {\n\t            var filter = this,\n\t                filterable = listView.options.filterable,\n\t                events = "change paste",\n\t                that = this;\n\n\t            this.listView = listView;\n\t            this.options = filterable;\n\n\t            listView.element.before(SEARCH_TEMPLATE({ placeholder: filterable.placeholder || "Search..." }));\n\n\t            if (filterable.autoFilter !== false) {\n\t                events += " keyup";\n\t            }\n\n\t            this.element = listView.wrapper.find(".km-search-form");\n\n\t            this.searchInput = listView.wrapper.find("input[type=search]")\n\t                .closest("form").on("submit" + NS, function(e) {\n\t                    e.preventDefault();\n\t                })\n\t                .end()\n\t                .on("focus" + NS, function() {\n\t                    filter._oldFilter = filter.searchInput.val();\n\t                })\n\t                .on(events.split(" ").join(NS + " ") + NS, proxy(this._filterChange, this));\n\n\t            this.clearButton = listView.wrapper.find(".km-filter-reset")\n\t                .on(CLICK, proxy(this, "_clearFilter"))\n\t                .hide();\n\n\t             this._dataSourceChange = $.proxy(this._refreshInput, this);\n\t             listView.bind("_dataSource", function(e) {\n\t                 e.dataSource.bind("change", that._dataSourceChange);\n\t             });\n\t        },\n\n\t        _refreshInput: function() {\n\t            var appliedFilters = this.listView.dataSource.filter();\n\t            var searchInput = this.listView._filter.searchInput;\n\n\t            if (!appliedFilters || appliedFilters.filters[0].field !== this.listView.options.filterable.field)  {\n\t                searchInput.val("");\n\t            } else {\n\t                searchInput.val(appliedFilters.filters[0].value);\n\t            }\n\t        },\n\n\t        _search: function(expr) {\n\t            this._filter = true;\n\t            this.clearButton[expr ? "show" : "hide"]();\n\t            this.listView.dataSource.filter(expr);\n\t        },\n\n\t        _filterChange: function(e) {\n\t            var filter = this;\n\t            if (e.type == "paste" && this.options.autoFilter !== false) {\n\t                setTimeout(function() {\n\t                    filter._applyFilter();\n\t                }, 1);\n\t            } else {\n\t                this._applyFilter();\n\t            }\n\t        },\n\n\t        _applyFilter: function() {\n\t            var options = this.options,\n\t                value = this.searchInput.val(),\n\t                expr = value.length ? {\n\t                    field: options.field,\n\t                    operator: options.operator || "startswith",\n\t                    ignoreCase: options.ignoreCase,\n\t                    value: value\n\t                } : null;\n\n\t            if (value === this._oldFilter) {\n\t                return;\n\t            }\n\n\t            this._oldFilter = value;\n\t            this._search(expr);\n\t        },\n\n\t        _clearFilter: function(e) {\n\t            this.searchInput.val("");\n\t            this._search(null);\n\n\t            e.preventDefault();\n\t        }\n\t    });\n\n\t    var ListView = Widget.extend({\n\t        init: function(element, options) {\n\t            var listView = this;\n\n\t            Widget.fn.init.call(this, element, options);\n\n\t            element = this.element;\n\n\t            options = this.options;\n\n\t            // support for legacy typo in configuration options: scrollTreshold -> scrollThreshold.\n\t            if (options.scrollTreshold) {\n\t                options.scrollThreshold = options.scrollTreshold;\n\t            }\n\n\t            element\n\t                .on("down", HIGHLIGHT_SELECTOR, "_highlight")\n\t                .on("move up cancel", HIGHLIGHT_SELECTOR, "_dim");\n\n\t            this._userEvents = new kendo.UserEvents(element, {\n\t                fastTap: true,\n\t                filter: ITEM_SELECTOR,\n\t                allowSelection: true,\n\t                tap: function(e) {\n\t                    listView._click(e);\n\t                }\n\t            });\n\n\t            // HACK!!! to negate the ms touch action from the user events.\n\t            element.css("-ms-touch-action", "auto");\n\n\t            element.wrap(WRAPPER);\n\n\t            this.wrapper = this.element.parent();\n\n\t            this._headerFixer = new HeaderFixer(this);\n\n\t            this._itemsCache = {};\n\t            this._templates();\n\n\t            this.virtual = options.endlessScroll || options.loadMore;\n\n\t            this._style();\n\n\t            if (this.options.$angular && (this.virtual || this.options.pullToRefresh)) {\n\t                setTimeout($.proxy(this, "_start"));\n\t            } else {\n\t                this._start();\n\t            }\n\n\t        },\n\n\t        _start: function() {\n\t            var options = this.options;\n\n\t            if (this.options.filterable) {\n\t                this._filter = new ListViewFilter(this);\n\t            }\n\n\t            if (this.virtual) {\n\t                this._itemBinder = new VirtualListViewItemBinder(this);\n\t            } else {\n\t                this._itemBinder = new ListViewItemBinder(this);\n\t            }\n\n\t            if (this.options.pullToRefresh) {\n\t                this._pullToRefreshHandler = new RefreshHandler(this);\n\t            }\n\n\t            this.setDataSource(options.dataSource);\n\n\t            this._enhanceItems(this.items());\n\n\t            kendo.notify(this, ui);\n\t        },\n\n\t        events: [\n\t            CLICK,\n\t            DATABINDING,\n\t            DATABOUND,\n\t            ITEM_CHANGE\n\t        ],\n\n\t        options: {\n\t            name: "ListView",\n\t            style: "",\n\t            type: "flat",\n\t            autoBind: true,\n\t            fixedHeaders: false,\n\t            template: "#:data#",\n\t            headerTemplate: \'<span class="km-text">#:value#</span>\',\n\t            appendOnRefresh: false,\n\t            loadMore: false,\n\t            endlessScroll: false,\n\t            scrollThreshold: 30,\n\t            pullToRefresh: false,\n\t            messages: {\n\t                loadMoreText: "Press to load more",\n\t                pullTemplate: "Pull to refresh",\n\t                releaseTemplate: "Release to refresh",\n\t                refreshTemplate: "Refreshing"\n\t            },\n\t            pullOffset: 140,\n\t            filterable: false,\n\t            virtualViewSize: null\n\t        },\n\n\t        refresh: function() {\n\t            this._itemBinder.refresh();\n\t        },\n\n\t        reset: function() {\n\t            this._itemBinder.reset();\n\t        },\n\n\t        setDataSource: function(dataSource) {\n\t            // the listView should have a ready datasource for MVVM to function properly. But an empty datasource should not empty the element\n\t            var emptyDataSource = !dataSource;\n\t            this.dataSource = DataSource.create(dataSource);\n\n\t            this.trigger("_dataSource", { dataSource: this.dataSource, empty: emptyDataSource });\n\n\t            if (this.options.autoBind && !emptyDataSource) {\n\t                this.items().remove();\n\t                this.dataSource.fetch();\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\t            kendo.destroy(this.element);\n\t            this._userEvents.destroy();\n\t            if (this._itemBinder) {\n\t                this._itemBinder.destroy();\n\t            }\n\n\t            if(this._headerFixer) {\n\t                this._headerFixer.destroy();\n\t            }\n\n\t            this.element.unwrap();\n\t            delete this.element;\n\t            delete this.wrapper;\n\t            delete this._userEvents;\n\t        },\n\n\t        items: function() {\n\t            if (this.options.type === "group") {\n\t                return this.element.find(".km-list").children();\n\t            } else {\n\t                return this.element.children().not(\'.km-load-more\');\n\t            }\n\t        },\n\n\t        scroller: function() {\n\t            if (!this._scrollerInstance) {\n\t                this._scrollerInstance = this.element.closest(".km-scroll-wrapper").data("kendoMobileScroller");\n\t            }\n\n\t            return this._scrollerInstance;\n\t        },\n\n\t        showLoading: function() {\n\t            var view = this.view();\n\t            if (view && view.loader) {\n\t                view.loader.show();\n\t            }\n\t        },\n\n\t        hideLoading: function() {\n\t            var view = this.view();\n\t            if (view && view.loader) {\n\t                view.loader.hide();\n\t            }\n\t        },\n\n\t        insertAt: function(dataItems, index, triggerChange) {\n\t            var listView = this;\n\t            return listView._renderItems(dataItems, function(items) {\n\t                if (index === 0) {\n\t                    listView.element.prepend(items);\n\t                }\n\t                else if (index === -1) {\n\t                    listView.element.append(items);\n\t                } else {\n\t                    listView.items().eq(index - 1).after(items);\n\t                }\n\n\t                if (triggerChange) {\n\t                    for (var i = 0; i < items.length; i ++) {\n\t                        listView.trigger(ITEM_CHANGE, { item: items.eq(i), data: dataItems[i], ns: ui });\n\t                    }\n\t                }\n\t            });\n\t        },\n\n\t        append: function(dataItems, triggerChange) {\n\t            return this.insertAt(dataItems, -1, triggerChange);\n\t        },\n\n\t        prepend: function(dataItems, triggerChange) {\n\t            return this.insertAt(dataItems, 0, triggerChange);\n\t        },\n\n\t        replace: function(dataItems) {\n\t            this.options.type = "flat";\n\t            this._angularItems("cleanup");\n\t            kendo.destroy(this.element.children());\n\t            this.element.empty();\n\t            this._userEvents.cancel();\n\t            this._style();\n\t            return this.insertAt(dataItems, 0);\n\t        },\n\n\t        replaceGrouped: function(groups) {\n\t            this.options.type = "group";\n\t            this._angularItems("cleanup");\n\t            this.element.empty();\n\t            var items = $(kendo.render(this.groupTemplate, groups));\n\n\t            this._enhanceItems(items.children("ul").children("li"));\n\t            this.element.append(items);\n\t            mobile.init(items);\n\t            this._style();\n\t            this._angularItems("compile");\n\t        },\n\n\t        remove: function(dataItems) {\n\t            var items = this.findByDataItem(dataItems);\n\t            this.angular("cleanup", function(){\n\t                return { elements: items };\n\t            });\n\t            kendo.destroy(items);\n\t            items.remove();\n\t        },\n\n\t        findByDataItem: function(dataItems) {\n\t            var selectors = [];\n\n\t            for (var idx = 0, length = dataItems.length; idx < length; idx ++) {\n\t                selectors[idx] = "[data-" + kendo.ns + "uid=" + dataItems[idx].uid + "]";\n\t            }\n\n\t            return this.element.find(selectors.join(","));\n\t        },\n\n\t        // item is a DOM element, not jQuery object.\n\t        setDataItem: function(item, dataItem) {\n\t            var listView = this,\n\t                replaceItem = function(items) {\n\t                    var newItem = $(items[0]);\n\t                    kendo.destroy(item);\n\t                    listView.angular("cleanup", function(){ return { elements: [ $(item) ] }; });\n\t                    $(item).replaceWith(newItem);\n\t                    listView.trigger(ITEM_CHANGE, { item: newItem, data: dataItem, ns: ui });\n\t                };\n\n\t            return this._renderItems([dataItem], replaceItem)[0];\n\t        },\n\n\t        updateSize: function() {\n\t            this._size = this.getSize();\n\t        },\n\n\t        _renderItems: function(dataItems, callback) {\n\t            var items = $(kendo.render(this.template, dataItems));\n\n\t            callback(items);\n\n\t            this.angular("compile", function() {\n\t                return {\n\t                    elements: items,\n\t                    data: dataItems.map(function(data){\n\t                        return { dataItem: data };\n\t                    })\n\t                };\n\t            });\n\n\t            mobile.init(items);\n\t            this._enhanceItems(items);\n\n\t            return items;\n\t        },\n\n\t        _dim: function(e) {\n\t            this._toggle(e, false);\n\t        },\n\n\t        _highlight: function(e) {\n\t            this._toggle(e, true);\n\t        },\n\n\t        _toggle: function(e, highlight) {\n\t            if (e.which > 1) {\n\t                return;\n\t            }\n\n\t            var clicked = $(e.currentTarget),\n\t                item = clicked.parent(),\n\t                role = attrValue(clicked, "role") || "",\n\t                plainItem = (!role.match(buttonRegExp)),\n\t                prevented = e.isDefaultPrevented();\n\n\t            if (plainItem) {\n\t                item.toggleClass(ACTIVE_CLASS, highlight && !prevented);\n\t            }\n\t        },\n\n\t        _templates: function() {\n\t            var template = this.options.template,\n\t                headerTemplate = this.options.headerTemplate,\n\t                dataIDAttribute = \' data-uid="#=arguments[0].uid || ""#"\',\n\t                templateProxy = {},\n\t                groupTemplateProxy = {};\n\n\t            if (typeof template === FUNCTION) {\n\t                templateProxy.template = template;\n\t                template = "#=this.template(data)#";\n\t            }\n\n\t            this.template = proxy(kendo.template("<li" + dataIDAttribute + ">" + template + "</li>"), templateProxy);\n\n\t            groupTemplateProxy.template = this.template;\n\n\t            if (typeof headerTemplate === FUNCTION) {\n\t                groupTemplateProxy._headerTemplate = headerTemplate;\n\t                headerTemplate = "#=this._headerTemplate(data)#";\n\t            }\n\n\t            groupTemplateProxy.headerTemplate = kendo.template(headerTemplate);\n\n\t            this.groupTemplate = proxy(GROUP_TEMPLATE, groupTemplateProxy);\n\t        },\n\n\t        _click: function(e) {\n\t            if (e.event.which > 1 || e.event.isDefaultPrevented()) {\n\t                return;\n\t            }\n\n\t            var dataItem,\n\t                item = e.target,\n\t                target = $(e.event.target),\n\t                buttonElement = target.closest(kendo.roleSelector("button", "detailbutton", "backbutton")),\n\t                button = kendo.widgetInstance(buttonElement, ui),\n\t                id = item.attr(kendo.attr("uid"));\n\n\t            if (id) {\n\t                dataItem = this.dataSource.getByUid(id);\n\t            }\n\n\t            if (this.trigger(CLICK, {target: target, item: item, dataItem: dataItem, button: button})) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _styleGroups: function() {\n\t            var rootItems = this.element.children();\n\n\t            rootItems.children("ul").addClass("km-list");\n\n\t            rootItems.each(function() {\n\t                var li = $(this),\n\t                    groupHeader = li.contents().first();\n\n\t                li.addClass("km-group-container");\n\t                if (!groupHeader.is("ul") && !groupHeader.is("div." + GROUP_CLASS)) {\n\t                    groupHeader.wrap(GROUP_WRAPPER);\n\t                }\n\t            });\n\t        },\n\n\t        _style: function() {\n\t            var options = this.options,\n\t                grouped = options.type === "group",\n\t                element = this.element,\n\t                inset = options.style === "inset";\n\n\t            element.addClass("km-listview")\n\t                .toggleClass("km-list", !grouped)\n\t                .toggleClass("km-virtual-list", this.virtual)\n\t                .toggleClass("km-listinset", !grouped && inset)\n\t                .toggleClass("km-listgroup", grouped && !inset)\n\t                .toggleClass("km-listgroupinset", grouped && inset);\n\n\t            if (!element.parents(".km-listview")[0]) {\n\t                element.closest(".km-content").toggleClass("km-insetcontent", inset); // iOS has white background when the list is not inset.\n\t            }\n\n\t            if (grouped) {\n\t                this._styleGroups();\n\t            }\n\n\t            this.trigger(STYLED);\n\t        },\n\n\t        _enhanceItems: function(items) {\n\t            items.each(function() {\n\t                var item = $(this),\n\t                    child,\n\t                    enhanced = false;\n\n\t                item.children().each(function() {\n\t                    child = $(this);\n\t                    if (child.is("a")) {\n\t                        enhanceLinkItem(child);\n\t                        enhanced = true;\n\t                    } else if (child.is("label")) {\n\t                        enhanceCheckBoxItem(child);\n\t                        enhanced = true;\n\t                    }\n\t                });\n\n\t                if (!enhanced) {\n\t                    enhanceItem(item);\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    ui.plugin(ListView);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.mobile.listview.js?')
    }
  }
]);
