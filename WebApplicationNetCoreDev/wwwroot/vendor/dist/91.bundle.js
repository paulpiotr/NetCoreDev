(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{"./node_modules/@progress/kendo-ui/js/kendo.combobox.js":
/*!**************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.combobox.js ***!
  \**************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1062);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1036:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.list */ "./node_modules/@progress/kendo-ui/js/kendo.list.js");\n\n/***/ }),\n\n/***/ 1037:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.mobile.scroller */ "./node_modules/@progress/kendo-ui/js/kendo.mobile.scroller.js");\n\n/***/ }),\n\n/***/ 1038:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.virtuallist */ "./node_modules/@progress/kendo-ui/js/kendo.virtuallist.js");\n\n/***/ }),\n\n/***/ 1062:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1036), __webpack_require__(1037), __webpack_require__(1038) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "combobox",\n\t    name: "ComboBox",\n\t    category: "web",\n\t    description: "The ComboBox widget allows the selection from pre-defined values or entering a new value.",\n\t    depends: [ "list" ],\n\t    features: [ {\n\t        id: "mobile-scroller",\n\t        name: "Mobile scroller",\n\t        description: "Support for kinetic scrolling in mobile device",\n\t        depends: [ "mobile.scroller" ]\n\t    }, {\n\t        id: "virtualization",\n\t        name: "VirtualList",\n\t        description: "Support for virtualization",\n\t        depends: [ "virtuallist" ]\n\t    } ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        List = ui.List,\n\t        Select = ui.Select,\n\t        caret = kendo.caret,\n\t        support = kendo.support,\n\t        placeholderSupported = support.placeholder,\n\t        activeElement = kendo._activeElement,\n\t        keys = kendo.keys,\n\t        ns = ".kendoComboBox",\n\t        nsFocusEvent = ns + "FocusEvent",\n\t        CLICK = "click" + ns,\n\t        MOUSEDOWN = "mousedown" + ns,\n\t        DISABLED = "disabled",\n\t        READONLY = "readonly",\n\t        CHANGE = "change",\n\t        LOADING = "k-i-loading",\n\t        DEFAULT = "k-state-default",\n\t        FOCUSED = "k-state-focused",\n\t        STATEDISABLED = "k-state-disabled",\n\t        ARIA_DISABLED = "aria-disabled",\n\t        AUTOCOMPLETEVALUE = "off",\n\t        STATE_FILTER = "filter",\n\t        STATE_ACCEPT = "accept",\n\t        STATE_REBIND = "rebind",\n\t        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,\n\t        proxy = $.proxy,\n\t        newLineRegEx = /(\\r\\n|\\n|\\r)/gm;\n\n\t    var ComboBox = Select.extend({\n\t        init: function(element, options) {\n\t            var that = this, text, disabled;\n\n\t            that.ns = ns;\n\n\t            options = $.isArray(options) ? { dataSource: options } : options;\n\n\t            Select.fn.init.call(that, element, options);\n\n\t            options = that.options;\n\t            element = that.element.on("focus" + ns, proxy(that._focusHandler, that));\n\n\t            options.placeholder = options.placeholder || element.attr("placeholder");\n\n\t            that._reset();\n\n\t            that._wrapper();\n\n\t            that._input();\n\n\t            that._clearButton();\n\n\t            that._tabindex(that.input);\n\n\t            that._popup();\n\n\t            that._dataSource();\n\t            that._ignoreCase();\n\n\t            that._enable();\n\n\t            that._attachFocusEvents();\n\n\t            that._oldIndex = that.selectedIndex = -1;\n\n\t            that._aria();\n\n\t            that._initialIndex = options.index;\n\n\t            that.requireValueMapper(that.options);\n\t            that._initList();\n\n\t            that._cascade();\n\n\t            if (options.autoBind) {\n\t                that._filterSource();\n\t            } else {\n\t                text = options.text;\n\n\t                if (!text && that._isSelect) {\n\t                    text = element.children(":selected").text();\n\t                }\n\n\t                if (text) {\n\t                    that._setText(text);\n\t                }\n\t            }\n\n\t            if (!text) {\n\t                that._placeholder();\n\t            }\n\n\t            disabled = $(that.element).parents("fieldset").is(\':disabled\');\n\n\t            if (disabled) {\n\t                that.enable(false);\n\t            }\n\n\t            kendo.notify(that);\n\t            that._toggleCloseVisibility();\n\t        },\n\n\t        options: {\n\t            name: "ComboBox",\n\t            enabled: true,\n\t            index: -1,\n\t            text: null,\n\t            value: null,\n\t            autoBind: true,\n\t            delay: 200,\n\t            dataTextField: "",\n\t            dataValueField: "",\n\t            minLength: 1,\n\t            enforceMinLength: false,\n\t            height: 200,\n\t            highlightFirst: true,\n\t            filter: "none",\n\t            placeholder: "",\n\t            suggest: false,\n\t            cascadeFrom: "",\n\t            cascadeFromField: "",\n\t            cascadeFromParentField: "",\n\t            ignoreCase: true,\n\t            animation: {},\n\t            virtual: false,\n\t            template: null,\n\t            groupTemplate: "#:data#",\n\t            fixedGroupTemplate: "#:data#",\n\t            clearButton: true,\n\t            syncValueAndText: true,\n\t            autoWidth: false,\n\t            popup: null\n\t        },\n\n\t        events:[\n\t            "open",\n\t            "close",\n\t            CHANGE,\n\t            "select",\n\t            "filtering",\n\t            "dataBinding",\n\t            "dataBound",\n\t            "cascade",\n\t            "set"\n\t        ],\n\n\t        setOptions: function(options) {\n\t            var listOptions = this._listOptions(options);\n\n\t            Select.fn.setOptions.call(this, options);\n\n\t            this.listView.setOptions(listOptions);\n\n\t            this._accessors();\n\t            this._aria();\n\t            this._clearButton();\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that.input.off(ns);\n\t            that.input.off(nsFocusEvent);\n\t            that.element.off(ns);\n\t            that.wrapper.off(ns);\n\t            that._inputWrapper.off(ns);\n\t            clearTimeout(that._pasteTimeout);\n\n\t            that._arrow.off(CLICK + " " + MOUSEDOWN);\n\t            that._clear.off(CLICK + " " + MOUSEDOWN);\n\n\t            Select.fn.destroy.call(that);\n\t        },\n\n\t        _change: function() {\n\t            var that = this;\n\t            var text = that.text();\n\t            var hasText = text && text !== that._oldText && text !== that.options.placeholder;\n\t            var index = that.selectedIndex;\n\t            var isCustom = index === -1;\n\n\t            if (!that.options.syncValueAndText && !that.value() && isCustom && hasText) {\n\t                that._old = "";\n\t                that._oldIndex = index;\n\t                that._oldText = text;\n\n\t                if (!that._typing) {\n\t                    // trigger the DOM change event so any subscriber gets notified\n\t                    that.element.trigger(CHANGE);\n\t                }\n\n\t                that.trigger(CHANGE);\n\t                that._typing = false;\n\t                return;\n\t            }\n\n\t            Select.fn._change.call(that);\n\t            that._toggleCloseVisibility();\n\t        },\n\n\t        _attachFocusEvents: function() {\n\t            var that = this;\n\t            that.input.on("focus" + nsFocusEvent, proxy(that._inputFocus, that))\n\t                      .on("focusout" + nsFocusEvent, proxy(that._inputFocusout, that));\n\t        },\n\n\t        _focusHandler: function(e) {\n\t            if(e.target === this.element[0]) {\n\t                this.input.focus();\n\t            }\n\t        },\n\n\t        _arrowClick: function() {\n\t            this._toggle();\n\t        },\n\n\t        _inputFocus: function() {\n\t            this._inputWrapper.addClass(FOCUSED);\n\t            this._placeholder(false);\n\t        },\n\n\t        _inputFocusout: function() {\n\t            var that = this;\n\t            var value = that.value();\n\n\t            that._userTriggered = true;\n\t            that._inputWrapper.removeClass(FOCUSED);\n\t            clearTimeout(that._typingTimeout);\n\t            that._typingTimeout = null;\n\n\t            that.text(that.text());\n\n\t            var item = that._focus();\n\t            var dataItem = this.listView.dataItemByIndex(this.listView.getElementIndex(item));\n\n\t            if (value !== that.value() && that.trigger("select", { dataItem: dataItem, item: item })) {\n\t                that.value(value);\n\t                return;\n\t            }\n\n\t            that._placeholder();\n\t            that._valueBeforeCascade = that._old;\n\t            that._blur();\n\n\t            that.element.blur();\n\t        },\n\n\t        _inputPaste: function() {\n\t            var that = this;\n\t            clearTimeout(that._pasteTimeout);\n\t            that._pasteTimeout = null;\n\n\t            that._pasteTimeout = setTimeout(function() {\n\t                that.search();\n\t            });\n\t        },\n\n\t        _editable: function(options) {\n\t            var that = this,\n\t                disable = options.disable,\n\t                readonly = options.readonly,\n\t                wrapper = that._inputWrapper.off(ns),\n\t                input = that.element.add(that.input.off(ns)),\n\t                arrow = that._arrow.off(CLICK + " " + MOUSEDOWN),\n\t                clear = that._clear;\n\n\t            if (!readonly && !disable) {\n\t                wrapper\n\t                    .addClass(DEFAULT)\n\t                    .removeClass(STATEDISABLED)\n\t                    .on(HOVEREVENTS, that._toggleHover);\n\n\t                input.removeAttr(DISABLED)\n\t                     .removeAttr(READONLY)\n\t                     .attr(ARIA_DISABLED, false);\n\n\t                arrow.on(CLICK, proxy(that._arrowClick, that))\n\t                     .on(MOUSEDOWN, function(e) { e.preventDefault(); });\n\n\t                clear.on(CLICK + " touchend" + ns, proxy(that._clearValue, that));\n\n\t                that.input\n\t                    .on("keydown" + ns, proxy(that._keydown, that))\n\t                    .on("input" + ns, proxy(that._search, that))\n\t                    .on("paste" + ns, proxy(that._inputPaste, that));\n\n\t                that.wrapper.on(CLICK + ns, proxy(that._focusHandler, that));\n\t            } else {\n\t                wrapper\n\t                    .addClass(disable ? STATEDISABLED : DEFAULT)\n\t                    .removeClass(disable ? DEFAULT : STATEDISABLED);\n\n\t                input.attr(DISABLED, disable)\n\t                     .attr(READONLY, readonly)\n\t                     .attr(ARIA_DISABLED, disable);\n\t            }\n\n\t            that._toggleCloseVisibility();\n\t        },\n\n\t        open: function() {\n\t            var that = this;\n\t            var state = that._state;\n\t            var isFiltered = that.dataSource.filter() ? that.dataSource.filter().filters.length > 0 : false;\n\t            var reinitialized = !that.ul.find(that.listView.focus()).length;\n\n\t            if (that.popup.visible()) {\n\t                return;\n\t            }\n\n\t            if ((!that.listView.bound() && state !== STATE_FILTER) || state === STATE_ACCEPT) {\n\t                that._open = true;\n\t                that._state = STATE_REBIND;\n\t                if ((that.options.minLength !== 1 && !isFiltered) || (isFiltered && that.value() && that.selectedIndex === -1 )) {\n\t                    that.refresh();\n\t                    that._openPopup();\n\t                    if (!this.options.virtual) {\n\t                        that.listView.bound(false);\n\t                    }\n\t                } else {\n\t                    that._filterSource();\n\t                }\n\t            } else if (that._allowOpening()) {\n\t                // In some cases when the popup is opened resize is triggered which will cause it to close\n\t                // Setting the below flag will prevent this from happening\n\t                that.popup._hovered = true;\n\t                that._openPopup();\n\t                if(that.options.virtual) {\n\t                    that._focusItem();\n\t                } else if (reinitialized && that.options.highlightFirst) {\n\t                    that.listView.focus(0);\n\t                }\n\t            }\n\t        },\n\n\t        _scrollToFocusedItem: function() {\n\t            var listView = this.listView;\n\n\t            listView.scrollToIndex(listView.getElementIndex(listView.focus()));\n\t        },\n\n\t        _openPopup: function() {\n\t            this.popup.one("activate", proxy(this._scrollToFocusedItem, this));\n\t            this.popup.open();\n\t        },\n\n\t        _updateSelectionState: function() {\n\t            var that = this;\n\t            var text = that.options.text;\n\t            var value = that.options.value;\n\n\t            if (that.listView.isFiltered()) {\n\t                return;\n\t            }\n\n\t            if (that.selectedIndex === -1) {\n\t                if (text === undefined || text === null) {\n\t                    text = value;\n\t                }\n\n\t                that._accessor(value);\n\t                that.input.val(text || that.input.val());\n\t                that._placeholder();\n\t            } else if (that._oldIndex === -1) {\n\t                that._oldIndex = that.selectedIndex;\n\t            }\n\t        },\n\n\t        _buildOptions: function(data) {\n\t            var that = this;\n\t            if (!that._isSelect) {\n\t                return;\n\t            }\n\n\t            var custom = that._customOption;\n\n\t            if (that._state === STATE_REBIND) {\n\t                that._state = "";\n\t            }\n\n\t            that._customOption = undefined;\n\t            that._options(data, "", that.value());\n\n\t            if (custom && custom[0].selected && !that.listView._emptySearch) {\n\t                that._custom(custom.val());\n\t            }\n\t        },\n\n\t        _updateSelection: function() {\n\t            var that = this;\n\t            var listView = that.listView;\n\t            var initialIndex = that._initialIndex;\n\t            var hasInitialIndex = initialIndex !== null && initialIndex > -1;\n\t            var filtered = that._state === STATE_FILTER;\n\n\t            if (filtered) {\n\t                $(listView.focus()).removeClass("k-state-selected");\n\t                return;\n\t            }\n\n\t            if (that._fetch) {\n\t                return;\n\t            }\n\n\t            if (!listView.value().length) {\n\t                if (hasInitialIndex) {\n\t                    that.select(initialIndex);\n\t                } else if (that._accessor()) {\n\t                    listView.value(that._accessor());\n\t                }\n\t            }\n\n\t            that._initialIndex = null;\n\t            var dataItem = listView.selectedDataItems()[0];\n\n\t            if (!dataItem) {\n\t                return;\n\t            }\n\n\t            if (that._value(dataItem) !== that.value()) {\n\t                that._custom(that._value(dataItem));\n\t            } else if (that._value(dataItem) !== that.element[0].value){\n\t                that._accessor(that._value(dataItem));\n\t            }\n\n\t            if (that.text() && that.text() !== that._text(dataItem)) {\n\t                that._selectValue(dataItem);\n\t            }\n\t        },\n\n\t        _updateItemFocus: function() {\n\t            var listView = this.listView;\n\n\t            if (!this.options.highlightFirst) {\n\t                listView.focus(-1);\n\t            } else if (!listView.focus() && !listView.focusIndex()) {\n\t                listView.focus(0);\n\t            }\n\t        },\n\n\t        _listBound: function() {\n\t            var that = this;\n\t            var isActive = that.input[0] === activeElement();\n\n\t            var data = that.dataSource.flatView();\n\t            var skip = that.listView.skip();\n\t            var length = data.length;\n\t            var groupsLength = that.dataSource._group ? that.dataSource._group.length : 0;\n\t            var isFirstPage = skip === undefined || skip === 0;\n\n\t            that._presetValue = false;\n\n\t            that._renderFooter();\n\t            that._renderNoData();\n\t            that._toggleNoData(!length);\n\t            that._toggleHeader(!!groupsLength && !!length);\n\n\t            that._resizePopup();\n\n\t            that.popup.position();\n\n\t            that._buildOptions(data);\n\n\t            that._makeUnselectable();\n\n\t            that._updateSelection();\n\n\t            if (data.length && isFirstPage) {\n\t                that._updateItemFocus();\n\n\t                if (that.options.suggest && isActive && that.input.val()) {\n\t                    that.suggest(data[0]);\n\t                }\n\t            }\n\n\t            if (that._open) {\n\t                that._open = false;\n\n\t                if (that._typingTimeout && !isActive) {\n\t                    that.popup.close();\n\t                } else {\n\t                    that.toggle(that._allowOpening());\n\t                }\n\n\t                that._typingTimeout = null;\n\t            }\n\n\t            that._hideBusy();\n\t            that.trigger("dataBound");\n\t        },\n\n\t        _listChange: function() {\n\t            this._selectValue(this.listView.selectedDataItems()[0]);\n\n\t            if (this._presetValue) {\n\t                this._oldIndex = this.selectedIndex;\n\t            }\n\t        },\n\n\t        _get: function(candidate) {\n\t            var data, found, idx;\n\n\t            if (typeof candidate === "function") {\n\t                data = this.dataSource.flatView();\n\n\t                for (idx = 0; idx < data.length; idx++) {\n\t                    if (candidate(data[idx])) {\n\t                        candidate = idx;\n\t                        found = true;\n\t                        break;\n\t                    }\n\t                }\n\n\t                if (!found) {\n\t                    candidate = -1;\n\t                }\n\t            }\n\n\t            return candidate;\n\t        },\n\n\t        _select: function(candidate, keepState) {\n\t            var that = this;\n\n\t            candidate = that._get(candidate);\n\n\t            if (candidate === -1) {\n\t                that.input[0].value = "";\n\t                that._accessor("");\n\t            }\n\n\t            return that.listView.select(candidate).done(function() {\n\t                if (!keepState && that._state === STATE_FILTER) {\n\t                    that._state = STATE_ACCEPT;\n\t                }\n\t                that._toggleCloseVisibility();\n\t            });\n\t        },\n\n\t        _selectValue: function(dataItem) {\n\t            var idx = this.listView.select();\n\t            var value = "";\n\t            var text = "";\n\n\t            idx = idx[idx.length - 1];\n\t            if (idx === undefined) {\n\t                idx = -1;\n\t            }\n\n\t            this.selectedIndex = idx;\n\n\t            if (this.listView.isFiltered() && idx !== -1) {\n\t                this._valueBeforeCascade = this._old;\n\t            }\n\n\t            if (idx === -1 && !dataItem) {\n\t                if (this.options.syncValueAndText) {\n\t                    if (this.options.dataTextField === this.options.dataValueField) {\n\t                        text = this._accessor();\n\t                    } else {\n\t                        text = this.input[0].value;\n\t                    }\n\t                    value = text;\n\t                }\n\t                else {\n\t                    text = this.text();\n\t                }\n\t                this.listView.focus(-1);\n\t            } else {\n\t                if (dataItem || dataItem === 0) {\n\t                    value = this._dataValue(dataItem);\n\t                    text = this._text(dataItem);\n\t                }\n\n\t                if (value === null) {\n\t                    value = "";\n\t                }\n\t            }\n\n\t            this._setDomInputValue(text);\n\t            this._accessor(value !== undefined ? value : text, idx);\n\n\t            this._placeholder();\n\t            this._triggerCascade();\n\t        },\n\n\t        _setDomInputValue: function(text){\n\t            var that = this;\n\t            var currentCaret = caret(this.input);\n\t            var caretStart;\n\n\t            if(currentCaret && currentCaret.length){\n\t                caretStart = currentCaret[0];\n\t            }\n\n\t            this._prev = this.input[0].value = text;\n\n\t            if(caretStart && this.selectedIndex === -1){\n\t                var mobile = support.mobileOS;\n\t                if(mobile.wp || mobile.android) {// without the timeout the caret is at the end of the input\n\t                    setTimeout(function() { that.input[0].setSelectionRange(caretStart, caretStart); }, 0);\n\t                }\n\t                else {\n\t                    this.input[0].setSelectionRange(caretStart, caretStart);\n\t                }\n\t            }\n\t        },\n\n\t        refresh: function() {\n\t            this.listView.refresh();\n\t        },\n\n\t        _toggleCloseVisibility: function() {\n\t            var preventShow = this.element.is(":disabled") || this.element.is("[readonly]");\n\n\t            if (this.text() && !preventShow) {\n\t                this._showClear();\n\t            } else {\n\t                this._hideClear();\n\t            }\n\t        },\n\n\t        suggest: function(word) {\n\t            var that = this;\n\t            var element = that.input[0];\n\t            var value = that.text();\n\t            var caretIdx = caret(element)[0];\n\t            var key = that._last;\n\t            var idx;\n\t            var accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;\n\n\t            if (key == keys.BACKSPACE || key == keys.DELETE) {\n\t                that._last = undefined;\n\t                return;\n\t            }\n\n\t            word = word || "";\n\n\t            if (typeof word !== "string") {\n\t                if (word[0]) {\n\t                    word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];\n\t                }\n\n\t                word = word ? that._text(word) : "";\n\t            }\n\n\t            if (caretIdx <= 0) {\n\t                caretIdx = (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()).indexOf(accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) + 1;\n\t            }\n\n\t            if (word) {\n\t                word = word.toString();\n\t                idx = (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()).indexOf(accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase());\n\t                if (idx > -1) {\n\t                    value += word.substring(idx + value.length);\n\t                }\n\t            } else {\n\t                value = value.substring(0, caretIdx);\n\t            }\n\n\t            if (value.length !== caretIdx || !word) {\n\t                element.value = value;\n\t                if (element === activeElement()) {\n\t                    caret(element, caretIdx, value.length);\n\t                }\n\t            }\n\t        },\n\n\t        text: function (text) {\n\t            text = text === null ? "" : text;\n\n\t            var that = this;\n\t            var input = that.input[0];\n\t            var ignoreCase = that.options.ignoreCase;\n\t            var loweredText = text;\n\t            var dataItem;\n\t            var value;\n\n\t            if (text === undefined) {\n\t                return input.value;\n\t            }\n\n\t            if (that.options.autoBind === false && !that.listView.bound()) {\n\t                that._setText(text);\n\t                return;\n\t            }\n\n\t            dataItem = that.dataItem();\n\n\t            if (dataItem && that._text(dataItem).replace && that._text(dataItem).replace(newLineRegEx,"") === text) {\n\t                value = that._value(dataItem);\n\n\t                if (value === List.unifyType(that._old, typeof value)) {\n\t                    that._triggerCascade();\n\t                    return;\n\t                }\n\t            }\n\n\t            if (ignoreCase) {\n\t                loweredText = loweredText.toLowerCase();\n\t            }\n\n\t            if(that.dataItem() && that._text(that.dataItem()) === text){\n\t                return;\n\t            }\n\n\t            that._select(function(data) {\n\t                data = that._text(data);\n\t                if (ignoreCase) {\n\t                    data = (data + "").toLowerCase();\n\t                }\n\n\t                return data === loweredText;\n\t            }).done(function() {\n\t                if (that.selectedIndex < 0) {\n\t                    input.value = text;\n\n\t                    if (that.options.syncValueAndText) {\n\t                        that._accessor(text);\n\t                    }\n\n\t                    that._cascadeTriggered = true;\n\t                    that._triggerCascade();\n\t                }\n\n\t                that._prev = input.value;\n\t            });\n\n\t            that._toggleCloseVisibility();\n\t        },\n\n\t        toggle: function(toggle) {\n\t            this._toggle(toggle, true);\n\t        },\n\n\t        value: function(value) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var listView = that.listView;\n\n\t            if (value === undefined) {\n\t                value = that._accessor() || that.listView.value()[0];\n\t                return value === undefined || value === null ? "" : value;\n\t            }\n\n\t            that.requireValueMapper(that.options, value);\n\n\t            that.trigger("set", { value: value });\n\n\t            if (value === options.value && that.input.val() === options.text &&\n\t            !that.options.cascadeFrom) {\n\t                return;\n\t            }\n\n\t            that._accessor(value);\n\n\t            if (that._isFilterEnabled() && listView.bound() && listView.isFiltered()) {\n\t                that._clearFilter();\n\t            } else {\n\t                that._fetchData();\n\t            }\n\n\t            listView\n\t                .value(value)\n\t                .done(function() {\n\t                    if (that.selectedIndex === -1 && (!listView._selectedDataItems || !listView._selectedDataItems.length)) {\n\t                        that._accessor(value);\n\t                        that.input.val(value);\n\t                        that._placeholder(true);\n\t                    }\n\n\t                    if(that._userTriggered) {\n\t                         that._old = that._accessor();\n\t                    } else {\n\t                         that._old = that._valueBeforeCascade = that._accessor();\n\t                    }\n\n\t                    that._oldIndex = that.selectedIndex;\n\n\t                    that._prev = that._oldText = that.input.val();\n\n\t                    if (that._state === STATE_FILTER) {\n\t                        that._state = STATE_ACCEPT;\n\t                    }\n\t                    that._toggleCloseVisibility();\n\t                });\n\t        },\n\n\t        _hideBusy: function () {\n\t            var that = this;\n\t            clearTimeout(that._busy);\n\t            that._arrowIcon.removeClass(LOADING);\n\t            that._focused.attr("aria-busy", false);\n\t            that._busy = null;\n\t            that._toggleCloseVisibility();\n\t        },\n\n\t        _click: function(e) {\n\t            var that = this;\n\t            var item = e.item;\n\t            var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));\n\t            var shouldTrigger = true;\n\t            e.preventDefault();\n\n\t            if(dataItem){\n\t                shouldTrigger = that._value(dataItem) !==  List.unifyType(that.value(), typeof that._value(dataItem));\n\n\t                if(!shouldTrigger){\n\t                   that.input.val(that._text(dataItem));\n\t                }\n\t            }\n\n\t            if (shouldTrigger && that.trigger("select", { dataItem: dataItem, item: item })) {\n\t                that.close();\n\t                return;\n\t            }\n\n\t            that._userTriggered = true;\n\n\t            that._select(item).done(function() {\n\t                that._blur();\n\t            });\n\t        },\n\n\t        _syncValueAndText: function () {\n\t            return this.options.syncValueAndText;\n\t        },\n\n\t        _inputValue: function() {\n\t            return this.text();\n\t        },\n\n\t        _searchByWord: function(word) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var dataSource = that.dataSource;\n\t            var ignoreCase = options.ignoreCase;\n\t            var predicate = function (dataItem) {\n\t                var text = that._text(dataItem);\n\t                if (text !== undefined) {\n\t                    text = text + "";\n\t                    if (text !== "" && word === "") {\n\t                        return false;\n\t                    }\n\n\t                    if (ignoreCase) {\n\t                        text = text.toLowerCase();\n\t                    }\n\n\t                    return text.indexOf(word) === 0;\n\t                }\n\t            };\n\n\t            if (ignoreCase) {\n\t                word = word.toLowerCase();\n\t            }\n\n\t            if (!that.ul[0].firstChild) {\n\t                dataSource.one(CHANGE, function () {\n\t                    if (dataSource.view()[0]) {\n\t                        that.search(word);\n\t                    }\n\t                }).fetch();\n\t                return;\n\t            }\n\n\t            this.listView.focus(this._get(predicate));\n\n\t            var current = this.listView.focus();\n\n\t            if (current) {\n\t                if (options.suggest) {\n\t                    that.suggest(current);\n\t                }\n\n\t                this.open();\n\t            }\n\n\t            if (this.options.highlightFirst && !word) {\n\t                this.listView.focusFirst();\n\t            }\n\t        },\n\n\t        _input: function() {\n\t            var that = this,\n\t                element = that.element.removeClass("k-input")[0],\n\t                accessKey = element.accessKey,\n\t                wrapper = that.wrapper,\n\t                SELECTOR = "input.k-input",\n\t                name = element.name || "",\n\t                input,\n\t                maxLength;\n\n\t            if (name) {\n\t                name = \'name="\' + name + \'_input" \';\n\t            }\n\n\t            input = wrapper.find(SELECTOR);\n\n\t            if (!input[0]) {\n\t                wrapper.append(\'<span tabindex="-1" unselectable="on" class="k-dropdown-wrap k-state-default"><input \' + name + \'class="k-input" type="text" autocomplete="\' + AUTOCOMPLETEVALUE +\'"/><span unselectable="on" class="k-select" aria-label="select"><span class="k-icon k-i-arrow-60-down"></span></span></span>\')\n\t                    .append(that.element);\n\n\t                input = wrapper.find(SELECTOR);\n\t            }\n\n\t            input[0].style.cssText = element.style.cssText;\n\t            input[0].title = element.title;\n\n\t            maxLength = parseInt(this.element.prop("maxlength") || this.element.attr("maxlength"), 10);\n\t            if (maxLength > -1) {\n\t                input[0].maxLength = maxLength;\n\t            }\n\n\t            input.addClass(element.className)\n\t                 .css({\n\t                    width: "",\n\t                    height: element.style.height\n\t                 })\n\t                 .attr({\n\t                     "role": "combobox",\n\t                     "aria-expanded": false\n\t                 })\n\t                 .show();\n\n\t            if (placeholderSupported) {\n\t                input.attr("placeholder", that.options.placeholder);\n\t            }\n\n\t            if (accessKey) {\n\t                element.accessKey = "";\n\t                input[0].accessKey = accessKey;\n\t            }\n\n\t            that._focused = that.input = input;\n\t            that._inputWrapper = $(wrapper[0].firstChild);\n\t            that._arrow = wrapper.find(".k-select")\n\t                .attr({\n\t                    "role": "button",\n\t                    "tabIndex": -1\n\t                });\n\t            that._arrowIcon = that._arrow.find(".k-icon");\n\n\t            if (element.id) {\n\t                that._arrow.attr("aria-controls", that.ul[0].id);\n\t            }\n\t        },\n\n\t        _clearButton: function() {\n\t            List.fn._clearButton.call(this);\n\n\t            if (this.options.clearButton) {\n\t                this._clear.insertAfter(this.input);\n\t                this.wrapper.addClass("k-combobox-clearable");\n\t            }\n\t        },\n\n\t        _keydown: function(e) {\n\t            var that = this,\n\t                key = e.keyCode;\n\n\t            that._last = key;\n\n\t            clearTimeout(that._typingTimeout);\n\t            that._typingTimeout = null;\n\n\t            if (key === keys.HOME) {\n\t                that._firstItem();\n\t            } else if (key === keys.END) {\n\t                that._lastItem();\n\t            } else if (key === keys.ENTER || (key === keys.TAB && that.popup.visible())) {\n\t                var current = that.listView.focus();\n\t                var dataItem = that.dataItem();\n\t                var shouldTrigger = true;\n\n\t                if (!that.popup.visible() && (!dataItem || that.text() !== that._text(dataItem))) {\n\t                    current = null;\n\t                }\n\n\t                if (current) {\n\t                    if (that.popup.visible()) {\n\t                        e.preventDefault();\n\t                    }\n\n\t                    dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(current));\n\n\t                    if(dataItem){\n\t                        shouldTrigger = that._value(dataItem) !==  List.unifyType(that.value(), typeof that._value(dataItem));\n\t                    }\n\n\t                    if (shouldTrigger && that.trigger("select", { dataItem: dataItem, item: current })) {\n\t                        return;\n\t                    }\n\n\t                    that._userTriggered = true;\n\n\t                    that._select(current).done(function() {\n\t                        that._blur();\n\t                        that._valueBeforeCascade = that._old = that.value();\n\t                    });\n\t                } else {\n\t                    if(that._syncValueAndText() || that._isSelect){\n\t                        that._accessor(that.input.val());\n\t                    }\n\n\t                    if (that.options.highlightFirst) {\n\t                        that.listView.value(that.input.val());\n\t                        that._blur();\n\t                    } else {\n\t                        that._oldText = that.text();\n\t                    }\n\t                }\n\t            } else if (key != keys.TAB && !that._move(e)) {\n\t               that._search();\n\t            } else if (key === keys.ESC && !that.popup.visible() && that.text()) {\n\t                that._clearValue();\n\t            }\n\t        },\n\n\t        _placeholder: function(show) {\n\t            if (placeholderSupported) {\n\t                return;\n\t            }\n\n\t            var that = this,\n\t                input = that.input,\n\t                placeholder = that.options.placeholder,\n\t                value;\n\n\t            if (placeholder) {\n\t                value = that.value();\n\n\t                if (show === undefined) {\n\t                    show = !value;\n\t                }\n\n\t                input.toggleClass("k-readonly", show);\n\n\t                if (!show) {\n\t                    if (!value) {\n\t                        placeholder = "";\n\t                    } else {\n\t                        return;\n\t                    }\n\t                }\n\n\t                input.val(placeholder);\n\n\t                if (!placeholder && input[0] === activeElement()) {\n\t                    caret(input[0], 0, 0);\n\t                }\n\t            }\n\t        },\n\n\t        _search: function() {\n\t            var that = this;\n\n\t            clearTimeout(that._typingTimeout);\n\n\t            that._typingTimeout = setTimeout(function() {\n\t                var value = that.text();\n\n\t                if (value !== "" && that._prev !== value) {\n\t                    that._prev = value;\n\n\t                    if (that.options.filter === "none" && that.options.virtual) {\n\t                        that.listView.select(-1);\n\t                    }\n\n\t                    that.search(value);\n\n\t                    that._toggleCloseVisibility();\n\t                }\n\t                else if (value === "" && that._prev !== "") {\n\t                    that._clearValue();\n\t                    that.search("");\n\t                }\n\n\t                that._typingTimeout = null;\n\t            }, that.options.delay);\n\t        },\n\n\t        _setText: function(text) {\n\t            this.input.val(text);\n\t            this._prev = text;\n\t        },\n\n\t        _wrapper: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                wrapper = element.parent();\n\n\t            if (!wrapper.is("span.k-widget")) {\n\t                wrapper = element.hide().wrap("<span />").parent();\n\t                wrapper[0].style.cssText = element[0].style.cssText;\n\t            }\n\n\t            that.wrapper = wrapper.addClass("k-widget k-combobox")\n\t                .addClass(element[0].className)\n\t                .removeClass(\'input-validation-error\')\n\t                .css("display", "");\n\t        },\n\n\t        _clearSelection: function(parent, isFiltered) {\n\t            var that = this;\n\t            var hasValue = parent.value();\n\t            var custom = hasValue && parent.selectedIndex === -1;\n\n\t            if (this.selectedIndex == -1 && this.value()) {\n\t                return;\n\t            }\n\n\t            if (isFiltered || !hasValue || custom) {\n\t                that.options.value = "";\n\t                that.value("");\n\t            }\n\t        },\n\n\t        _preselect: function(value, text) {\n\t            this.input.val(text);\n\t            this._accessor(value);\n\n\t            this._old = this._accessor();\n\t            this._oldIndex = this.selectedIndex;\n\n\t            this.listView.setValue(value);\n\t            this._placeholder();\n\n\t            this._initialIndex = null;\n\t            this._presetValue = true;\n\t            this._toggleCloseVisibility();\n\t        },\n\n\t        _clearText: function() {\n\t            this._old = this.value();\n\t            this.text("");\n\t        },\n\n\t        _clearValue: function() {\n\t            Select.fn._clearValue.call(this);\n\t            this.input.focus();\n\t        }\n\t    });\n\n\t    ui.plugin(ComboBox);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.combobox.js?')}}]);