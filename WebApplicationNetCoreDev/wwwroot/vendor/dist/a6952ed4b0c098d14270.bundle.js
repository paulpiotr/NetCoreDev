(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{"./node_modules/@progress/kendo-ui/js/kendo.columnmenu.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.columnmenu.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1090);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1086:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.popup */ "./node_modules/@progress/kendo-ui/js/kendo.popup.js");\n\n/***/ }),\n\n/***/ 1090:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1086), __webpack_require__(1091), __webpack_require__(1092) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "columnmenu",\n\t    name: "Column Menu",\n\t    category: "framework",\n\t    depends: [ "popup", "filtermenu", "menu" ],\n\t    advanced: true\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        proxy = $.proxy,\n\t        extend = $.extend,\n\t        grep = $.grep,\n\t        map = $.map,\n\t        inArray = $.inArray,\n\t        ACTIVE = "k-state-selected",\n\t        ASC = "asc",\n\t        DESC = "desc",\n\t        CHANGE = "change",\n\t        INIT = "init",\n\t        OPEN = "open",\n\t        SELECT = "select",\n\t        STICK = "stick",\n\t        UNSTICK= "unstick",\n\t        POPUP = "kendoPopup",\n\t        FILTERMENU = "kendoFilterMenu",\n\t        MENU = "kendoMenu",\n\t        NS = ".kendoColumnMenu",\n\t        Widget = ui.Widget;\n\n\t    function trim(text) {\n\t        return kendo.trim(text).replace(/&nbsp;/gi, "");\n\t    }\n\n\t    function toHash(arr, key) {\n\t        var result = {};\n\t        var idx, len, current;\n\t        for (idx = 0, len = arr.length; idx < len; idx ++) {\n\t            current = arr[idx];\n\t            result[current[key]] = current;\n\t        }\n\t        return result;\n\t    }\n\n\t    function leafColumns(columns) {\n\t        var result = [];\n\n\t        for (var idx = 0; idx < columns.length; idx++) {\n\t            if (!columns[idx].columns) {\n\t                result.push(columns[idx]);\n\t                continue;\n\t            }\n\t            result = result.concat(leafColumns(columns[idx].columns));\n\t        }\n\n\t        return result;\n\t    }\n\n\t    function attrEquals(attrName, attrValue) {\n\t        return "[" + kendo.attr(attrName) + "=\'" + (attrValue || "").replace(/\'/g, "\\"") + "\']";\n\t    }\n\n\t    function insertElementAt(index, element, container) {\n\t        if (index > 0) {\n\t            element.insertAfter(container.children().eq(index - 1));\n\t        } else {\n\t            container.prepend(element);\n\t        }\n\t    }\n\n\t    function columnOccurrences(columns) {\n\t        var columnDict = {};\n\t        var signature;\n\n\t        for (var i = 0; i < columns.length; i++) {\n\t            signature = JSON.stringify(columns[i]);\n\n\t            if (columnDict[signature]) {\n\t                columnDict[signature].push(i);\n\t            } else {\n\t                columnDict[signature] = [i];\n\t            }\n\t        }\n\n\t        return columnDict;\n\t    }\n\n\t    function oldColumnOccurrences(renderedListElements, checkBoxes) {\n\t        var indexAttr = kendo.attr("index");\n\t        var fieldAttr = kendo.attr("field");\n\t        var columnDict = {};\n\t        var signature;\n\t        var columCheckbox;\n\t        var index;\n\t        var field;\n\t        var title;\n\n\t        for (var j = 0; j < renderedListElements.length; j++) {\n\t            columCheckbox = checkBoxes.eq(j);\n\t            index = parseInt(columCheckbox.attr(indexAttr), 10);\n\t            field = columCheckbox.attr(fieldAttr);\n\t            title = columCheckbox.attr("title");\n\t            signature = field ? field : title;\n\n\t            if (columnDict[signature]) {\n\t                columnDict[signature].push(index);\n\t            } else {\n\t                columnDict[signature] = [index];\n\t            }\n\t        }\n\n\t        return columnDict;\n\t    }\n\n\t    var ColumnMenu = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this,\n\t                link;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            element = that.element;\n\t            options = that.options;\n\t            that.owner = options.owner;\n\t            that.dataSource = options.dataSource;\n\n\t            that.field = element.attr(kendo.attr("field"));\n\t            that.title = element.attr(kendo.attr("title"));\n\n\t            link = element.find(".k-header-column-menu");\n\n\t            if (!link[0]) {\n\t                link = element.addClass("k-with-icon").prepend(\'<a class="k-header-column-menu" href="#" title="\' +\n\t                    options.messages.settings + \'" aria-label="\' +\n\t                    options.messages.settings + \'"><span class="k-icon k-i-more-vertical"></span></a>\').find(".k-header-column-menu");\n\t            }\n\n\t            that.link = link\n\t                .attr("tabindex", -1)\n\t                .on("click" + NS, proxy(that._click, that));\n\n\t            that.wrapper = $(\'<div class="k-column-menu"/>\');\n\n\t            that._refreshHandler = proxy(that.refresh, that);\n\n\t            that.dataSource.bind(CHANGE, that._refreshHandler);\n\t        },\n\n\t        _init: function() {\n\t            var that = this;\n\n\t            that.pane = that.options.pane;\n\t            if (that.pane) {\n\t                that._isMobile = true;\n\t            }\n\n\t            if (that._isMobile) {\n\t                that._createMobileMenu();\n\t            } else {\n\t                that._createMenu();\n\t            }\n\n\t            that.owner._muteAngularRebind(function() {\n\t                that._angularItems("compile");\n\t            });\n\n\t            that._sort();\n\n\t            that._columns();\n\n\t            that._filter();\n\n\t            that._lockColumns();\n\n\t            that._stickyColumns();\n\n\t            that.trigger(INIT, { field: that.field, container: that.wrapper });\n\t        },\n\n\t        events: [ INIT, OPEN, "sort", "filtering", STICK, UNSTICK ],\n\n\t        options: {\n\t            name: "ColumnMenu",\n\t            messages: {\n\t                sortAscending: "Sort Ascending",\n\t                sortDescending: "Sort Descending",\n\t                filter: "Filter",\n\t                column: "Column",\n\t                columns: "Columns",\n\t                columnVisibility: "Column Visibility",\n\t                clear: "Clear",\n\t                cancel: "Cancel",\n\t                done: "Done",\n\t                settings: "Edit Column Settings",\n\t                lock: "Lock Column",\n\t                unlock: "Unlock Column",\n\t                stick: "Stick Column",\n\t                unstick: "Unstick Column",\n\t                setColumnPosition: "Set Column Position"\n\t            },\n\t            filter: "",\n\t            columns: true,\n\t            sortable: true,\n\t            filterable: true,\n\t            animations: {\n\t                left: "slide"\n\t            },\n\t            encodeTitles: false\n\t        },\n\n\t        _createMenu: function() {\n\t            var that = this,\n\t                options = that.options;\n\n\t            that.wrapper.html(kendo.template(template)({\n\t                uid: kendo.guid(),\n\t                ns: kendo.ns,\n\t                messages: options.messages,\n\t                sortable: options.sortable,\n\t                filterable: options.filterable,\n\t                columns: that._ownerColumns(),\n\t                showColumns: options.columns,\n\t                hasLockableColumns: options.hasLockableColumns,\n\t                hasStickableColumns: options.hasStickableColumns,\n\t                encodeTitles: options.encodeTitles\n\t            }));\n\n\t            that.popup = that.wrapper[POPUP]({\n\t                anchor: that.link,\n\t                copyAnchorStyles: false,\n\t                open: proxy(that._open, that),\n\t                activate: proxy(that._activate, that),\n\t                deactivate: proxy(that._deactivate, that),\n\t                close: function() {\n\t                    that.menu._closing = true;\n\t                    if (that.options.closeCallback) {\n\t                        that.options.closeCallback(that.element);\n\t                    }\n\t                }\n\t            }).data(POPUP);\n\n\t            that.menu = that.wrapper.children()[MENU]({\n\t                orientation: "vertical",\n\t                closeOnClick: false,\n\t                open: function() {\n\t                    that._updateMenuItems();\n\t                }\n\t            }).data(MENU);\n\t        },\n\n\t        _deactivate: function() {\n\t            this.menu._closing = false;\n\t        },\n\n\t        _createMobileMenu: function() {\n\t            var that = this,\n\t                options = that.options;\n\n\t            var html = kendo.template(mobileTemplate)({\n\t                ns: kendo.ns,\n\t                field: that.field,\n\t                title: that.title || that.field,\n\t                messages: options.messages,\n\t                sortable: options.sortable,\n\t                filterable: options.filterable,\n\t                columns: that._ownerColumns(),\n\t                showColumns: options.columns,\n\t                hasLockableColumns: options.hasLockableColumns,\n\t                hasStickableColumns: options.hasStickableColumns\n\t            });\n\n\t            that.view = that.pane.append(html);\n\t            that.view.state = { columns: {} };\n\n\t            that.wrapper = that.view.element.find(".k-column-menu");\n\n\t            that.menu = new MobileMenu(that.wrapper.children(), {\n\t                pane: that.pane,\n\t                columnMenu: that\n\t            });\n\n\t            // The toggle animation of the switches should not propagate to the view\n\t            that.menu.element.on("transitionend" + NS, function(e) {\n\t                e.stopPropagation();\n\t            });\n\n\t            var viewElement = that.view.wrapper && that.view.wrapper[0] ? that.view.wrapper : that.view.element;\n\n\t            viewElement.on("click", ".k-header-done", function(e) {\n\t                e.preventDefault();\n\n\t                that.menu._applyChanges();\n\t                that.menu._cancelChanges(false);\n\t                that.close();\n\t            });\n\n\t            viewElement.on("click", ".k-header-cancel", function(e) {\n\t                e.preventDefault();\n\n\t                that.menu._cancelChanges(true);\n\t                that.close();\n\t            });\n\n\t            that.view.bind("showStart", function() {\n\t                var view = that.view || { columns: {} };\n\n\t                if (that.options.hasLockableColumns) {\n\t                    that._updateLockedColumns();\n\t                }\n\n\t                if (that.options.hasStickableColumns) {\n\t                    that._updateStickyColumns();\n\t                }\n\n\t                if (view.element.find(".k-sort-asc.k-state-selected").length) {\n\t                    view.state.initialSort = "asc";\n\t                } else if (view.element.find(".k-sort-desc.k-state-selected").length) {\n\t                    view.state.initialSort = "desc";\n\t                }\n\t            });\n\t        },\n\n\t        _angularItems: function(action) {\n\t            var that = this;\n\t            that.angular(action, function(){\n\t                var items = that.wrapper.find(".k-columns-item input[" + kendo.attr("field") + "]").map(function(){\n\t                    return $(this).closest("li");\n\t                });\n\t                var data = map(that._ownerColumns(), function(col){\n\t                    return { column: col._originalObject };\n\t                });\n\t                return {\n\t                    elements: items,\n\t                    data: data\n\t                };\n\t            });\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that._angularItems("cleanup");\n\n\t            Widget.fn.destroy.call(that);\n\n\t            if (that.filterMenu) {\n\t                that.filterMenu.destroy();\n\t            }\n\n\t            if (that._refreshHandler) {\n\t                that.dataSource.unbind(CHANGE, that._refreshHandler);\n\t            }\n\n\t            if (that.options.columns && that.owner) {\n\t                if (that._updateColumnsMenuHandler) {\n\t                    that.owner.unbind("columnShow", that._updateColumnsMenuHandler);\n\t                    that.owner.unbind("columnHide", that._updateColumnsMenuHandler);\n\t                }\n\n\t                if (that._updateColumnsLockedStateHandler) {\n\t                    that.owner.unbind("columnLock", that._updateColumnsLockedStateHandler);\n\t                    that.owner.unbind("columnUnlock", that._updateColumnsLockedStateHandler);\n\t                }\n\t            }\n\n\t            if (that.menu) {\n\t                that.menu.element.off(NS);\n\t                that.menu.destroy();\n\t            }\n\n\t            that.wrapper.off(NS);\n\n\t            if (that.popup) {\n\t                that.popup.destroy();\n\t            }\n\n\t            if (that.view) {\n\t                that.view.purge();\n\t            }\n\n\t            that.link.off(NS);\n\t            that.owner = null;\n\t            that.wrapper = null;\n\t            that.element = null;\n\t        },\n\n\t        close: function() {\n\t            this.menu.close();\n\t            if (this.popup) {\n\t                this.popup.close();\n\t                this.popup.element.off("keydown" + NS);\n\t            }\n\t        },\n\n\t        _click: function(e) {\n\t            var that = this;\n\n\t            e.preventDefault();\n\t            e.stopPropagation();\n\n\t            var options = this.options;\n\n\t            if (options.filter && this.element.is(!options.filter)) {\n\t                return;\n\t            }\n\n\t            if (!this.popup && !this.pane) {\n\t                this._init();\n\t            } else {\n\t                that._updateMenuItems();\n\t            }\n\n\t            if (this._isMobile) {\n\t                this.pane.navigate(this.view, this.options.animations.left);\n\t            } else {\n\t                this.popup.toggle();\n\t            }\n\t        },\n\n\t        _updateMenuItems: function() {\n\t            var that = this;\n\t            if (that.options.columns) {\n\t                that._setMenuItemsVisibility();\n\t                if (!that.options.columns.sort) {\n\t                    that._reorderMenuItems();\n\t                } else {\n\t                    that._updateDataIndexes();\n\t                }\n\t            }\n\t        },\n\n\t        _setMenuItemsVisibility: function() {\n\t            var that = this;\n\n\t            that._eachRenderedMenuItem(function(index, column, renderedListElement) {\n\t                if (column.matchesMedia === false) {\n\t                    renderedListElement.hide();\n\t                } else {\n\t                    renderedListElement.show();\n\t                }\n\t            });\n\t        },\n\n\t        _reorderMenuItems: function() {\n\t            var that = this;\n\n\t            that._eachRenderedMenuItem(function(index, column, renderedListElement, renderedList) {\n\t                if (renderedListElement[0] && renderedListElement.index() !== index) {\n\t                    insertElementAt(index, renderedListElement, renderedList);\n\t                }\n\t            });\n\t            that._updateDataIndexes();\n\t        },\n\n\t        _updateDataIndexes: function () {\n\t            var that = this;\n\t            var renderedList = that._isMobile && that.view ?\n\t                $(that.view.element).find(".k-columns-item").children("ul") :\n\t                $(that.wrapper).find(".k-menu-group").first(),\n\t                mappedColumns = that._ownerColumns(true).map(function(x) {\n\t                    return x.title || x.field;\n\t                });\n\n\t            renderedList.find("span." + (this._isMobile ? "k-listgroup-form-field-wrapper" : "k-menu-link") +\n\t                " input").each(function (i) {\n\t                var columns;\n\t                var index;\n\t                if (that.options.columns.sort) {\n\t                    columns = that._ownerColumns();\n\t                    index = mappedColumns.indexOf(columns[i].title);\n\t                    $(this).attr(kendo.attr("index"), index);\n\t                } else {\n\t                    $(this).attr(kendo.attr("index"), i);\n\t                }\n\t            });\n\t        },\n\n\t        _eachRenderedMenuItem: function(callback) {\n\t            var that = this;\n\t            var renderedListElement;\n\t            var duplicateColumnIndex;\n\t            var fieldValue;\n\t            var currentColumn;\n\t            var columns = grep(leafColumns(that.owner.columns), function(col) {\n\t                var result = true,\n\t                    title = trim(col.title || "");\n\n\t                if (col.menu === false || (!col.field && !title.length)) {\n\t                    result = false;\n\t                }\n\n\t                return result;\n\t            }).map(function(col) {\n\t                return  {\n\t                     field: col.field,\n\t                     title: col.title,\n\t                     matchesMedia: col.matchesMedia\n\t                   };\n\t            });\n\t            var renderedList = that._isMobile && that.view ?\n\t                $(that.view.element).find(".k-columns-item").children("ul") :\n\t                $(that.wrapper).find(".k-menu-group").first();\n\n\t            var renderedListElements = renderedList.find("span." + (this._isMobile ? "k-listgroup-form-field-wrapper" : "k-menu-link"));\n\t            var oldOccurances = oldColumnOccurrences(renderedListElements, renderedList.find("input[type=checkbox]"));\n\t            var columnOccurrence = columnOccurrences(columns);\n\t            var columnElements;\n\n\t            for (var i = 0; i < columns.length; i++) {\n\t                currentColumn = columns[i];\n\t                fieldValue = currentColumn.field ? currentColumn.field : currentColumn.title;\n\t                duplicateColumnIndex = $.inArray(i, columnOccurrence[JSON.stringify(currentColumn)]);\n\t                columnElements = $();\n\n\t                for (var idx = 0; idx < oldOccurances[fieldValue].length; idx++) {\n\t                    columnElements = columnElements.add(renderedListElements.eq(oldOccurances[fieldValue][idx]));\n\t                }\n\t                renderedListElement = columnElements.find(attrEquals("field", fieldValue)).closest("li").eq(duplicateColumnIndex);\n\t                callback(i, currentColumn, renderedListElement, renderedList);\n\t            }\n\t        },\n\n\t        _open: function() {\n\t            var that = this;\n\t            $(".k-column-menu").not(that.wrapper).each(function() {\n\t                $(this).data(POPUP).close();\n\t            });\n\t            that.popup.element.on("keydown" + NS, function(e) {\n\t                if (e.keyCode == kendo.keys.ESC) {\n\t                    that.close();\n\t                }\n\t            });\n\n\t            if (that.options.hasLockableColumns) {\n\t                that._updateLockedColumns();\n\t            }\n\n\t            if (that.options.hasStickableColumns) {\n\t                that._updateStickyColumns();\n\t            }\n\t        },\n\n\t        _activate: function() {\n\t            this.menu.element.focus();\n\n\t            this.trigger(OPEN, { field: this.field, container: this.wrapper });\n\t        },\n\n\t        _ownerColumns: function(omitSort) {\n\t            var columns = leafColumns(this.owner.columns),\n\t                menuColumns = grep(columns, function(col) {\n\t                    var result = true,\n\t                        title = trim(col.title || "");\n\n\t                    if (col.menu === false || (!col.field && !title.length)) {\n\t                        result = false;\n\t                    }\n\n\t                    return result;\n\t                }),\n\t                result,\n\t                sort = this.options.columns.sort;\n\n\t            result = map(menuColumns, function(col) {\n\t                return {\n\t                    originalField: col.field,\n\t                    field: col.field || col.title,\n\t                    title: col.title || col.field,\n\t                    hidden: col.hidden,\n\t                    matchesMedia: col.matchesMedia,\n\t                    index: inArray(col, columns),\n\t                    locked: !!col.locked,\n\t                    _originalObject: col,\n\t                    uid: col.headerAttributes.id\n\t                };\n\t            });\n\n\t            if (sort && !omitSort) {\n\t                result.sort(function(a,b) {\n\t                    if ( a.title < b.title ) {\n\t                        return sort === "asc" ? -1 : 1;\n\t                      }\n\t                      if ( a.title > b.title ) {\n\t                        return sort === "asc" ? 1 : -1;\n\t                      }\n\t                      return 0;\n\t                });\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _sort: function() {\n\t            var that = this;\n\n\t            if (that.options.sortable) {\n\t                that.refresh();\n\n\t                that.menu.bind(SELECT, function(e) {\n\t                    var item = $(e.item),\n\t                        dir;\n\n\t                    if (item.hasClass("k-sort-asc")) {\n\t                        dir = ASC;\n\t                    } else if (item.hasClass("k-sort-desc")) {\n\t                        dir = DESC;\n\t                    }\n\n\t                    if (!dir) {\n\t                        return;\n\t                    }\n\n\t                    item.parent().find(".k-sort-" + (dir == ASC ? DESC : ASC)).removeClass(ACTIVE);\n\n\t                    that._sortDataSource(item, dir);\n\n\t                    if (!that._isMobile) {\n\t                        that.close();\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        _sortDataSource: function(item, dir) {\n\t            var that = this,\n\t                sortable = that.options.sortable,\n\t                compare = sortable.compare === null ? undefined : sortable.compare,\n\t                dataSource = that.dataSource,\n\t                idx,\n\t                length,\n\t                sort = dataSource.sort() || [];\n\n\t            var removeClass = item.hasClass(ACTIVE) && sortable && sortable.allowUnsort !== false;\n\n\t            dir = !removeClass ? dir : undefined;\n\n\t            if (that.trigger("sort", { sort: { field: that.field, dir: dir, compare: compare } })) {\n\t                return;\n\t            }\n\n\t            if (removeClass) {\n\t                item.removeClass(ACTIVE);\n\t            } else {\n\t                item.addClass(ACTIVE);\n\t            }\n\n\t            if (sortable.mode === "multiple") {\n\t                for (idx = 0, length = sort.length; idx < length; idx++) {\n\t                    if (sort[idx].field === that.field) {\n\t                        sort.splice(idx, 1);\n\t                        break;\n\t                    }\n\t                }\n\t                sort.push({ field: that.field, dir: dir, compare: compare });\n\t            } else {\n\t                sort = [ { field: that.field, dir: dir, compare: compare} ];\n\t            }\n\n\t            dataSource.sort(sort);\n\t        },\n\n\t        _columns: function() {\n\t            var that = this;\n\n\t            if (that.options.columns) {\n\n\t                that._updateColumnsMenu();\n\n\t                that._updateColumnsMenuHandler = proxy(that._updateColumnsMenu, that);\n\n\t                that.owner.bind(["columnHide", "columnShow"], that._updateColumnsMenuHandler);\n\n\t                that._updateColumnsLockedStateHandler = proxy(that._updateColumnsLockedState, that);\n\n\t                that.owner.bind(["columnUnlock", "columnLock" ], that._updateColumnsLockedStateHandler);\n\n\t                that.menu.bind(SELECT, function(e) {\n\t                    var item = $(e.item),\n\t                        input,\n\t                        column,\n\t                        indexAttr = kendo.attr("index"),\n\t                        columnIndexMap = {},\n\t                        columnsCount = 0,\n\t                        columns = grep(leafColumns(that.owner.columns), function(col, idx) {\n\t                            var result = true,\n\t                                title = trim(col.title || "");\n\n\t                            if (col.menu === false || (!col.field && !title.length)) {\n\t                                result = false;\n\t                            }\n\n\t                            if (result) {\n\t                                columnIndexMap[idx] = columnsCount;\n\t                                columnsCount++;\n\t                            }\n\n\t                            return result;\n\t                        });\n\n\t                    if (that._isMobile) {\n\t                        e.preventDefault();\n\t                    }\n\n\t                    if (!item.parent().closest("li.k-columns-item")[0]) {\n\t                        return;\n\t                    }\n\n\t                    input = item.find(":checkbox");\n\t                    if (input.attr("disabled")) {\n\t                        return;\n\t                    }\n\n\t                    column = columns[parseInt(input.attr(indexAttr), 10)];\n\n\t                    if (column.hidden === true) {\n\t                        that.owner.showColumn(column);\n\t                    } else {\n\t                        that.owner.hideColumn(column);\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        _updateColumnsMenu: function() {\n\t            var idx, length, current, checked, locked;\n\t            var fieldAttr = kendo.attr("field"),\n\t                lockedAttr = kendo.attr("locked"),\n\t                uidAttr = kendo.attr("uid"),\n\t                columnIndexMap = {},\n\t                columnsCount = 0,\n\t                colIdx = 0,\n\t                columnsInMenu = grep(leafColumns(this.owner.columns), function(col, idx) {\n\t                    var result = true,\n\t                        title = trim(col.title || "");\n\n\t                    if (col.menu === false || (!col.field && !title.length)) {\n\t                        result = false;\n\t                    }\n\n\t                    if (result) {\n\t                        columnIndexMap[idx] = columnsCount;\n\t                        columnsCount++;\n\t                    }\n\n\t                    return result;\n\t                }),\n\t                visibleFields = grep(this._ownerColumns(), function(field) {\n\t                    return !field.hidden && field.matchesMedia !== false;\n\t                }),\n\t                visibleDataFields = grep(visibleFields, function(field) {\n\t                    return field.originalField;\n\t                }),\n\t                lockedCount = grep(visibleDataFields, function(col) {\n\t                    return col.locked === true;\n\t                }).length,\n\t                nonLockedCount = grep(visibleDataFields, function(col) {\n\t                    return col.locked !== true;\n\t                }).length,\n\t                columnsNotInMenu = grep(this.owner.columns, function(col) {\n\t                    return col.menu === false;\n\t                }),\n\t                hiddenColumnsNotInMenu = grep(columnsNotInMenu, function(col) {\n\t                    return col.hidden;\n\t                });\n\n\t            this.wrapper.find("[role=\'menuitemcheckbox\']").attr("aria-checked", false);\n\n\t            var checkboxes = this.wrapper\n\t                .find(".k-columns-item input[" + fieldAttr + "]")\n\t                .prop("disabled", false)\n\t                .prop("checked", false);\n\t            var switchWidget;\n\n\t            for (idx = 0, length = checkboxes.length; idx < length; idx ++) {\n\t                current = checkboxes.eq(idx);\n\t                locked = current.attr(lockedAttr) === "true";\n\t                checked = false;\n\t                switchWidget = current.data("kendoSwitch");\n\t                colIdx = columnsInMenu.map(function (col) {\n\t                    return col.headerAttributes.id;\n\t                }).indexOf(current.attr(uidAttr));\n\n\t                checked = !columnsInMenu[colIdx].hidden && columnsInMenu[colIdx].matchesMedia !== false;\n\t                current.prop("checked", checked);\n\n\t                if (switchWidget) {\n\t                    switchWidget.enable(true);\n\t                    switchWidget.check(checked);\n\t                }\n\n\t                current.closest("[role=\'menuitemcheckbox\']").attr("aria-checked", checked);\n\n\t                if (checked) {\n\t                    if (lockedCount == 1 && locked) {\n\t                        current.prop("disabled", true);\n\n\t                        if (switchWidget) {\n\t                            switchWidget.enable(false);\n\t                        }\n\t                    }\n\n\t                    if ((columnsNotInMenu.length === 0 || (columnsNotInMenu.length ===  hiddenColumnsNotInMenu.length)) && nonLockedCount == 1 && !locked) {\n\t                        current.prop("disabled", true);\n\n\t                        if (switchWidget) {\n\t                            switchWidget.enable(false);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _updateColumnsLockedState: function() {\n\t            var idx, length, current, column;\n\t            var fieldAttr = kendo.attr("field");\n\t            var lockedAttr = kendo.attr("locked");\n\t            var columns = toHash(this._ownerColumns(), "field");\n\t            var checkboxes = this.wrapper\n\t                .find(".k-columns-item input[type=checkbox]");\n\n\t            for (idx = 0, length = checkboxes.length; idx < length; idx ++ ) {\n\t                current = checkboxes.eq(idx);\n\t                column = columns[current.attr(fieldAttr)];\n\t                if (column) {\n\t                    current.attr(lockedAttr, column.locked);\n\t                }\n\t            }\n\n\t            this._updateColumnsMenu();\n\t        },\n\n\t        _filter: function() {\n\t            var that = this,\n\t                widget = FILTERMENU,\n\t                options = that.options;\n\n\t            if (options.filterable !== false) {\n\n\t                if (options.filterable.multi) {\n\t                    widget = "kendoFilterMultiCheck";\n\t                    if (options.filterable.dataSource) {\n\t                        options.filterable.checkSource = options.filterable.dataSource;\n\t                        delete options.filterable.dataSource;\n\t                    }\n\t                }\n\t                that.filterMenu = that.wrapper.find(".k-filterable")[widget](\n\t                    extend(true, {}, {\n\t                        appendToElement: true,\n\t                        dataSource: options.dataSource,\n\t                        values: options.values,\n\t                        field: that.field,\n\t                        title: that.title,\n\t                        change: function(e) {\n\t                            if (that.trigger("filtering", { filter: e.filter, field: e.field })) {\n\t                                e.preventDefault();\n\t                            }\n\t                        }\n\t                    },\n\t                    options.filterable)\n\t                    ).data(widget);\n\n\t                if (that._isMobile) {\n\t                    that.menu.bind(SELECT, function(e) {\n\t                        var item = $(e.item);\n\n\t                        if (item.hasClass("k-filter-item")) {\n\t                            that.pane.navigate(that.filterMenu.view, that.options.animations.left);\n\t                        }\n\t                    });\n\t                }\n\t            }\n\t        },\n\n\t        _lockColumns: function() {\n\t            var that = this;\n\t            that.menu.bind(SELECT, function(e) {\n\t                var item = $(e.item);\n\n\t                if (item.hasClass("k-lock")) {\n\t                    that.owner.lockColumn(that.field);\n\t                    if (!that._isMobile) {\n\t                        that.close();\n\t                    }\n\t                } else if (item.hasClass("k-unlock")) {\n\t                    that.owner.unlockColumn(that.field);\n\t                    if (!that._isMobile) {\n\t                        that.close();\n\t                    }\n\t                }\n\t            });\n\t        },\n\n\t        _stickyColumns: function() {\n\t            var that = this;\n\t            that.menu.bind(SELECT, function(e) {\n\t                var item = $(e.item);\n\t                var field = that.field;\n\t                var columns = that.owner.columns;\n\t                var column = grep(columns, function(column) {\n\t                    return column.field == field || column.title == field;\n\t                })[0];\n\n\t                if (item.hasClass("k-stick")) {\n\t                    that.owner.stickColumn(that.field);\n\t                    that.trigger(STICK, { column: column });\n\t                    if (!that._isMobile) {\n\t                        that.close();\n\t                    }\n\t                } else if (item.hasClass("k-unstick")) {\n\t                    that.owner.unstickColumn(that.field);\n\t                    that.trigger(UNSTICK, { column: column });\n\t                    if (!that._isMobile) {\n\t                        that.close();\n\t                    }\n\t                }\n\t            });\n\t        },\n\n\t        _updateLockedColumns: function() {\n\t            var field = this.field;\n\t            var columns = this.owner.columns;\n\t            var column = grep(columns, function(column) {\n\t                return column.field == field || column.title == field;\n\t            })[0];\n\n\t            if (!column) {\n\t                return;\n\t            }\n\n\t            var locked = column.locked === true;\n\t            var length = grep(columns, function(column) {\n\t                return !column.hidden && ((column.locked && locked) || (!column.locked && !locked));\n\t            }).length;\n\t            var notLockable = column.lockable === false;\n\n\t            var lockItem = this.wrapper.find(".k-lock").removeClass("k-state-disabled");\n\t            var unlockItem = this.wrapper.find(".k-unlock").removeClass("k-state-disabled");\n\n\t            if (locked || length == 1 || notLockable) {\n\t                lockItem.addClass("k-state-disabled");\n\t            }\n\n\t            if (!locked || length == 1 || notLockable) {\n\t                unlockItem.addClass("k-state-disabled");\n\t            }\n\n\t            this._updateColumnsLockedState();\n\t        },\n\n\t        _updateStickyColumns: function() {\n\t            var field = this.field;\n\t            var columns = this.owner.columns;\n\t            var column = grep(columns, function(column) {\n\t                return column.field == field || column.title == field;\n\t            })[0];\n\n\t            if (!column) {\n\t                return;\n\t            }\n\n\t            var sticky = column.sticky === true;\n\t            var stickable  = column.stickable  === true;\n\t            var locked = column.locked === true;\n\t            var length = grep(columns, function(column) {\n\t                return !column.hidden && ((column.locked && locked) || (!column.locked && !locked));\n\t            }).length;\n\n\t            var stickItem = this.wrapper.find(".k-stick").removeClass("k-state-disabled");\n\t            var unstickItem = this.wrapper.find(".k-unstick").removeClass("k-state-disabled");\n\n\t            if (sticky || !stickable || (locked && length === 1)) {\n\t                stickItem.addClass("k-state-disabled");\n\t            }\n\n\t            if (!sticky || !stickable) {\n\t                unstickItem.addClass("k-state-disabled");\n\t            }\n\t        },\n\n\t        refresh: function() {\n\t            var that = this,\n\t                sort = that.options.dataSource.sort() || [],\n\t                descriptor,\n\t                field = that.field,\n\t                idx,\n\t                length;\n\n\t            that.wrapper.find(".k-sort-asc, .k-sort-desc").removeClass(ACTIVE);\n\n\t            for (idx = 0, length = sort.length; idx < length; idx++) {\n\t               descriptor = sort[idx];\n\n\t               if (field == descriptor.field) {\n\t                    that.wrapper.find(".k-sort-" + descriptor.dir).addClass(ACTIVE);\n\t               }\n\t            }\n\n\t            that.link[that._filterExist(that.dataSource.filter()) ? "addClass" : "removeClass"]("k-state-active");\n\t        },\n\n\t        _filterExist: function(filters) {\n\t            var found = false;\n\t            var filter;\n\n\t            if (!filters) {\n\t                return;\n\t            }\n\n\t            filters = filters.filters;\n\n\t            for (var idx = 0, length = filters.length; idx < length; idx++) {\n\t                filter = filters[idx];\n\n\t                if (filter.field == this.field) {\n\t                    found = true;\n\t                } else if (filter.filters) {\n\t                    found = found || this._filterExist(filter);\n\t                }\n\t            }\n\n\t            return found;\n\t        }\n\t    });\n\n\t    var template = \'<ul id="#=uid#">\'+\n\t                    \'#if(sortable){#\'+\n\t                        \'<li class="k-item k-menu-item k-sort-asc"><span class="k-link k-menu-link"><span class="k-icon k-i-sort-asc-sm"></span>${messages.sortAscending}</span></li>\'+\n\t                        \'<li class="k-item k-menu-item k-sort-desc"><span class="k-link k-menu-link"><span class="k-icon k-i-sort-desc-sm"></span>${messages.sortDescending}</span></li>\'+\n\t                        \'#if(showColumns || filterable){#\'+\n\t                            \'<li class="k-separator k-menu-separator" role="presentation"></li>\'+\n\t                        \'#}#\'+\n\t                    \'#}#\'+\n\t                    \'#if(showColumns){#\'+\n\t                        \'<li class="k-item k-menu-item k-columns-item" aria-haspopup="true"><span class="k-link k-menu-link"><span class="k-icon k-i-columns"></span>${messages.columns}</span><ul>\'+\n\t                        \'#for (var idx = 0; idx < columns.length; idx++) {#\'+\n\t                            \'<li role="menuitemcheckbox" aria-checked="false" #=columns[idx].matchesMedia === false ? "style=\\\'display:none;\\\'" : ""#><input type="checkbox" title="#=encodeTitles ? kendo.htmlEncode(columns[idx].title) : columns[idx].title#" data-#=ns#field="#=columns[idx].field.replace(/\\"/g,"&\\\\#34;")#" data-#=ns#index="#=columns[idx].index#" data-#=ns#locked="#=columns[idx].locked#" data-#=ns#uid="#=columns[idx].uid#"/>#=encodeTitles ? kendo.htmlEncode(columns[idx].title) : columns[idx].title#</li>\'+\n\t                        \'#}#\'+\n\t                        \'</ul></li>\'+\n\t                        \'#if(filterable || hasLockableColumns || hasStickableColumns){#\'+\n\t                            \'<li class="k-separator k-menu-separator" role="presentation"></li>\'+\n\t                        \'#}#\'+\n\t                    \'#}#\'+\n\t                    \'#if(filterable){#\'+\n\t                        \'<li class="k-item k-menu-item k-filter-item" aria-haspopup="true"><span class="k-link k-menu-link"><span class="k-icon k-i-filter"></span>${messages.filter}</span><ul>\'+\n\t                            \'<li><div class="k-filterable"></div></li>\'+\n\t                        \'</ul></li>\'+\n\t                        \'#if(hasLockableColumns || hasStickableColumns){#\'+\n\t                            \'<li class="k-separator k-menu-separator" role="presentation"></li>\'+\n\t                        \'#}#\'+\n\t                    \'#}#\'+\n\t                    \'#if(hasLockableColumns || hasStickableColumns){#\'+\n\t                        \'<li class="k-item k-menu-item k-position-item" aria-haspopup="true"><span class="k-link k-menu-link"><span class="k-icon k-i-set-column-position"></span>${messages.setColumnPosition}</span><ul>\'+\n\t                            \'#if(hasLockableColumns){#\'+\n\t                                \'<li class="k-item k-menu-item k-lock"><span class="k-link k-menu-link"><span class="k-icon k-i-lock"></span>${messages.lock}</span></li>\'+\n\t                                \'<li class="k-item k-menu-item k-unlock"><span class="k-link k-menu-link"><span class="k-icon k-i-unlock"></span>${messages.unlock}</span></li>\'+\n\t                                \'#if(hasStickableColumns){#\'+\n\t                                    \'<li class="k-separator k-menu-separator" role="presentation"></li>\'+\n\t                                \'#}#\'+\n\t                            \'#}#\'+\n\t                            \'#if(hasStickableColumns){#\'+\n\t                                \'<li class="k-item k-menu-item k-stick"><span class="k-link k-menu-link"><span class="k-icon k-i-stick"></span>${messages.stick}</span></li>\'+\n\t                                \'<li class="k-item k-menu-item k-unstick"><span class="k-link k-menu-link"><span class="k-icon k-i-unstick"></span>${messages.unstick}</span></li>\'+\n\t                            \'#}#\'+\n\t                        \'</ul></li>\'+\n\t                    \'#}#\'+\n\t                    \'</ul>\';\n\n\t    var mobileTemplate =\n\t            \'<div data-#=ns#role="view" class="k-grid-column-menu">\' +\n\t                \'<div data-#=ns#role="header" class="k-header">\' +\n\t                    \'<a href="\\\\#" class="k-header-cancel k-link" title="#=messages.cancel#" \' +\n\t                    \'aria-label="#=messages.cancel#"><span class="k-icon k-i-arrow-chevron-left"></span></a>\' +\n\t                    \'${messages.settings}\' +\n\t                    \'<a href="\\\\#" class="k-header-done k-link" title="#=messages.done#" \' +\n\t                    \'aria-label="#=messages.done#"><span class="k-icon k-i-check"></span></a>\' +\n\t                \'</div>\' +\n\t                \'<div class="k-column-menu">\' +\n\t                    \'<ul class="k-reset">\' +\n\t                        \'<li>\' +\n\t                            \'<span class="k-list-title">#=messages.column#: ${title}</span>\' +\n\t                            \'<ul class="k-listgroup k-listgroup-flush">\' +\n\t                                \'#if(sortable){#\' +\n\t                                    \'<li id="#=kendo.guid()#" class="k-item k-listgroup-item k-sort-asc"><span class="k-link"><span class="k-icon k-i-sort-asc-sm"></span><span class="k-item-title">${messages.sortAscending}</span></span></li>\' +\n\t                                    \'<li id="#=kendo.guid()#" class="k-item k-listgroup-item k-sort-desc"><span class="k-link"><span class="k-icon k-i-sort-desc-sm"></span><span class="k-item-title">${messages.sortDescending}</span></span></li>\' +\n\t                                \'#}#\' +\n\t                                \'#if(hasLockableColumns){#\' +\n\t                                    \'<li id="#=kendo.guid()#" class="k-item k-listgroup-item k-lock"><span class="k-link"><span class="k-icon k-i-lock"></span><span class="k-item-title">${messages.lock}</span></span></li>\' +\n\t                                    \'<li id="#=kendo.guid()#" class="k-item k-listgroup-item k-unlock"><span class="k-link"><span class="k-icon k-i-unlock"></span><span class="k-item-title">${messages.unlock}</span></span></li>\' +\n\t                                \'#}#\' +\n\t                                \'#if(hasStickableColumns){#\' +\n\t                                    \'<li id="#=kendo.guid()#" class="k-item k-listgroup-item k-stick"><span class="k-link"><span class="k-icon k-i-stick"></span><span class="k-item-title">${messages.stick}</span></span></li>\' +\n\t                                    \'<li id="#=kendo.guid()#" class="k-item k-listgroup-item k-unstick"><span class="k-link"><span class="k-icon k-i-unstick"></span><span class="k-item-title">${messages.unstick}</span></span></li>\' +\n\t                                \'#}#\' +\n\t                                \'#if(filterable){#\' +\n\t                                    \'<li id="#=kendo.guid()#" class="k-item k-listgroup-item k-filter-item">\' +\n\t                                        \'<span class="k-link k-filterable">\' +\n\t                                            \'<span class="k-icon k-i-filter"></span>\' +\n\t                                            \'<span class="k-item-title">${messages.filter}</span>\' +\n\t                                            \'<span class="k-select"><span class="k-icon k-i-arrow-chevron-right"></span></span>\' +\n\t                                        \'</span>\' +\n\t                                    \'</li>\' +\n\t                                \'#}#\' +\n\t                            \'</ul>\' +\n\t                        \'</li>\' +\n\t                        \'#if(showColumns){#\' +\n\t                        \'<li class="k-columns-item"><span class="k-list-title">${messages.columnVisibility}</span>\' +\n\t                            \'<ul class="k-listgroup k-listgroup-flush">\' +\n\t                            \'#for (var idx = 0; idx < columns.length; idx++) {#\' +\n\t                                \'<li id="#=kendo.guid()#" class="k-item k-listgroup-item">\' +\n\t                                    \'<span class="k-listgroup-form-row">\' +\n\t                                        \'<span class="k-listgroup-form-field-label k-item-title">\' +\n\t                                            \'#=columns[idx].title#\' +\n\t                                        \'</span>\' +\n\t                                        \'<span class="k-listgroup-form-field-wrapper">\' +\n\t                                            \'<input type="checkbox" title="#=columns[idx].title#" \' +\n\t                                                \' data-#=ns#field="#=columns[idx].field.replace(/\\"/g,"&\\\\#34;")#"\' +\n\t                                                \' data-#=ns#index="#=columns[idx].index#"\' +\n\t                                                \' data-#=ns#uid="#=columns[idx].uid#"\' +\n\t                                                \' data-#=ns#locked="#=columns[idx].locked#" />\' +\n\t                                        \'</span>\' +\n\t                                    \'</span>\' +\n\t                                \'</li>\' +\n\t                            \'#}#\' +\n\t                            \'</ul>\' +\n\t                        \'</li>\'+\n\t                        \'#}#\'+\n\t                        \'<li class="k-item k-clear-wrap">\' +\n\t                            \'<span class="k-list-title">&nbsp;</span>\' +\n\t                            \'<ul class="k-listgroup k-listgroup-flush">\' +\n\t                                \'<li class="k-listgroup-item">\' +\n\t                                    \'<span class="k-link k-label k-clear" title="#=messages.clear#" aria-label="#=messages.clear#">\' +\n\t                                        \'#=messages.clear#\' +\n\t                                    \'</span>\' +\n\t                                \'</li>\' +\n\t                            \'</ul>\' +\n\t                        \'</li>\' +\n\t                    \'</ul>\' +\n\t                \'</div>\'+\n\t            \'</div>\';\n\n\t    var MobileMenu = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that._createCheckBoxes();\n\n\t            that.element.on("click" + NS, "li.k-item:not(.k-separator):not(.k-state-disabled):not(:has(.k-switch))", "_click");\n\t        },\n\n\t        events: [ SELECT ],\n\n\t        _click: function(e) {\n\t            var that = this;\n\n\t            if (!$(e.target).is("[type=checkbox]")) {\n\t                e.preventDefault();\n\t            }\n\n\t            if ($(e.target).hasClass("k-clear")) {\n\t                that._cancelChanges(true);\n\n\t                return;\n\t            }\n\n\t            if ($(e.target).hasClass("k-filterable")) {\n\t                that._cancelChanges(true);\n\t                that.trigger(SELECT, { item: e.currentTarget });\n\n\t                return;\n\t            }\n\n\t            that._updateSelectedItems(e.currentTarget);\n\t        },\n\n\t        _updateSelectedItems: function(el) {\n\t            var that = this;\n\t            var item = $(el);\n\t            var state = that.options.columnMenu.view.state || { columns: {} };\n\t            var id = item.prop("id");\n\n\t            if (item.hasClass("k-filter-item")) {\n\t                return;\n\t            }\n\n\t            if (state[id]) {\n\t                state[id] = false;\n\t            } else {\n\t                state[id] = true;\n\t            }\n\n\t            if (item.hasClass("k-sort-asc") || item.hasClass("k-sort-desc")) {\n\t                var dir;\n\t                var otherItem;\n\t                var otherItemId;\n\n\t                if (item.hasClass("k-sort-asc")) {\n\t                    dir = "asc";\n\t                    otherItem = that.element.find(".k-sort-desc");\n\t                } else {\n\t                    dir = "desc";\n\t                    otherItem = that.element.find(".k-sort-asc");\n\t                }\n\n\t                otherItemId = otherItem.prop("id");\n\n\t                if (dir === state.initialSort && !item.hasClass("k-state-selected")) {\n\t                    state[id] = false;\n\t                }\n\n\t                if (state[otherItemId]) {\n\t                    state[otherItemId] = false;\n\t                }\n\n\t                otherItem.removeClass(ACTIVE);\n\t            }\n\n\t            if (item.hasClass(ACTIVE)) {\n\t                item.removeClass(ACTIVE);\n\t            } else {\n\t                item.addClass(ACTIVE);\n\t            }\n\t        },\n\n\t        _cancelChanges: function(force) {\n\t            var that = this;\n\t            var menu = that.options.columnMenu;\n\t            var view = menu.view;\n\t            var state = view.state || { columns: {} };\n\t            var columns = state.columns;\n\n\t            that.element.find("." + ACTIVE).removeClass(ACTIVE);\n\t            menu.refresh();\n\n\t            if (force) {\n\t                var selectedItems = [];\n\n\t                for (var key in columns) {\n\t                    if (columns.hasOwnProperty(key)) {\n\t                        if (columns[key] === true) {\n\t                            var item = view.element.find("#" + key);\n\n\t                            selectedItems.push(item[0]);\n\t                        }\n\t                    }\n\t                }\n\t                // In order to use the columns hide/show validation,\n\t                // triggering the Select event must be done backwards\n\t                for (var i = selectedItems.length - 1; i >= 0; i--) {\n\t                    that.trigger(SELECT, { item: selectedItems[i] });\n\t                }\n\n\t                if (menu.options.hasLockableColumns) {\n\t                    menu._updateLockedColumns();\n\t                }\n\n\t                if (menu.options.hasStickableColumns) {\n\t                    menu._updateStickyColumns();\n\t                }\n\t            }\n\n\t            that.options.columnMenu.view.state = { columns: {} };\n\t        },\n\n\t        _applyChanges: function() {\n\t            var that = this;\n\t            var view = that.options.columnMenu.view;\n\t            var state = view.state || { columns: {} };\n\n\t            for (var key in state) {\n\t                if (state.hasOwnProperty(key)) {\n\t                    if (key !== "initialSort" && key !== "columns" && state[key] === true) {\n\t                        var item = view.element.find("#" + key);\n\n\t                        if (item.hasClass(ACTIVE)) {\n\t                            item.removeClass(ACTIVE);\n\t                        } else {\n\t                            item.addClass(ACTIVE);\n\t                        }\n\n\t                        that.trigger(SELECT, { item: item[0] });\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _createCheckBoxes: function() {\n\t            var that = this;\n\n\t            that.element.find(".k-columns-item").find("[type=\'checkbox\']").kendoSwitch({\n\t                messages: {\n\t                    checked: "",\n\t                    unchecked: ""\n\t                },\n\t                change: function(e) {\n\t                    var item = e.sender.element.closest(".k-item");\n\t                    var state = that.options.columnMenu.view.state || { columns: {} };\n\t                    var id = item.prop("id");\n\n\t                    if (state.columns[id]) {\n\t                        state.columns[id] = false;\n\t                    } else {\n\t                        state.columns[id] = true;\n\t                    }\n\n\t                    that.trigger(SELECT, { item: item });\n\t                }\n\t            });\n\t        },\n\n\t        _destroyCheckBoxes: function() {\n\t            var that = this;\n\t            var elements = that.element.find(".k-columns-item").find("[type=\'checkbox\']");\n\t            var switchWidget;\n\n\t            for (var i = 0; i < elements.length; i++) {\n\t                switchWidget = elements.eq(i).data("kendoSwitch");\n\n\t                if (switchWidget) {\n\t                    switchWidget.destroy();\n\t                }\n\t            }\n\t        },\n\n\t        close: function() {\n\t            this.options.pane.navigate("");\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            that.element.off(NS);\n\t            that._destroyCheckBoxes();\n\t        }\n\t    });\n\n\t    ui.plugin(ColumnMenu);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1091:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.filtermenu */ "./node_modules/@progress/kendo-ui/js/kendo.filtermenu.js");\n\n/***/ }),\n\n/***/ 1092:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.menu */ "./node_modules/@progress/kendo-ui/js/kendo.menu.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.columnmenu.js?')},"./node_modules/@progress/kendo-ui/js/kendo.columnsorter.js":
/*!******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.columnsorter.js ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1093);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1049:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1093:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1049) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "columnsorter",\n\t    name: "Column Sorter",\n\t    category: "framework",\n\t    depends: ["core"],\n\t    advanced: true\n\t};\n\n\t(function ($, undefined) {\n\t    var kendo = window.kendo;\n\t    var ui = kendo.ui;\n\t    var Widget = ui.Widget;\n\t    var DIR = "dir";\n\t    var ASC = "asc";\n\t    var SINGLE = "single";\n\t    var FIELD = "field";\n\t    var DESC = "desc";\n\t    var sorterNS = ".kendoColumnSorter";\n\t    var TLINK = ".k-link";\n\t    var ARIASORT = "aria-sort";\n\t    var proxy = $.proxy;\n\n\t    var ColumnSorter = Widget.extend({\n\t        init: function (element, options) {\n\n\t            var that = this, link;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that._refreshHandler = proxy(that.refresh, that);\n\n\t            that.dataSource = that.options.dataSource.bind("change", that._refreshHandler);\n\n\t            that.directions = that.options.initialDirection === ASC ? [ASC, DESC] : [DESC, ASC];\n\n\t            link = that.element.find(TLINK);\n\n\t            if (!link[0]) {\n\t                link = that.element.wrapInner(\'<a class="k-link" href="#"/>\').find(TLINK);\n\t            }\n\n\t            that.link = link;\n\n\t            that.element.on("click" + sorterNS, proxy(that._click, that));\n\t        },\n\n\t        options: {\n\t            name: "ColumnSorter",\n\t            mode: SINGLE,\n\t            allowUnsort: true,\n\t            compare: null,\n\t            filter: "",\n\t            initialDirection: ASC,\n\t            showIndexes: false\n\t        },\n\n\t        events: ["change"],\n\n\t        destroy: function () {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            that.element.off(sorterNS);\n\n\t            that.dataSource.unbind("change", that._refreshHandler);\n\t            that._refreshHandler = that.element = that.link = that.dataSource = null;\n\t        },\n\n\t        refresh: function (e) {\n\t            if (e && (e.action === "itemchange" || e.action === "sync")) {\n\t                return;\n\t            }\n\t            var that = this,\n\t                sort = that.dataSource.sort() || [],\n\t                dir,\n\t                table,\n\t                leafCells,\n\t                element = that.element,\n\t                field = element.attr(kendo.attr(FIELD)),\n\t                descriptor = (that.dataSource._sortFields || {})[field],\n\t                headerIndex,\n\t                sortOrder;\n\n\t            element.removeAttr(kendo.attr(DIR));\n\t            element.removeAttr(ARIASORT);\n\n\n\t            if (descriptor) {\n\t                dir = descriptor.dir;\n\t                element.attr(kendo.attr(DIR), dir);\n\t                sortOrder = descriptor.index;\n\t            }\n\n\t            if (element.is("th") && descriptor) {\n\t                table = getColsTable(element);\n\n\t                if (table) {\n\t                    if (element.attr(kendo.attr("index"))) {\n\t                        leafCells = leafDataCells(element.closest("table"));\n\t                        headerIndex = leafCells.index(element);\n\t                    } else {\n\t                        headerIndex = element.parent().children(":visible").index(element);\n\t                    }\n\n\t                    table.find("col:not(.k-group-col):not(.k-hierarchy-col)").eq(headerIndex).toggleClass("k-sorted", dir !== undefined);\n\t                }\n\t            }\n\t            element.toggleClass("k-sorted", dir !== undefined);\n\t            element.find(".k-i-sort-asc-sm,.k-i-sort-desc-sm,.k-sort-order").remove();\n\n\t            if (dir === ASC) {\n\t                $(\'<span class="k-icon k-i-sort-asc-sm" />\').appendTo(that.link);\n\t                element.attr(ARIASORT, "ascending");\n\t            } else if (dir === DESC) {\n\t                $(\'<span class="k-icon k-i-sort-desc-sm" />\').appendTo(that.link);\n\t                element.attr(ARIASORT, "descending");\n\t            }\n\t            if (that.options.showIndexes && sort.length > 1 && sortOrder) {\n\t                $(\'<span class="k-sort-order" />\').html(sortOrder).appendTo(that.link);\n\t            }\n\t        },\n\n\t        _toggleSortDirection: function(dir) {\n\t            var directions = this.directions;\n\t            if (dir === directions[directions.length - 1] && this.options.allowUnsort) {\n\t                return undefined;\n\t            }\n\t            return directions[0] === dir ? directions[1] : directions[0];\n\t        },\n\n\t        _click: function (e) {\n\t            var that = this,\n\t                element = that.element,\n\t                field = element.attr(kendo.attr(FIELD)),\n\t                dir = element.attr(kendo.attr(DIR)),\n\t                options = that.options,\n\t                compare = that.options.compare === null ? undefined : that.options.compare,\n\t                sort = that.dataSource.sort() || [],\n\t                idx,\n\t                length;\n\n\t            e.preventDefault();\n\n\t            if (options.filter && !element.is(options.filter)) {\n\t                return;\n\t            }\n\n\t            dir = this._toggleSortDirection(dir);\n\n\t            if (this.trigger("change", { sort: { field: field, dir: dir, compare: compare } })) {\n\t                return;\n\t            }\n\n\t            if (options.mode === SINGLE) {\n\t                sort = [{ field: field, dir: dir, compare: compare }];\n\t            } else if (options.mode === "multiple") {\n\t                for (idx = 0, length = sort.length; idx < length; idx++) {\n\t                    if (sort[idx].field === field) {\n\t                        sort.splice(idx, 1);\n\t                        break;\n\t                    }\n\t                }\n\t                sort.push({ field: field, dir: dir, compare: compare });\n\t            }\n\n\t            if (this.dataSource.options.endless) {\n\t                this.dataSource.options.endless = null;\n\t                element.closest(".k-grid").getKendoGrid()._endlessPageSize = that.dataSource.options.pageSize;\n\t                this.dataSource.pageSize(that.dataSource.options.pageSize);\n\t            }\n\t            this.dataSource.sort(sort);\n\t        }\n\t    });\n\n\t    function leafDataCells(container) {\n\t        var rows = container.find("tr:not(.k-filter-row)");\n\t        var indexAttr = kendo.attr("index");\n\n\t        var cells = rows.find("th[" + indexAttr + "]:visible");\n\n\t        cells.sort(function(a, b) {\n\t            a = $(a);\n\t            b = $(b);\n\n\t            var indexA = a.attr(indexAttr);\n\t            var indexB = b.attr(indexAttr);\n\n\t            if (indexA === undefined) {\n\t                indexA = $(a).index();\n\t            }\n\t            if (indexB === undefined) {\n\t                indexB = $(b).index();\n\t            }\n\n\t            indexA = parseInt(indexA, 10);\n\t            indexB = parseInt(indexB, 10);\n\t            return indexA > indexB ? 1 : (indexA < indexB ? -1 : 0);\n\t        });\n\n\t        return cells;\n\t    }\n\n\t    function getColsTable(element) {\n\t        var table = null;\n\t        if (element.is("th")) {\n\t            table = element.closest("table");\n\t            if (table.parent().hasClass("k-grid-header-wrap")) {\n\t                table = table.closest(".k-grid").find(".k-grid-content > table");\n\t            } else if (table.parent().hasClass("k-grid-header-locked")) {\n\t                table = table.closest(".k-grid").find(".k-grid-content-locked > table");\n\t            }\n\t        }\n\t        return table;\n\t    }\n\n\t    ui.plugin(ColumnSorter);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.columnsorter.js?')}}]);