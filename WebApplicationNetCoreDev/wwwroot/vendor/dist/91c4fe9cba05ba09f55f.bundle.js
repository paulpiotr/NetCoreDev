(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{"./node_modules/@progress/kendo-ui/js/dataviz/diagram/layout.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/dataviz/diagram/layout.js ***!
  \**********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(901);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 901:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(902) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function ($, undefined) {\n\t    var kendo = window.kendo,\n\t        diagram = kendo.dataviz.diagram,\n\t        Graph = diagram.Graph,\n\t        Node = diagram.Node,\n\t        Link = diagram.Link,\n\t        deepExtend = kendo.deepExtend,\n\t        Size = diagram.Size,\n\t        Rect = diagram.Rect,\n\t        Dictionary = diagram.Dictionary,\n\t        Set = diagram.Set,\n\t        HyperTree = diagram.Graph,\n\t        Utils = diagram.Utils,\n\t        Point = diagram.Point,\n\t        EPSILON = 1e-06,\n\t        DEG_TO_RAD = Math.PI / 180,\n\t        contains = Utils.contains,\n\t        grep = $.grep;\n\n\t    /**\n\t     * Base class for layout algorithms.\n\t     * @type {*}\n\t     */\n\t    var LayoutBase = kendo.Class.extend({\n\t        defaultOptions: {\n\t            type: "Tree",\n\t            subtype: "Down",\n\t            roots: null,\n\t            animate: false,\n\t            //-------------------------------------------------------------------\n\t            /**\n\t             * Force-directed option: whether the motion of the nodes should be limited by the boundaries of the diagram surface.\n\t             */\n\t            limitToView: false,\n\t            /**\n\t             * Force-directed option: the amount of friction applied to the motion of the nodes.\n\t             */\n\t            friction: 0.9,\n\t            /**\n\t             * Force-directed option: the optimal distance between nodes (minimum energy).\n\t             */\n\t            nodeDistance: 50,\n\t            /**\n\t             * Force-directed option: the number of time things are being calculated.\n\t             */\n\t            iterations: 300,\n\t            //-------------------------------------------------------------------\n\t            /**\n\t             * Tree option: the separation in one direction (depends on the subtype what direction this is).\n\t             */\n\t            horizontalSeparation: 90,\n\t            /**\n\t             * Tree option: the separation in the complementary direction (depends on the subtype what direction this is).\n\t             */\n\t            verticalSeparation: 50,\n\n\t            //-------------------------------------------------------------------\n\t            /**\n\t             * Tip-over tree option: children-to-parent vertical distance.\n\t             */\n\t            underneathVerticalTopOffset: 15,\n\t            /**\n\t             * Tip-over tree option: children-to-parent horizontal distance.\n\t             */\n\t            underneathHorizontalOffset: 15,\n\t            /**\n\t             * Tip-over tree option: leaf-to-next-branch vertical distance.\n\t             */\n\t            underneathVerticalSeparation: 15,\n\t            //-------------------------------------------------------------------\n\t            /**\n\t             * Settings object to organize the different components of the diagram in a grid layout structure\n\t             */\n\t            grid: {\n\t                /**\n\t                 * The width of the grid in which components are arranged. Beyond this width a component will be on the next row.\n\t                 */\n\t                width: 1500,\n\t                /**\n\t                 * The left offset of the grid.\n\t                 */\n\t                offsetX: 50,\n\t                /**\n\t                 * The top offset of the grid.\n\t                 */\n\t                offsetY: 50,\n\t                /**\n\t                 * The horizontal padding within a cell of the grid where a single component resides.\n\t                 */\n\t                componentSpacingX: 20,\n\t                /**\n\t                 * The vertical padding within a cell of the grid where a single component resides.\n\t                 */\n\t                componentSpacingY: 20\n\t            },\n\n\t            //-------------------------------------------------------------------\n\t            /**\n\t             * Layered option: the separation height/width between the layers.\n\t             */\n\t            layerSeparation: 50,\n\t            /**\n\t             * Layered option: how many rounds of shifting and fine-tuning.\n\t             */\n\t            layeredIterations: 2,\n\t            /**\n\t             * Tree-radial option: the angle at which the layout starts.\n\t             */\n\t            startRadialAngle: 0,\n\t            /**\n\t             * Tree-radial option: the angle at which the layout starts.\n\t             */\n\t            endRadialAngle: 360,\n\t            /**\n\t             * Tree-radial option: the separation between levels.\n\t             */\n\t            radialSeparation: 150,\n\t            /**\n\t             * Tree-radial option: the separation between the root and the first level.\n\t             */\n\t            radialFirstLevelSeparation: 200,\n\t            /**\n\t             * Tree-radial option: whether a virtual roots bing the components in one radial layout.\n\t             */\n\t            keepComponentsInOneRadialLayout: false,\n\t            //-------------------------------------------------------------------\n\n\t            // TODO: ensure to change this to false when containers are around\n\t            ignoreContainers: true,\n\t            layoutContainerChildren: false,\n\t            ignoreInvisible: true,\n\t            animateTransitions: false\n\t        },\n\t        init: function () {\n\t        },\n\n\t        /**\n\t         * Organizes the components in a grid.\n\t         * Returns the final set of nodes (not the Graph).\n\t         * @param components\n\t         */\n\t        gridLayoutComponents: function (components) {\n\t            if (!components) {\n\t                throw "No components supplied.";\n\t            }\n\n\t            // calculate and cache the bounds of the components\n\t            Utils.forEach(components, function (c) {\n\t                c.calcBounds();\n\t            });\n\n\t            // order by decreasing width\n\t            components.sort(function (a, b) {\n\t                return b.bounds.width - a.bounds.width;\n\t            });\n\n\t            var maxWidth = this.options.grid.width,\n\t                offsetX = this.options.grid.componentSpacingX,\n\t                offsetY = this.options.grid.componentSpacingY,\n\t                height = 0,\n\t                startX = this.options.grid.offsetX,\n\t                startY = this.options.grid.offsetY,\n\t                x = startX,\n\t                y = startY,\n\t                i,\n\t                resultLinkSet = [],\n\t                resultNodeSet = [];\n\n\t            while (components.length > 0) {\n\t                if (x >= maxWidth) {\n\t                    // start a new row\n\t                    x = startX;\n\t                    y += height + offsetY;\n\t                    // reset the row height\n\t                    height = 0;\n\t                }\n\t                var component = components.pop();\n\t                this.moveToOffset(component, new Point(x, y));\n\t                for (i = 0; i < component.nodes.length; i++) {\n\t                    resultNodeSet.push(component.nodes[i]); // to be returned in the end\n\t                }\n\t                for (i = 0; i < component.links.length; i++) {\n\t                    resultLinkSet.push(component.links[i]);\n\t                }\n\t                var boundingRect = component.bounds;\n\t                var currentHeight = boundingRect.height;\n\t                if (currentHeight <= 0 || isNaN(currentHeight)) {\n\t                    currentHeight = 0;\n\t                }\n\t                var currentWidth = boundingRect.width;\n\t                if (currentWidth <= 0 || isNaN(currentWidth)) {\n\t                    currentWidth = 0;\n\t                }\n\n\t                if (currentHeight >= height) {\n\t                    height = currentHeight;\n\t                }\n\t                x += currentWidth + offsetX;\n\t            }\n\n\t            return {\n\t                nodes: resultNodeSet,\n\t                links: resultLinkSet\n\t            };\n\t        },\n\n\t        moveToOffset: function (component, p) {\n\t            var i, j,\n\t                bounds = component.bounds,\n\t                deltax = p.x - bounds.x,\n\t                deltay = p.y - bounds.y;\n\n\t            for (i = 0; i < component.nodes.length; i++) {\n\t                var node = component.nodes[i];\n\t                var nodeBounds = node.bounds();\n\t                if (nodeBounds.width === 0 && nodeBounds.height === 0 && nodeBounds.x === 0 && nodeBounds.y === 0) {\n\t                    nodeBounds = new Rect(0, 0, 0, 0);\n\t                }\n\t                nodeBounds.x += deltax;\n\t                nodeBounds.y += deltay;\n\t                node.bounds(nodeBounds);\n\t            }\n\t            for (i = 0; i < component.links.length; i++) {\n\t                var link = component.links[i];\n\t                if (link.points) {\n\t                    var newpoints = [];\n\t                    var points = link.points;\n\t                    for (j = 0; j < points.length; j++) {\n\t                        var pt = points[j];\n\t                        pt.x += deltax;\n\t                        pt.y += deltay;\n\t                        newpoints.push(pt);\n\t                    }\n\t                    link.points = newpoints;\n\t                }\n\t            }\n\t            this.currentHorizontalOffset += bounds.width + this.options.grid.offsetX;\n\t            return new Point(deltax, deltay);\n\t        },\n\n\t        transferOptions: function (options) {\n\n\t            // Size options lead to stackoverflow and need special handling\n\n\t            this.options = kendo.deepExtend({}, this.defaultOptions);\n\t            if (Utils.isUndefined(options)) {\n\t                return;\n\t            }\n\n\t            this.options = kendo.deepExtend(this.options, options || {});\n\t        }\n\t    });\n\n\t    /**\n\t     * The data bucket a hypertree holds in its nodes.     *\n\t     * @type {*}\n\t     */\n\t    /* var ContainerGraph = kendo.Class.extend({\n\t     init: function (diagram) {\n\t     this.diagram = diagram;\n\t     this.graph = new Graph(diagram);\n\t     this.container = null;\n\t     this.containerNode = null;\n\t     }\n\n\t     });*/\n\n\t    /**\n\t     * Adapter between the diagram control and the graph representation. It converts shape and connections to nodes and edges taking into the containers and their collapsef state,\n\t     * the visibility of items and more. If the layoutContainerChildren is true a hypertree is constructed which holds the hierarchy of containers and many conditions are analyzed\n\t     * to investigate how the effective graph structure looks like and how the layout has to be performed.\n\t     * @type {*}\n\t     */\n\t    var DiagramToHyperTreeAdapter = kendo.Class.extend({\n\t        init: function (diagram) {\n\n\t            /**\n\t             * The mapping to/from the original nodes.\n\t             * @type {Dictionary}\n\t             */\n\t            this.nodeMap = new Dictionary();\n\n\t            /**\n\t             * Gets the mapping of a shape to a container in case the shape sits in a collapsed container.\n\t             * @type {Dictionary}\n\t             */\n\t            this.shapeMap = new Dictionary();\n\n\t            /**\n\t             * The nodes being mapped.\n\t             * @type {Dictionary}\n\t             */\n\t            this.nodes = [];\n\n\t            /**\n\t             * The connections being mapped.\n\t             * @type {Dictionary}\n\t             */\n\t            this.edges = [];\n\n\t            // the mapping from an edge to all the connections it represents, this can be both because of multiple connections between\n\t            // two shapes or because a container holds multiple connections to another shape or container.\n\t            this.edgeMap = new Dictionary();\n\n\t            /**\n\t             * The resulting set of Nodes when the analysis has finished.\n\t             * @type {Array}\n\t             */\n\t            this.finalNodes = [];\n\n\t            /**\n\t             * The resulting set of Links when the analysis has finished.\n\t             * @type {Array}\n\t             */\n\t            this.finalLinks = [];\n\n\t            /**\n\t             * The items being omitted because of multigraph edges.\n\t             * @type {Array}\n\t             */\n\t            this.ignoredConnections = [];\n\n\t            /**\n\t             * The items being omitted because of containers, visibility and other factors.\n\t             * @type {Array}\n\t             */\n\t            this.ignoredShapes = [];\n\n\t            /**\n\t             * The map from a node to the partition/hypernode in which it sits. This hyperMap is null if \'options.layoutContainerChildren\' is false.\n\t             * @type {Dictionary}\n\t             */\n\t            this.hyperMap = new Dictionary();\n\n\t            /**\n\t             * The hypertree contains the hierarchy defined by the containers.\n\t             * It\'s in essence a Graph of Graphs with a tree structure defined by the hierarchy of containers.\n\t             * @type {HyperTree}\n\t             */\n\t            this.hyperTree = new Graph();\n\n\t            /**\n\t             * The resulting graph after conversion. Note that this does not supply the information contained in the\n\t             * ignored connection and shape collections.\n\t             * @type {null}\n\t             */\n\t            this.finalGraph = null;\n\n\t            this.diagram = diagram;\n\t        },\n\n\t        /**\n\t         * The hyperTree is used when the \'options.layoutContainerChildren\' is true. It contains the hierarchy of containers whereby each node is a ContainerGraph.\n\t         * This type of node has a Container reference to the container which holds the Graph items. There are three possible situations during the conversion process:\n\t         *  - Ignore the containers: the container are non-existent and only normal shapes are mapped. If a shape has a connection to a container it will be ignored as well\n\t         *    since there is no node mapped for the container.\n\t         *  - Do not ignore the containers and leave the content of the containers untouched: the top-level elements are being mapped and the children within a container are not altered.\n\t         *  - Do not ignore the containers and organize the content of the containers as well: the hypertree is constructed and there is a partitioning of all nodes and connections into the hypertree.\n\t         *    The only reason a connection or node is not being mapped might be due to the visibility, which includes the visibility change through a collapsed parent container.\n\t         * @param options\n\t         */\n\t        convert: function (options) {\n\n\t            if (Utils.isUndefined(this.diagram)) {\n\t                throw "No diagram to convert.";\n\t            }\n\n\t            this.options = kendo.deepExtend({\n\t                    ignoreInvisible: true,\n\t                    ignoreContainers: true,\n\t                    layoutContainerChildren: false\n\t                },\n\t                options || {}\n\t            );\n\n\t            this.clear();\n\t            // create the nodes which participate effectively in the graph analysis\n\t            this._renormalizeShapes();\n\n\t            // recreate the incoming and outgoing collections of each and every node\n\t            this._renormalizeConnections();\n\n\t            // export the resulting graph\n\t            this.finalNodes = new Dictionary(this.nodes);\n\t            this.finalLinks = new Dictionary(this.edges);\n\n\t            this.finalGraph = new Graph();\n\t            this.finalNodes.forEach(function (n) {\n\t                this.finalGraph.addNode(n);\n\t            }, this);\n\t            this.finalLinks.forEach(function (l) {\n\t                this.finalGraph.addExistingLink(l);\n\t            }, this);\n\t            return this.finalGraph;\n\t        },\n\n\t        /**\n\t         * Maps the specified connection to an edge of the graph deduced from the given diagram.\n\t         * @param connection\n\t         * @returns {*}\n\t         */\n\t        mapConnection: function (connection) {\n\t            return this.edgeMap.get(connection.id);\n\t        },\n\n\t        /**\n\t         * Maps the specified shape to a node of the graph deduced from the given diagram.\n\t         * @param shape\n\t         * @returns {*}\n\t         */\n\t        mapShape: function (shape) {\n\t            return this.nodeMap.get(shape.id);\n\t        },\n\n\t        /**\n\t         * Gets the edge, if any, between the given nodes.\n\t         * @param a\n\t         * @param b\n\t         */\n\t        getEdge: function (a, b) {\n\t            return Utils.first(a.links, function (link) {\n\t                return link.getComplement(a) === b;\n\t            });\n\t        },\n\n\t        /**\n\t         * Clears all the collections used by the conversion process.\n\t         */\n\t        clear: function () {\n\t            this.finalGraph = null;\n\t            this.hyperTree = (!this.options.ignoreContainers && this.options.layoutContainerChildren) ? new HyperTree() : null;\n\t            this.hyperMap = (!this.options.ignoreContainers && this.options.layoutContainerChildren) ? new Dictionary() : null;\n\t            this.nodeMap = new Dictionary();\n\t            this.shapeMap = new Dictionary();\n\t            this.nodes = [];\n\t            this.edges = [];\n\t            this.edgeMap = new Dictionary();\n\t            this.ignoredConnections = [];\n\t            this.ignoredShapes = [];\n\t            this.finalNodes = [];\n\t            this.finalLinks = [];\n\t        },\n\n\t        /**\n\t         * The path from a given ContainerGraph to the root (container).\n\t         * @param containerGraph\n\t         * @returns {Array}\n\t         */\n\t        listToRoot: function (containerGraph) {\n\t            var list = [];\n\t            var s = containerGraph.container;\n\t            if (!s) {\n\t                return list;\n\t            }\n\t            list.push(s);\n\t            while (s.parentContainer) {\n\t                s = s.parentContainer;\n\t                list.push(s);\n\t            }\n\t            list.reverse();\n\t            return list;\n\t        },\n\n\t        firstNonIgnorableContainer: function (shape) {\n\n\t            if (shape.isContainer && !this._isIgnorableItem(shape)) {\n\t                return shape;\n\t            }\n\t            return !shape.parentContainer ? null : this.firstNonIgnorableContainer(shape.parentContainer);\n\t        },\n\t        isContainerConnection: function (a, b) {\n\t            if (a.isContainer && this.isDescendantOf(a, b)) {\n\t                return true;\n\t            }\n\t            return b.isContainer && this.isDescendantOf(b, a);\n\t        },\n\n\t        /**\n\t         * Returns true if the given shape is a direct child or a nested container child of the given container.\n\t         * If the given container and shape are the same this will return false since a shape cannot be its own child.\n\t         * @param scope\n\t         * @param a\n\t         * @returns {boolean}\n\t         */\n\t        isDescendantOf: function (scope, a) {\n\t            if (!scope.isContainer) {\n\t                throw "Expecting a container.";\n\t            }\n\t            if (scope === a) {\n\t                return false;\n\t            }\n\t            if (contains(scope.children, a)) {\n\t                return true;\n\t            }\n\t            var containers = [];\n\t            for (var i = 0, len = scope.children.length; i < len; i++) {\n\t                var c = scope.children[i];\n\t                if (c.isContainer && this.isDescendantOf(c, a)) {\n\t                    containers.push(c);\n\t                }\n\t            }\n\n\t            return containers.length > 0;\n\t        },\n\t        isIgnorableItem: function (shape) {\n\t            if (this.options.ignoreInvisible) {\n\t                if (shape.isCollapsed && this._isVisible(shape)) {\n\t                    return false;\n\t                }\n\t                if (!shape.isCollapsed && this._isVisible(shape)) {\n\t                    return false;\n\t                }\n\t                return true;\n\t            }\n\t            else {\n\t                return shape.isCollapsed && !this._isTop(shape);\n\t            }\n\t        },\n\n\t        /**\n\t         *  Determines whether the shape is or needs to be mapped to another shape. This occurs essentially when the shape sits in\n\t         * a collapsed container hierarchy and an external connection needs a node endpoint. This node then corresponds to the mapped shape and is\n\t         * necessarily a container in the parent hierarchy of the shape.\n\t         * @param shape\n\t         */\n\t        isShapeMapped: function (shape) {\n\t            return shape.isCollapsed && !this._isVisible(shape) && !this._isTop(shape);\n\t        },\n\n\t        leastCommonAncestor: function (a, b) {\n\t            if (!a) {\n\t                throw "Parameter should not be null.";\n\t            }\n\t            if (!b) {\n\t                throw "Parameter should not be null.";\n\t            }\n\n\t            if (!this.hyperTree) {\n\t                throw "No hypertree available.";\n\t            }\n\t            var al = this.listToRoot(a);\n\t            var bl = this.listToRoot(b);\n\t            var found = null;\n\t            if (Utils.isEmpty(al) || Utils.isEmpty(bl)) {\n\t                return this.hyperTree.root.data;\n\t            }\n\t            var xa = al[0];\n\t            var xb = bl[0];\n\t            var i = 0;\n\t            while (xa === xb) {\n\t                found = al[i];\n\t                i++;\n\t                if (i >= al.length || i >= bl.length) {\n\t                    break;\n\t                }\n\t                xa = al[i];\n\t                xb = bl[i];\n\t            }\n\t            if (!found) {\n\t                return this.hyperTree.root.data;\n\t            }\n\t            else {\n\t                return grep(this.hyperTree.nodes, function (n) {\n\t                    return  n.data.container === found;\n\t                });\n\t            }\n\t        },\n\t        /**\n\t         * Determines whether the specified item is a top-level shape or container.\n\t         * @param item\n\t         * @returns {boolean}\n\t         * @private\n\t         */\n\t        _isTop: function (item) {\n\t            return !item.parentContainer;\n\t        },\n\n\t        /**\n\t         * Determines iteratively (by walking up the container stack) whether the specified shape is visible.\n\t         * This does NOT tell whether the item is not visible due to an explicit Visibility change or due to a collapse state.\n\t         * @param shape\n\t         * @returns {*}\n\t         * @private\n\t         */\n\t        _isVisible: function (shape) {\n\n\t            if (!shape.visible()) {\n\t                return false;\n\t            }\n\t            return !shape.parentContainer ? shape.visible() : this._isVisible(shape.parentContainer);\n\t        },\n\n\t        _isCollapsed: function (shape) {\n\n\t            if (shape.isContainer && shape.isCollapsed) {\n\t                return true;\n\t            }\n\t            return shape.parentContainer && this._isCollapsed(shape.parentContainer);\n\t        },\n\n\t        /**\n\t         * First part of the graph creation; analyzing the shapes and containers and deciding whether they should be mapped to a Node.\n\t         * @private\n\t         */\n\t        _renormalizeShapes: function () {\n\t            // add the nodes, the adjacency structure will be reconstructed later on\n\t            if (this.options.ignoreContainers) {\n\t                for (var i = 0, len = this.diagram.shapes.length; i < len; i++) {\n\t                    var shape = this.diagram.shapes[i];\n\n\t                    // if not visible (and ignoring the invisible ones) or a container we skip\n\t                    if ((this.options.ignoreInvisible && !this._isVisible(shape)) || shape.isContainer) {\n\t                        this.ignoredShapes.push(shape);\n\t                        continue;\n\t                    }\n\t                    var node = new Node(shape.id, shape);\n\t                    node.isVirtual = false;\n\n\t                    // the mapping will always contain singletons and the hyperTree will be null\n\t                    this.nodeMap.add(shape.id, node);\n\t                    this.nodes.push(node);\n\t                }\n\t            }\n\t            else {\n\t                throw "Containers are not supported yet, but stay tuned.";\n\t            }\n\t        },\n\n\t        /**\n\t         * Second part of the graph creation; analyzing the connections and deciding whether they should be mapped to an edge.\n\t         * @private\n\t         */\n\t        _renormalizeConnections: function () {\n\t            if (this.diagram.connections.length === 0) {\n\t                return;\n\t            }\n\t            for (var i = 0, len = this.diagram.connections.length; i < len; i++) {\n\t                var conn = this.diagram.connections[i];\n\n\t                if (this.isIgnorableItem(conn)) {\n\t                    this.ignoredConnections.push(conn);\n\t                    continue;\n\t                }\n\n\t                var source = !conn.sourceConnector ? null : conn.sourceConnector.shape;\n\t                var sink = !conn.targetConnector ? null : conn.targetConnector.shape;\n\n\t                // no layout for floating connections\n\t                if (!source || !sink) {\n\t                    this.ignoredConnections.push(conn);\n\t                    continue;\n\t                }\n\n\t                if (contains(this.ignoredShapes, source) && !this.shapeMap.containsKey(source)) {\n\t                    this.ignoredConnections.push(conn);\n\t                    continue;\n\t                }\n\t                if (contains(this.ignoredShapes, sink) && !this.shapeMap.containsKey(sink)) {\n\t                    this.ignoredConnections.push(conn);\n\t                    continue;\n\t                }\n\n\t                // if the endpoint sits in a collapsed container we need the container rather than the shape itself\n\t                if (this.shapeMap.containsKey(source)) {\n\t                    source = this.shapeMap[source];\n\t                }\n\t                if (this.shapeMap.containsKey(sink)) {\n\t                    sink = this.shapeMap[sink];\n\t                }\n\n\t                var sourceNode = this.mapShape(source);\n\t                var sinkNode = this.mapShape(sink);\n\t                if ((sourceNode === sinkNode) || this.areConnectedAlready(sourceNode, sinkNode)) {\n\t                    this.ignoredConnections.push(conn);\n\t                    continue;\n\t                }\n\n\t                if (sourceNode === null || sinkNode === null) {\n\t                    throw "A shape was not mapped to a node.";\n\t                }\n\t                if (this.options.ignoreContainers) {\n\t                    // much like a floating connection here since at least one end is attached to a container\n\t                    if (sourceNode.isVirtual || sinkNode.isVirtual) {\n\t                        this.ignoredConnections.push(conn);\n\t                        continue;\n\t                    }\n\t                    var newEdge = new Link(sourceNode, sinkNode, conn.id, conn);\n\n\t                    this.edgeMap.add(conn.id, newEdge);\n\t                    this.edges.push(newEdge);\n\t                }\n\t                else {\n\t                    throw "Containers are not supported yet, but stay tuned.";\n\t                }\n\t            }\n\t        },\n\n\t        areConnectedAlready: function (n, m) {\n\t            return Utils.any(this.edges, function (l) {\n\t                return l.source === n && l.target === m || l.source === m && l.target === n;\n\t            });\n\t        }\n\n\t        /**\n\t         * Depth-first traversal of the given container.\n\t         * @param container\n\t         * @param action\n\t         * @param includeStart\n\t         * @private\n\t         */\n\t        /* _visitContainer: function (container, action, includeStart) {\n\n\t         *//*if (container == null) throw new ArgumentNullException("container");\n\t         if (action == null) throw new ArgumentNullException("action");\n\t         if (includeStart) action(container);\n\t         if (container.children.isEmpty()) return;\n\t         foreach(\n\t         var item\n\t         in\n\t         container.children.OfType < IShape > ()\n\t         )\n\t         {\n\t         var childContainer = item\n\t         as\n\t         IContainerShape;\n\t         if (childContainer != null) this.VisitContainer(childContainer, action);\n\t         else action(item);\n\t         }*//*\n\t         }*/\n\n\n\t    });\n\n\t    /**\n\t     * The classic spring-embedder (aka force-directed, Fruchterman-Rheingold, barycentric) algorithm.\n\t     * http://en.wikipedia.org/wiki/Force-directed_graph_drawing\n\t     *  - Chapter 12 of Tamassia et al. "Handbook of graph drawing and visualization".\n\t     *  - Kobourov on preprint arXiv; http://arxiv.org/pdf/1201.3011.pdf\n\t     *  - Fruchterman and Rheingold in SOFTWARE-PRACTICE AND EXPERIENCE, VOL. 21(1 1), 1129-1164 (NOVEMBER 1991)\n\t     * @type {*}\n\t     */\n\t    var SpringLayout = LayoutBase.extend({\n\t        init: function (diagram) {\n\t            var that = this;\n\t            LayoutBase.fn.init.call(that);\n\t            if (Utils.isUndefined(diagram)) {\n\t                throw "Diagram is not specified.";\n\t            }\n\t            this.diagram = diagram;\n\t        },\n\n\t        layout: function (options) {\n\n\t            this.transferOptions(options);\n\n\t            var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n\t            var graph = adapter.convert(options);\n\t            if (graph.isEmpty()) {\n\t                return;\n\t            }\n\t            // split into connected components\n\t            var components = graph.getConnectedComponents();\n\t            if (Utils.isEmpty(components)) {\n\t                return;\n\t            }\n\t            for (var i = 0; i < components.length; i++) {\n\t                var component = components[i];\n\t                this.layoutGraph(component, options);\n\t            }\n\t            var finalNodeSet = this.gridLayoutComponents(components);\n\t            return new diagram.LayoutState(this.diagram, finalNodeSet);\n\t        },\n\n\t        layoutGraph: function (graph, options) {\n\n\t            if (Utils.isDefined(options)) {\n\t                this.transferOptions(options);\n\t            }\n\t            this.graph = graph;\n\n\t            var initialTemperature = this.options.nodeDistance * 9;\n\t            this.temperature = initialTemperature;\n\n\t            var guessBounds = this._expectedBounds();\n\t            this.width = guessBounds.width;\n\t            this.height = guessBounds.height;\n\n\t            for (var step = 0; step < this.options.iterations; step++) {\n\t                this.refineStage = step >= this.options.iterations * 5 / 6;\n\t                this.tick();\n\t                // exponential cooldown\n\t                this.temperature = this.refineStage ?\n\t                    initialTemperature / 30 :\n\t                    initialTemperature * (1 - step / (2 * this.options.iterations ));\n\t            }\n\t        },\n\n\t        /**\n\t         * Single iteration of the simulation.\n\t         */\n\t        tick: function () {\n\t            var i;\n\t            // collect the repulsive forces on each node\n\t            for (i = 0; i < this.graph.nodes.length; i++) {\n\t                this._repulsion(this.graph.nodes[i]);\n\t            }\n\n\t            // collect the attractive forces on each node\n\t            for (i = 0; i < this.graph.links.length; i++) {\n\t                this._attraction(this.graph.links[i]);\n\t            }\n\t            // update the positions\n\t            for (i = 0; i < this.graph.nodes.length; i++) {\n\t                var node = this.graph.nodes[i];\n\t                var offset = Math.sqrt(node.dx * node.dx + node.dy * node.dy);\n\t                if (offset === 0) {\n\t                    return;\n\t                }\n\t                node.x += Math.min(offset, this.temperature) * node.dx / offset;\n\t                node.y += Math.min(offset, this.temperature) * node.dy / offset;\n\t                if (this.options.limitToView) {\n\t                    node.x = Math.min(this.width, Math.max(node.width / 2, node.x));\n\t                    node.y = Math.min(this.height, Math.max(node.height / 2, node.y));\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * Shakes the node away from its current position to escape the deadlock.\n\t         * @param node A Node.\n\t         * @private\n\t         */\n\t        _shake: function (node) {\n\t            // just a simple polar neighborhood\n\t            var rho = Math.random() * this.options.nodeDistance / 4;\n\t            var alpha = Math.random() * 2 * Math.PI;\n\t            node.x += rho * Math.cos(alpha);\n\t            node.y -= rho * Math.sin(alpha);\n\t        },\n\n\t        /**\n\t         * The typical Coulomb-Newton force law F=k/r^2\n\t         * @remark This only works in dimensions less than three.\n\t         * @param d\n\t         * @param n A Node.\n\t         * @param m Another Node.\n\t         * @returns {number}\n\t         * @private\n\t         */\n\t        _InverseSquareForce: function (d, n, m) {\n\t            var force;\n\t            if (!this.refineStage) {\n\t                force = Math.pow(d, 2) / Math.pow(this.options.nodeDistance, 2);\n\t            }\n\t            else {\n\t                var deltax = n.x - m.x;\n\t                var deltay = n.y - m.y;\n\n\t                var wn = n.width / 2;\n\t                var hn = n.height / 2;\n\t                var wm = m.width / 2;\n\t                var hm = m.height / 2;\n\n\t                force = (Math.pow(deltax, 2) / Math.pow(wn + wm + this.options.nodeDistance, 2)) + (Math.pow(deltay, 2) / Math.pow(hn + hm + this.options.nodeDistance, 2));\n\t            }\n\t            return force * 4 / 3;\n\t        },\n\n\t        /**\n\t         * The typical Hooke force law F=kr^2\n\t         * @param d\n\t         * @param n\n\t         * @param m\n\t         * @returns {number}\n\t         * @private\n\t         */\n\t        _SquareForce: function (d, n, m) {\n\t            return 1 / this._InverseSquareForce(d, n, m);\n\t        },\n\n\t        _repulsion: function (n) {\n\t            n.dx = 0;\n\t            n.dy = 0;\n\t            Utils.forEach(this.graph.nodes, function (m) {\n\t                if (m === n) {\n\t                    return;\n\t                }\n\t                while (n.x === m.x && n.y === m.y) {\n\t                    this._shake(m);\n\t                }\n\t                var vx = n.x - m.x;\n\t                var vy = n.y - m.y;\n\t                var distance = Math.sqrt(vx * vx + vy * vy);\n\t                var r = this._SquareForce(distance, n, m) * 2;\n\t                n.dx += (vx / distance) * r;\n\t                n.dy += (vy / distance) * r;\n\t            }, this);\n\t        },\n\t        _attraction: function (link) {\n\t            var t = link.target;\n\t            var s = link.source;\n\t            if (s === t) {\n\t                // loops induce endless shakes\n\t                return;\n\t            }\n\t            while (s.x === t.x && s.y === t.y) {\n\t                this._shake(t);\n\t            }\n\n\t            var vx = s.x - t.x;\n\t            var vy = s.y - t.y;\n\t            var distance = Math.sqrt(vx * vx + vy * vy);\n\n\t            var a = this._InverseSquareForce(distance, s, t) * 5;\n\t            var dx = (vx / distance) * a;\n\t            var dy = (vy / distance) * a;\n\t            t.dx += dx;\n\t            t.dy += dy;\n\t            s.dx -= dx;\n\t            s.dy -= dy;\n\t        },\n\n\t        /**\n\t         * Calculates the expected bounds after layout.\n\t         * @returns {*}\n\t         * @private\n\t         */\n\t        _expectedBounds: function () {\n\n\t            var size, N = this.graph.nodes.length, /*golden ration optimal?*/ ratio = 1.5, multiplier = 4;\n\t            if (N === 0) {\n\t                return size;\n\t            }\n\t            size = Utils.fold(this.graph.nodes, function (s, node) {\n\t                var area = node.width * node.height;\n\t                if (area > 0) {\n\t                    s += Math.sqrt(area);\n\t                    return s;\n\t                }\n\t                return 0;\n\t            }, 0, this);\n\t            var av = size / N;\n\t            var squareSize = av * Math.ceil(Math.sqrt(N));\n\t            var width = squareSize * Math.sqrt(ratio);\n\t            var height = squareSize / Math.sqrt(ratio);\n\t            return { width: width * multiplier, height: height * multiplier };\n\t        }\n\n\t    });\n\n\t    var TreeLayoutProcessor = kendo.Class.extend({\n\n\t        init: function (options) {\n\t            this.center = null;\n\t            this.options = options;\n\t        },\n\t        layout: function (treeGraph, root) {\n\t            this.graph = treeGraph;\n\t            if (!this.graph.nodes || this.graph.nodes.length === 0) {\n\t                return;\n\t            }\n\n\t            if (!contains(this.graph.nodes, root)) {\n\t                throw "The given root is not in the graph.";\n\t            }\n\n\t            this.center = root;\n\t            this.graph.cacheRelationships();\n\t            /* var nonull = this.graph.nodes.where(function (n) {\n\t             return n.associatedShape != null;\n\t             });*/\n\n\t            // transfer the rects\n\t            /*nonull.forEach(function (n) {\n\t             n.Location = n.associatedShape.Position;\n\t             n.NodeSize = n.associatedShape.ActualBounds.ToSize();\n\t             }\n\n\t             );*/\n\n\t            // caching the children\n\t            /* nonull.forEach(function (n) {\n\t             n.children = n.getChildren();\n\t             });*/\n\n\t            this.layoutSwitch();\n\n\t            // apply the layout to the actual visuals\n\t            // nonull.ForEach(n => n.associatedShape.Position = n.Location);\n\t        },\n\n\t        layoutLeft: function (left) {\n\t            this.setChildrenDirection(this.center, "Left", false);\n\t            this.setChildrenLayout(this.center, "Default", false);\n\t            var h = 0, w = 0, y, i, node;\n\t            for (i = 0; i < left.length; i++) {\n\t                node = left[i];\n\t                node.TreeDirection = "Left";\n\t                var s = this.measure(node, Size.Empty);\n\t                w = Math.max(w, s.Width);\n\t                h += s.height + this.options.verticalSeparation;\n\t            }\n\n\t            h -= this.options.verticalSeparation;\n\t            var x = this.center.x - this.options.horizontalSeparation;\n\t            y = this.center.y + ((this.center.height - h) / 2);\n\t            for (i = 0; i < left.length; i++) {\n\t                node = left[i];\n\t                var p = new Point(x - node.Size.width, y);\n\n\t                this.arrange(node, p);\n\t                y += node.Size.height + this.options.verticalSeparation;\n\t            }\n\t        },\n\n\t        layoutRight: function (right) {\n\t            this.setChildrenDirection(this.center, "Right", false);\n\t            this.setChildrenLayout(this.center, "Default", false);\n\t            var h = 0, w = 0, y, i, node;\n\t            for (i = 0; i < right.length; i++) {\n\t                node = right[i];\n\t                node.TreeDirection = "Right";\n\t                var s = this.measure(node, Size.Empty);\n\t                w = Math.max(w, s.Width);\n\t                h += s.height + this.options.verticalSeparation;\n\t            }\n\n\t            h -= this.options.verticalSeparation;\n\t            var x = this.center.x + this.options.horizontalSeparation + this.center.width;\n\t            y = this.center.y + ((this.center.height - h) / 2);\n\t            for (i = 0; i < right.length; i++) {\n\t                node = right[i];\n\t                var p = new Point(x, y);\n\t                this.arrange(node, p);\n\t                y += node.Size.height + this.options.verticalSeparation;\n\t            }\n\t        },\n\n\t        layoutUp: function (up) {\n\t            this.setChildrenDirection(this.center, "Up", false);\n\t            this.setChildrenLayout(this.center, "Default", false);\n\t            var w = 0, y, node, i;\n\t            for (i = 0; i < up.length; i++) {\n\t                node = up[i];\n\t                node.TreeDirection = "Up";\n\t                var s = this.measure(node, Size.Empty);\n\t                w += s.width + this.options.horizontalSeparation;\n\t            }\n\n\t            w -= this.options.horizontalSeparation;\n\t            var x = this.center.x + (this.center.width / 2) - (w / 2);\n\n\t            // y = this.center.y -verticalSeparation -this.center.height/2 - h;\n\t            for (i = 0; i < up.length; i++) {\n\t                node = up[i];\n\t                y = this.center.y - this.options.verticalSeparation - node.Size.height;\n\t                var p = new Point(x, y);\n\t                this.arrange(node, p);\n\t                x += node.Size.width + this.options.horizontalSeparation;\n\t            }\n\t        },\n\n\t        layoutDown: function (down) {\n\t            var node, i;\n\t            this.setChildrenDirection(this.center, "Down", false);\n\t            this.setChildrenLayout(this.center, "Default", false);\n\t            var w = 0, y;\n\t            for (i = 0; i < down.length; i++) {\n\t                node = down[i];\n\t                node.treeDirection = "Down";\n\t                var s = this.measure(node, Size.Empty);\n\t                w += s.width + this.options.horizontalSeparation;\n\t            }\n\n\t            w -= this.options.horizontalSeparation;\n\t            var x = this.center.x + (this.center.width / 2) - (w / 2);\n\t            y = this.center.y + this.options.verticalSeparation + this.center.height;\n\t            for (i = 0; i < down.length; i++) {\n\t                node = down[i];\n\t                var p = new Point(x, y);\n\t                this.arrange(node, p);\n\t                x += node.Size.width + this.options.horizontalSeparation;\n\t            }\n\t        },\n\n\t        layoutRadialTree: function () {\n\t            // var rmax = children.Aggregate(0D, (current, node) => Math.max(node.SectorAngle, current));\n\t            this.setChildrenDirection(this.center, "Radial", false);\n\t            this.setChildrenLayout(this.center, "Default", false);\n\t            this.previousRoot = null;\n\t            var startAngle = this.options.startRadialAngle * DEG_TO_RAD;\n\t            var endAngle = this.options.endRadialAngle * DEG_TO_RAD;\n\t            if (endAngle <= startAngle) {\n\t                throw "Final angle should not be less than the start angle.";\n\t            }\n\n\t            this.maxDepth = 0;\n\t            this.origin = new Point(this.center.x, this.center.y);\n\t            this.calculateAngularWidth(this.center, 0);\n\n\t            // perform the layout\n\t            if (this.maxDepth > 0) {\n\t                this.radialLayout(this.center, this.options.radialFirstLevelSeparation, startAngle, endAngle);\n\t            }\n\n\t            // update properties of the root node\n\t            this.center.Angle = endAngle - startAngle;\n\t        },\n\n\t        tipOverTree: function (down, startFromLevel) {\n\t            if (Utils.isUndefined(startFromLevel)) {\n\t                startFromLevel = 0;\n\t            }\n\n\t            this.setChildrenDirection(this.center, "Down", false);\n\t            this.setChildrenLayout(this.center, "Default", false);\n\t            this.setChildrenLayout(this.center, "Underneath", false, startFromLevel);\n\t            var w = 0, y, node, i;\n\t            for (i = 0; i < down.length; i++) {\n\t                node = down[i];\n\n\t                // if (node.IsSpecial) continue;\n\t                node.TreeDirection = "Down";\n\t                var s = this.measure(node, Size.Empty);\n\t                w += s.width + this.options.horizontalSeparation;\n\t            }\n\n\t            w -= this.options.horizontalSeparation;\n\n\t            // putting the root in the center with respect to the whole diagram is not a nice result, let\'s put it with respect to the first level only\n\t            w -= down[down.length - 1].width;\n\t            w += down[down.length - 1].associatedShape.bounds().width;\n\n\t            var x = this.center.x + (this.center.width / 2) - (w / 2);\n\t            y = this.center.y + this.options.verticalSeparation + this.center.height;\n\t            for (i = 0; i < down.length; i++) {\n\t                node = down[i];\n\t                // if (node.IsSpecial) continue;\n\t                var p = new Point(x, y);\n\t                this.arrange(node, p);\n\t                x += node.Size.width + this.options.horizontalSeparation;\n\t            }\n\n\t            /*//let\'s place the special node, assuming there is only one\n\t             if (down.Count(n => n.IsSpecial) > 0)\n\t             {\n\t             var special = (from n in down where n.IsSpecial select n).First();\n\t             if (special.Children.Count > 0)\n\t             throw new DiagramException("The \'special\' element should not have children.");\n\t             special.Data.Location = new Point(Center.Data.Location.X + Center.AssociatedShape.BoundingRectangle.Width + this.options.HorizontalSeparation, Center.Data.Location.Y);\n\t             }*/\n\t        },\n\t        calculateAngularWidth: function (n, d) {\n\t            if (d > this.maxDepth) {\n\t                this.maxDepth = d;\n\t            }\n\n\t            var aw = 0, w = 1000, h = 1000, diameter = d === 0 ? 0 : Math.sqrt((w * w) + (h * h)) / d;\n\n\t            if (n.children.length > 0) {\n\t                // eventually with n.IsExpanded\n\t                for (var i = 0, len = n.children.length; i < len; i++) {\n\t                    var child = n.children[i];\n\t                    aw += this.calculateAngularWidth(child, d + 1);\n\t                }\n\t                aw = Math.max(diameter, aw);\n\t            }\n\t            else {\n\t                aw = diameter;\n\t            }\n\n\t            n.sectorAngle = aw;\n\t            return aw;\n\t        },\n\t        sortChildren: function (n) {\n\t            var basevalue = 0, i;\n\n\t            // update basevalue angle for node ordering\n\t            if (n.parents.length > 1) {\n\t                throw "Node is not part of a tree.";\n\t            }\n\t            var p = n.parents[0];\n\t            if (p) {\n\t                var pl = new Point(p.x, p.y);\n\t                var nl = new Point(n.x, n.y);\n\t                basevalue = this.normalizeAngle(Math.atan2(pl.y - nl.y, pl.x - nl.x));\n\t            }\n\n\t            var count = n.children.length;\n\t            if (count === 0) {\n\t                return null;\n\t            }\n\n\t            var angle = [];\n\t            var idx = [];\n\n\t            for (i = 0; i < count; ++i) {\n\t                var c = n.children[i];\n\t                var l = new Point(c.x, c.y);\n\t                idx[i] = i;\n\t                angle[i] = this.normalizeAngle(-basevalue + Math.atan2(l.y - l.y, l.x - l.x));\n\t            }\n\n\t            Utils.bisort(angle, idx);\n\t            var col = []; // list of nodes\n\t            var children = n.children;\n\t            for (i = 0; i < count; ++i) {\n\t                col.push(children[idx[i]]);\n\t            }\n\n\t            return col;\n\t        },\n\n\t        normalizeAngle: function (angle) {\n\t            while (angle > Math.PI * 2) {\n\t                angle -= 2 * Math.PI;\n\t            }\n\t            while (angle < 0) {\n\t                angle += Math.PI * 2;\n\t            }\n\t            return angle;\n\t        },\n\t        radialLayout: function (node, radius, startAngle, endAngle) {\n\t            var deltaTheta = endAngle - startAngle;\n\t            var deltaThetaHalf = deltaTheta / 2.0;\n\t            var parentSector = node.sectorAngle;\n\t            var fraction = 0;\n\t            var sorted = this.sortChildren(node);\n\t            for (var i = 0, len = sorted.length; i < len; i++) {\n\t                var childNode = sorted[i];\n\t                var cp = childNode;\n\t                var childAngleFraction = cp.sectorAngle / parentSector;\n\t                if (childNode.children.length > 0) {\n\t                    this.radialLayout(childNode,\n\t                        radius + this.options.radialSeparation,\n\t                        startAngle + (fraction * deltaTheta),\n\t                        startAngle + ((fraction + childAngleFraction) * deltaTheta));\n\t                }\n\n\t                this.setPolarLocation(childNode, radius, startAngle + (fraction * deltaTheta) + (childAngleFraction * deltaThetaHalf));\n\t                cp.angle = childAngleFraction * deltaTheta;\n\t                fraction += childAngleFraction;\n\t            }\n\t        },\n\t        setPolarLocation: function (node, radius, angle) {\n\t            node.x = this.origin.x + (radius * Math.cos(angle));\n\t            node.y = this.origin.y + (radius * Math.sin(angle));\n\t            node.BoundingRectangle = new Rect(node.x, node.y, node.width, node.height);\n\t        },\n\n\t        /**\n\t         * Sets the children direction recursively.\n\t         * @param node\n\t         * @param direction\n\t         * @param includeStart\n\t         */\n\t        setChildrenDirection: function (node, direction, includeStart) {\n\t            var rootDirection = node.treeDirection;\n\t            this.graph.depthFirstTraversal(node, function (n) {\n\t                n.treeDirection = direction;\n\t            });\n\t            if (!includeStart) {\n\t                node.treeDirection = rootDirection;\n\t            }\n\t        },\n\n\t        /**\n\t         * Sets the children layout recursively.\n\t         * @param node\n\t         * @param layout\n\t         * @param includeStart\n\t         * @param startFromLevel\n\t         */\n\t        setChildrenLayout: function (node, layout, includeStart, startFromLevel) {\n\t            if (Utils.isUndefined(startFromLevel)) {\n\t                startFromLevel = 0;\n\t            }\n\t            var rootLayout = node.childrenLayout;\n\t            if (startFromLevel > 0) {\n\t                // assign levels to the Node.Level property\n\t                this.graph.assignLevels(node);\n\n\t                // assign the layout on the condition that the level is at least the \'startFromLevel\'\n\t                this.graph.depthFirstTraversal(\n\t                    node, function (s) {\n\t                        if (s.level >= startFromLevel + 1) {\n\t                            s.childrenLayout = layout;\n\t                        }\n\t                    }\n\t                );\n\t            }\n\t            else {\n\t                this.graph.depthFirstTraversal(node, function (s) {\n\t                    s.childrenLayout = layout;\n\t                });\n\n\t                // if the start should not be affected we put the state back\n\t                if (!includeStart) {\n\t                    node.childrenLayout = rootLayout;\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * Returns the actual size of the node. The given size is the allowed space wherein the node can lay out itself.\n\t         * @param node\n\t         * @param givenSize\n\t         * @returns {Size}\n\t         */\n\t        measure: function (node, givenSize) {\n\t            var w = 0, h = 0, s;\n\t            var result = new Size(0, 0);\n\t            if (!node) {\n\t                throw "";\n\t            }\n\t            var b = node.associatedShape.bounds();\n\t            var shapeWidth = b.width;\n\t            var shapeHeight = b.height;\n\t            if (node.parents.length !== 1) {\n\t                throw "Node not in a spanning tree.";\n\t            }\n\n\t            var parent = node.parents[0];\n\t            if (node.treeDirection === "Undefined") {\n\t                node.treeDirection = parent.treeDirection;\n\t            }\n\n\t            if (Utils.isEmpty(node.children)) {\n\t                result = new Size(\n\t                    Math.abs(shapeWidth) < EPSILON ? 50 : shapeWidth,\n\t                    Math.abs(shapeHeight) < EPSILON ? 25 : shapeHeight);\n\t            }\n\t            else if (node.children.length === 1) {\n\t                switch (node.treeDirection) {\n\t                    case "Radial":\n\t                        s = this.measure(node.children[0], givenSize); // child size\n\t                        w = shapeWidth + (this.options.radialSeparation * Math.cos(node.AngleToParent)) + s.width;\n\t                        h = shapeHeight + Math.abs(this.options.radialSeparation * Math.sin(node.AngleToParent)) + s.height;\n\t                        break;\n\t                    case "Left":\n\t                    case "Right":\n\t                        switch (node.childrenLayout) {\n\n\t                            case "TopAlignedWithParent":\n\t                                break;\n\n\t                            case "BottomAlignedWithParent":\n\t                                break;\n\n\t                            case "Underneath":\n\t                                s = this.measure(node.children[0], givenSize);\n\t                                w = shapeWidth + s.width + this.options.underneathHorizontalOffset;\n\t                                h = shapeHeight + this.options.underneathVerticalTopOffset + s.height;\n\t                                break;\n\n\t                            case "Default":\n\t                                s = this.measure(node.children[0], givenSize);\n\t                                w = shapeWidth + this.options.horizontalSeparation + s.width;\n\t                                h = Math.max(shapeHeight, s.height);\n\t                                break;\n\n\t                            default:\n\t                                throw "Unhandled TreeDirection in the Radial layout measuring.";\n\t                        }\n\t                        break;\n\t                    case "Up":\n\t                    case "Down":\n\t                        switch (node.childrenLayout) {\n\n\t                            case "TopAlignedWithParent":\n\t                            case "BottomAlignedWithParent":\n\t                                break;\n\n\t                            case "Underneath":\n\t                                s = this.measure(node.children[0], givenSize);\n\t                                w = Math.max(shapeWidth, s.width + this.options.underneathHorizontalOffset);\n\t                                h = shapeHeight + this.options.underneathVerticalTopOffset + s.height;\n\t                                break;\n\n\t                            case "Default":\n\t                                s = this.measure(node.children[0], givenSize);\n\t                                h = shapeHeight + this.options.verticalSeparation + s.height;\n\t                                w = Math.max(shapeWidth, s.width);\n\t                                break;\n\n\t                            default:\n\t                                throw "Unhandled TreeDirection in the Down layout measuring.";\n\t                        }\n\t                        break;\n\t                    default:\n\t                        throw "Unhandled TreeDirection in the layout measuring.";\n\t                }\n\n\t                result = new Size(w, h);\n\t            }\n\t            else {\n\t                var i, childNode;\n\t                switch (node.treeDirection) {\n\t                    case "Left":\n\t                    case "Right":\n\t                        switch (node.childrenLayout) {\n\n\t                            case "TopAlignedWithParent":\n\t                            case "BottomAlignedWithParent":\n\t                                break;\n\n\t                            case "Underneath":\n\t                                w = shapeWidth;\n\t                                h = shapeHeight + this.options.underneathVerticalTopOffset;\n\t                                for (i = 0; i < node.children.length; i++) {\n\t                                    childNode = node.children[i];\n\t                                    s = this.measure(childNode, givenSize);\n\t                                    w = Math.max(w, s.width + this.options.underneathHorizontalOffset);\n\t                                    h += s.height + this.options.underneathVerticalSeparation;\n\t                                }\n\n\t                                h -= this.options.underneathVerticalSeparation;\n\t                                break;\n\n\t                            case "Default":\n\t                                w = shapeWidth;\n\t                                h = 0;\n\t                                for (i = 0; i < node.children.length; i++) {\n\t                                    childNode = node.children[i];\n\t                                    s = this.measure(childNode, givenSize);\n\t                                    w = Math.max(w, shapeWidth + this.options.horizontalSeparation + s.width);\n\t                                    h += s.height + this.options.verticalSeparation;\n\t                                }\n\t                                h -= this.options.verticalSeparation;\n\t                                break;\n\n\t                            default:\n\t                                throw "Unhandled TreeDirection in the Right layout measuring.";\n\t                        }\n\n\t                        break;\n\t                    case "Up":\n\t                    case "Down":\n\n\t                        switch (node.childrenLayout) {\n\n\t                            case "TopAlignedWithParent":\n\t                            case "BottomAlignedWithParent":\n\t                                break;\n\n\t                            case "Underneath":\n\t                                w = shapeWidth;\n\t                                h = shapeHeight + this.options.underneathVerticalTopOffset;\n\t                                for (i = 0; i < node.children.length; i++) {\n\t                                    childNode = node.children[i];\n\t                                    s = this.measure(childNode, givenSize);\n\t                                    w = Math.max(w, s.width + this.options.underneathHorizontalOffset);\n\t                                    h += s.height + this.options.underneathVerticalSeparation;\n\t                                }\n\n\t                                h -= this.options.underneathVerticalSeparation;\n\t                                break;\n\n\t                            case "Default":\n\t                                w = 0;\n\t                                h = 0;\n\t                                for (i = 0; i < node.children.length; i++) {\n\t                                    childNode = node.children[i];\n\t                                    s = this.measure(childNode, givenSize);\n\t                                    w += s.width + this.options.horizontalSeparation;\n\t                                    h = Math.max(h, s.height + this.options.verticalSeparation + shapeHeight);\n\t                                }\n\n\t                                w -= this.options.horizontalSeparation;\n\t                                break;\n\n\t                            default:\n\t                                throw "Unhandled TreeDirection in the Down layout measuring.";\n\t                        }\n\n\t                        break;\n\t                    default:\n\t                        throw "Unhandled TreeDirection in the layout measuring.";\n\t                }\n\n\t                result = new Size(w, h);\n\t            }\n\n\t            node.SectorAngle = Math.sqrt((w * w / 4) + (h * h / 4));\n\t            node.Size = result;\n\t            return result;\n\t        },\n\t        arrange: function (n, p) {\n\t            var i, pp, child, node, childrenwidth, b = n.associatedShape.bounds();\n\t            var shapeWidth = b.width;\n\t            var shapeHeight = b.height;\n\t            if (Utils.isEmpty(n.children)) {\n\t                n.x = p.x;\n\t                n.y = p.y;\n\t                n.BoundingRectangle = new Rect(p.x, p.y, shapeWidth, shapeHeight);\n\t            }\n\t            else {\n\t                var x, y;\n\t                var selfLocation;\n\t                switch (n.treeDirection) {\n\t                    case "Left":\n\t                        switch (n.childrenLayout) {\n\t                            case "TopAlignedWithParent":\n\t                            case "BottomAlignedWithParent":\n\t                                break;\n\n\t                            case "Underneath":\n\t                                selfLocation = p;\n\t                                n.x = selfLocation.x;\n\t                                n.y = selfLocation.y;\n\t                                n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n\t                                y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n\t                                for (i = 0; i < node.children.length; i++) {\n\t                                    node = node.children[i];\n\t                                    x = selfLocation.x - node.associatedShape.width - this.options.underneathHorizontalOffset;\n\t                                    pp = new Point(x, y);\n\t                                    this.arrange(node, pp);\n\t                                    y += node.Size.height + this.options.underneathVerticalSeparation;\n\t                                }\n\t                                break;\n\n\t                            case "Default":\n\t                                selfLocation = new Point(p.x + n.Size.width - shapeWidth, p.y + ((n.Size.height - shapeHeight) / 2));\n\t                                n.x = selfLocation.x;\n\t                                n.y = selfLocation.y;\n\t                                n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n\t                                x = selfLocation.x - this.options.horizontalSeparation; // alignment of children\n\t                                y = p.y;\n\t                                for (i = 0; i < n.children.length; i++) {\n\t                                    node = n.children[i];\n\t                                    pp = new Point(x - node.Size.width, y);\n\t                                    this.arrange(node, pp);\n\t                                    y += node.Size.height + this.options.verticalSeparation;\n\t                                }\n\t                                break;\n\n\t                            default:\n\t                                throw   "Unsupported TreeDirection";\n\t                        }\n\n\t                        break;\n\t                    case "Right":\n\t                        switch (n.childrenLayout) {\n\t                            case "TopAlignedWithParent":\n\t                            case "BottomAlignedWithParent":\n\t                                break;\n\n\t                            case "Underneath":\n\t                                selfLocation = p;\n\t                                n.x = selfLocation.x;\n\t                                n.y = selfLocation.y;\n\t                                n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n\t                                x = p.x + shapeWidth + this.options.underneathHorizontalOffset;\n\n\t                                // alignment of children left-underneath the parent\n\t                                y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n\t                                for (i = 0; i < n.children.length; i++) {\n\t                                    node = n.children[i];\n\t                                    pp = new Point(x, y);\n\t                                    this.arrange(node, pp);\n\t                                    y += node.Size.height + this.options.underneathVerticalSeparation;\n\t                                }\n\n\t                                break;\n\n\t                            case "Default":\n\t                                selfLocation = new Point(p.x, p.y + ((n.Size.height - shapeHeight) / 2));\n\t                                n.x = selfLocation.x;\n\t                                n.y = selfLocation.y;\n\t                                n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n\t                                x = p.x + shapeWidth + this.options.horizontalSeparation; // alignment of children\n\t                                y = p.y;\n\t                                for (i = 0; i < n.children.length; i++) {\n\t                                    node = n.children[i];\n\t                                    pp = new Point(x, y);\n\t                                    this.arrange(node, pp);\n\t                                    y += node.Size.height + this.options.verticalSeparation;\n\t                                }\n\t                                break;\n\n\t                            default:\n\t                                throw   "Unsupported TreeDirection";\n\t                        }\n\n\t                        break;\n\t                    case "Up":\n\t                        selfLocation = new Point(p.x + ((n.Size.width - shapeWidth) / 2), p.y + n.Size.height - shapeHeight);\n\t                        n.x = selfLocation.x;\n\t                        n.y = selfLocation.y;\n\t                        n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n\t                        if (Math.abs(selfLocation.x - p.x) < EPSILON) {\n\t                            childrenwidth = 0;\n\t                            // means there is an aberration due to the oversized Element with respect to the children\n\t                            for (i = 0; i < n.children.length; i++) {\n\t                                child = n.children[i];\n\t                                childrenwidth += child.Size.width + this.options.horizontalSeparation;\n\t                            }\n\t                            childrenwidth -= this.options.horizontalSeparation;\n\t                            x = p.x + ((shapeWidth - childrenwidth) / 2);\n\t                        }\n\t                        else {\n\t                            x = p.x;\n\t                        }\n\n\t                        for (i = 0; i < n.children.length; i++) {\n\t                            node = n.children[i];\n\t                            y = selfLocation.y - this.options.verticalSeparation - node.Size.height;\n\t                            pp = new Point(x, y);\n\t                            this.arrange(node, pp);\n\t                            x += node.Size.width + this.options.horizontalSeparation;\n\t                        }\n\t                        break;\n\n\t                    case "Down":\n\n\t                        switch (n.childrenLayout) {\n\t                            case "TopAlignedWithParent":\n\t                            case "BottomAlignedWithParent":\n\t                                break;\n\t                            case "Underneath":\n\t                                selfLocation = p;\n\t                                n.x = selfLocation.x;\n\t                                n.y = selfLocation.y;\n\t                                n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n\t                                x = p.x + this.options.underneathHorizontalOffset; // alignment of children left-underneath the parent\n\t                                y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n\t                                for (i = 0; i < n.children.length; i++) {\n\t                                    node = n.children[i];\n\t                                    pp = new Point(x, y);\n\t                                    this.arrange(node, pp);\n\t                                    y += node.Size.height + this.options.underneathVerticalSeparation;\n\t                                }\n\t                                break;\n\n\t                            case    "Default":\n\t                                selfLocation = new Point(p.x + ((n.Size.width - shapeWidth) / 2), p.y);\n\t                                n.x = selfLocation.x;\n\t                                n.y = selfLocation.y;\n\t                                n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n\t                                if (Math.abs(selfLocation.x - p.x) < EPSILON) {\n\t                                    childrenwidth = 0;\n\t                                    // means there is an aberration due to the oversized Element with respect to the children\n\t                                    for (i = 0; i < n.children.length; i++) {\n\t                                        child = n.children[i];\n\t                                        childrenwidth += child.Size.width + this.options.horizontalSeparation;\n\t                                    }\n\n\t                                    childrenwidth -= this.options.horizontalSeparation;\n\t                                    x = p.x + ((shapeWidth - childrenwidth) / 2);\n\t                                }\n\t                                else {\n\t                                    x = p.x;\n\t                                }\n\n\t                                for (i = 0; i < n.children.length; i++) {\n\t                                    node = n.children[i];\n\t                                    y = selfLocation.y + this.options.verticalSeparation + shapeHeight;\n\t                                    pp = new Point(x, y);\n\t                                    this.arrange(node, pp);\n\t                                    x += node.Size.width + this.options.horizontalSeparation;\n\t                                }\n\t                                break;\n\n\t                            default:\n\t                                throw   "Unsupported TreeDirection";\n\t                        }\n\t                        break;\n\n\t                    case "None":\n\t                        break;\n\n\t                    default:\n\t                        throw   "Unsupported TreeDirection";\n\t                }\n\t            }\n\t        },\n\t        layoutSwitch: function () {\n\t            if (!this.center) {\n\t                return;\n\t            }\n\n\t            if (Utils.isEmpty(this.center.children)) {\n\t                return;\n\t            }\n\n\t            var type = this.options.subtype;\n\t            if (Utils.isUndefined(type)) {\n\t                type = "Down";\n\t            }\n\t            var single, male, female, leftcount;\n\t            var children = this.center.children;\n\t            switch (type.toLowerCase()) {\n\t                case "radial":\n\t                case "radialtree":\n\t                    this.layoutRadialTree();\n\t                    break;\n\n\t                case "mindmaphorizontal":\n\t                case "mindmap":\n\t                    single = this.center.children;\n\n\t                    if (this.center.children.length === 1) {\n\t                        this.layoutRight(single);\n\t                    }\n\t                    else {\n\t                        // odd number will give one more at the right\n\t                        leftcount = children.length / 2;\n\t                        male = grep(this.center.children, function (n) {\n\t                            return Utils.indexOf(children, n) < leftcount;\n\t                        });\n\t                        female = grep(this.center.children, function (n) {\n\t                            return Utils.indexOf(children, n) >= leftcount;\n\t                        });\n\n\t                        this.layoutLeft(male);\n\t                        this.layoutRight(female);\n\t                    }\n\t                    break;\n\n\t                case "mindmapvertical":\n\t                    single = this.center.children;\n\n\t                    if (this.center.children.length === 1) {\n\t                        this.layoutDown(single);\n\t                    }\n\t                    else {\n\t                        // odd number will give one more at the right\n\t                        leftcount = children.length / 2;\n\t                        male = grep(this.center.children, function (n) {\n\t                            return Utils.indexOf(children, n) < leftcount;\n\t                        });\n\t                        female = grep(this.center.children, function (n) {\n\t                            return Utils.indexOf(children, n) >= leftcount;\n\t                        });\n\t                        this.layoutUp(male);\n\t                        this.layoutDown(female);\n\t                    }\n\t                    break;\n\n\t                case "right":\n\t                    this.layoutRight(this.center.children);\n\t                    break;\n\n\t                case "left":\n\t                    this.layoutLeft(this.center.children);\n\t                    break;\n\n\t                case "up":\n\t                case "bottom":\n\t                    this.layoutUp(this.center.children);\n\t                    break;\n\n\t                case "down":\n\t                case "top":\n\t                    this.layoutDown(this.center.children);\n\t                    break;\n\n\t                case "tipover":\n\t                case "tipovertree":\n\t                    if (this.options.tipOverTreeStartLevel < 0) {\n\t                        throw  "The tip-over level should be a positive integer.";\n\t                    }\n\t                    this.tipOverTree(this.center.children, this.options.tipOverTreeStartLevel);\n\t                    break;\n\n\t                case "undefined":\n\t                case "none":\n\t                    break;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * The various tree layout algorithms.\n\t     * @type {*}\n\t     */\n\t    var TreeLayout = LayoutBase.extend({\n\t        init: function (diagram) {\n\t            var that = this;\n\t            LayoutBase.fn.init.call(that);\n\t            if (Utils.isUndefined(diagram)) {\n\t                throw "No diagram specified.";\n\t            }\n\t            this.diagram = diagram;\n\t        },\n\n\t        /**\n\t         * Arranges the diagram in a tree-layout with the specified options and tree subtype.\n\t         */\n\t        layout: function (options) {\n\n\t            this.transferOptions(options);\n\n\t            // transform the diagram into a Graph\n\t            var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n\n\t            /**\n\t             * The Graph reduction from the given diagram.\n\t             * @type {*}\n\t             */\n\t            this.graph = adapter.convert();\n\n\t            var finalNodeSet = this.layoutComponents();\n\n\t            // note that the graph contains the original data and\n\t            // the components are another instance of nodes referring to the same set of shapes\n\t            return new diagram.LayoutState(this.diagram, finalNodeSet);\n\t        },\n\n\t        layoutComponents: function () {\n\t            if (this.graph.isEmpty()) {\n\t                return;\n\t            }\n\n\t            // split into connected components\n\t            var components = this.graph.getConnectedComponents();\n\t            if (Utils.isEmpty(components)) {\n\t                return;\n\t            }\n\n\t            var layout = new TreeLayoutProcessor(this.options);\n\t            var trees = [];\n\t            // find a spanning tree for each component\n\t            for (var i = 0; i < components.length; i++) {\n\t                var component = components[i];\n\n\t                var treeGraph = this.getTree(component);\n\t                if (!treeGraph) {\n\t                    throw "Failed to find a spanning tree for the component.";\n\t                }\n\t                var root = treeGraph.root;\n\t                var tree = treeGraph.tree;\n\t                layout.layout(tree, root);\n\n\t                trees.push(tree);\n\t            }\n\n\t            return this.gridLayoutComponents(trees);\n\n\t        },\n\n\t        /**\n\t         * Gets a spanning tree (and root) for the given graph.\n\t         * Ensure that the given graph is connected!\n\t         * @param graph\n\t         * @returns {*} A literal object consisting of the found root and the spanning tree.\n\t         */\n\t        getTree: function (graph) {\n\t            var root = null;\n\t            if (this.options.roots && this.options.roots.length > 0) {\n\t                for (var i = 0, len = graph.nodes.length; i < len; i++) {\n\t                    var node = graph.nodes[i];\n\t                    for (var j = 0; j < this.options.roots.length; j++) {\n\t                        var givenRootShape = this.options.roots[j];\n\t                        if (givenRootShape === node.associatedShape) {\n\t                            root = node;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            if (!root) {\n\t                // finds the most probable root on the basis of the longest path in the component\n\t                root = graph.root();\n\t                // should not happen really\n\t                if (!root) {\n\t                    throw "Unable to find a root for the tree.";\n\t                }\n\t            }\n\t            return this.getTreeForRoot(graph, root);\n\t        },\n\n\t        getTreeForRoot: function (graph, root) {\n\n\t            var tree = graph.getSpanningTree(root);\n\t            if (Utils.isUndefined(tree) || tree.isEmpty()) {\n\t                return null;\n\t            }\n\t            return {\n\t                tree: tree,\n\t                root: tree.root\n\t            };\n\t        }\n\n\t    });\n\n\t    /**\n\t     * The Sugiyama aka layered layout algorithm.\n\t     * @type {*}\n\t     */\n\t    var LayeredLayout = LayoutBase.extend({\n\t        init: function (diagram) {\n\t            var that = this;\n\t            LayoutBase.fn.init.call(that);\n\t            if (Utils.isUndefined(diagram)) {\n\t                throw "Diagram is not specified.";\n\t            }\n\t            this.diagram = diagram;\n\t        },\n\n\t        layout: function (options) {\n\n\t            this.transferOptions(options);\n\n\t            var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n\t            var graph = adapter.convert(options);\n\t            if (graph.isEmpty()) {\n\t                return;\n\t            }\n\t            // split into connected components\n\t            var components = graph.getConnectedComponents();\n\t            if (Utils.isEmpty(components)) {\n\t                return;\n\t            }\n\t            for (var i = 0; i < components.length; i++) {\n\t                var component = components[i];\n\t                this.layoutGraph(component, options);\n\t            }\n\t            var finalNodeSet = this.gridLayoutComponents(components);\n\t            return new diagram.LayoutState(this.diagram, finalNodeSet);\n\n\t        },\n\n\t        /**\n\t         * Initializes the runtime data properties of the layout.\n\t         * @private\n\t         */\n\t        _initRuntimeProperties: function () {\n\t            for (var k = 0; k < this.graph.nodes.length; k++) {\n\t                var node = this.graph.nodes[k];\n\t                node.layer = -1;\n\t                node.downstreamLinkCount = 0;\n\t                node.upstreamLinkCount = 0;\n\n\t                node.isVirtual = false;\n\n\t                node.uBaryCenter = 0.0;\n\t                node.dBaryCenter = 0.0;\n\n\t                node.upstreamPriority = 0;\n\t                node.downstreamPriority = 0;\n\n\t                node.gridPosition = 0;\n\t            }\n\t        },\n\t        _prepare: function (graph) {\n\t            var current = [], i, l, link;\n\n\t            // defines a mapping of a node to the layer index\n\t            var layerMap = new Dictionary();\n\t            var layerCount = 0;\n\t            var targetLayer, next, target;\n\n\t            Utils.forEach(graph.nodes, function (node) {\n\t                if (node.incoming.length === 0) {\n\t                    layerMap.set(node, 0);\n\t                    current.push(node);\n\t                }\n\t            });\n\n\t            while (current.length > 0) {\n\t                next = current.shift();\n\t                for (i = 0; i < next.outgoing.length; i++) {\n\t                    link = next.outgoing[i];\n\t                    target = link.target;\n\n\t                    if (layerMap.containsKey(target)) {\n\t                        targetLayer = Math.max(layerMap.get(next) + 1, layerMap.get(target));\n\t                    } else {\n\t                        targetLayer = layerMap.get(next) + 1;\n\t                    }\n\t                    layerMap.set(target, targetLayer);\n\t                    if (targetLayer > layerCount) {\n\t                        layerCount = targetLayer;\n\t                    }\n\n\t                    if (!contains(current, target)) {\n\t                        current.push(target);\n\t                    }\n\t                }\n\t            }\n\n\t            var sortedNodes = layerMap.keys();\n\n\t            sortedNodes.sort(function (o1, o2) {\n\t                var o1layer = layerMap.get(o1);\n\t                var o2layer = layerMap.get(o2);\n\t                return Utils.sign(o2layer - o1layer);\n\t            });\n\n\t            for (var n = 0; n < sortedNodes.length; ++n) {\n\t                var node = sortedNodes[n];\n\t                var minLayer = Number.MAX_VALUE;\n\n\t                if (node.outgoing.length === 0) {\n\t                    continue;\n\t                }\n\n\t                for (l = 0; l < node.outgoing.length; ++l) {\n\t                    link = node.outgoing[l];\n\t                    minLayer = Math.min(minLayer, layerMap.get(link.target));\n\t                }\n\n\t                if (minLayer > 1) {\n\t                    layerMap.set(node, minLayer - 1);\n\t                }\n\t            }\n\n\t            this.layers = [];\n\t            var layer;\n\t            for (i = 0; i < layerCount + 1; i++) {\n\t                layer = [];\n\t                layer.linksTo = {};\n\t                this.layers.push(layer);\n\t            }\n\n\t            layerMap.forEach(function (node, layer) {\n\t                node.layer = layer;\n\t                this.layers[layer].push(node);\n\t            }, this);\n\n\t            // set initial grid positions\n\t            for (l = 0; l < this.layers.length; l++) {\n\t                layer = this.layers[l];\n\t                for (i = 0; i < layer.length; i++) {\n\t                    layer[i].gridPosition = i;\n\t                }\n\t            }\n\t        },\n\t        /**\n\t         * Performs the layout of a single component.\n\t         */\n\t        layoutGraph: function (graph, options) {\n\t            if (Utils.isUndefined(graph)) {\n\t                throw "No graph given or graph analysis of the diagram failed.";\n\t            }\n\t            if (Utils.isDefined(options)) {\n\t                this.transferOptions(options);\n\t            }\n\t            this.graph = graph;\n\n\t            // sets unique indices on the nodes\n\t            graph.setItemIndices();\n\n\t            // ensures no cycles present for this layout\n\t            var reversedEdges = graph.makeAcyclic();\n\n\t            // define the runtime props being used by the layout algorithm\n\t            this._initRuntimeProperties();\n\n\t            this._prepare(graph, options);\n\n\t            this._dummify();\n\n\t            this._optimizeCrossings();\n\n\t            this._swapPairs();\n\n\t            this.arrangeNodes();\n\n\t            this._moveThingsAround();\n\n\t            this._dedummify();\n\n\t            // re-reverse the links which were switched earlier\n\t            Utils.forEach(reversedEdges, function (e) {\n\t                if (e.points) {\n\t                    e.points.reverse();\n\t                }\n\t            });\n\t        },\n\n\t        setMinDist: function (m, n, minDist) {\n\t            var l = m.layer;\n\t            var i = m.layerIndex;\n\t            this.minDistances[l][i] = minDist;\n\t        },\n\n\t        getMinDist: function (m, n) {\n\t            var dist = 0,\n\t                i1 = m.layerIndex,\n\t                i2 = n.layerIndex,\n\t                l = m.layer,\n\t                min = Math.min(i1, i2),\n\t                max = Math.max(i1, i2);\n\t            // use Sum()?\n\t            for (var k = min; k < max; ++k) {\n\t                dist += this.minDistances[l][k];\n\t            }\n\t            return dist;\n\t        },\n\n\t        placeLeftToRight: function (leftClasses) {\n\t            var leftPos = new Dictionary(), n, node;\n\t            for (var c = 0; c < this.layers.length; ++c) {\n\t                var classNodes = leftClasses[c];\n\t                if (!classNodes) {\n\t                    continue;\n\t                }\n\n\t                for (n = 0; n < classNodes.length; n++) {\n\t                    node = classNodes[n];\n\t                    if (!leftPos.containsKey(node)) {\n\t                        this.placeLeft(node, leftPos, c);\n\t                    }\n\t                }\n\n\t                // adjust class\n\t                var d = Number.POSITIVE_INFINITY;\n\t                for (n = 0; n < classNodes.length; n++) {\n\t                    node = classNodes[n];\n\t                    var rightSibling = this.rightSibling(node);\n\t                    if (rightSibling && this.nodeLeftClass.get(rightSibling) !== c) {\n\t                        d = Math.min(d, leftPos.get(rightSibling) - leftPos.get(node) - this.getMinDist(node, rightSibling));\n\t                    }\n\t                }\n\t                if (d === Number.POSITIVE_INFINITY) {\n\t                    var D = [];\n\t                    for (n = 0; n < classNodes.length; n++) {\n\t                        node = classNodes[n];\n\t                        var neighbors = [];\n\t                        Utils.addRange(neighbors, this.upNodes.get(node));\n\t                        Utils.addRange(neighbors, this.downNodes.get(node));\n\n\t                        for (var e = 0; e < neighbors.length; e++) {\n\t                            var neighbor = neighbors[e];\n\t                            if (this.nodeLeftClass.get(neighbor) < c) {\n\t                                D.push(leftPos.get(neighbor) - leftPos.get(node));\n\t                            }\n\t                        }\n\t                    }\n\t                    D.sort();\n\t                    if (D.length === 0) {\n\t                        d = 0;\n\t                    }\n\t                    else if (D.length % 2 === 1) {\n\t                        d = D[this.intDiv(D.length, 2)];\n\t                    }\n\t                    else {\n\t                        d = (D[this.intDiv(D.length, 2) - 1] + D[this.intDiv(D.length, 2)]) / 2;\n\t                    }\n\t                }\n\t                for (n = 0; n < classNodes.length; n++) {\n\t                    node = classNodes[n];\n\t                    leftPos.set(node, leftPos.get(node) + d);\n\t                }\n\t            }\n\t            return leftPos;\n\t        },\n\n\t        placeRightToLeft: function (rightClasses) {\n\t            var rightPos = new Dictionary(), n, node;\n\t            for (var c = 0; c < this.layers.length; ++c) {\n\t                var classNodes = rightClasses[c];\n\t                if (!classNodes) {\n\t                    continue;\n\t                }\n\n\t                for (n = 0; n < classNodes.length; n++) {\n\t                    node = classNodes[n];\n\t                    if (!rightPos.containsKey(node)) {\n\t                        this.placeRight(node, rightPos, c);\n\t                    }\n\t                }\n\n\t                // adjust class\n\t                var d = Number.NEGATIVE_INFINITY;\n\t                for (n = 0; n < classNodes.length; n++) {\n\t                    node = classNodes[n];\n\t                    var leftSibling = this.leftSibling(node);\n\t                    if (leftSibling && this.nodeRightClass.get(leftSibling) !== c) {\n\t                        d = Math.max(d, rightPos.get(leftSibling) - rightPos.get(node) + this.getMinDist(leftSibling, node));\n\t                    }\n\t                }\n\t                if (d === Number.NEGATIVE_INFINITY) {\n\t                    var D = [];\n\t                    for (n = 0; n < classNodes.length; n++) {\n\t                        node = classNodes[n];\n\t                        var neighbors = [];\n\t                        Utils.addRange(neighbors, this.upNodes.get(node));\n\t                        Utils.addRange(neighbors, this.downNodes.get(node));\n\n\t                        for (var e = 0; e < neighbors.length; e++) {\n\t                            var neighbor = neighbors[e];\n\t                            if (this.nodeRightClass.get(neighbor) < c) {\n\t                                D.push(rightPos.get(node) - rightPos.get(neighbor));\n\t                            }\n\t                        }\n\t                    }\n\t                    D.sort();\n\t                    if (D.length === 0) {\n\t                        d = 0;\n\t                    }\n\t                    else if (D.length % 2 === 1) {\n\t                        d = D[this.intDiv(D.length, 2)];\n\t                    }\n\t                    else {\n\t                        d = (D[this.intDiv(D.length, 2) - 1] + D[this.intDiv(D.length, 2)]) / 2;\n\t                    }\n\t                }\n\t                for (n = 0; n < classNodes.length; n++) {\n\t                    node = classNodes[n];\n\t                    rightPos.set(node, rightPos.get(node) + d);\n\t                }\n\t            }\n\t            return rightPos;\n\t        },\n\n\t        _getLeftWing: function () {\n\t            var leftWing = { value: null };\n\t            var result = this.computeClasses(leftWing, 1);\n\t            this.nodeLeftClass = leftWing.value;\n\t            return result;\n\t        },\n\n\t        _getRightWing: function () {\n\t            var rightWing = { value: null };\n\t            var result = this.computeClasses(rightWing, -1);\n\t            this.nodeRightClass = rightWing.value;\n\t            return result;\n\t        },\n\n\t        computeClasses: function (wingPair, d) {\n\t            var currentWing = 0,\n\t                wing = wingPair.value = new Dictionary();\n\n\t            for (var l = 0; l < this.layers.length; ++l) {\n\t                currentWing = l;\n\n\t                var layer = this.layers[l];\n\t                for (var n = d === 1 ? 0 : layer.length - 1; 0 <= n && n < layer.length; n += d) {\n\t                    var node = layer[n];\n\t                    if (!wing.containsKey(node)) {\n\t                        wing.set(node, currentWing);\n\t                        if (node.isVirtual) {\n\t                            var ndsinl = this._nodesInLink(node);\n\t                            for (var kk = 0; kk < ndsinl.length; kk++) {\n\t                                var vnode = ndsinl[kk];\n\t                                wing.set(vnode, currentWing);\n\t                            }\n\t                        }\n\t                    }\n\t                    else {\n\t                        currentWing = wing.get(node);\n\t                    }\n\t                }\n\t            }\n\n\t            var wings = [];\n\t            for (var i = 0; i < this.layers.length; i++) {\n\t                wings.push(null);\n\t            }\n\t            wing.forEach(function (node, classIndex) {\n\t                if (wings[classIndex] === null) {\n\t                    wings[classIndex] = [];\n\t                }\n\t                wings[classIndex].push(node);\n\t            });\n\n\t            return wings;\n\t        },\n\t        _isVerticalLayout: function () {\n\t            return this.options.subtype.toLowerCase() === "up" || this.options.subtype.toLowerCase() === "down" || this.options.subtype.toLowerCase() === "vertical";\n\t        },\n\n\t        _isHorizontalLayout: function () {\n\t            return this.options.subtype.toLowerCase() === "right" || this.options.subtype.toLowerCase() === "left" || this.options.subtype.toLowerCase() === "horizontal";\n\t        },\n\t        _isIncreasingLayout: function () {\n\t            // meaning that the visiting of the layers goes in the natural order of increasing layer index\n\t            return this.options.subtype.toLowerCase() === "right" || this.options.subtype.toLowerCase() === "down";\n\t        },\n\t        _moveThingsAround: function () {\n\t            var i, l, node, layer, n, w;\n\t            // sort the layers by their grid position\n\t            for (l = 0; l < this.layers.length; ++l) {\n\t                layer = this.layers[l];\n\t                layer.sort(this._gridPositionComparer);\n\t            }\n\n\t            this.minDistances = [];\n\t            for (l = 0; l < this.layers.length; ++l) {\n\t                layer = this.layers[l];\n\t                this.minDistances[l] = [];\n\t                for (n = 0; n < layer.length; ++n) {\n\t                    node = layer[n];\n\t                    node.layerIndex = n;\n\t                    this.minDistances[l][n] = this.options.nodeDistance;\n\t                    if (n < layer.length - 1) {\n\t                        if (this._isVerticalLayout()) {\n\t                            this.minDistances[l][n] += (node.width + layer[n + 1].width) / 2;\n\t                        }\n\t                        else {\n\t                            this.minDistances[l][n] += (node.height + layer[n + 1].height) / 2;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\n\t            this.downNodes = new Dictionary();\n\t            this.upNodes = new Dictionary();\n\t            Utils.forEach(this.graph.nodes, function (node) {\n\t                this.downNodes.set(node, []);\n\t                this.upNodes.set(node, []);\n\t            }, this);\n\t            Utils.forEach(this.graph.links, function (link) {\n\t                var origin = link.source;\n\t                var dest = link.target;\n\t                var down = null, up = null;\n\t                if (origin.layer > dest.layer) {\n\t                    down = link.source;\n\t                    up = link.target;\n\t                }\n\t                else {\n\t                    up = link.source;\n\t                    down = link.target;\n\t                }\n\t                this.downNodes.get(up).push(down);\n\t                this.upNodes.get(down).push(up);\n\t            }, this);\n\t            this.downNodes.forEachValue(function (list) {\n\t                list.sort(this._gridPositionComparer);\n\t            }, this);\n\t            this.upNodes.forEachValue(function (list) {\n\t                list.sort(this._gridPositionComparer);\n\t            }, this);\n\n\t            for (l = 0; l < this.layers.length - 1; ++l) {\n\t                layer = this.layers[l];\n\t                for (w = 0; w < layer.length - 1; w++) {\n\t                    var currentNode = layer[w];\n\t                    if (!currentNode.isVirtual) {\n\t                        continue;\n\t                    }\n\n\t                    var currDown = this.downNodes.get(currentNode)[0];\n\t                    if (!currDown.isVirtual) {\n\t                        continue;\n\t                    }\n\n\t                    for (n = w + 1; n < layer.length; ++n) {\n\t                        node = layer[n];\n\t                        if (!node.isVirtual) {\n\t                            continue;\n\t                        }\n\n\t                        var downNode = this.downNodes.get(node)[0];\n\t                        if (!downNode.isVirtual) {\n\t                            continue;\n\t                        }\n\n\t                        if (currDown.gridPosition > downNode.gridPosition) {\n\t                            var pos = currDown.gridPosition;\n\t                            currDown.gridPosition = downNode.gridPosition;\n\t                            downNode.gridPosition = pos;\n\t                            var i1 = currDown.layerIndex;\n\t                            var i2 = downNode.layerIndex;\n\t                            this.layers[l + 1][i1] = downNode;\n\t                            this.layers[l + 1][i2] = currDown;\n\t                            currDown.layerIndex = i2;\n\t                            downNode.layerIndex = i1;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\n\n\t            var leftClasses = this._getLeftWing();\n\t            var rightClasses = this._getRightWing();\n\n\n\t            var leftPos = this.placeLeftToRight(leftClasses);\n\t            var rightPos = this.placeRightToLeft(rightClasses);\n\t            var x = new Dictionary();\n\t            Utils.forEach(this.graph.nodes, function (node) {\n\t                x.set(node, (leftPos.get(node) + rightPos.get(node)) / 2);\n\t            });\n\n\n\t            var order = new Dictionary();\n\t            var placed = new Dictionary();\n\t            for (l = 0; l < this.layers.length; ++l) {\n\t                layer = this.layers[l];\n\t                var sequenceStart = -1, sequenceEnd = -1;\n\t                for (n = 0; n < layer.length; ++n) {\n\t                    node = layer[n];\n\t                    order.set(node, 0);\n\t                    placed.set(node, false);\n\t                    if (node.isVirtual) {\n\t                        if (sequenceStart === -1) {\n\t                            sequenceStart = n;\n\t                        }\n\t                        else if (sequenceStart === n - 1) {\n\t                            sequenceStart = n;\n\t                        }\n\t                        else {\n\t                            sequenceEnd = n;\n\t                            order.set(layer[sequenceStart], 0);\n\t                            if (x.get(node) - x.get(layer[sequenceStart]) === this.getMinDist(layer[sequenceStart], node)) {\n\t                                placed.set(layer[sequenceStart], true);\n\t                            }\n\t                            else {\n\t                                placed.set(layer[sequenceStart], false);\n\t                            }\n\t                            sequenceStart = n;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            var directions = [1, -1];\n\t            Utils.forEach(directions, function (d) {\n\t                var start = d === 1 ? 0 : this.layers.length - 1;\n\t                for (var l = start; 0 <= l && l < this.layers.length; l += d) {\n\t                    var layer = this.layers[l];\n\t                    var virtualStartIndex = this._firstVirtualNode(layer);\n\t                    var virtualStart = null;\n\t                    var sequence = null;\n\t                    if (virtualStartIndex !== -1) {\n\t                        virtualStart = layer[virtualStartIndex];\n\t                        sequence = [];\n\t                        for (i = 0; i < virtualStartIndex; i++) {\n\t                            sequence.push(layer[i]);\n\t                        }\n\t                    }\n\t                    else {\n\t                        virtualStart = null;\n\t                        sequence = layer;\n\t                    }\n\t                    if (sequence.length > 0) {\n\t                        this._sequencer(x, null, virtualStart, d, sequence);\n\t                        for (i = 0; i < sequence.length - 1; ++i) {\n\t                            this.setMinDist(sequence[i], sequence[i + 1], x.get(sequence[i + 1]) - x.get(sequence[i]));\n\t                        }\n\t                        if (virtualStart) {\n\t                            this.setMinDist(sequence[sequence.length - 1], virtualStart, x.get(virtualStart) - x.get(sequence[sequence.length - 1]));\n\t                        }\n\t                    }\n\n\t                    while (virtualStart) {\n\t                        var virtualEnd = this.nextVirtualNode(layer, virtualStart);\n\t                        if (!virtualEnd) {\n\t                            virtualStartIndex = virtualStart.layerIndex;\n\t                            sequence = [];\n\t                            for (i = virtualStartIndex + 1; i < layer.length; i++) {\n\t                                sequence.push(layer[i]);\n\t                            }\n\t                            if (sequence.length > 0) {\n\t                                this._sequencer(x, virtualStart, null, d, sequence);\n\t                                for (i = 0; i < sequence.length - 1; ++i) {\n\t                                    this.setMinDist(sequence[i], sequence[i + 1], x.get(sequence[i + 1]) - x.get(sequence[i]));\n\t                                }\n\t                                this.setMinDist(virtualStart, sequence[0], x.get(sequence[0]) - x.get(virtualStart));\n\t                            }\n\t                        }\n\t                        else if (order.get(virtualStart) === d) {\n\t                            virtualStartIndex = virtualStart.layerIndex;\n\t                            var virtualEndIndex = virtualEnd.layerIndex;\n\t                            sequence = [];\n\t                            for (i = virtualStartIndex + 1; i < virtualEndIndex; i++) {\n\t                                sequence.push(layer[i]);\n\t                            }\n\t                            if (sequence.length > 0) {\n\t                                this._sequencer(x, virtualStart, virtualEnd, d, sequence);\n\t                            }\n\t                            placed.set(virtualStart, true);\n\t                        }\n\t                        virtualStart = virtualEnd;\n\t                    }\n\t                    this.adjustDirections(l, d, order, placed);\n\t                }\n\t            }, this);\n\n\n\t            var fromLayerIndex = this._isIncreasingLayout() ? 0 : this.layers.length - 1;\n\t            var reachedFinalLayerIndex = function (k, ctx) {\n\t                if (ctx._isIncreasingLayout()) {\n\t                    return k < ctx.layers.length;\n\t                }\n\t                else {\n\t                    return k >= 0;\n\t                }\n\t            };\n\t            var layerIncrement = this._isIncreasingLayout() ? +1 : -1, offset = 0;\n\n\t            /**\n\t             * Calcs the max height of the given layer.\n\t             */\n\t            function maximumHeight(layer, ctx) {\n\t                var height = Number.MIN_VALUE;\n\t                for (var n = 0; n < layer.length; ++n) {\n\t                    var node = layer[n];\n\t                    if (ctx._isVerticalLayout()) {\n\t                        height = Math.max(height, node.height);\n\t                    }\n\t                    else {\n\t                        height = Math.max(height, node.width);\n\t                    }\n\t                }\n\t                return height;\n\t            }\n\n\t            for (i = fromLayerIndex; reachedFinalLayerIndex(i, this); i += layerIncrement) {\n\t                layer = this.layers[i];\n\t                var height = maximumHeight(layer, this);\n\n\t                for (n = 0; n < layer.length; ++n) {\n\t                    node = layer[n];\n\t                    if (this._isVerticalLayout()) {\n\t                        node.x = x.get(node);\n\t                        node.y = offset + height / 2;\n\t                    }\n\t                    else {\n\t                        node.x = offset + height / 2;\n\t                        node.y = x.get(node);\n\t                    }\n\t                }\n\n\t                offset += this.options.layerSeparation + height;\n\t            }\n\t        },\n\n\t        adjustDirections: function (l, d, order, placed) {\n\t            if (l + d < 0 || l + d >= this.layers.length) {\n\t                return;\n\t            }\n\n\t            var prevBridge = null, prevBridgeTarget = null;\n\t            var layer = this.layers[l + d];\n\t            for (var n = 0; n < layer.length; ++n) {\n\t                var nextBridge = layer[n];\n\t                if (nextBridge.isVirtual) {\n\t                    var nextBridgeTarget = this.getNeighborOnLayer(nextBridge, l);\n\t                    if (nextBridgeTarget.isVirtual) {\n\t                        if (prevBridge) {\n\t                            var p = placed.get(prevBridgeTarget);\n\t                            var clayer = this.layers[l];\n\t                            var i1 = prevBridgeTarget.layerIndex;\n\t                            var i2 = nextBridgeTarget.layerIndex;\n\t                            for (var i = i1 + 1; i < i2; ++i) {\n\t                                if (clayer[i].isVirtual) {\n\t                                    p = p && placed.get(clayer[i]);\n\t                                }\n\t                            }\n\t                            if (p) {\n\t                                order.set(prevBridge, d);\n\t                                var j1 = prevBridge.layerIndex;\n\t                                var j2 = nextBridge.layerIndex;\n\t                                for (var j = j1 + 1; j < j2; ++j) {\n\t                                    if (layer[j].isVirtual) {\n\t                                        order.set(layer[j], d);\n\t                                    }\n\t                                }\n\t                            }\n\t                        }\n\t                        prevBridge = nextBridge;\n\t                        prevBridgeTarget = nextBridgeTarget;\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        getNeighborOnLayer: function (node, l) {\n\t            var neighbor = this.upNodes.get(node)[0];\n\t            if (neighbor.layer === l) {\n\t                return neighbor;\n\t            }\n\t            neighbor = this.downNodes.get(node)[0];\n\t            if (neighbor.layer === l) {\n\t                return neighbor;\n\t            }\n\t            return null;\n\t        },\n\n\t        _sequencer: function (x, virtualStart, virtualEnd, dir, sequence) {\n\t            if (sequence.length === 1) {\n\t                this._sequenceSingle(x, virtualStart, virtualEnd, dir, sequence[0]);\n\t            }\n\n\t            if (sequence.length > 1) {\n\t                var r = sequence.length, t = this.intDiv(r, 2);\n\t                this._sequencer(x, virtualStart, virtualEnd, dir, sequence.slice(0, t));\n\t                this._sequencer(x, virtualStart, virtualEnd, dir, sequence.slice(t));\n\t                this.combineSequences(x, virtualStart, virtualEnd, dir, sequence);\n\t            }\n\t        },\n\n\t        _sequenceSingle: function (x, virtualStart, virtualEnd, dir, node) {\n\t            var neighbors = dir === -1 ? this.downNodes.get(node) : this.upNodes.get(node);\n\n\t            var n = neighbors.length;\n\t            if (n !== 0) {\n\t                if (n % 2 === 1) {\n\t                    x.set(node, x.get(neighbors[this.intDiv(n, 2)]));\n\t                }\n\t                else {\n\t                    x.set(node, (x.get(neighbors[this.intDiv(n, 2) - 1]) + x.get(neighbors[this.intDiv(n, 2)])) / 2);\n\t                }\n\n\t                if (virtualStart) {\n\t                    x.set(node, Math.max(x.get(node), x.get(virtualStart) + this.getMinDist(virtualStart, node)));\n\t                }\n\t                if (virtualEnd) {\n\t                    x.set(node, Math.min(x.get(node), x.get(virtualEnd) - this.getMinDist(node, virtualEnd)));\n\t                }\n\t            }\n\t        },\n\n\t        combineSequences: function (x, virtualStart, virtualEnd, dir, sequence) {\n\t            var r = sequence.length, t = this.intDiv(r, 2);\n\n\t            // collect left changes\n\t            var leftHeap = [], i, c, n, neighbors, neighbor, pair;\n\t            for (i = 0; i < t; ++i) {\n\t                c = 0;\n\t                neighbors = dir === -1 ? this.downNodes.get(sequence[i]) : this.upNodes.get(sequence[i]);\n\t                for (n = 0; n < neighbors.length; ++n) {\n\t                    neighbor = neighbors[n];\n\t                    if (x.get(neighbor) >= x.get(sequence[i])) {\n\t                        c++;\n\t                    }\n\t                    else {\n\t                        c--;\n\t                        leftHeap.push({ k: x.get(neighbor) + this.getMinDist(sequence[i], sequence[t - 1]), v: 2 });\n\t                    }\n\t                }\n\t                leftHeap.push({ k: x.get(sequence[i]) + this.getMinDist(sequence[i], sequence[t - 1]), v: c });\n\t            }\n\t            if (virtualStart) {\n\t                leftHeap.push({ k: x.get(virtualStart) + this.getMinDist(virtualStart, sequence[t - 1]), v: Number.MAX_VALUE });\n\t            }\n\t            leftHeap.sort(this._positionDescendingComparer);\n\n\t            // collect right changes\n\t            var rightHeap = [];\n\t            for (i = t; i < r; ++i) {\n\t                c = 0;\n\t                neighbors = dir === -1 ? this.downNodes.get(sequence[i]) : this.upNodes.get(sequence[i]);\n\t                for (n = 0; n < neighbors.length; ++n) {\n\t                    neighbor = neighbors[n];\n\t                    if (x.get(neighbor) <= x.get(sequence[i])) {\n\t                        c++;\n\t                    }\n\t                    else {\n\t                        c--;\n\t                        rightHeap.push({ k: x.get(neighbor) - this.getMinDist(sequence[i], sequence[t]), v: 2 });\n\t                    }\n\t                }\n\t                rightHeap.push({ k: x.get(sequence[i]) - this.getMinDist(sequence[i], sequence[t]), v: c });\n\t            }\n\t            if (virtualEnd) {\n\t                rightHeap.push({ k: x.get(virtualEnd) - this.getMinDist(virtualEnd, sequence[t]), v: Number.MAX_VALUE });\n\t            }\n\t            rightHeap.sort(this._positionAscendingComparer);\n\n\t            var leftRes = 0, rightRes = 0;\n\t            var m = this.getMinDist(sequence[t - 1], sequence[t]);\n\t            while (x.get(sequence[t]) - x.get(sequence[t - 1]) < m) {\n\t                if (leftRes < rightRes) {\n\t                    if (leftHeap.length === 0) {\n\t                        x.set(sequence[t - 1], x.get(sequence[t]) - m);\n\t                        break;\n\t                    }\n\t                    else {\n\t                        pair = leftHeap.shift();\n\t                        leftRes = leftRes + pair.v;\n\t                        x.set(sequence[t - 1], pair.k);\n\t                        x.set(sequence[t - 1], Math.max(x.get(sequence[t - 1]), x.get(sequence[t]) - m));\n\t                    }\n\t                }\n\t                else {\n\t                    if (rightHeap.length === 0) {\n\t                        x.set(sequence[t], x.get(sequence[t - 1]) + m);\n\t                        break;\n\t                    }\n\t                    else {\n\t                        pair = rightHeap.shift();\n\t                        rightRes = rightRes + pair.v;\n\t                        x.set(sequence[t], pair.k);\n\t                        x.set(sequence[t], Math.min(x.get(sequence[t]), x.get(sequence[t - 1]) + m));\n\t                    }\n\t                }\n\t            }\n\t            for (i = t - 2; i >= 0; i--) {\n\t                x.set(sequence[i], Math.min(x.get(sequence[i]), x.get(sequence[t - 1]) - this.getMinDist(sequence[i], sequence[t - 1])));\n\t            }\n\t            for (i = t + 1; i < r; i++) {\n\t                x.set(sequence[i], Math.max(x.get(sequence[i]), x.get(sequence[t]) + this.getMinDist(sequence[i], sequence[t])));\n\t            }\n\t        },\n\n\t        placeLeft: function (node, leftPos, leftClass) {\n\t            var pos = Number.NEGATIVE_INFINITY;\n\t            Utils.forEach(this._getComposite(node), function (v) {\n\t                var leftSibling = this.leftSibling(v);\n\t                if (leftSibling && this.nodeLeftClass.get(leftSibling) === this.nodeLeftClass.get(v)) {\n\t                    if (!leftPos.containsKey(leftSibling)) {\n\t                        this.placeLeft(leftSibling, leftPos, leftClass);\n\t                    }\n\t                    pos = Math.max(pos, leftPos.get(leftSibling) + this.getMinDist(leftSibling, v));\n\t                }\n\t            }, this);\n\t            if (pos === Number.NEGATIVE_INFINITY) {\n\t                pos = 0;\n\t            }\n\t            Utils.forEach(this._getComposite(node), function (v) {\n\t                leftPos.set(v, pos);\n\t            });\n\t        },\n\n\t        placeRight: function (node, rightPos, rightClass) {\n\t            var pos = Number.POSITIVE_INFINITY;\n\t            Utils.forEach(this._getComposite(node), function (v) {\n\t                var rightSibling = this.rightSibling(v);\n\t                if (rightSibling && this.nodeRightClass.get(rightSibling) === this.nodeRightClass.get(v)) {\n\t                    if (!rightPos.containsKey(rightSibling)) {\n\t                        this.placeRight(rightSibling, rightPos, rightClass);\n\t                    }\n\t                    pos = Math.min(pos, rightPos.get(rightSibling) - this.getMinDist(v, rightSibling));\n\t                }\n\t            }, this);\n\t            if (pos === Number.POSITIVE_INFINITY) {\n\t                pos = 0;\n\t            }\n\t            Utils.forEach(this._getComposite(node), function (v) {\n\t                rightPos.set(v, pos);\n\t            });\n\t        },\n\n\t        leftSibling: function (node) {\n\t            var layer = this.layers[node.layer],\n\t                layerIndex = node.layerIndex;\n\t            return layerIndex === 0 ? null : layer[layerIndex - 1];\n\t        },\n\n\t        rightSibling: function (node) {\n\t            var layer = this.layers[node.layer];\n\t            var layerIndex = node.layerIndex;\n\t            return layerIndex === layer.length - 1 ? null : layer[layerIndex + 1];\n\n\t        },\n\n\t        _getComposite: function (node) {\n\t            return node.isVirtual ? this._nodesInLink(node) : [node];\n\t        },\n\n\t        arrangeNodes: function () {\n\t            var i, l, ni, layer, node;\n\t            // Initialize node\'s base priority\n\t            for (l = 0; l < this.layers.length; l++) {\n\t                layer = this.layers[l];\n\n\t                for (ni = 0; ni < layer.length; ni++) {\n\t                    node = layer[ni];\n\t                    node.upstreamPriority = node.upstreamLinkCount;\n\t                    node.downstreamPriority = node.downstreamLinkCount;\n\t                }\n\t            }\n\n\t            // Layout is invoked after MinimizeCrossings\n\t            // so we may assume node\'s barycenters are initially correct\n\n\t            var maxLayoutIterations = 2;\n\t            for (var it = 0; it < maxLayoutIterations; it++) {\n\t                for (i = this.layers.length - 1; i >= 1; i--) {\n\t                    this.layoutLayer(false, i);\n\t                }\n\n\t                for (i = 0; i < this.layers.length - 1; i++) {\n\t                    this.layoutLayer(true, i);\n\t                }\n\t            }\n\n\t            // Offset the whole structure so that there are no gridPositions < 0\n\t            var gridPos = Number.MAX_VALUE;\n\t            for (l = 0; l < this.layers.length; l++) {\n\t                layer = this.layers[l];\n\n\t                for (ni = 0; ni < layer.length; ni++) {\n\t                    node = layer[ni];\n\t                    gridPos = Math.min(gridPos, node.gridPosition);\n\t                }\n\t            }\n\n\t            if (gridPos < 0) {\n\t                for (l = 0; l < this.layers.length; l++) {\n\t                    layer = this.layers[l];\n\n\t                    for (ni = 0; ni < layer.length; ni++) {\n\t                        node = layer[ni];\n\t                        node.gridPosition = node.gridPosition - gridPos;\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        /// <summary>\n\t        /// Layout of a single layer.\n\t        /// </summary>\n\t        /// <param name="layerIndex">The layer to organize.</param>\n\t        /// <param name="movingDownwards">If set to <c>true</c> we move down in the layer stack.</param>\n\t        /// <seealso cref="OptimizeCrossings()"/>\n\t        layoutLayer: function (down, layer) {\n\t            var iconsidered;\n\t            var considered;\n\n\t            if (down) {\n\t                considered = this.layers[iconsidered = layer + 1];\n\t            }\n\t            else {\n\t                considered = this.layers[iconsidered = layer - 1];\n\t            }\n\n\t            // list containing the nodes in the considered layer sorted by priority\n\t            var sorted = [];\n\t            for (var n = 0; n < considered.length; n++) {\n\t                sorted.push(considered[n]);\n\t            }\n\t            sorted.sort(function (n1, n2) {\n\t                var n1Priority = (n1.upstreamPriority + n1.downstreamPriority) / 2;\n\t                var n2Priority = (n2.upstreamPriority + n2.downstreamPriority) / 2;\n\n\t                if (Math.abs(n1Priority - n2Priority) < 0.0001) {\n\t                    return 0;\n\t                }\n\t                if (n1Priority < n2Priority) {\n\t                    return 1;\n\t                }\n\t                return -1;\n\t            });\n\n\t            // each node strives for its barycenter; high priority nodes start first\n\t            Utils.forEach(sorted, function (node) {\n\t                var nodeGridPos = node.gridPosition;\n\t                var nodeBaryCenter = this.calcBaryCenter(node);\n\t                var nodePriority = (node.upstreamPriority + node.downstreamPriority) / 2;\n\n\t                if (Math.abs(nodeGridPos - nodeBaryCenter) < 0.0001) {\n\t                    // This node is exactly at its barycenter -> perfect\n\t                    return;\n\t                }\n\n\t                if (Math.abs(nodeGridPos - nodeBaryCenter) < 0.25 + 0.0001) {\n\t                    // This node is close enough to the barycenter -> should work\n\t                    return;\n\t                }\n\n\t                if (nodeGridPos < nodeBaryCenter) {\n\t                    // Try to move the node to the right in an\n\t                    // attempt to reach its barycenter\n\t                    while (nodeGridPos < nodeBaryCenter) {\n\t                        if (!this.moveRight(node, considered, nodePriority)) {\n\t                            break;\n\t                        }\n\n\t                        nodeGridPos = node.gridPosition;\n\t                    }\n\t                }\n\t                else {\n\t                    // Try to move the node to the left in an\n\t                    // attempt to reach its barycenter\n\t                    while (nodeGridPos > nodeBaryCenter) {\n\t                        if (!this.moveLeft(node, considered, nodePriority)) {\n\t                            break;\n\t                        }\n\n\t                        nodeGridPos = node.gridPosition;\n\t                    }\n\t                }\n\t            }, this);\n\n\t            // after the layer has been rearranged we need to recalculate the barycenters\n\t            // of the nodes in the surrounding layers\n\t            if (iconsidered > 0) {\n\t                this.calcDownData(iconsidered - 1);\n\t            }\n\t            if (iconsidered < this.layers.length - 1) {\n\t                this.calcUpData(iconsidered + 1);\n\t            }\n\t        },\n\n\t        /// <summary>\n\t        /// Moves the node to the right and returns <c>true</c> if this was possible.\n\t        /// </summary>\n\t        /// <param name="node">The node.</param>\n\t        /// <param name="layer">The layer.</param>\n\t        /// <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>\n\t        moveRight: function (node, layer, priority) {\n\t            var index = Utils.indexOf(layer, node);\n\t            if (index === layer.length - 1) {\n\t                // this is the last node in the layer, so we can move to the right without troubles\n\t                node.gridPosition = node.gridPosition + 0.5;\n\t                return true;\n\t            }\n\n\t            var rightNode = layer[index + 1];\n\t            var rightNodePriority = (rightNode.upstreamPriority + rightNode.downstreamPriority) / 2;\n\n\t            // check if there is space between the right and the current node\n\t            if (rightNode.gridPosition > node.gridPosition + 1) {\n\t                node.gridPosition = node.gridPosition + 0.5;\n\t                return true;\n\t            }\n\n\t            // we have reached a node with higher priority; no movement is allowed\n\t            if (rightNodePriority > priority ||\n\t                Math.abs(rightNodePriority - priority) < 0.0001) {\n\t                return false;\n\t            }\n\n\t            // the right node has lower priority - try to move it\n\t            if (this.moveRight(rightNode, layer, priority)) {\n\t                node.gridPosition = node.gridPosition + 0.5;\n\t                return true;\n\t            }\n\n\t            return false;\n\t        },\n\n\t        /// <summary>\n\t        /// Moves the node to the left and returns <c>true</c> if this was possible.\n\t        /// </summary>\n\t        /// <param name="node">The node.</param>\n\t        /// <param name="layer">The layer.</param>\n\t        /// <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>\n\t        moveLeft: function (node, layer, priority) {\n\t            var index = Utils.indexOf(layer, node);\n\t            if (index === 0) {\n\t                // this is the last node in the layer, so we can move to the left without troubles\n\t                node.gridPosition = node.gridPosition - 0.5;\n\t                return true;\n\t            }\n\n\t            var leftNode = layer[index - 1];\n\t            var leftNodePriority = (leftNode.upstreamPriority + leftNode.downstreamPriority) / 2;\n\n\t            // check if there is space between the left and the current node\n\t            if (leftNode.gridPosition < node.gridPosition - 1) {\n\t                node.gridPosition = node.gridPosition - 0.5;\n\t                return true;\n\t            }\n\n\t            // we have reached a node with higher priority; no movement is allowed\n\t            if (leftNodePriority > priority ||\n\t                Math.abs(leftNodePriority - priority) < 0.0001) {\n\t                return false;\n\t            }\n\n\t            // The left node has lower priority - try to move it\n\t            if (this.moveLeft(leftNode, layer, priority)) {\n\t                node.gridPosition = node.gridPosition - 0.5;\n\t                return true;\n\t            }\n\n\t            return false;\n\t        },\n\n\t        mapVirtualNode: function (node, link) {\n\t            this.nodeToLinkMap.set(node, link);\n\t            if (!this.linkToNodeMap.containsKey(link)) {\n\t                this.linkToNodeMap.set(link, []);\n\t            }\n\t            this.linkToNodeMap.get(link).push(node);\n\t        },\n\n\t        _nodesInLink: function (node) {\n\t            return this.linkToNodeMap.get(this.nodeToLinkMap.get(node));\n\t        },\n\n\t        /// <summary>\n\t        /// Inserts dummy nodes to break long links.\n\t        /// </summary>\n\t        _dummify: function () {\n\t            this.linkToNodeMap = new Dictionary();\n\t            this.nodeToLinkMap = new Dictionary();\n\n\t            var layer, pos, newNode, node, r, newLink, i, l, links = this.graph.links.slice(0);\n\t            var layers = this.layers;\n\n\t            var addLinkBetweenLayers = function(upLayer, downLayer, link) {\n\t                layers[upLayer].linksTo[downLayer] = layers[upLayer].linksTo[downLayer] || [];\n\t                layers[upLayer].linksTo[downLayer].push(link);\n\t            };\n\n\t            for (l = 0; l < links.length; l++) {\n\t                var link = links[l];\n\t                var o = link.source;\n\t                var d = link.target;\n\n\t                var oLayer = o.layer;\n\t                var dLayer = d.layer;\n\t                var oPos = o.gridPosition;\n\t                var dPos = d.gridPosition;\n\n\t                var step = (dPos - oPos) / Math.abs(dLayer - oLayer);\n\n\t                var p = o;\n\t                if (oLayer - dLayer > 1) {\n\t                    for (i = oLayer - 1; i > dLayer; i--) {\n\t                        newNode = new Node();\n\t                        newNode.x = o.x;\n\t                        newNode.y = o.y;\n\t                        newNode.width = o.width / 100;\n\t                        newNode.height = o.height / 100;\n\n\t                        layer = layers[i];\n\t                        pos = (i - dLayer) * step + oPos;\n\t                        if (pos > layer.length) {\n\t                            pos = layer.length;\n\t                        }\n\n\t                        // check if origin and dest are both last\n\t                        if (oPos >= layers[oLayer].length - 1 &&\n\t                            dPos >= layers[dLayer].length - 1) {\n\t                            pos = layer.length;\n\t                        }\n\n\t                        // check if origin and destination are both first\n\t                        else if (oPos === 0 && dPos === 0) {\n\t                            pos = 0;\n\t                        }\n\n\t                        newNode.layer = i;\n\t                        newNode.uBaryCenter = 0.0;\n\t                        newNode.dBaryCenter = 0.0;\n\t                        newNode.upstreamLinkCount = 0;\n\t                        newNode.downstreamLinkCount = 0;\n\t                        newNode.gridPosition = pos;\n\t                        newNode.isVirtual = true;\n\n\t                        Utils.insert(layer, newNode, pos);\n\n\t                        // translate rightwards nodes\' positions\n\t                        for (r = pos + 1; r < layer.length; r++) {\n\t                            node = layer[r];\n\t                            node.gridPosition = node.gridPosition + 1;\n\t                        }\n\n\t                        newLink = new Link(p, newNode);\n\t                        newLink.depthOfDumminess = 0;\n\n\t                        addLinkBetweenLayers(i - 1, i, newLink);\n\n\t                        p = newNode;\n\n\t                        // add the new node and the new link to the graph\n\t                        this.graph._addNode(newNode);\n\t                        this.graph.addLink(newLink);\n\n\t                        newNode.index = this.graph.nodes.length - 1;\n\t                        this.mapVirtualNode(newNode, link);\n\t                    }\n\n\t                    // set the origin of the real arrow to the last dummy\n\t                    addLinkBetweenLayers(dLayer - 1, dLayer, newLink);\n\t                    link.changeSource(p);\n\t                    link.depthOfDumminess = oLayer - dLayer - 1;\n\t                } else if (oLayer - dLayer < -1) {\n\t                    for (i = oLayer + 1; i < dLayer; i++) {\n\t                        newNode = new Node();\n\t                        newNode.x = o.x;\n\t                        newNode.y = o.y;\n\t                        newNode.width = o.width / 100;\n\t                        newNode.height = o.height / 100;\n\n\t                        layer = layers[i];\n\t                        pos = (i - oLayer) * step + oPos;\n\t                        if (pos > layer.length) {\n\t                            pos = layer.length;\n\t                        }\n\n\t                        // check if origin and dest are both last\n\t                        if (oPos >= layers[oLayer].length - 1 &&\n\t                            dPos >= layers[dLayer].length - 1) {\n\t                            pos = layer.length;\n\t                        }\n\n\t                        // check if origin and destination are both first\n\t                        else if (oPos === 0 && dPos === 0) {\n\t                            pos = 0;\n\t                        }\n\n\t                        newNode.layer = i;\n\t                        newNode.uBaryCenter = 0.0;\n\t                        newNode.dBaryCenter = 0.0;\n\t                        newNode.upstreamLinkCount = 0;\n\t                        newNode.downstreamLinkCount = 0;\n\t                        newNode.gridPosition = pos;\n\t                        newNode.isVirtual = true;\n\n\t                        pos &= pos; // truncates to int\n\t                        Utils.insert(layer, newNode, pos);\n\n\t                        // translate rightwards nodes\' positions\n\t                        for (r = pos + 1; r < layer.length; r++) {\n\t                            node = layer[r];\n\t                            node.gridPosition = node.gridPosition + 1;\n\t                        }\n\n\t                        newLink = new Link(p, newNode);\n\t                        newLink.depthOfDumminess = 0;\n\t                        addLinkBetweenLayers(i - 1, i, newLink);\n\n\t                        p = newNode;\n\n\t                        // add the new node and the new link to the graph\n\t                        this.graph._addNode(newNode);\n\t                        this.graph.addLink(newLink);\n\n\t                        newNode.index = this.graph.nodes.length - 1;\n\t                        this.mapVirtualNode(newNode, link);\n\t                    }\n\t                    addLinkBetweenLayers(dLayer - 1, dLayer, link);\n\n\t                    // Set the origin of the real arrow to the last dummy\n\t                    link.changeSource(p);\n\t                    link.depthOfDumminess = dLayer - oLayer - 1;\n\t                } else {\n\t                    addLinkBetweenLayers(oLayer, dLayer, link);\n\t                }\n\t            }\n\t        },\n\n\t        /// <summary>\n\t        /// Removes the dummy nodes inserted earlier to break long links.\n\t        /// </summary>\n\t        /// <remarks>The virtual nodes are effectively turned into intermediate connection points.</remarks>\n\t        _dedummify: function () {\n\t            var dedum = true;\n\t            while (dedum) {\n\t                dedum = false;\n\n\t                for (var l = 0; l < this.graph.links.length; l++) {\n\t                    var link = this.graph.links[l];\n\t                    if (!link.depthOfDumminess) {\n\t                        continue;\n\t                    }\n\n\t                    var points = [];\n\n\t                    // add points in reverse order\n\t                    points.unshift({ x: link.target.x, y: link.target.y });\n\t                    points.unshift({ x: link.source.x, y: link.source.y });\n\n\t                    // _dedummify the link\n\t                    var temp = link;\n\t                    var depthOfDumminess = link.depthOfDumminess;\n\t                    for (var d = 0; d < depthOfDumminess; d++) {\n\t                        var node = temp.source;\n\t                        var prevLink = node.incoming[0];\n\n\t                        points.unshift({ x: prevLink.source.x, y: prevLink.source.y });\n\n\t                        temp = prevLink;\n\t                    }\n\n\t                    // restore the original link origin\n\t                    link.changeSource(temp.source);\n\n\t                    // reset dummification flag\n\t                    link.depthOfDumminess = 0;\n\n\t                    // note that we only need the intermediate points, floating links have been dropped in the analysis\n\t                    if (points.length > 2) {\n\t                        // first and last are the endpoints\n\t                        points.splice(0, 1);\n\t                        points.splice(points.length - 1);\n\t                        link.points = points;\n\t                    }\n\t                    else {\n\t                        link.points = [];\n\t                    }\n\n\t                    // we are not going to delete the dummy elements;\n\t                    // they won\'t be needed anymore anyway.\n\n\t                    dedum = true;\n\t                    break;\n\t                }\n\t            }\n\t        },\n\n\t        /// <summary>\n\t        /// Optimizes/reduces the crossings between the layers by turning the crossing problem into a (combinatorial) number ordering problem.\n\t        /// </summary>\n\t        _optimizeCrossings: function () {\n\t            var moves = -1, i;\n\t            var maxIterations = 3;\n\t            var iter = 0;\n\n\t            while (moves !== 0) {\n\t                if (iter++ > maxIterations) {\n\t                    break;\n\t                }\n\n\t                moves = 0;\n\n\t                for (i = this.layers.length - 1; i >= 1; i--) {\n\t                    moves += this.optimizeLayerCrossings(false, i);\n\t                }\n\n\t                for (i = 0; i < this.layers.length - 1; i++) {\n\t                    moves += this.optimizeLayerCrossings(true, i);\n\t                }\n\t            }\n\t        },\n\n\t        calcUpData: function (layer) {\n\t            if (layer === 0) {\n\t                return;\n\t            }\n\n\t            var considered = this.layers[layer], i, l, link;\n\t            var upLayer = new Set();\n\t            var temp = this.layers[layer - 1];\n\t            for (i = 0; i < temp.length; i++) {\n\t                upLayer.add(temp[i]);\n\t            }\n\n\t            for (i = 0; i < considered.length; i++) {\n\t                var node = considered[i];\n\n\t                // calculate barycenter\n\t                var sum = 0;\n\t                var total = 0;\n\n\t                for (l = 0; l < node.incoming.length; l++) {\n\t                    link = node.incoming[l];\n\t                    if (upLayer.contains(link.source)) {\n\t                        total++;\n\t                        sum += link.source.gridPosition;\n\t                    }\n\t                }\n\n\t                for (l = 0; l < node.outgoing.length; l++) {\n\t                    link = node.outgoing[l];\n\t                    if (upLayer.contains(link.target)) {\n\t                        total++;\n\t                        sum += link.target.gridPosition;\n\t                    }\n\t                }\n\n\t                if (total > 0) {\n\t                    node.uBaryCenter = sum / total;\n\t                    node.upstreamLinkCount = total;\n\t                }\n\t                else {\n\t                    node.uBaryCenter = i;\n\t                    node.upstreamLinkCount = 0;\n\t                }\n\t            }\n\t        },\n\n\t        calcDownData: function (layer) {\n\t            if (layer === this.layers.length - 1) {\n\t                return;\n\t            }\n\n\t            var considered = this.layers[layer], i , l, link;\n\t            var downLayer = new Set();\n\t            var temp = this.layers[layer + 1];\n\t            for (i = 0; i < temp.length; i++) {\n\t                downLayer.add(temp[i]);\n\t            }\n\n\t            for (i = 0; i < considered.length; i++) {\n\t                var node = considered[i];\n\n\t                // calculate barycenter\n\t                var sum = 0;\n\t                var total = 0;\n\n\t                for (l = 0; l < node.incoming.length; l++) {\n\t                    link = node.incoming[l];\n\t                    if (downLayer.contains(link.source)) {\n\t                        total++;\n\t                        sum += link.source.gridPosition;\n\t                    }\n\t                }\n\n\t                for (l = 0; l < node.outgoing.length; l++) {\n\t                    link = node.outgoing[l];\n\t                    if (downLayer.contains(link.target)) {\n\t                        total++;\n\t                        sum += link.target.gridPosition;\n\t                    }\n\t                }\n\n\t                if (total > 0) {\n\t                    node.dBaryCenter = sum / total;\n\t                    node.downstreamLinkCount = total;\n\t                }\n\t                else {\n\t                    node.dBaryCenter = i;\n\t                    node.downstreamLinkCount = 0;\n\t                }\n\t            }\n\t        },\n\n\t        /// <summary>\n\t        /// Optimizes the crossings.\n\t        /// </summary>\n\t        /// <remarks>The big trick here is the usage of weights or values attached to connected nodes which turn a problem of crossing links\n\t        /// to an a problem of ordering numbers.</remarks>\n\t        /// <param name="layerIndex">The layer index.</param>\n\t        /// <param name="movingDownwards">If set to <c>true</c> we move down in the layer stack.</param>\n\t        /// <returns>The number of nodes having moved, i.e. the number of crossings reduced.</returns>\n\t        optimizeLayerCrossings: function (down, layer) {\n\t            var iconsidered;\n\t            var considered;\n\n\t            if (down) {\n\t                considered = this.layers[iconsidered = layer + 1];\n\t            }\n\t            else {\n\t                considered = this.layers[iconsidered = layer - 1];\n\t            }\n\n\t            // remember what it was\n\t            var presorted = considered.slice(0);\n\n\t            // calculate barycenters for all nodes in the considered layer\n\t            if (down) {\n\t                this.calcUpData(iconsidered);\n\t            }\n\t            else {\n\t                this.calcDownData(iconsidered);\n\t            }\n\n\t            var that = this;\n\t            // sort nodes within this layer according to the barycenters\n\t            considered.sort(function(n1, n2) {\n\t                var n1BaryCenter = that.calcBaryCenter(n1),\n\t                    n2BaryCenter = that.calcBaryCenter(n2);\n\t                if (Math.abs(n1BaryCenter - n2BaryCenter) < 0.0001) {\n\t                    // in case of coinciding barycenters compare by the count of in/out links\n\t                    if (n1.degree() === n2.degree()) {\n\t                        return that.compareByIndex(n1, n2);\n\t                    }\n\t                    else if (n1.degree() < n2.degree()) {\n\t                        return 1;\n\t                    }\n\t                    return -1;\n\t                }\n\t                var compareValue = (n2BaryCenter - n1BaryCenter) * 1000;\n\t                if (compareValue > 0) {\n\t                    return -1;\n\t                }\n\t                else if (compareValue < 0) {\n\t                    return 1;\n\t                }\n\t                return that.compareByIndex(n1, n2);\n\t            });\n\n\t            // count relocations\n\t            var i, moves = 0;\n\t            for (i = 0; i < considered.length; i++) {\n\t                if (considered[i] !== presorted[i]) {\n\t                    moves++;\n\t                }\n\t            }\n\n\t            if (moves > 0) {\n\t                // now that the boxes have been arranged, update their grid positions\n\t                var inode = 0;\n\t                for (i = 0; i < considered.length; i++) {\n\t                    var node = considered[i];\n\t                    node.gridPosition = inode++;\n\t                }\n\t            }\n\n\t            return moves;\n\t        },\n\n\t        /// <summary>\n\t        /// Swaps a pair of nodes in a layer.\n\t        /// </summary>\n\t        /// <param name="layerIndex">Index of the layer.</param>\n\t        /// <param name="n">The Nth node in the layer.</param>\n\t        _swapPairs: function () {\n\t            var maxIterations = this.options.layeredIterations;\n\t            var iter = 0;\n\n\t            while (true) {\n\t                if (iter++ > maxIterations) {\n\t                    break;\n\t                }\n\n\t                var downwards = (iter % 4 <= 1);\n\t                var secondPass = (iter % 4 === 1);\n\n\t                for (var l = (downwards ? 0 : this.layers.length - 1);\n\t                     downwards ? l <= this.layers.length - 1 : l >= 0; l += (downwards ? 1 : -1)) {\n\t                    var layer = this.layers[l];\n\t                    var hasSwapped = false;\n\n\t                    // there is no need to recalculate crossings if they were calculated\n\t                    // on the previous step and nothing has changed\n\t                    var calcCrossings = true;\n\t                    var memCrossings = 0;\n\n\t                    for (var n = 0; n < layer.length - 1; n++) {\n\t                        // count crossings\n\t                        var up = 0;\n\t                        var down = 0;\n\t                        var crossBefore = 0;\n\n\t                        if (calcCrossings) {\n\t                            if (l !== 0) {\n\t                                up = this.countLinksCrossingBetweenTwoLayers(l - 1, l);\n\t                            }\n\t                            if (l !== this.layers.length - 1) {\n\t                                down = this.countLinksCrossingBetweenTwoLayers(l, l + 1);\n\t                            }\n\t                            if (downwards) {\n\t                                up *= 2;\n\t                            }\n\t                            else {\n\t                                down *= 2;\n\t                            }\n\n\t                            crossBefore = up + down;\n\t                        }\n\t                        else {\n\t                            crossBefore = memCrossings;\n\t                        }\n\n\t                        if (crossBefore === 0) {\n\t                            continue;\n\t                        }\n\n\t                        // Swap nodes\n\t                        var node1 = layer[n];\n\t                        var node2 = layer[n + 1];\n\n\t                        var node1GridPos = node1.gridPosition;\n\t                        var node2GridPos = node2.gridPosition;\n\t                        layer[n] = node2;\n\t                        layer[n + 1] = node1;\n\t                        node1.gridPosition = node2GridPos;\n\t                        node2.gridPosition = node1GridPos;\n\n\t                        // count crossings again and if worse than before, restore swapping\n\t                        up = 0;\n\t                        if (l !== 0) {\n\t                            up = this.countLinksCrossingBetweenTwoLayers(l - 1, l);\n\t                        }\n\t                        down = 0;\n\t                        if (l !== this.layers.length - 1) {\n\t                            down = this.countLinksCrossingBetweenTwoLayers(l, l + 1);\n\t                        }\n\t                        if (downwards) {\n\t                            up *= 2;\n\t                        }\n\t                        else {\n\t                            down *= 2;\n\t                        }\n\t                        var crossAfter = up + down;\n\n\t                        var revert = false;\n\t                        if (secondPass) {\n\t                            revert = crossAfter >= crossBefore;\n\t                        }\n\t                        else {\n\t                            revert = crossAfter > crossBefore;\n\t                        }\n\n\t                        if (revert) {\n\t                            node1 = layer[n];\n\t                            node2 = layer[n + 1];\n\n\t                            node1GridPos = node1.gridPosition;\n\t                            node2GridPos = node2.gridPosition;\n\t                            layer[n] = node2;\n\t                            layer[n + 1] = node1;\n\t                            node1.gridPosition = node2GridPos;\n\t                            node2.gridPosition = node1GridPos;\n\n\t                            // nothing has changed, remember the crossings so that\n\t                            // they are not calculated again on the next step\n\t                            memCrossings = crossBefore;\n\t                            calcCrossings = false;\n\t                        }\n\t                        else {\n\t                            hasSwapped = true;\n\t                            calcCrossings = true;\n\t                        }\n\t                    }\n\n\t                    if (hasSwapped) {\n\t                        if (l !== this.layers.length - 1) {\n\t                            this.calcUpData(l + 1);\n\t                        }\n\t                        if (l !== 0) {\n\t                            this.calcDownData(l - 1);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        /// <summary>\n\t        /// Counts the number of links crossing between two layers.\n\t        /// </summary>\n\t        /// <param name="layerIndex1">The layer index.</param>\n\t        /// <param name="layerIndex2">Another layer index.</param>\n\t        /// <returns></returns>\n\t        countLinksCrossingBetweenTwoLayers: function (ulayer, dlayer) {\n\t            var links = this.layers[ulayer].linksTo[dlayer];\n\t            var link1, link2, n11, n12, n21, n22, l1, l2;\n\t            var crossings = 0;\n\t            var length = links.length;\n\n\t            for (l1 = 0; l1 < length; l1++) {\n\t                link1 = links[l1];\n\t                for (l2 = l1 + 1; l2 < length; l2++) {\n\n\t                    link2 = links[l2];\n\n\t                    if (link1.target.layer === dlayer) {\n\t                        n11 = link1.source;\n\t                        n12 = link1.target;\n\t                    }\n\t                    else {\n\t                        n11 = link1.target;\n\t                        n12 = link1.source;\n\t                    }\n\n\t                    if (link2.target.layer === dlayer) {\n\t                        n21 = link2.source;\n\t                        n22 = link2.target;\n\t                    }\n\t                    else {\n\t                        n21 = link2.target;\n\t                        n22 = link2.source;\n\t                    }\n\n\t                    var n11gp = n11.gridPosition;\n\t                    var n12gp = n12.gridPosition;\n\t                    var n21gp = n21.gridPosition;\n\t                    var n22gp = n22.gridPosition;\n\n\t                    if ((n11gp - n21gp) * (n12gp - n22gp) < 0) {\n\t                        crossings++;\n\t                    }\n\t                }\n\t            }\n\n\t            return crossings;\n\t        },\n\n\t        calcBaryCenter: function (node) {\n\t            var upstreamLinkCount = node.upstreamLinkCount;\n\t            var downstreamLinkCount = node.downstreamLinkCount;\n\t            var uBaryCenter = node.uBaryCenter;\n\t            var dBaryCenter = node.dBaryCenter;\n\n\t            if (upstreamLinkCount > 0 && downstreamLinkCount > 0) {\n\t                return (uBaryCenter + dBaryCenter) / 2;\n\t            }\n\t            if (upstreamLinkCount > 0) {\n\t                return uBaryCenter;\n\t            }\n\t            if (downstreamLinkCount > 0) {\n\t                return dBaryCenter;\n\t            }\n\n\t            return 0;\n\t        },\n\n\t        _gridPositionComparer: function (x, y) {\n\t            if (x.gridPosition < y.gridPosition) {\n\t                return -1;\n\t            }\n\t            if (x.gridPosition > y.gridPosition) {\n\t                return 1;\n\t            }\n\t            return 0;\n\t        },\n\n\t        _positionAscendingComparer: function (x, y) {\n\t            return x.k < y.k ? -1 : x.k > y.k ? 1 : 0;\n\t        },\n\n\t        _positionDescendingComparer: function (x, y) {\n\t            return x.k < y.k ? 1 : x.k > y.k ? -1 : 0;\n\t        },\n\n\t        _firstVirtualNode: function (layer) {\n\t            for (var c = 0; c < layer.length; c++) {\n\t                if (layer[c].isVirtual) {\n\t                    return c;\n\t                }\n\t            }\n\t            return -1;\n\t        },\n\n\t        compareByIndex: function (o1, o2) {\n\t            var i1 = o1.index;\n\t            var i2 = o2.index;\n\n\t            if (i1 < i2) {\n\t                return 1;\n\t            }\n\n\t            if (i1 > i2) {\n\t                return -1;\n\t            }\n\n\t            return 0;\n\t        },\n\n\t        intDiv: function (numerator, denominator) {\n\t            return (numerator - numerator % denominator) / denominator;\n\t        },\n\n\t        nextVirtualNode: function (layer, node) {\n\t            var nodeIndex = node.layerIndex;\n\t            for (var i = nodeIndex + 1; i < layer.length; ++i) {\n\t                if (layer[i].isVirtual) {\n\t                    return layer[i];\n\t                }\n\t            }\n\t            return null;\n\t        }\n\n\t    });\n\n\t    /**\n\t     * Captures the state of a diagram; node positions, link points and so on.\n\t     * @type {*}\n\t     */\n\t    var LayoutState = kendo.Class.extend({\n\t        init: function (diagram, graphOrNodes) {\n\t            if (Utils.isUndefined(diagram)) {\n\t                throw "No diagram given";\n\t            }\n\t            this.diagram = diagram;\n\t            this.nodeMap = new Dictionary();\n\t            this.linkMap = new Dictionary();\n\t            this.capture(graphOrNodes ? graphOrNodes : diagram);\n\t        },\n\n\t        /**\n\t         * Will capture either\n\t         * - the state of the shapes and the intermediate points of the connections in the diagram\n\t         * - the bounds of the nodes contained in the Graph together with the intermediate points of the links in the Graph\n\t         * - the bounds of the nodes in the Array<Node>\n\t         * - the links points and node bounds in the literal object\n\t         * @param diagramOrGraphOrNodes\n\t         */\n\t        capture: function (diagramOrGraphOrNodes) {\n\t            var node,\n\t                nodes,\n\t                shape,\n\t                i,\n\t                conn,\n\t                link,\n\t                links;\n\n\t            if (diagramOrGraphOrNodes instanceof diagram.Graph) {\n\n\t                for (i = 0; i < diagramOrGraphOrNodes.nodes.length; i++) {\n\t                    node = diagramOrGraphOrNodes.nodes[i];\n\t                    shape = node.associatedShape;\n\t                    //shape.bounds(new Rect(node.x, node.y, node.width, node.height));\n\t                    this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n\t                }\n\t                for (i = 0; i < diagramOrGraphOrNodes.links.length; i++) {\n\t                    link = diagramOrGraphOrNodes.links[i];\n\t                    conn = link.associatedConnection;\n\t                    this.linkMap.set(conn.visual.id, link.points());\n\t                }\n\t            }\n\t            else if (diagramOrGraphOrNodes instanceof Array) {\n\t                nodes = diagramOrGraphOrNodes;\n\t                for (i = 0; i < nodes.length; i++) {\n\t                    node = nodes[i];\n\t                    shape = node.associatedShape;\n\t                    if (shape) {\n\t                        this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n\t                    }\n\t                }\n\t            }\n\t            else if (diagramOrGraphOrNodes.hasOwnProperty("links") && diagramOrGraphOrNodes.hasOwnProperty("nodes")) {\n\t                nodes = diagramOrGraphOrNodes.nodes;\n\t                links = diagramOrGraphOrNodes.links;\n\t                for (i = 0; i < nodes.length; i++) {\n\t                    node = nodes[i];\n\t                    shape = node.associatedShape;\n\t                    if (shape) {\n\t                        this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n\t                    }\n\t                }\n\t                for (i = 0; i < links.length; i++) {\n\t                    link = links[i];\n\t                    conn = link.associatedConnection;\n\t                    if (conn) {\n\t                        this.linkMap.set(conn.visual.id, link.points);\n\t                    }\n\t                }\n\t            }\n\t            else { // capture the diagram\n\t                var shapes = this.diagram.shapes;\n\t                var connections = this.diagram.connections;\n\t                for (i = 0; i < shapes.length; i++) {\n\t                    shape = shapes[i];\n\t                    this.nodeMap.set(shape.visual.id, shape.bounds());\n\t                }\n\t                for (i = 0; i < connections.length; i++) {\n\t                    conn = connections[i];\n\t                    this.linkMap.set(conn.visual.id, conn.points());\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    deepExtend(diagram, {\n\t        init: function (element) {\n\t            kendo.init(element, diagram.ui);\n\t        },\n\t        SpringLayout: SpringLayout,\n\t        TreeLayout: TreeLayout,\n\t        GraphAdapter: DiagramToHyperTreeAdapter,\n\t        LayeredLayout: LayeredLayout,\n\t        LayoutBase: LayoutBase,\n\t        LayoutState: LayoutState\n\t    });\n\t})(window.kendo.jQuery);\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 902:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./math */ "./node_modules/@progress/kendo-ui/js/dataviz/diagram/math.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/dataviz/diagram/layout.js?')}}]);