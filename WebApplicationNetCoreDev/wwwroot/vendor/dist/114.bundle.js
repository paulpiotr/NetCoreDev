(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{"./node_modules/@progress/kendo-ui/js/pdf/core.js":
/*!********************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/pdf/core.js ***!
  \********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1512);\n\tmodule.exports = __webpack_require__(1512);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 924:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.color */ "./node_modules/@progress/kendo-ui/js/kendo.color.js");\n\n/***/ }),\n\n/***/ 1512:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/***********************************************************************\n\t * WARNING: this file is auto-generated.  If you change it directly,\n\t * your modifications will eventually be lost.  The source code is in\n\t * `kendo-drawing` repository, you should make your changes there and\n\t * run `src-modules/sync.sh` in this repository.\n\t */\n\t(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t        __webpack_require__(1513),\n\t        __webpack_require__(20),\n\t        __webpack_require__(924),\n\t        __webpack_require__(1514)\n\t    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}) (function(){\n\n\t(function(kendo){\n\n\t// WARNING: removing the following jshint declaration and turning\n\t// == into === to make JSHint happy will break functionality.\n\t/* jshint eqnull:true */\n\t/* jshint -W069 */\n\t/* jshint loopfunc:true */\n\t/* jshint newcap:false */\n\t/* jshint latedef: nofunc */\n\n\twindow.kendo.pdf = window.kendo.pdf || {};\n\tvar support = kendo.support;\n\tvar supportBrowser = support.browser;\n\tvar kendoPdf = kendo.pdf;\n\tvar drawing = kendo.drawing;\n\tvar util = drawing.util;\n\tvar kendoGeometry = kendo.geometry;\n\n\t/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */\n\t/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */\n\t/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */\n\t/* eslint-disable no-param-reassign, no-var, block-scoped-var */\n\n\t// XXX: remove this junk (assume `true`) when we no longer have to support IE < 10\n\t// IE 9 (at least compatibility) reports having Uint8Array but the request response does not contain ArrayBuffer which results in missing table head error\n\tvar HAS_TYPED_ARRAYS = typeof Uint8Array !== \'undefined\' && kendo.support.browser && (!kendo.support.browser.msie || kendo.support.browser.version > 9);\n\n\tvar BASE64 = (function(){\n\t    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";\n\t    return {\n\t        decode: function(str) {\n\t            var input = str.replace(/[^A-Za-z0-9\\+\\/\\=]/g, ""), i = 0, n = input.length, output = [];\n\n\t            while (i < n) {\n\t                var enc1 = keyStr.indexOf(input.charAt(i++));\n\t                var enc2 = keyStr.indexOf(input.charAt(i++));\n\t                var enc3 = keyStr.indexOf(input.charAt(i++));\n\t                var enc4 = keyStr.indexOf(input.charAt(i++));\n\n\t                var chr1 = (enc1 << 2) | (enc2 >>> 4);\n\t                var chr2 = ((enc2 & 15) << 4) | (enc3 >>> 2);\n\t                var chr3 = ((enc3 & 3) << 6) | enc4;\n\n\t                output.push(chr1);\n\t                if (enc3 != 64) {\n\t                    output.push(chr2);\n\t                }\n\t                if (enc4 != 64) {\n\t                    output.push(chr3);\n\t                }\n\t            }\n\n\t            return output;\n\t        },\n\t        encode: function(bytes) {\n\t            var i = 0, n = bytes.length;\n\t            var output = "";\n\n\t            while (i < n) {\n\t                var chr1 = bytes[i++];\n\t                var chr2 = bytes[i++];\n\t                var chr3 = bytes[i++];\n\n\t                var enc1 = chr1 >>> 2;\n\t                var enc2 = ((chr1 & 3) << 4) | (chr2 >>> 4);\n\t                var enc3 = ((chr2 & 15) << 2) | (chr3 >>> 6);\n\t                var enc4 = chr3 & 63;\n\n\t                if (i - n == 2) {\n\t                    enc3 = enc4 = 64;\n\t                } else if (i - n == 1) {\n\t                    enc4 = 64;\n\t                }\n\n\t                output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n\t            }\n\t            return output;\n\t        }\n\t    };\n\t}());\n\n\tfunction BinaryStream(data) {\n\t    var offset = 0, length = 0;\n\t    if (data == null) {\n\t        data = HAS_TYPED_ARRAYS ? new Uint8Array(256) : [];\n\t    } else {\n\t        length = data.length;\n\t    }\n\n\t    var ensure = HAS_TYPED_ARRAYS ? function(len) {\n\t        if (len >= data.length) {\n\t            var tmp = new Uint8Array(Math.max(len + 256, data.length * 2));\n\t            tmp.set(data, 0);\n\t            data = tmp;\n\t        }\n\t    } : function() {};\n\n\t    var get = HAS_TYPED_ARRAYS ? function() {\n\t        return new Uint8Array(data.buffer, 0, length);\n\t    } : function() {\n\t        return data;\n\t    };\n\n\t    var write = HAS_TYPED_ARRAYS ? function(bytes) {\n\t        if (typeof bytes == "string") {\n\t            return writeString(bytes);\n\t        }\n\t        var len = bytes.length;\n\t        ensure(offset + len);\n\t        data.set(bytes, offset);\n\t        offset += len;\n\t        if (offset > length) {\n\t            length = offset;\n\t        }\n\t    } : function(bytes) {\n\t        if (typeof bytes == "string") {\n\t            return writeString(bytes);\n\t        }\n\t        for (var i = 0; i < bytes.length; ++i) {\n\t            writeByte(bytes[i]);\n\t        }\n\t    };\n\n\t    var slice = HAS_TYPED_ARRAYS ? function(start, length) {\n\t        if (data.buffer.slice) {\n\t            return new Uint8Array(data.buffer.slice(start, start + length));\n\t        } else {\n\t            // IE10\n\t            var x = new Uint8Array(length);\n\t            x.set(new Uint8Array(data.buffer, start, length));\n\t            return x;\n\t        }\n\t    } : function(start, length) {\n\t        return data.slice(start, start + length);\n\t    };\n\n\t    function eof() {\n\t        return offset >= length;\n\t    }\n\t    function readByte() {\n\t        return offset < length ? data[offset++] : 0;\n\t    }\n\t    function writeByte(b) {\n\t        ensure(offset);\n\t        data[offset++] = b & 0xFF;\n\t        if (offset > length) {\n\t            length = offset;\n\t        }\n\t    }\n\t    function readShort() {\n\t        return (readByte() << 8) | readByte();\n\t    }\n\t    function writeShort(w) {\n\t        writeByte(w >> 8);\n\t        writeByte(w);\n\t    }\n\t    function readShort_() {\n\t        var w = readShort();\n\t        return w >= 0x8000 ? w - 0x10000 : w;\n\t    }\n\t    function writeShort_(w) {\n\t        writeShort(w < 0 ? w + 0x10000 : w);\n\t    }\n\t    function readLong() {\n\t        return (readShort() * 0x10000) + readShort();\n\t    }\n\t    function writeLong(w) {\n\t        writeShort((w >>> 16) & 0xFFFF);\n\t        writeShort(w & 0xFFFF);\n\t    }\n\t    function readLong_() {\n\t        var w = readLong();\n\t        return w >= 0x80000000 ? w - 0x100000000 : w;\n\t    }\n\t    function writeLong_(w) {\n\t        writeLong(w < 0 ? w + 0x100000000 : w);\n\t    }\n\t    function readFixed() {\n\t        return readLong() / 0x10000;\n\t    }\n\t    function writeFixed(f) {\n\t        writeLong(Math.round(f * 0x10000));\n\t    }\n\t    function readFixed_() {\n\t        return readLong_() / 0x10000;\n\t    }\n\t    function writeFixed_(f) {\n\t        writeLong_(Math.round(f * 0x10000));\n\t    }\n\t    function read(len) {\n\t        return times(len, readByte);\n\t    }\n\t    function readString(len) {\n\t        return String.fromCharCode.apply(String, read(len));\n\t    }\n\t    function writeString(str) {\n\t        for (var i = 0; i < str.length; ++i) {\n\t            writeByte(str.charCodeAt(i));\n\t        }\n\t    }\n\t    function times(n, reader) {\n\t        for (var ret = new Array(n), i = 0; i < n; ++i) {\n\t            ret[i] = reader();\n\t        }\n\t        return ret;\n\t    }\n\n\t    var stream = {\n\t        eof         : eof,\n\t        readByte    : readByte,\n\t        writeByte   : writeByte,\n\t        readShort   : readShort,\n\t        writeShort  : writeShort,\n\t        readLong    : readLong,\n\t        writeLong   : writeLong,\n\t        readFixed   : readFixed,\n\t        writeFixed  : writeFixed,\n\n\t        // signed numbers.\n\t        readShort_  : readShort_,\n\t        writeShort_ : writeShort_,\n\t        readLong_   : readLong_,\n\t        writeLong_  : writeLong_,\n\t        readFixed_  : readFixed_,\n\t        writeFixed_ : writeFixed_,\n\n\t        read        : read,\n\t        write       : write,\n\t        readString  : readString,\n\t        writeString : writeString,\n\n\t        times       : times,\n\t        get         : get,\n\t        slice       : slice,\n\n\t        offset: function(pos) {\n\t            if (pos != null) {\n\t                offset = pos;\n\t                return stream;\n\t            }\n\t            return offset;\n\t        },\n\n\t        skip: function(nbytes) {\n\t            offset += nbytes;\n\t        },\n\n\t        toString: function() {\n\t            throw new Error("FIX CALLER.  BinaryStream is no longer convertible to string!");\n\t        },\n\n\t        length: function() { return length; },\n\n\t        saveExcursion: function(f) {\n\t            var pos = offset;\n\t            try {\n\t                return f();\n\t            } finally {\n\t                offset = pos;\n\t            }\n\t        },\n\n\t        writeBase64: function(base64) {\n\t            if (window.atob) {\n\t                writeString(window.atob(base64));\n\t            } else {\n\t                write(BASE64.decode(base64));\n\t            }\n\t        },\n\t        base64: function() {\n\t            return BASE64.encode(get());\n\t        }\n\t    };\n\n\t    return stream;\n\t}\n\n\tfunction ucs2decode(string) {\n\t    var output = [],\n\t        counter = 0,\n\t        length = string.length,\n\t        value,\n\t        extra;\n\t    while (counter < length) {\n\t        value = string.charCodeAt(counter++);\n\t        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t            // high surrogate, and there is a next character\n\t            extra = string.charCodeAt(counter++);\n\t            if ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t            } else {\n\t                // unmatched surrogate; only append this code unit, in case the next\n\t                // code unit is the high surrogate of a surrogate pair\n\t                output.push(value);\n\t                counter--;\n\t            }\n\t        } else {\n\t            output.push(value);\n\t        }\n\t    }\n\t    return output;\n\t}\n\n\tfunction ucs2encode(array) {\n\t    return array.map(function(value){\n\t        var output = "";\n\t        if (value > 0xFFFF) {\n\t            value -= 0x10000;\n\t            output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t            value = 0xDC00 | value & 0x3FF;\n\t        }\n\t        output += String.fromCharCode(value);\n\t        return output;\n\t    }).join("");\n\t}\n\n\tfunction atobUint8Array(base64) {\n\t    var data = window.atob(base64);\n\t    var result = new Uint8Array(data.length);\n\n\t    for (var idx = 0; idx < data.length; idx++) {\n\t        result[idx] = data.charCodeAt(idx);\n\t    }\n\n\t    return result;\n\t}\n\n\tfunction createUint8Array(data) {\n\t    var result = new Uint8Array(data.length);\n\n\t    for (var idx = 0; idx < data.length; idx++) {\n\t        result[idx] = data[idx];\n\t    }\n\n\t    return result;\n\t}\n\n\tfunction base64ToUint8Array(base64) {\n\t    if (window.atob) {\n\t        return atobUint8Array(base64);\n\t    }\n\n\t    return createUint8Array(BASE64.decode(base64));\n\t}\n\n\t/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */\n\t/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */\n\t/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */\n\t/* eslint-disable no-param-reassign, no-var, block-scoped-var */\n\n\t/*****************************************************************************\\\n\t *\n\t * The code in this file, although written from scratch, is influenced by the\n\t * TrueType parser/encoder in PDFKit -- http://pdfkit.org/ (a CoffeeScript\n\t * library for producing PDF files).\n\t *\n\t * PDFKit is (c) Devon Govett 2014 and released under the MIT License.\n\t *\n\t\\*****************************************************************************/\n\n\tfunction hasOwnProperty$1(obj, key) {\n\t    return Object.prototype.hasOwnProperty.call(obj, key);\n\t}\n\n\tfunction sortedKeys(obj) {\n\t    return Object.keys(obj).sort(function(a, b){ return a - b; }).map(parseFloat);\n\t}\n\n\t///\n\n\tfunction Directory(data) {\n\t    this.raw = data;\n\t    this.scalerType = data.readLong();\n\t    this.tableCount = data.readShort();\n\t    this.searchRange = data.readShort();\n\t    this.entrySelector = data.readShort();\n\t    this.rangeShift = data.readShort();\n\n\t    var tables = this.tables = {};\n\t    for (var i = 0; i < this.tableCount; ++i) {\n\t        var entry = {\n\t            tag      : data.readString(4),\n\t            checksum : data.readLong(),\n\t            offset   : data.readLong(),\n\t            length   : data.readLong()\n\t        };\n\t        tables[entry.tag] = entry;\n\t    }\n\t}\n\n\tDirectory.prototype = {\n\n\t    readTable: function(name, Ctor) {\n\t        var def = this.tables[name];\n\t        if (!def) {\n\t            throw new Error("Table " + name + " not found in directory");\n\t        }\n\t        return (this[name] = def.table = new Ctor(this, def));\n\t    },\n\n\t    render: function(tables) {\n\t        var this$1 = this;\n\n\t        var tableCount = Object.keys(tables).length;\n\n\t        var maxpow2 = Math.pow(2, Math.floor(Math.log(tableCount) / Math.LN2));\n\t        var searchRange = maxpow2 * 16;\n\t        var entrySelector = Math.floor(Math.log(maxpow2) / Math.LN2);\n\t        var rangeShift = tableCount * 16 - searchRange;\n\n\t        var out = BinaryStream();\n\t        out.writeLong(this.scalerType);\n\t        out.writeShort(tableCount);\n\t        out.writeShort(searchRange);\n\t        out.writeShort(entrySelector);\n\t        out.writeShort(rangeShift);\n\n\t        var directoryLength = tableCount * 16;\n\t        var offset = out.offset() + directoryLength;\n\t        var headOffset = null;\n\t        var tableData = BinaryStream();\n\n\t        for (var tag in tables) {\n\t            if (hasOwnProperty$1(tables, tag)) {\n\t                var table = tables[tag];\n\n\t                out.writeString(tag);\n\t                out.writeLong(this$1.checksum(table));\n\t                out.writeLong(offset);\n\t                out.writeLong(table.length);\n\n\t                tableData.write(table);\n\t                if (tag == "head") {\n\t                    headOffset = offset;\n\t                }\n\t                offset += table.length;\n\n\t                while (offset % 4) {\n\t                    tableData.writeByte(0);\n\t                    offset++;\n\t                }\n\t            }\n\t        }\n\n\t        out.write(tableData.get());\n\t        var sum = this.checksum(out.get());\n\t        var adjustment = 0xB1B0AFBA - sum;\n\n\t        out.offset(headOffset + 8);\n\t        out.writeLong(adjustment);\n\t        return out.get();\n\t    },\n\n\t    checksum: function(data) {\n\t        data = BinaryStream(data);\n\t        var sum = 0;\n\t        while (!data.eof()) {\n\t            sum += data.readLong();\n\t        }\n\t        return sum & 0xFFFFFFFF;\n\t    }\n\t};\n\n\tfunction deftable(methods) {\n\t    function Ctor(file, def) {\n\t        this.definition = def;\n\t        this.length = def.length;\n\t        this.offset = def.offset;\n\t        this.file = file;\n\t        this.rawData = file.raw;\n\t        this.parse(file.raw);\n\t    }\n\t    Ctor.prototype.raw = function() {\n\t        return this.rawData.slice(this.offset, this.length);\n\t    };\n\t    for (var i in methods) {\n\t        if (hasOwnProperty$1(methods, i)) {\n\t            Ctor[i] = Ctor.prototype[i] = methods[i];\n\t        }\n\t    }\n\t    return Ctor;\n\t}\n\n\tvar HeadTable = deftable({\n\t    parse: function(data) {\n\t        data.offset(this.offset);\n\t        this.version             = data.readLong();\n\t        this.revision            = data.readLong();\n\t        this.checkSumAdjustment  = data.readLong();\n\t        this.magicNumber         = data.readLong();\n\t        this.flags               = data.readShort();\n\t        this.unitsPerEm          = data.readShort();\n\t        this.created             = data.read(8);\n\t        this.modified            = data.read(8);\n\n\t        this.xMin = data.readShort_();\n\t        this.yMin = data.readShort_();\n\t        this.xMax = data.readShort_();\n\t        this.yMax = data.readShort_();\n\n\t        this.macStyle           = data.readShort();\n\t        this.lowestRecPPEM      = data.readShort();\n\t        this.fontDirectionHint  = data.readShort_();\n\t        this.indexToLocFormat   = data.readShort_();\n\t        this.glyphDataFormat    = data.readShort_();\n\t    },\n\t    render: function(indexToLocFormat) {\n\t        var out = BinaryStream();\n\t        out.writeLong(this.version);\n\t        out.writeLong(this.revision);\n\t        out.writeLong(0);       // checksum adjustment; shall be computed later\n\t        out.writeLong(this.magicNumber);\n\t        out.writeShort(this.flags);\n\t        out.writeShort(this.unitsPerEm);\n\t        out.write(this.created);\n\t        out.write(this.modified);\n\t        out.writeShort_(this.xMin);\n\t        out.writeShort_(this.yMin);\n\t        out.writeShort_(this.xMax);\n\t        out.writeShort_(this.yMax);\n\t        out.writeShort(this.macStyle);\n\t        out.writeShort(this.lowestRecPPEM);\n\t        out.writeShort_(this.fontDirectionHint);\n\t        out.writeShort_(indexToLocFormat); // this will depend on the `loca` table\n\t        out.writeShort_(this.glyphDataFormat);\n\t        return out.get();\n\t    }\n\t});\n\n\tvar LocaTable = deftable({\n\t    parse: function(data) {\n\t        data.offset(this.offset);\n\t        var format = this.file.head.indexToLocFormat;\n\t        if (format === 0) {\n\t            this.offsets = data.times(this.length / 2, function(){\n\t                return 2 * data.readShort();\n\t            });\n\t        } else {\n\t            this.offsets = data.times(this.length / 4, data.readLong);\n\t        }\n\t    },\n\t    offsetOf: function(id) {\n\t        return this.offsets[id];\n\t    },\n\t    lengthOf: function(id) {\n\t        return this.offsets[id + 1] - this.offsets[id];\n\t    },\n\t    render: function(offsets) {\n\t        var out = BinaryStream();\n\t        var needsLongFormat = offsets[offsets.length - 1] > 0xFFFF;\n\t        for (var i = 0; i < offsets.length; ++i) {\n\t            if (needsLongFormat) {\n\t                out.writeLong(offsets[i]);\n\t            } else {\n\t                out.writeShort(offsets[i] / 2);\n\t            }\n\t        }\n\t        return {\n\t            format: needsLongFormat ? 1 : 0,\n\t            table: out.get()\n\t        };\n\t    }\n\t});\n\n\tvar HheaTable = deftable({\n\t    parse: function(data) {\n\t        data.offset(this.offset);\n\n\t        this.version              = data.readLong();\n\t        this.ascent               = data.readShort_();\n\t        this.descent              = data.readShort_();\n\t        this.lineGap              = data.readShort_();\n\t        this.advanceWidthMax      = data.readShort();\n\t        this.minLeftSideBearing   = data.readShort_();\n\t        this.minRightSideBearing  = data.readShort_();\n\t        this.xMaxExtent           = data.readShort_();\n\t        this.caretSlopeRise       = data.readShort_();\n\t        this.caretSlopeRun        = data.readShort_();\n\t        this.caretOffset          = data.readShort_();\n\n\t        data.skip(4 * 2);       // reserved\n\n\t        this.metricDataFormat     = data.readShort_();\n\t        this.numOfLongHorMetrics  = data.readShort();\n\t    },\n\t    render: function(ids) {\n\t        var out = BinaryStream();\n\t        out.writeLong(this.version);\n\t        out.writeShort_(this.ascent);\n\t        out.writeShort_(this.descent);\n\t        out.writeShort_(this.lineGap);\n\t        out.writeShort(this.advanceWidthMax);\n\t        out.writeShort_(this.minLeftSideBearing);\n\t        out.writeShort_(this.minRightSideBearing);\n\t        out.writeShort_(this.xMaxExtent);\n\t        out.writeShort_(this.caretSlopeRise);\n\t        out.writeShort_(this.caretSlopeRun);\n\t        out.writeShort_(this.caretOffset);\n\n\t        out.write([ 0, 0, 0, 0, 0, 0, 0, 0 ]); // reserved bytes\n\n\t        out.writeShort_(this.metricDataFormat);\n\t        out.writeShort(ids.length);\n\t        return out.get();\n\t    }\n\t});\n\n\tvar MaxpTable = deftable({\n\t    parse: function(data) {\n\t        data.offset(this.offset);\n\t        this.version = data.readLong();\n\t        this.numGlyphs = data.readShort();\n\t        this.maxPoints = data.readShort();\n\t        this.maxContours = data.readShort();\n\t        this.maxComponentPoints = data.readShort();\n\t        this.maxComponentContours = data.readShort();\n\t        this.maxZones = data.readShort();\n\t        this.maxTwilightPoints = data.readShort();\n\t        this.maxStorage = data.readShort();\n\t        this.maxFunctionDefs = data.readShort();\n\t        this.maxInstructionDefs = data.readShort();\n\t        this.maxStackElements = data.readShort();\n\t        this.maxSizeOfInstructions = data.readShort();\n\t        this.maxComponentElements = data.readShort();\n\t        this.maxComponentDepth = data.readShort();\n\t    },\n\t    render: function(glyphIds) {\n\t        var out = BinaryStream();\n\t        out.writeLong(this.version);\n\t        out.writeShort(glyphIds.length);\n\t        out.writeShort(this.maxPoints);\n\t        out.writeShort(this.maxContours);\n\t        out.writeShort(this.maxComponentPoints);\n\t        out.writeShort(this.maxComponentContours);\n\t        out.writeShort(this.maxZones);\n\t        out.writeShort(this.maxTwilightPoints);\n\t        out.writeShort(this.maxStorage);\n\t        out.writeShort(this.maxFunctionDefs);\n\t        out.writeShort(this.maxInstructionDefs);\n\t        out.writeShort(this.maxStackElements);\n\t        out.writeShort(this.maxSizeOfInstructions);\n\t        out.writeShort(this.maxComponentElements);\n\t        out.writeShort(this.maxComponentDepth);\n\t        return out.get();\n\t    }\n\t});\n\n\tvar HmtxTable = deftable({\n\t    parse: function(data) {\n\t        data.offset(this.offset);\n\t        var dir = this.file, hhea = dir.hhea;\n\t        this.metrics = data.times(hhea.numOfLongHorMetrics, function(){\n\t            return {\n\t                advance: data.readShort(),\n\t                lsb: data.readShort_()\n\t            };\n\t        });\n\t        var lsbCount = dir.maxp.numGlyphs - dir.hhea.numOfLongHorMetrics;\n\t        this.leftSideBearings = data.times(lsbCount, data.readShort_);\n\t    },\n\t    forGlyph: function(id) {\n\t        var metrics = this.metrics;\n\t        var n = metrics.length;\n\t        if (id < n) {\n\t            return metrics[id];\n\t        }\n\t        return {\n\t            advance: metrics[n - 1].advance,\n\t            lsb: this.leftSideBearings[id - n]\n\t        };\n\t    },\n\t    render: function(glyphIds) {\n\t        var this$1 = this;\n\n\t        var out = BinaryStream();\n\t        for (var i = 0; i < glyphIds.length; ++i) {\n\t            var m = this$1.forGlyph(glyphIds[i]);\n\t            out.writeShort(m.advance);\n\t            out.writeShort_(m.lsb);\n\t        }\n\t        return out.get();\n\t    }\n\t});\n\n\tvar GlyfTable = (function(){\n\n\t    function SimpleGlyph(raw) {\n\t        this.raw = raw;\n\t    }\n\t    SimpleGlyph.prototype = {\n\t        compound: false,\n\t        render: function() {\n\t            return this.raw.get();\n\t        }\n\t    };\n\n\t    var ARG_1_AND_2_ARE_WORDS     = 0x0001;\n\t    var WE_HAVE_A_SCALE           = 0x0008;\n\t    var MORE_COMPONENTS           = 0x0020;\n\t    var WE_HAVE_AN_X_AND_Y_SCALE  = 0x0040;\n\t    var WE_HAVE_A_TWO_BY_TWO      = 0x0080;\n\t    //var WE_HAVE_INSTRUCTIONS      = 0x0100;\n\n\t    function CompoundGlyph(data) {\n\t        this.raw = data;\n\t        var ids = this.glyphIds = [];\n\t        var offsets = this.idOffsets = [];\n\t        while (true) {          // eslint-disable-line no-constant-condition\n\t            var flags = data.readShort();\n\t            offsets.push(data.offset());\n\t            ids.push(data.readShort());\n\n\t            if (!(flags & MORE_COMPONENTS)) {\n\t                break;\n\t            }\n\n\t            data.skip(flags & ARG_1_AND_2_ARE_WORDS ? 4 : 2);\n\n\t            if (flags & WE_HAVE_A_TWO_BY_TWO) {\n\t                data.skip(8);\n\t            } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n\t                data.skip(4);\n\t            } else if (flags & WE_HAVE_A_SCALE) {\n\t                data.skip(2);\n\t            }\n\t        }\n\t    }\n\n\t    CompoundGlyph.prototype = {\n\t        compound: true,\n\t        render: function(old2new) {\n\t            var this$1 = this;\n\n\t            var out = BinaryStream(this.raw.get());\n\t            for (var i = 0; i < this.glyphIds.length; ++i) {\n\t                var id = this$1.glyphIds[i];\n\t                out.offset(this$1.idOffsets[i]);\n\t                out.writeShort(old2new[id]);\n\t            }\n\t            return out.get();\n\t        }\n\t    };\n\n\t    return deftable({\n\t        parse: function() {\n\t            this.cache = {};\n\t        },\n\t        glyphFor: function(id) {\n\t            var cache = this.cache;\n\t            if (hasOwnProperty$1(cache, id)) {\n\t                return cache[id];\n\t            }\n\n\t            var loca = this.file.loca;\n\t            var length = loca.lengthOf(id);\n\n\t            if (length === 0) {\n\t                return (cache[id] = null);\n\t            }\n\n\t            var data = this.rawData;\n\t            var offset = this.offset + loca.offsetOf(id);\n\t            var raw = BinaryStream(data.slice(offset, length));\n\n\t            var numberOfContours = raw.readShort_();\n\t            var xMin = raw.readShort_();\n\t            var yMin = raw.readShort_();\n\t            var xMax = raw.readShort_();\n\t            var yMax = raw.readShort_();\n\n\t            var glyph = cache[id] = numberOfContours == -1 ? new CompoundGlyph(raw) : new SimpleGlyph(raw);\n\n\t            glyph.numberOfContours = numberOfContours;\n\t            glyph.xMin = xMin;\n\t            glyph.yMin = yMin;\n\t            glyph.xMax = xMax;\n\t            glyph.yMax = yMax;\n\n\t            return glyph;\n\t        },\n\t        render: function(glyphs, oldIds, old2new) {\n\t            var out = BinaryStream(), offsets = [];\n\t            for (var i = 0; i < oldIds.length; ++i) {\n\t                var id = oldIds[i];\n\t                var glyph = glyphs[id];\n\t                offsets.push(out.offset());\n\t                if (glyph) {\n\t                    out.write(glyph.render(old2new));\n\t                }\n\t            }\n\t            offsets.push(out.offset());\n\t            return {\n\t                table: out.get(),\n\t                offsets: offsets\n\t            };\n\t        }\n\t    });\n\n\t}());\n\n\tvar NameTable = (function(){\n\n\t    function NameEntry(text, entry) {\n\t        this.text = text;\n\t        this.length = text.length;\n\t        this.platformID = entry.platformID;\n\t        this.platformSpecificID = entry.platformSpecificID;\n\t        this.languageID = entry.languageID;\n\t        this.nameID = entry.nameID;\n\t    }\n\n\t    return deftable({\n\t        parse: function(data) {\n\t            data.offset(this.offset);\n\t            data.readShort();   // format\n\t            var count = data.readShort();\n\t            var stringOffset = this.offset + data.readShort();\n\t            var nameRecords = data.times(count, function(){\n\t                return {\n\t                    platformID         : data.readShort(),\n\t                    platformSpecificID : data.readShort(),\n\t                    languageID         : data.readShort(),\n\t                    nameID             : data.readShort(),\n\t                    length             : data.readShort(),\n\t                    offset             : data.readShort() + stringOffset\n\t                };\n\t            });\n\t            var strings = this.strings = {};\n\t            for (var i = 0; i < nameRecords.length; ++i) {\n\t                var rec = nameRecords[i];\n\t                data.offset(rec.offset);\n\t                var text = data.readString(rec.length);\n\t                if (!strings[rec.nameID]) {\n\t                    strings[rec.nameID] = [];\n\t                }\n\t                strings[rec.nameID].push(new NameEntry(text, rec));\n\t            }\n\t            this.postscriptEntry = strings[6][0];\n\t            this.postscriptName = this.postscriptEntry.text.replace(/[^\\x20-\\x7F]/g, "");\n\t        },\n\n\t        render: function(psName) {\n\t            var this$1 = this;\n\n\t            var strings = this.strings;\n\t            var strCount = 0;\n\t            for (var i in strings) {\n\t                if (hasOwnProperty$1(strings, i)) {\n\t                    strCount += strings[i].length;\n\t                }\n\t            }\n\t            var out = BinaryStream();\n\t            var strTable = BinaryStream();\n\n\t            out.writeShort(0);  // format\n\t            out.writeShort(strCount);\n\t            out.writeShort(6 + 12 * strCount); // stringOffset\n\n\t            for (i in strings) {\n\t                if (hasOwnProperty$1(strings, i)) {\n\t                    var list = i == 6 ? [\n\t                        new NameEntry(psName, this$1.postscriptEntry)\n\t                    ] : strings[i];\n\t                    for (var j = 0; j < list.length; ++j) {\n\t                        var str = list[j];\n\t                        out.writeShort(str.platformID);\n\t                        out.writeShort(str.platformSpecificID);\n\t                        out.writeShort(str.languageID);\n\t                        out.writeShort(str.nameID);\n\t                        out.writeShort(str.length);\n\t                        out.writeShort(strTable.offset());\n\n\t                        strTable.writeString(str.text);\n\t                    }\n\t                }\n\t            }\n\n\t            out.write(strTable.get());\n\n\t            return out.get();\n\t        }\n\t    });\n\n\t})();\n\n\tvar PostTable = (function(){\n\n\t    var POSTSCRIPT_GLYPHS = ".notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat".split(/\\s+/g);\n\n\t    return deftable({\n\t        parse: function(data) {\n\t            var this$1 = this;\n\n\t            data.offset(this.offset);\n\n\t            this.format = data.readLong();\n\t            this.italicAngle = data.readFixed_();\n\t            this.underlinePosition = data.readShort_();\n\t            this.underlineThickness = data.readShort_();\n\t            this.isFixedPitch = data.readLong();\n\t            this.minMemType42 = data.readLong();\n\t            this.maxMemType42 = data.readLong();\n\t            this.minMemType1 = data.readLong();\n\t            this.maxMemType1 = data.readLong();\n\n\t            var numberOfGlyphs;\n\n\t            switch (this.format) {\n\t              case 0x00010000:\n\t              case 0x00030000:\n\t                break;\n\n\t              case 0x00020000:\n\t                numberOfGlyphs = data.readShort();\n\t                this.glyphNameIndex = data.times(numberOfGlyphs, data.readShort);\n\t                this.names = [];\n\t                var limit = this.offset + this.length;\n\t                while (data.offset() < limit) {\n\t                    this$1.names.push(data.readString(data.readByte()));\n\t                }\n\t                break;\n\n\t              case 0x00025000:\n\t                numberOfGlyphs = data.readShort();\n\t                this.offsets = data.read(numberOfGlyphs);\n\t                break;\n\n\t              case 0x00040000:\n\t                this.map = data.times(this.file.maxp.numGlyphs, data.readShort);\n\t                break;\n\t            }\n\t        },\n\t        glyphFor: function(code) {\n\t            switch (this.format) {\n\t              case 0x00010000:\n\t                return POSTSCRIPT_GLYPHS[code] || ".notdef";\n\n\t              case 0x00020000:\n\t                var index = this.glyphNameIndex[code];\n\t                if (index < POSTSCRIPT_GLYPHS.length) {\n\t                    return POSTSCRIPT_GLYPHS[index];\n\t                }\n\t                return this.names[index - POSTSCRIPT_GLYPHS.length] || ".notdef";\n\n\t              case 0x00025000:\n\n\t              case 0x00030000:\n\t                return ".notdef";\n\n\t              case 0x00040000:\n\t                return this.map[code] || 0xFFFF;\n\t            }\n\t        },\n\t        render: function(mapping) {\n\t            var this$1 = this;\n\n\t            if (this.format == 0x00030000) {\n\t                return this.raw();\n\t            }\n\n\t            // keep original header, but set format to 2.0\n\t            var out = BinaryStream(this.rawData.slice(this.offset, 32));\n\t            out.writeLong(0x00020000);\n\t            out.offset(32);\n\n\t            var indexes = [];\n\t            var strings = [];\n\n\t            for (var i = 0; i < mapping.length; ++i) {\n\t                var id = mapping[i];\n\t                var post = this$1.glyphFor(id);\n\t                var index = POSTSCRIPT_GLYPHS.indexOf(post);\n\t                if (index >= 0) {\n\t                    indexes.push(index);\n\t                } else {\n\t                    indexes.push(POSTSCRIPT_GLYPHS.length + strings.length);\n\t                    strings.push(post);\n\t                }\n\t            }\n\n\t            out.writeShort(mapping.length);\n\n\t            for (i = 0; i < indexes.length; ++i) {\n\t                out.writeShort(indexes[i]);\n\t            }\n\n\t            for (i = 0; i < strings.length; ++i) {\n\t                out.writeByte(strings[i].length);\n\t                out.writeString(strings[i]);\n\t            }\n\n\t            return out.get();\n\t        }\n\t    });\n\t})();\n\n\tvar CmapTable = (function(){\n\n\t    function CmapEntry(data, offset, codeMap) {\n\t        var self = this;\n\t        self.platformID = data.readShort();\n\t        self.platformSpecificID = data.readShort();\n\t        self.offset = offset + data.readLong();\n\n\t        data.saveExcursion(function(){\n\t            var code;\n\t            data.offset(self.offset);\n\t            self.format = data.readShort();\n\n\t            switch (self.format) {\n\t              case 0:\n\t                self.length = data.readShort();\n\t                self.language = data.readShort();\n\t                for (var i = 0; i < 256; ++i) {\n\t                    codeMap[i] = data.readByte();\n\t                }\n\t                break;\n\n\t              case 4:\n\t                self.length = data.readShort();\n\t                self.language = data.readShort();\n\t                var segCount = data.readShort() / 2;\n\n\t                data.skip(6);       // searchRange, entrySelector, rangeShift\n\t                var endCode = data.times(segCount, data.readShort);\n\t                data.skip(2);       // reserved pad\n\t                var startCode = data.times(segCount, data.readShort);\n\t                var idDelta = data.times(segCount, data.readShort_);\n\t                var idRangeOffset = data.times(segCount, data.readShort);\n\n\t                var count = (self.length + self.offset - data.offset()) / 2;\n\t                var glyphIds = data.times(count, data.readShort);\n\n\t                for (i = 0; i < segCount; ++i) {\n\t                    var start = startCode[i], end = endCode[i];\n\t                    for (code = start; code <= end; ++code) {\n\t                        var glyphId;\n\t                        if (idRangeOffset[i] === 0) {\n\t                            glyphId = code + idDelta[i];\n\t                        } else {\n\t                            ///\n\t                            // When non-zero, idRangeOffset contains for each segment the byte offset of the Glyph ID\n\t                            // into the glyphIds table, from the *current* `i` cell of idRangeOffset.  In other words,\n\t                            // this offset spans from the first into the second array.  This works, because the arrays\n\t                            // are consecutive in the TTF file:\n\t                            //\n\t                            //     [ ...idRangeOffset... ][ ...glyphIds... ]\n\t                            //       ...... 48 ......       .... ID ....\n\t                            //              ^----- 48 bytes -----^\n\t                            //\n\t                            // (but I can\'t stop wondering why is it not just a plain index, possibly incremented by 1\n\t                            // so that we can have that special `zero` value.)\n\t                            //\n\t                            // The elements of idRangeOffset are even numbers, because both arrays contain 16-bit words,\n\t                            // yet the offset is in bytes.  That is why we divide it by 2.  Then we subtract the\n\t                            // remaining segments (segCount-i), and add the code-start offset, to which we need to add\n\t                            // the corresponding delta to get the actual glyph ID.\n\t                            ///\n\t                            var index = idRangeOffset[i] / 2 - (segCount - i) + (code - start);\n\t                            glyphId = glyphIds[index] || 0;\n\t                            if (glyphId !== 0) {\n\t                                glyphId += idDelta[i];\n\t                            }\n\t                        }\n\t                        codeMap[code] = glyphId & 0xFFFF;\n\t                    }\n\t                }\n\t                break;\n\n\t              case 6:\n\t                self.length = data.readShort();\n\t                self.language = data.readShort();\n\t                code = data.readShort();\n\t                var length = data.readShort();\n\t                while (length-- > 0) {\n\t                    codeMap[code++] = data.readShort();\n\t                }\n\t                break;\n\n\t              case 12:\n\t                data.readShort(); // reserved\n\t                self.length = data.readLong();\n\t                self.language = data.readLong();\n\t                var ngroups = data.readLong();\n\t                while (ngroups-- > 0) {\n\t                    code = data.readLong();\n\t                    var endCharCode = data.readLong();\n\t                    var glyphCode = data.readLong();\n\t                    while (code <= endCharCode) {\n\t                        codeMap[code++] = glyphCode++;\n\t                    }\n\t                }\n\t                break;\n\n\t              default:\n\t                if (window.console) {\n\t                    window.console.error("Unhandled CMAP format: " + self.format);\n\t                }\n\t            }\n\t        });\n\t    }\n\n\t    function renderCharmap(ncid2ogid, ogid2ngid) {\n\t        var codes = sortedKeys(ncid2ogid);\n\t        var startCodes = [];\n\t        var endCodes = [];\n\t        var last = null;\n\t        var diff = null;\n\n\t        function new_gid(charcode) {\n\t            return ogid2ngid[ncid2ogid[charcode]];\n\t        }\n\n\t        for (var i = 0; i < codes.length; ++i) {\n\t            var code = codes[i];\n\t            var gid = new_gid(code);\n\t            var delta = gid - code;\n\t            if (last == null || delta !== diff) {\n\t                if (last) {\n\t                    endCodes.push(last);\n\t                }\n\t                startCodes.push(code);\n\t                diff = delta;\n\t            }\n\t            last = code;\n\t        }\n\n\t        if (last) {\n\t            endCodes.push(last);\n\t        }\n\t        endCodes.push(0xFFFF);\n\t        startCodes.push(0xFFFF);\n\n\t        var segCount = startCodes.length;\n\t        var segCountX2 = segCount * 2;\n\t        var searchRange = 2 * Math.pow(2, Math.floor(Math.log(segCount) / Math.LN2));\n\t        var entrySelector = Math.log(searchRange / 2) / Math.LN2;\n\t        var rangeShift = segCountX2 - searchRange;\n\n\t        var deltas = [];\n\t        var rangeOffsets = [];\n\t        var glyphIds = [];\n\n\t        for (i = 0; i < segCount; ++i) {\n\t            var startCode = startCodes[i];\n\t            var endCode = endCodes[i];\n\t            if (startCode == 0xFFFF) {\n\t                deltas.push(0);\n\t                rangeOffsets.push(0);\n\t                break;\n\t            }\n\t            var startGlyph = new_gid(startCode);\n\t            if (startCode - startGlyph >= 0x8000) {\n\t                deltas.push(0);\n\t                rangeOffsets.push(2 * (glyphIds.length + segCount - i));\n\t                for (var j = startCode; j <= endCode; ++j) {\n\t                    glyphIds.push(new_gid(j));\n\t                }\n\t            } else {\n\t                deltas.push(startGlyph - startCode);\n\t                rangeOffsets.push(0);\n\t            }\n\t        }\n\n\t        var out = BinaryStream();\n\n\t        out.writeShort(3);      // platformID\n\t        out.writeShort(1);      // platformSpecificID\n\t        out.writeLong(12);      // offset\n\t        out.writeShort(4);      // format\n\t        out.writeShort(16 + segCount * 8 + glyphIds.length * 2); // length\n\t        out.writeShort(0);      // language\n\t        out.writeShort(segCountX2);\n\t        out.writeShort(searchRange);\n\t        out.writeShort(entrySelector);\n\t        out.writeShort(rangeShift);\n\n\t        endCodes.forEach(out.writeShort);\n\t        out.writeShort(0);      // reserved pad\n\t        startCodes.forEach(out.writeShort);\n\t        deltas.forEach(out.writeShort_);\n\t        rangeOffsets.forEach(out.writeShort);\n\t        glyphIds.forEach(out.writeShort);\n\n\t        return out.get();\n\t    }\n\n\t    return deftable({\n\t        parse: function(data) {\n\t            var self = this;\n\t            var offset = self.offset;\n\t            data.offset(offset);\n\t            self.codeMap = {};\n\t            self.version = data.readShort();\n\t            var tableCount = data.readShort();\n\t            self.tables = data.times(tableCount, function(){\n\t                return new CmapEntry(data, offset, self.codeMap);\n\t            });\n\t        },\n\t        render: function(ncid2ogid, ogid2ngid) {\n\t            var out = BinaryStream();\n\t            out.writeShort(0);  // version\n\t            out.writeShort(1);  // tableCount\n\t            out.write(renderCharmap(ncid2ogid, ogid2ngid));\n\t            return out.get();\n\t        }\n\t    });\n\n\t})();\n\n\tvar OS2Table = deftable({\n\t    parse: function(data) {\n\t        data.offset(this.offset);\n\t        this.version = data.readShort();\n\t        this.averageCharWidth = data.readShort_();\n\t        this.weightClass = data.readShort();\n\t        this.widthClass = data.readShort();\n\t        this.type = data.readShort();\n\t        this.ySubscriptXSize = data.readShort_();\n\t        this.ySubscriptYSize = data.readShort_();\n\t        this.ySubscriptXOffset = data.readShort_();\n\t        this.ySubscriptYOffset = data.readShort_();\n\t        this.ySuperscriptXSize = data.readShort_();\n\t        this.ySuperscriptYSize = data.readShort_();\n\t        this.ySuperscriptXOffset = data.readShort_();\n\t        this.ySuperscriptYOffset = data.readShort_();\n\t        this.yStrikeoutSize = data.readShort_();\n\t        this.yStrikeoutPosition = data.readShort_();\n\t        this.familyClass = data.readShort_();\n\n\t        this.panose = data.times(10, data.readByte);\n\t        this.charRange = data.times(4, data.readLong);\n\n\t        this.vendorID = data.readString(4);\n\t        this.selection = data.readShort();\n\t        this.firstCharIndex = data.readShort();\n\t        this.lastCharIndex = data.readShort();\n\n\t        if (this.version > 0) {\n\t            this.ascent = data.readShort_();\n\t            this.descent = data.readShort_();\n\t            this.lineGap = data.readShort_();\n\t            this.winAscent = data.readShort();\n\t            this.winDescent = data.readShort();\n\t            this.codePageRange = data.times(2, data.readLong);\n\n\t            if (this.version > 1) {\n\t                this.xHeight = data.readShort();\n\t                this.capHeight = data.readShort();\n\t                this.defaultChar = data.readShort();\n\t                this.breakChar = data.readShort();\n\t                this.maxContext = data.readShort();\n\t            }\n\t        }\n\t    },\n\t    render: function() {\n\t        return this.raw();\n\t    }\n\t});\n\n\tvar subsetTag = 100000;\n\n\tfunction nextSubsetTag() {\n\t    var ret = "", n = String(subsetTag);\n\t    for (var i = 0; i < n.length; ++i) {\n\t        ret += String.fromCharCode(n.charCodeAt(i) - 48 + 65);\n\t    }\n\t    ++subsetTag;\n\t    return ret;\n\t}\n\n\tfunction Subfont(font) {\n\t    this.font = font;\n\t    this.subset = {};\n\t    this.unicodes = {};\n\t    this.ogid2ngid = { 0: 0 };\n\t    this.ngid2ogid = { 0: 0 };\n\t    this.ncid2ogid = {};\n\t    this.next = this.firstChar = 1;\n\t    this.nextGid = 1;\n\t    this.psName = nextSubsetTag() + "+" + this.font.psName;\n\t}\n\n\tSubfont.prototype = {\n\t    use: function(ch) {\n\t        var self = this;\n\t        if (typeof ch == "string") {\n\t            return ucs2decode(ch).reduce(function(ret, code){\n\t                return ret + String.fromCharCode(self.use(code));\n\t            }, "");\n\t        }\n\t        var code = self.unicodes[ch];\n\t        if (!code) {\n\t            code = self.next++;\n\t            self.subset[code] = ch;\n\t            self.unicodes[ch] = code;\n\n\t            // generate new GID (glyph ID) and maintain newGID ->\n\t            // oldGID and back mappings\n\t            var old_gid = self.font.cmap.codeMap[ch];\n\t            if (old_gid) {\n\t                self.ncid2ogid[code] = old_gid;\n\t                if (self.ogid2ngid[old_gid] == null) {\n\t                    var new_gid = self.nextGid++;\n\t                    self.ogid2ngid[old_gid] = new_gid;\n\t                    self.ngid2ogid[new_gid] = old_gid;\n\t                }\n\t            }\n\t        }\n\t        return code;\n\t    },\n\t    encodeText: function(text) {\n\t        return this.use(text);\n\t    },\n\t    glyphIds: function() {\n\t        return sortedKeys(this.ogid2ngid);\n\t    },\n\t    glyphsFor: function(glyphIds, result) {\n\t        var this$1 = this;\n\n\t        if (!result) {\n\t            result = {};\n\t        }\n\t        for (var i = 0; i < glyphIds.length; ++i) {\n\t            var id = glyphIds[i];\n\t            if (!result[id]) {\n\t                var glyph = result[id] = this$1.font.glyf.glyphFor(id);\n\t                if (glyph && glyph.compound) {\n\t                    this$1.glyphsFor(glyph.glyphIds, result);\n\t                }\n\t            }\n\t        }\n\t        return result;\n\t    },\n\t    render: function() {\n\t        var this$1 = this;\n\n\t        var glyphs = this.glyphsFor(this.glyphIds());\n\n\t        // add missing sub-glyphs\n\t        for (var old_gid in glyphs) {\n\t            if (hasOwnProperty$1(glyphs, old_gid)) {\n\t                old_gid = parseInt(old_gid, 10);\n\t                if (this$1.ogid2ngid[old_gid] == null) {\n\t                    var new_gid = this$1.nextGid++;\n\t                    this$1.ogid2ngid[old_gid] = new_gid;\n\t                    this$1.ngid2ogid[new_gid] = old_gid;\n\t                }\n\t            }\n\t        }\n\n\t        // must obtain old_gid_ids in an order matching sorted\n\t        // new_gid_ids\n\t        var new_gid_ids = sortedKeys(this.ngid2ogid);\n\t        var old_gid_ids = new_gid_ids.map(function(id){\n\t            return this.ngid2ogid[id];\n\t        }, this);\n\n\t        var font = this.font;\n\t        var glyf = font.glyf.render(glyphs, old_gid_ids, this.ogid2ngid);\n\t        var loca = font.loca.render(glyf.offsets);\n\n\t        this.lastChar = this.next - 1;\n\n\t        var tables = {\n\t            "cmap" : CmapTable.render(this.ncid2ogid, this.ogid2ngid),\n\t            "glyf" : glyf.table,\n\t            "loca" : loca.table,\n\t            "hmtx" : font.hmtx.render(old_gid_ids),\n\t            "hhea" : font.hhea.render(old_gid_ids),\n\t            "maxp" : font.maxp.render(old_gid_ids),\n\t            "post" : font.post.render(old_gid_ids),\n\t            "name" : font.name.render(this.psName),\n\t            "head" : font.head.render(loca.format),\n\t            "OS/2" : font.os2.render()\n\t        };\n\n\t        return this.font.directory.render(tables);\n\t    },\n\t    cidToGidMap: function() {\n\t        var this$1 = this;\n\n\t        var out = BinaryStream(), len = 0;\n\t        for (var cid = this.firstChar; cid < this.next; ++cid) {\n\t            while (len < cid) {\n\t                out.writeShort(0);\n\t                len++;\n\t            }\n\t            var old_gid = this$1.ncid2ogid[cid];\n\t            if (old_gid) {\n\t                var new_gid = this$1.ogid2ngid[old_gid];\n\t                out.writeShort(new_gid);\n\t            } else {\n\t                out.writeShort(0);\n\t            }\n\t            len++;\n\t        }\n\t        return out.get();\n\t    }\n\t};\n\n\tfunction TTFFont(rawData, name) {\n\t    var self = this;\n\t    var data = self.contents = BinaryStream(rawData);\n\t    if (data.readString(4) == "ttcf") {\n\t        var offset;\n\t        var parse = function() {\n\t            data.offset(offset);\n\t            self.parse();\n\t        };\n\t        if (!name) {\n\t            throw new Error("Must specify a name for TTC files");\n\t        }\n\t        data.readLong();        // version\n\t        var numFonts = data.readLong();\n\t        for (var i = 0; i < numFonts; ++i) {\n\t            offset = data.readLong();\n\t            data.saveExcursion(parse);\n\t            if (self.psName == name) {\n\t                return;\n\t            }\n\t        }\n\t        throw new Error("Font " + name + " not found in collection");\n\t    } else {\n\t        data.offset(0);\n\t        self.parse();\n\t    }\n\t}\n\n\tTTFFont.prototype = {\n\t    parse: function() {\n\t        var dir = this.directory = new Directory(this.contents);\n\n\t        this.head = dir.readTable("head", HeadTable);\n\t        this.loca = dir.readTable("loca", LocaTable);\n\t        this.hhea = dir.readTable("hhea", HheaTable);\n\t        this.maxp = dir.readTable("maxp", MaxpTable);\n\t        this.hmtx = dir.readTable("hmtx", HmtxTable);\n\t        this.glyf = dir.readTable("glyf", GlyfTable);\n\t        this.name = dir.readTable("name", NameTable);\n\t        this.post = dir.readTable("post", PostTable);\n\t        this.cmap = dir.readTable("cmap", CmapTable);\n\t        this.os2  = dir.readTable("OS/2", OS2Table);\n\n\t        this.psName = this.name.postscriptName;\n\t        this.ascent = this.os2.ascent || this.hhea.ascent;\n\t        this.descent = this.os2.descent || this.hhea.descent;\n\t        this.lineGap = this.os2.lineGap || this.hhea.lineGap;\n\t        this.scale = 1000 / this.head.unitsPerEm;\n\t    },\n\t    widthOfGlyph: function(glyph) {\n\t        return this.hmtx.forGlyph(glyph).advance * this.scale;\n\t    },\n\t    makeSubset: function() {\n\t        return new Subfont(this);\n\t    }\n\t};\n\n\tvar fromCharCode = String.fromCharCode;\n\n\tvar BOM = \'\\xfe\\xff\';\n\n\t// Encodes a string as UTF-8\n\n\tfunction encodeUnit(codeUnit) {\n\t    return fromCharCode(codeUnit >> 8) + fromCharCode(codeUnit & 0x00ff);\n\t}\n\n\t// Encodes a string as UTF-16 big-endian\n\tfunction encodeUTF16BE(input) {\n\t    var output = \'\';\n\n\t    for (var i = 0; i < input.length; i++) {\n\t        var c = input.charCodeAt(i);\n\n\t        if (c < 0xFFFF) {\n\t            output += encodeUnit(c);\n\t        } else {\n\t            var lead = ((c - 0x10000) >> 10) + 0xD800;\n\t            var trail = ((c - 0x10000) & 0x3FF) + 0xDC00;\n\t            output += encodeUnit(lead);\n\t            output += encodeUnit(trail);\n\t        }\n\t    }\n\n\t    return output;\n\t}\n\n\t/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */\n\t/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */\n\t/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */\n\t/* eslint-disable no-param-reassign, no-var, block-scoped-var */\n\n\tvar browser = kendo.support.browser;\n\tvar NL = "\\n";\n\n\tvar RESOURCE_COUNTER = 0;\n\n\tvar PAPER_SIZE = {\n\t    a0        : [ 2383.94 , 3370.39 ],\n\t    a1        : [ 1683.78 , 2383.94 ],\n\t    a2        : [ 1190.55 , 1683.78 ],\n\t    a3        : [ 841.89  , 1190.55 ],\n\t    a4        : [ 595.28  , 841.89  ],\n\t    a5        : [ 419.53  , 595.28  ],\n\t    a6        : [ 297.64  , 419.53  ],\n\t    a7        : [ 209.76  , 297.64  ],\n\t    a8        : [ 147.40  , 209.76  ],\n\t    a9        : [ 104.88  , 147.40  ],\n\t    a10       : [ 73.70   , 104.88  ],\n\t    b0        : [ 2834.65 , 4008.19 ],\n\t    b1        : [ 2004.09 , 2834.65 ],\n\t    b2        : [ 1417.32 , 2004.09 ],\n\t    b3        : [ 1000.63 , 1417.32 ],\n\t    b4        : [ 708.66  , 1000.63 ],\n\t    b5        : [ 498.90  , 708.66  ],\n\t    b6        : [ 354.33  , 498.90  ],\n\t    b7        : [ 249.45  , 354.33  ],\n\t    b8        : [ 175.75  , 249.45  ],\n\t    b9        : [ 124.72  , 175.75  ],\n\t    b10       : [ 87.87   , 124.72  ],\n\t    c0        : [ 2599.37 , 3676.54 ],\n\t    c1        : [ 1836.85 , 2599.37 ],\n\t    c2        : [ 1298.27 , 1836.85 ],\n\t    c3        : [ 918.43  , 1298.27 ],\n\t    c4        : [ 649.13  , 918.43  ],\n\t    c5        : [ 459.21  , 649.13  ],\n\t    c6        : [ 323.15  , 459.21  ],\n\t    c7        : [ 229.61  , 323.15  ],\n\t    c8        : [ 161.57  , 229.61  ],\n\t    c9        : [ 113.39  , 161.57  ],\n\t    c10       : [ 79.37   , 113.39  ],\n\t    executive : [ 521.86  , 756.00  ],\n\t    folio     : [ 612.00  , 936.00  ],\n\t    legal     : [ 612.00  , 1008.00 ],\n\t    letter    : [ 612.00  , 792.00  ],\n\t    tabloid   : [ 792.00  , 1224.00 ]\n\t};\n\n\tfunction makeOutput() {\n\t    var indentLevel = 0, output = BinaryStream();\n\t    function out() {\n\t        var arguments$1 = arguments;\n\n\t        for (var i = 0; i < arguments.length; ++i) {\n\t            var x = arguments$1[i];\n\t            if (x === undefined) {\n\t                throw new Error("Cannot output undefined to PDF");\n\t            }\n\t            else if (x instanceof PDFValue) {\n\t                x.beforeRender(out);\n\t                x.render(out);\n\t            }\n\t            else if (isArray(x)) {\n\t                renderArray(x, out);\n\t            }\n\t            else if (isDate(x)) {\n\t                renderDate(x, out);\n\t            }\n\t            else if (typeof x == "number") {\n\t                if (isNaN(x)) {\n\t                    throw new Error("Cannot output NaN to PDF");\n\t                }\n\t                // make sure it doesn\'t end up in exponent notation\n\t                var num = x.toFixed(7);\n\t                if (num.indexOf(".") >= 0) {\n\t                    num = num.replace(/\\.?0+$/, "");\n\t                }\n\t                if (num == "-0") {\n\t                    num = "0";\n\t                }\n\t                output.writeString(num);\n\t            }\n\t            else if (/string|boolean/.test(typeof x)) {\n\t                output.writeString(String(x));\n\t            }\n\t            else if (typeof x.get == "function") {\n\t                output.write(x.get());\n\t            }\n\t            else if (typeof x == "object") {\n\t                if (!x) {\n\t                    output.writeString("null");\n\t                } else {\n\t                    out(new PDFDictionary(x));\n\t                }\n\t            }\n\t        }\n\t    }\n\t    out.writeData = function(data) {\n\t        output.write(data);\n\t    };\n\t    out.withIndent = function(f) {\n\t        ++indentLevel;\n\t        f(out);\n\t        --indentLevel;\n\t    };\n\t    out.indent = function() {\n\t        out(NL, pad("", indentLevel * 2, "  "));\n\t        out.apply(null, arguments);\n\t    };\n\t    out.offset = function() {\n\t        return output.offset();\n\t    };\n\t    out.toString = function() {\n\t        throw new Error("FIX CALLER");\n\t    };\n\t    out.get = function() {\n\t        return output.get();\n\t    };\n\t    out.stream = function() {\n\t        return output;\n\t    };\n\t    return out;\n\t}\n\n\tfunction wrapObject(value, id) {\n\t    var beforeRender = value.beforeRender;\n\t    var renderValue = value.render;\n\n\t    value.beforeRender = function(){};\n\n\t    value.render = function(out) {\n\t        out(id, " 0 R");\n\t    };\n\n\t    value.renderFull = function(out) {\n\t        value._offset = out.offset();\n\t        out(id, " 0 obj ");\n\t        beforeRender.call(value, out);\n\t        renderValue.call(value, out);\n\t        out(" endobj");\n\t    };\n\t}\n\n\tfunction getPaperOptions(getOption) {\n\t    if (typeof getOption != "function") {\n\t        var options = getOption;\n\t        getOption = function(key, def) {\n\t            return key in options ? options[key] : def;\n\t        };\n\t    }\n\t    var paperSize = getOption("paperSize", PAPER_SIZE.a4);\n\t    if (!paperSize) {\n\t        return {};\n\t    }\n\t    if (typeof paperSize == "string") {\n\t        paperSize = PAPER_SIZE[paperSize.toLowerCase()];\n\t        if (paperSize == null) {\n\t            throw new Error("Unknown paper size");\n\t        }\n\t    }\n\n\t    paperSize[0] = unitsToPoints(paperSize[0]);\n\t    paperSize[1] = unitsToPoints(paperSize[1]);\n\n\t    if (getOption("landscape", false)) {\n\t        paperSize = [\n\t            Math.max(paperSize[0], paperSize[1]),\n\t            Math.min(paperSize[0], paperSize[1])\n\t        ];\n\t    }\n\n\t    var margin = getOption("margin");\n\t    if (margin) {\n\t        if (typeof margin == "string" || typeof margin == "number") {\n\t            margin = unitsToPoints(margin, 0);\n\t            margin = { left: margin, top: margin, right: margin, bottom: margin };\n\t        } else {\n\t            margin = {\n\t                left   : unitsToPoints(margin.left, 0),\n\t                top    : unitsToPoints(margin.top, 0),\n\t                right  : unitsToPoints(margin.right, 0),\n\t                bottom : unitsToPoints(margin.bottom, 0)\n\t            };\n\t        }\n\t        if (getOption("addMargin")) {\n\t            paperSize[0] += margin.left + margin.right;\n\t            paperSize[1] += margin.top + margin.bottom;\n\t        }\n\t    }\n\t    return { paperSize: paperSize, margin: margin };\n\t}\n\n\tfunction PDFDocument(options) {\n\t    var self = this;\n\t    var out = makeOutput();\n\t    var objcount = 0;\n\t    var objects = [];\n\n\t    function getOption(name, defval) {\n\t        return (options && options[name] != null) ? options[name] : defval;\n\t    }\n\n\t    self.getOption = getOption;\n\n\t    self.attach = function(value) {\n\t        if (objects.indexOf(value) < 0) {\n\t            wrapObject(value, ++objcount);\n\t            objects.push(value);\n\t        }\n\t        return value;\n\t    };\n\n\t    self.pages = [];\n\n\t    self.FONTS = {};\n\t    self.IMAGES = {};\n\t    self.GRAD_COL_FUNCTIONS = {}; // cache for color gradient functions\n\t    self.GRAD_OPC_FUNCTIONS = {}; // cache for opacity gradient functions\n\t    self.GRAD_COL = {};     // cache for whole color gradient objects\n\t    self.GRAD_OPC = {};     // cache for whole opacity gradient objects\n\n\t    var catalog = self.attach(new PDFCatalog());\n\t    var pageTree = self.attach(new PDFPageTree());\n\n\t    if (getOption("autoPrint")) {\n\t        var nameTree = {};\n\t        nameTree.JavaScript = new PDFDictionary({ Names: [\n\t            new PDFString("JS"), self.attach(new PDFDictionary({\n\t                S: _("JavaScript"),\n\t                JS: new PDFString("print(true);")\n\t            }))\n\t        ] });\n\t        catalog.props.Names = new PDFDictionary(nameTree);\n\t    }\n\n\t    catalog.setPages(pageTree);\n\n\t    var info = self.attach(new PDFDictionary({\n\t        Producer     : new PDFString(getOption("producer", "Kendo UI PDF Generator"), true), // XXX: kendo.version?\n\t        Title        : new PDFString(getOption("title", ""), true),\n\t        Author       : new PDFString(getOption("author", ""), true),\n\t        Subject      : new PDFString(getOption("subject", ""), true),\n\t        Keywords     : new PDFString(getOption("keywords", ""), true),\n\t        Creator      : new PDFString(getOption("creator", "Kendo UI PDF Generator"), true),\n\t        CreationDate : getOption("date", new Date())\n\t    }));\n\n\t    self.addPage = function(options) {\n\t        var paperOptions  = getPaperOptions(function(name, defval){\n\t            return (options && options[name] != null) ? options[name] : defval;\n\t        });\n\t        var paperSize     = paperOptions.paperSize;\n\t        var margin        = paperOptions.margin;\n\t        var contentWidth  = paperSize[0];\n\t        var contentHeight = paperSize[1];\n\t        if (margin) {\n\t            contentWidth -= margin.left + margin.right;\n\t            contentHeight -= margin.top + margin.bottom;\n\t        }\n\t        var content = new PDFStream(makeOutput(), null, true);\n\t        var props = {\n\t            Contents : self.attach(content),\n\t            Parent   : pageTree,\n\t            MediaBox : [ 0, 0, paperSize[0], paperSize[1] ]\n\t        };\n\t        var page = new PDFPage(self, props);\n\t        page._content = content;\n\t        pageTree.addPage(self.attach(page));\n\n\t        // canvas-like coord. system.  (0,0) is upper-left.\n\t        // text must be vertically mirorred before drawing.\n\t        page.transform(1, 0, 0, -1, 0, paperSize[1]);\n\n\t        if (margin) {\n\t            page.translate(margin.left, margin.top);\n\t            // XXX: clip to right/bottom margin.  Make this optional?\n\t            page.rect(0, 0, contentWidth, contentHeight);\n\t            page.clip();\n\t        }\n\n\t        self.pages.push(page);\n\t        return page;\n\t    };\n\n\t    self.render = function() {\n\t        var i;\n\t        /// file header\n\t        out("%PDF-1.4", NL, "%\\xc2\\xc1\\xda\\xcf\\xce", NL, NL);\n\n\t        /// file body\n\t        for (i = 0; i < objects.length; ++i) {\n\t            objects[i].renderFull(out);\n\t            out(NL, NL);\n\t        }\n\n\t        /// cross-reference table\n\t        var xrefOffset = out.offset();\n\t        out("xref", NL, 0, " ", objects.length + 1, NL);\n\t        out("0000000000 65535 f ", NL);\n\t        for (i = 0; i < objects.length; ++i) {\n\t            out(zeropad(objects[i]._offset, 10), " 00000 n ", NL);\n\t        }\n\t        out(NL);\n\n\t        /// trailer\n\t        out("trailer", NL);\n\t        out(new PDFDictionary({\n\t            Size: objects.length + 1,\n\t            Root: catalog,\n\t            Info: info\n\t        }), NL, NL);\n\n\t        /// end\n\t        out("startxref", NL, xrefOffset, NL);\n\t        out("%%EOF", NL);\n\n\t        return out.stream().offset(0);\n\t    };\n\t}\n\n\tvar FONT_CACHE = {\n\t    "Times-Roman"           : true,\n\t    "Times-Bold"            : true,\n\t    "Times-Italic"          : true,\n\t    "Times-BoldItalic"      : true,\n\t    "Helvetica"             : true,\n\t    "Helvetica-Bold"        : true,\n\t    "Helvetica-Oblique"     : true,\n\t    "Helvetica-BoldOblique" : true,\n\t    "Courier"               : true,\n\t    "Courier-Bold"          : true,\n\t    "Courier-Oblique"       : true,\n\t    "Courier-BoldOblique"   : true,\n\t    "Symbol"                : true,\n\t    "ZapfDingbats"          : true\n\t};\n\n\tfunction loadBinary(url, cont) {\n\t    // IE throws Accesss denied error for Data URIs\n\t    var m;\n\t    if (browser.msie && (m = /^data:.*?;base64,/i.exec(url))) {\n\t        cont(base64ToUint8Array(url.substr(m[0].length)));\n\t        return;\n\t    }\n\n\t    function error() {\n\t        if (window.console) {\n\t            if (window.console.error) {\n\t                window.console.error("Cannot load URL: %s", url);\n\t            } else {\n\t                window.console.log("Cannot load URL: %s", url);\n\t            }\n\t        }\n\t        cont(null);\n\t    }\n\t    var req = new XMLHttpRequest();\n\t    req.open(\'GET\', url, true);\n\t    if (HAS_TYPED_ARRAYS) {\n\t        req.responseType = "arraybuffer";\n\t    }\n\t    req.onload = function() {\n\t        if (req.status == 200 || req.status == 304) {\n\t            if (HAS_TYPED_ARRAYS) {\n\t                cont(new Uint8Array(req.response));\n\t            } else {\n\t                cont(new window.VBArray(req.responseBody).toArray()); // IE9 only\n\t            }\n\t        } else {\n\t            error();\n\t        }\n\t    };\n\t    req.onerror = error;\n\t    req.send(null);\n\t}\n\n\tfunction loadFont(url, cont) {\n\t    var font = FONT_CACHE[url];\n\t    if (font) {\n\t        cont(font);\n\t    } else {\n\t        loadBinary(url, function(data){\n\t            if (data == null) {\n\t                throw new Error("Cannot load font from " + url);\n\t            } else {\n\t                var font = new TTFFont(data);\n\t                FONT_CACHE[url] = font;\n\t                cont(font);\n\t            }\n\t        });\n\t    }\n\t}\n\n\tvar IMAGE_CACHE = {};\n\n\tfunction clearImageCache() {\n\t    IMAGE_CACHE = {};\n\t}\n\n\tfunction loadImage(url, size, cont) {\n\t    var img = IMAGE_CACHE[url], bloburl, blob;\n\t    if (img) {\n\t        cont(img);\n\t    } else {\n\t        img = new Image();\n\t        if (!(/^data:/i.test(url))) {\n\t            img.crossOrigin = "Anonymous";\n\t        }\n\t        if (HAS_TYPED_ARRAYS && !(/^data:/i.test(url))) {\n\t            // IE10 fails to load images from another domain even when the server sends the\n\t            // proper CORS headers.  a XHR, however, will be able to load the data.\n\t            // http://stackoverflow.com/a/19734516/154985\n\t            //\n\t            // On the other hand, it\'s worth doing it this way for all browsers which support\n\t            // responseType = "blob" (HAS_TYPED_ARRAYS will be true), because we can inspect the\n\t            // mime type and if it\'s a JPEG (very common case) we can save a lot of time in\n\t            // _load below.\n\t            var xhr = new XMLHttpRequest();\n\t            xhr.onload = function() {\n\t                blob = xhr.response;\n\t                bloburl = URL.createObjectURL(blob);\n\t                _load(bloburl);\n\t            };\n\t            xhr.onerror = _onerror;\n\t            xhr.open("GET", url, true);\n\t            xhr.responseType = "blob";\n\t            xhr.send();\n\t        } else {\n\t            _load(url);\n\t        }\n\t    }\n\n\t    function _load(url) {\n\t        img.src = url;\n\t        if (img.complete && !browser.msie) {\n\t            // IE, bless it\'s little heart, says img.complete == true even though the image is\n\t            // not loaded (width=0), therefore we must go the onload route (ticket 929635).\n\t            _onload();\n\t        } else {\n\t            img.onload = _onload;\n\t            img.onerror = _onerror;\n\t        }\n\t    }\n\n\t    function _trycanvas() {\n\t        if (!size) {\n\t            size = { width: img.width, height: img.height };\n\t        }\n\n\t        var canvas = document.createElement("canvas");\n\t        canvas.width = size.width;\n\t        canvas.height = size.height;\n\n\t        var ctx = canvas.getContext("2d");\n\t        ctx.drawImage(img, 0, 0, size.width, size.height);\n\n\t        var imgdata;\n\t        try {\n\t            imgdata = ctx.getImageData(0, 0, size.width, size.height);\n\t        } catch (ex) {\n\t            // it tainted the canvas -- can\'t draw it.\n\t            _onerror();\n\t            return;\n\t        } finally {\n\t            if (bloburl) {\n\t                URL.revokeObjectURL(bloburl);\n\t            }\n\t        }\n\n\t        // in case it contains transparency, we must separate rgb data from the alpha\n\t        // channel and create a PDFRawImage image with opacity.  otherwise we can use a\n\t        // PDFJpegImage.\n\t        //\n\t        // to do this in one step, we create the rgb and alpha streams anyway, even if\n\t        // we might end up not using them if hasAlpha remains false.\n\n\t        var hasAlpha = false, rgb = BinaryStream(), alpha = BinaryStream();\n\t        var rawbytes = imgdata.data;\n\t        var i = 0;\n\t        while (i < rawbytes.length) {\n\t            rgb.writeByte(rawbytes[i++]);\n\t            rgb.writeByte(rawbytes[i++]);\n\t            rgb.writeByte(rawbytes[i++]);\n\t            var a = rawbytes[i++];\n\t            if (a < 255) {\n\t                hasAlpha = true;\n\t            }\n\t            alpha.writeByte(a);\n\t        }\n\n\t        if (hasAlpha) {\n\t            img = new PDFRawImage(size.width, size.height, rgb, alpha);\n\t        } else {\n\t            // no transparency, encode as JPEG.\n\t            var data = canvas.toDataURL("image/jpeg");\n\t            data = data.substr(data.indexOf(";base64,") + 8);\n\n\t            var stream = BinaryStream();\n\t            stream.writeBase64(data);\n\t            img = new PDFJpegImage(stream);\n\t        }\n\n\t        cont(IMAGE_CACHE[url] = img);\n\t    }\n\n\t    function _onerror() {\n\t        cont(IMAGE_CACHE[url] = "ERROR");\n\t    }\n\n\t    function _onload() {\n\t        if (size) {\n\t            // but if requested size is bigger than the image, just use the original image.\n\t            if (size.width >= img.width || size.height >= img.height) {\n\t                size = null;\n\t            }\n\t        }\n\t        if (!size && blob && /^image\\/jpe?g$/i.test(blob.type)) {\n\t            // If we know we got a JPEG, we can skip the process of rendering it to a\n\t            // canvas, getting the pixel data, searching for transparency we know we won\'t\n\t            // find, getting back a data URI and then decoding the BASE64 to finally get the\n\t            // binary we already have.  Also, we avoid downgrading the image quality, with\n\t            // the possible drawback of making a bigger PDF; still, seems legit.\n\t            //\n\t            // Besides saving a lot of work, this also reuses the buffer memory\n\t            // (BinaryStream does not create a copy), potentially saving some GC cycles.\n\t            var reader = new FileReader();\n\t            reader.onload = function() {\n\t                try {\n\t                    var img = new PDFJpegImage(BinaryStream(new Uint8Array(this.result)));\n\t                    URL.revokeObjectURL(bloburl);\n\t                    cont(IMAGE_CACHE[url] = img);\n\t                } catch (ex) {\n\t                    // if there\'s an error parsing the JPEG stream, it could be due to a\n\t                    // misconfigured server (improper content-type:\n\t                    // https://github.com/telerik/kendo-ui-core/issues/4184).  If that\'s the case,\n\t                    // the canvas will still be able to draw it.\n\t                    _trycanvas();\n\t                }\n\t            };\n\t            reader.readAsArrayBuffer(blob);\n\t        } else {\n\t            _trycanvas();\n\t        }\n\t    }\n\t}\n\n\tfunction manyLoader(loadOne) {\n\t    return function(urls, callback) {\n\t        var n = urls.length, i = n;\n\t        if (n === 0) {\n\t            return callback();\n\t        }\n\t        function next() {\n\t            if (--n === 0) {\n\t                callback();\n\t            }\n\t        }\n\t        while (i-- > 0) {\n\t            loadOne(urls[i], next);\n\t        }\n\t    };\n\t}\n\n\tvar loadFonts = manyLoader(loadFont);\n\tvar loadImages = function(images, callback) {\n\t    var urls = Object.keys(images), n = urls.length;\n\t    if (n === 0) {\n\t        return callback();\n\t    }\n\t    function next() {\n\t        if (--n === 0) {\n\t            callback();\n\t        }\n\t    }\n\t    urls.forEach(function(url){\n\t        loadImage(url, images[url], next);\n\t    });\n\t};\n\n\tPDFDocument.prototype = {\n\t    loadFonts: loadFonts,\n\t    loadImages: loadImages,\n\n\t    getFont: function(url) {\n\t        var font = this.FONTS[url];\n\t        if (!font) {\n\t            font = FONT_CACHE[url];\n\t            if (!font) {\n\t                throw new Error("Font " + url + " has not been loaded");\n\t            }\n\t            if (font === true) {\n\t                font = this.attach(new PDFStandardFont(url));\n\t            } else {\n\t                font = this.attach(new PDFFont(this, font));\n\t            }\n\t            this.FONTS[url] = font;\n\t        }\n\t        return font;\n\t    },\n\n\t    getImage: function(url) {\n\t        var img = this.IMAGES[url];\n\t        if (!img) {\n\t            img = IMAGE_CACHE[url];\n\t            if (!img) {\n\t                throw new Error("Image " + url + " has not been loaded");\n\t            }\n\t            if (img === "ERROR") {\n\t                return null;\n\t            }\n\t            img = this.IMAGES[url] = this.attach(img.asStream(this));\n\t        }\n\t        return img;\n\t    },\n\n\t    getOpacityGS: function(opacity, forStroke) {\n\t        var id = parseFloat(opacity).toFixed(3);\n\t        opacity = parseFloat(id);\n\t        id += forStroke ? "S" : "F";\n\t        var cache = this._opacityGSCache || (this._opacityGSCache = {});\n\t        var gs = cache[id];\n\t        if (!gs) {\n\t            var props = {\n\t                Type: _("ExtGState")\n\t            };\n\t            if (forStroke) {\n\t                props.CA = opacity;\n\t            } else {\n\t                props.ca = opacity;\n\t            }\n\t            gs = this.attach(new PDFDictionary(props));\n\t            gs._resourceName = _("GS" + (++RESOURCE_COUNTER));\n\t            cache[id] = gs;\n\t        }\n\t        return gs;\n\t    },\n\n\t    dict: function(props) {\n\t        return new PDFDictionary(props);\n\t    },\n\n\t    name: function(str) {\n\t        return _(str);\n\t    },\n\n\t    stream: function(props, content) {\n\t        return new PDFStream(content, props);\n\t    }\n\t};\n\n\t/* -----[ utils ]----- */\n\n\tfunction pad(str, len, ch) {\n\t    while (str.length < len) {\n\t        str = ch + str;\n\t    }\n\t    return str;\n\t}\n\n\tfunction zeropad(n, len) {\n\t    return pad(String(n), len, "0");\n\t}\n\n\tfunction hasOwnProperty(obj, key) {\n\t    return Object.prototype.hasOwnProperty.call(obj, key);\n\t}\n\n\tvar isArray = Array.isArray || function(obj) {\n\t    return obj instanceof Array;\n\t};\n\n\tfunction isDate(obj) {\n\t    return obj instanceof Date;\n\t}\n\n\tfunction renderArray(a, out) {\n\t    out("[");\n\t    if (a.length > 0) {\n\t        out.withIndent(function(){\n\t            for (var i = 0; i < a.length; ++i) {\n\t                if (i > 0 && i % 8 === 0) {\n\t                    out.indent(a[i]);\n\t                } else {\n\t                    out(" ", a[i]);\n\t                }\n\t            }\n\t        });\n\t        //out.indent();\n\t    }\n\t    out(" ]");\n\t}\n\n\tfunction renderDate(date, out) {\n\t    out("(D:",\n\t        zeropad(date.getUTCFullYear(), 4),\n\t        zeropad(date.getUTCMonth() + 1, 2),\n\t        zeropad(date.getUTCDate(), 2),\n\t        zeropad(date.getUTCHours(), 2),\n\t        zeropad(date.getUTCMinutes(), 2),\n\t        zeropad(date.getUTCSeconds(), 2),\n\t        "Z)");\n\t}\n\n\tfunction mm2pt(mm) {\n\t    return mm * (72/25.4);\n\t}\n\n\tfunction cm2pt(cm) {\n\t    return mm2pt(cm * 10);\n\t}\n\n\tfunction in2pt(inch)  {\n\t    return inch * 72;\n\t}\n\n\tfunction unitsToPoints(x, def) {\n\t    if (typeof x == "number") {\n\t        return x;\n\t    }\n\t    if (typeof x == "string") {\n\t        var m;\n\t        m = /^\\s*([0-9.]+)\\s*(mm|cm|in|pt)\\s*$/.exec(x);\n\t        if (m) {\n\t            var num = parseFloat(m[1]);\n\t            if (!isNaN(num)) {\n\t                if (m[2] == "pt") {\n\t                    return num;\n\t                }\n\t                return {\n\t                    "mm": mm2pt,\n\t                    "cm": cm2pt,\n\t                    "in": in2pt\n\t                }[m[2]](num);\n\t            }\n\t        }\n\t    }\n\t    if (def != null) {\n\t        return def;\n\t    }\n\t    throw new Error("Can\'t parse unit: " + x);\n\t}\n\n\t/* -----[ PDF basic objects ]----- */\n\n\tfunction PDFValue(){}\n\n\tPDFValue.prototype.beforeRender = function(){};\n\n\tfunction defclass(Ctor, proto, Base) {\n\t    if (!Base) {\n\t        Base = PDFValue;\n\t    }\n\t    Ctor.prototype = new Base();\n\t    for (var i in proto) {\n\t        if (hasOwnProperty(proto, i)) {\n\t            Ctor.prototype[i] = proto[i];\n\t        }\n\t    }\n\t    return Ctor;\n\t}\n\n\tvar PDFString = defclass(function PDFString(value, utf16be){\n\t    this.value = value;\n\t    this.utf16be = Boolean(utf16be);\n\t}, {\n\t    render: function(out) {\n\t        var txt = this.value;\n\t        if (txt.length > 0) {\n\t            txt = this.value.replace(/([\\(\\)\\\\])/g, "\\\\$1");\n\n\t            if (this.utf16be) {\n\t                txt = BOM + encodeUTF16BE(txt);\n\t            }\n\t        }\n\n\t        out("(", txt, ")");\n\t    },\n\t    toString: function() {\n\t        return this.value;\n\t    }\n\t});\n\n\tvar PDFHexString = defclass(function PDFHexString(value){\n\t    this.value = value;\n\t}, {\n\t    render: function(out) {\n\t        var this$1 = this;\n\n\t        out("<");\n\t        for (var i = 0; i < this.value.length; ++i) {\n\t            out(zeropad(this$1.value.charCodeAt(i).toString(16), 4));\n\t        }\n\t        out(">");\n\t    }\n\t}, PDFString);\n\n\t/// names\n\n\tvar PDFName = defclass(function PDFName(name) {\n\t    this.name = name;\n\t}, {\n\t    render: function(out) {\n\t        out("/" + this.escape());\n\t    },\n\t    escape: function() {\n\t        return this.name.replace(/[^\\x21-\\x7E]/g, function(c){\n\t            return "#" + zeropad(c.charCodeAt(0).toString(16), 2);\n\t        });\n\t    },\n\t    toString: function() {\n\t        return this.name;\n\t    }\n\t});\n\n\tvar PDFName_cache = {};\n\tPDFName.get = _;\n\n\tfunction _(name) {\n\t    if (hasOwnProperty(PDFName_cache, name)) {\n\t        return PDFName_cache[name];\n\t    }\n\t    return (PDFName_cache[name] = new PDFName(name));\n\t}\n\n\t/// dictionary\n\n\tvar PDFDictionary = defclass(function PDFDictionary(props) {\n\t    this.props = props;\n\t}, {\n\t    render: function(out) {\n\t        var props = this.props, empty = true;\n\t        out("<<");\n\t        out.withIndent(function(){\n\t            for (var i in props) {\n\t                if (hasOwnProperty(props, i) && !/^_/.test(i)) {\n\t                    empty = false;\n\t                    out.indent(_(i), " ", props[i]);\n\t                }\n\t            }\n\t        });\n\t        if (!empty) {\n\t            out.indent();\n\t        }\n\t        out(">>");\n\t    }\n\t});\n\n\t/// streams\n\n\tvar PDFStream = defclass(function PDFStream(data, props, compress) {\n\t    if (typeof data == "string") {\n\t        var tmp = BinaryStream();\n\t        tmp.write(data);\n\t        data = tmp;\n\t    }\n\t    this.data = data;\n\t    this.props = props || {};\n\t    this.compress = compress;\n\t}, {\n\t    render: function(out) {\n\t        var data = this.data.get(), props = this.props;\n\t        if (this.compress && kendoPdf.supportsDeflate()) {\n\t            if (!props.Filter) {\n\t                props.Filter = [];\n\t            } else if (!(props.Filter instanceof Array)) {\n\t                props.Filter = [ props.Filter ];\n\t            }\n\t            props.Filter.unshift(_("FlateDecode"));\n\t            data = kendoPdf.deflate(data);\n\t        }\n\t        props.Length = data.length;\n\t        out(new PDFDictionary(props), " stream", NL);\n\t        out.writeData(data);\n\t        out(NL, "endstream");\n\t    }\n\t});\n\n\t/// catalog\n\n\tvar PDFCatalog = defclass(function PDFCatalog(){\n\t    this.props = {\n\t        Type: _("Catalog")\n\t    };\n\t}, {\n\t    setPages: function(pagesObj) {\n\t        this.props.Pages = pagesObj;\n\t    }\n\t}, PDFDictionary);\n\n\t/// page tree\n\n\tvar PDFPageTree = defclass(function PDFPageTree(){\n\t    this.props = {\n\t        Type  : _("Pages"),\n\t        Kids  : [],\n\t        Count : 0\n\t    };\n\t}, {\n\t    addPage: function(pageObj) {\n\t        this.props.Kids.push(pageObj);\n\t        this.props.Count++;\n\t    }\n\t}, PDFDictionary);\n\n\t/// images\n\n\t// JPEG\n\n\tvar SOF_CODES = [0xc0, 0xc1, 0xc2, 0xc3, 0xc5, 0xc6, 0xc7, 0xc9, 0xca, 0xcb, 0xcd, 0xce, 0xcf];\n\n\tfunction PDFJpegImage(data) {\n\t    // we must determine the correct color space.  we\'ll parse a bit\n\t    // of the JPEG stream for this, it\'s still better than going\n\t    // through the canvas.\n\t    // https://github.com/telerik/kendo-ui-core/issues/2845\n\t    data.offset(0);\n\t    var width, height, colorSpace, bitsPerComponent;\n\t    var soi = data.readShort();\n\t    if (soi != 0xFFD8) {\n\t        // XXX: do we have some better options here?\n\t        throw new Error("Invalid JPEG image");\n\t    }\n\t    while (!data.eof()) {\n\t        var ff = data.readByte();\n\t        if (ff != 0xFF) {\n\t            throw new Error("Invalid JPEG image");\n\t        }\n\t        var marker = data.readByte();\n\t        var length = data.readShort();\n\t        if (SOF_CODES.indexOf(marker) >= 0) {\n\t            // "start of frame" marker\n\t            bitsPerComponent = data.readByte();\n\t            height = data.readShort();\n\t            width = data.readShort();\n\t            colorSpace = data.readByte();\n\t            break;\n\t        }\n\t        data.skip(length - 2);\n\t    }\n\n\t    if (colorSpace == null) {\n\t        throw new Error("Invalid JPEG image");\n\t    }\n\n\t    var props = {\n\t        Type             : _("XObject"),\n\t        Subtype          : _("Image"),\n\t        Width            : width,\n\t        Height           : height,\n\t        BitsPerComponent : bitsPerComponent,\n\t        Filter           : _("DCTDecode")\n\t    };\n\n\t    switch (colorSpace) {\n\t      case 1:\n\t        props.ColorSpace = _("DeviceGray");\n\t        break;\n\t      case 3:\n\t        props.ColorSpace = _("DeviceRGB");\n\t        break;\n\t      case 4:\n\t        props.ColorSpace = _("DeviceCMYK");\n\t        props.Decode = [ 1, 0, 1, 0, 1, 0, 1, 0 ]; // invert colors\n\t        break;\n\t    }\n\n\t    this.asStream = function() {\n\t        data.offset(0);\n\t        var stream = new PDFStream(data, props);\n\t        stream._resourceName = _("I" + (++RESOURCE_COUNTER));\n\t        return stream;\n\t    };\n\t}\n\n\t// PDFRawImage will be used for images with transparency (PNG)\n\n\tfunction PDFRawImage(width, height, rgb, alpha) {\n\t    this.asStream = function(pdf) {\n\t        var mask = new PDFStream(alpha, {\n\t            Type             : _("XObject"),\n\t            Subtype          : _("Image"),\n\t            Width            : width,\n\t            Height           : height,\n\t            BitsPerComponent : 8,\n\t            ColorSpace       : _("DeviceGray")\n\t        }, true);\n\t        var stream = new PDFStream(rgb, {\n\t            Type             : _("XObject"),\n\t            Subtype          : _("Image"),\n\t            Width            : width,\n\t            Height           : height,\n\t            BitsPerComponent : 8,\n\t            ColorSpace       : _("DeviceRGB"),\n\t            SMask            : pdf.attach(mask)\n\t        }, true);\n\t        stream._resourceName = _("I" + (++RESOURCE_COUNTER));\n\t        return stream;\n\t    };\n\t}\n\n\t/// standard fonts\n\n\tvar PDFStandardFont = defclass(function PDFStandardFont(name){\n\t    this.props = {\n\t        Type     : _("Font"),\n\t        Subtype  : _("Type1"),\n\t        BaseFont : _(name)\n\t    };\n\t    this._resourceName = _("F" + (++RESOURCE_COUNTER));\n\t}, {\n\t    encodeText: function(str) {\n\t        return new PDFString(String(str));\n\t    }\n\t}, PDFDictionary);\n\n\t/// TTF fonts\n\n\tvar PDFFont = defclass(function PDFFont(pdf, font, props){\n\t    props = this.props = props || {};\n\t    props.Type = _("Font");\n\t    props.Subtype = _("Type0");\n\t    props.Encoding = _("Identity-H");\n\n\t    this._pdf = pdf;\n\t    this._font = font;\n\t    this._sub = font.makeSubset();\n\t    this._resourceName = _("F" + (++RESOURCE_COUNTER));\n\n\t    var head = font.head;\n\n\t    this.name = font.psName;\n\t    var scale = this.scale = font.scale;\n\t    this.bbox = [\n\t        head.xMin * scale,\n\t        head.yMin * scale,\n\t        head.xMax * scale,\n\t        head.yMax * scale\n\t    ];\n\n\t    this.italicAngle = font.post.italicAngle;\n\t    this.ascent = font.ascent * scale;\n\t    this.descent = font.descent * scale;\n\t    this.lineGap = font.lineGap * scale;\n\t    this.capHeight = font.os2.capHeight || this.ascent;\n\t    this.xHeight = font.os2.xHeight || 0;\n\t    this.stemV = 0;\n\n\t    this.familyClass = (font.os2.familyClass || 0) >> 8;\n\t    this.isSerif = this.familyClass >= 1 && this.familyClass <= 7;\n\t    this.isScript = this.familyClass == 10;\n\n\t    this.flags = ((font.post.isFixedPitch ? 1 : 0) |\n\t                  (this.isSerif ? 1 << 1 : 0) |\n\t                  (this.isScript ? 1 << 3 : 0) |\n\t                  (this.italicAngle !== 0 ? 1 << 6 : 0) |\n\t                  (1 << 5));\n\t}, {\n\t    encodeText: function(text) {\n\t        return new PDFHexString(this._sub.encodeText(String(text)));\n\t    },\n\t    getTextWidth: function(fontSize, text) {\n\t        var this$1 = this;\n\n\t        var width = 0, codeMap = this._font.cmap.codeMap;\n\t        for (var i = 0; i < text.length; ++i) {\n\t            var glyphId = codeMap[text.charCodeAt(i)];\n\t            width += this$1._font.widthOfGlyph(glyphId || 0);\n\t        }\n\t        return width * fontSize / 1000;\n\t    },\n\t    beforeRender: function() {\n\t        var self = this;\n\t        var sub = self._sub;\n\n\t        // write the TTF data\n\t        var data = sub.render();\n\t        var fontStream = new PDFStream(BinaryStream(data), {\n\t            Length1: data.length\n\t        }, true);\n\n\t        var descriptor = self._pdf.attach(new PDFDictionary({\n\t            Type         : _("FontDescriptor"),\n\t            FontName     : _(self._sub.psName),\n\t            FontBBox     : self.bbox,\n\t            Flags        : self.flags,\n\t            StemV        : self.stemV,\n\t            ItalicAngle  : self.italicAngle,\n\t            Ascent       : self.ascent,\n\t            Descent      : self.descent,\n\t            CapHeight    : self.capHeight,\n\t            XHeight      : self.xHeight,\n\t            FontFile2    : self._pdf.attach(fontStream)\n\t        }));\n\n\t        var cmap = sub.ncid2ogid;\n\t        var firstChar = sub.firstChar;\n\t        var lastChar = sub.lastChar;\n\t        var charWidths = [];\n\t        (function loop(i, chunk){\n\t            if (i <= lastChar) {\n\t                var gid = cmap[i];\n\t                if (gid == null) {\n\t                    loop(i + 1);\n\t                } else {\n\t                    if (!chunk) {\n\t                        charWidths.push(i, chunk = []);\n\t                    }\n\t                    chunk.push(self._font.widthOfGlyph(gid));\n\t                    loop(i + 1, chunk);\n\t                }\n\t            }\n\t        })(firstChar);\n\n\t        // As if two dictionaries weren\'t enough, we need another\n\t        // one, the "descendant font".  Only that one can be of\n\t        // Subtype CIDFontType2.  PDF is the X11 of document\n\t        // formats: portable but full of legacy that nobody cares\n\t        // about anymore.\n\n\t        var descendant = new PDFDictionary({\n\t            Type: _("Font"),\n\t            Subtype: _("CIDFontType2"),\n\t            BaseFont: _(self._sub.psName),\n\t            CIDSystemInfo: new PDFDictionary({\n\t                Registry   : new PDFString("Adobe"),\n\t                Ordering   : new PDFString("Identity"),\n\t                Supplement : 0\n\t            }),\n\t            FontDescriptor: descriptor,\n\t            FirstChar: firstChar,\n\t            LastChar: lastChar,\n\t            DW: Math.round(self._font.widthOfGlyph(0)),\n\t            W: charWidths,\n\t            CIDToGIDMap: self._pdf.attach(self._makeCidToGidMap())\n\t        });\n\n\t        var dict = self.props;\n\t        dict.BaseFont = _(self._sub.psName);\n\t        dict.DescendantFonts = [ self._pdf.attach(descendant) ];\n\n\t        // Compute the ToUnicode map so that apps can extract\n\t        // meaningful text from the PDF.\n\t        var unimap = new PDFToUnicodeCmap(firstChar, lastChar, sub.subset);\n\t        var unimapStream = new PDFStream(makeOutput(), null, true);\n\t        unimapStream.data(unimap);\n\t        dict.ToUnicode = self._pdf.attach(unimapStream);\n\t    },\n\t    _makeCidToGidMap: function() {\n\t        return new PDFStream(BinaryStream(this._sub.cidToGidMap()), null, true);\n\t    }\n\t}, PDFDictionary);\n\n\tvar PDFToUnicodeCmap = defclass(function PDFUnicodeCMap(firstChar, lastChar, map){\n\t    this.firstChar = firstChar;\n\t    this.lastChar = lastChar;\n\t    this.map = map;\n\t}, {\n\t    render: function(out) {\n\t        out.indent("/CIDInit /ProcSet findresource begin");\n\t        out.indent("12 dict begin");\n\t        out.indent("begincmap");\n\t        out.indent("/CIDSystemInfo <<");\n\t        out.indent("  /Registry (Adobe)");\n\t        out.indent("  /Ordering (UCS)");\n\t        out.indent("  /Supplement 0");\n\t        out.indent(">> def");\n\t        out.indent("/CMapName /Adobe-Identity-UCS def");\n\t        out.indent("/CMapType 2 def");\n\t        out.indent("1 begincodespacerange");\n\t        out.indent("  <0000><ffff>");\n\t        out.indent("endcodespacerange");\n\n\t        var self = this;\n\t        out.indent(self.lastChar - self.firstChar + 1, " beginbfchar");\n\t        out.withIndent(function(){\n\t            for (var code = self.firstChar; code <= self.lastChar; ++code) {\n\t                var unicode = self.map[code];\n\t                var str = ucs2encode([ unicode ]);\n\t                out.indent("<", zeropad(code.toString(16), 4), ">", "<");\n\t                for (var i = 0; i < str.length; ++i) {\n\t                    out(zeropad(str.charCodeAt(i).toString(16), 4));\n\t                }\n\t                out(">");\n\t            }\n\t        });\n\t        out.indent("endbfchar");\n\n\t        out.indent("endcmap");\n\t        out.indent("CMapName currentdict /CMap defineresource pop");\n\t        out.indent("end");\n\t        out.indent("end");\n\t    }\n\t});\n\n\t/// gradients\n\n\tfunction makeHash(a) {\n\t    return a.map(function(x){\n\t        return isArray(x) ? makeHash(x)\n\t            : typeof x == "number" ? (Math.round(x * 1000) / 1000).toFixed(3)\n\t            : x;\n\t    }).join(" ");\n\t}\n\n\tfunction cacheColorGradientFunction(pdf, r1, g1, b1, r2, g2, b2) {\n\t    var hash = makeHash([ r1, g1, b1, r2, g2, b2 ]);\n\t    var func = pdf.GRAD_COL_FUNCTIONS[hash];\n\t    if (!func) {\n\t        func = pdf.GRAD_COL_FUNCTIONS[hash] = pdf.attach(new PDFDictionary({\n\t            FunctionType: 2,\n\t            Domain: [ 0, 1 ],\n\t            Range: [ 0, 1, 0, 1, 0, 1 ],\n\t            N: 1,\n\t            C0: [ r1 , g1 , b1 ],\n\t            C1: [ r2 , g2 , b2 ]\n\t        }));\n\t    }\n\t    return func;\n\t}\n\n\tfunction cacheOpacityGradientFunction(pdf, a1, a2) {\n\t    var hash = makeHash([ a1, a2 ]);\n\t    var func = pdf.GRAD_OPC_FUNCTIONS[hash];\n\t    if (!func) {\n\t        func = pdf.GRAD_OPC_FUNCTIONS[hash] = pdf.attach(new PDFDictionary({\n\t            FunctionType: 2,\n\t            Domain: [ 0, 1 ],\n\t            Range: [ 0, 1 ],\n\t            N: 1,\n\t            C0: [ a1 ],\n\t            C1: [ a2 ]\n\t        }));\n\t    }\n\t    return func;\n\t}\n\n\tfunction makeGradientFunctions(pdf, stops) {\n\t    var hasAlpha = false;\n\t    var opacities = [];\n\t    var colors = [];\n\t    var offsets = [];\n\t    var encode = [];\n\t    var i, prev, cur, prevColor, curColor;\n\t    for (i = 1; i < stops.length; ++i) {\n\t        prev = stops[i - 1];\n\t        cur = stops[i];\n\t        prevColor = prev.color;\n\t        curColor = cur.color;\n\t        colors.push(cacheColorGradientFunction(\n\t            pdf,\n\t            prevColor.r, prevColor.g, prevColor.b,\n\t            curColor.r,  curColor.g,  curColor.b\n\t        ));\n\t        if (prevColor.a < 1 || curColor.a < 1) {\n\t            hasAlpha = true;\n\t        }\n\t        offsets.push(cur.offset);\n\t        encode.push(0, 1);\n\t    }\n\t    if (hasAlpha) {\n\t        for (i = 1; i < stops.length; ++i) {\n\t            prev = stops[i - 1];\n\t            cur = stops[i];\n\t            prevColor = prev.color;\n\t            curColor = cur.color;\n\t            opacities.push(cacheOpacityGradientFunction(\n\t                pdf, prevColor.a, curColor.a\n\t            ));\n\t        }\n\t    }\n\t    offsets.pop();\n\t    return {\n\t        hasAlpha  : hasAlpha,\n\t        colors    : assemble(colors),\n\t        opacities : hasAlpha ? assemble(opacities) : null\n\t    };\n\t    function assemble(funcs) {\n\t        if (funcs.length == 1) {\n\t            return funcs[0];\n\t        }\n\t        return {\n\t            FunctionType: 3,\n\t            Functions: funcs,\n\t            Domain: [ 0, 1 ],\n\t            Bounds: offsets,\n\t            Encode: encode\n\t        };\n\t    }\n\t}\n\n\tfunction cacheColorGradient(pdf, isRadial, stops, coords, funcs, box) {\n\t    var shading, hash;\n\t    // if box is given then we have user-space coordinates, which\n\t    // means the gradient is designed for a certain position/size\n\t    // on page.  caching won\'t do any good.\n\t    if (!box) {\n\t        var a = [ isRadial ].concat(coords);\n\t        stops.forEach(function(x){\n\t            a.push(x.offset, x.color.r, x.color.g, x.color.b);\n\t        });\n\t        hash = makeHash(a);\n\t        shading = pdf.GRAD_COL[hash];\n\t    }\n\t    if (!shading) {\n\t        shading = new PDFDictionary({\n\t            Type: _("Shading"),\n\t            ShadingType: isRadial ? 3 : 2,\n\t            ColorSpace: _("DeviceRGB"),\n\t            Coords: coords,\n\t            Domain: [ 0, 1 ],\n\t            Function: funcs,\n\t            Extend: [ true, true ]\n\t        });\n\t        pdf.attach(shading);\n\t        shading._resourceName = "S" + (++RESOURCE_COUNTER);\n\t        if (hash) {\n\t            pdf.GRAD_COL[hash] = shading;\n\t        }\n\t    }\n\t    return shading;\n\t}\n\n\tfunction cacheOpacityGradient(pdf, isRadial, stops, coords, funcs, box) {\n\t    var opacity, hash;\n\t    // if box is given then we have user-space coordinates, which\n\t    // means the gradient is designed for a certain position/size\n\t    // on page.  caching won\'t do any good.\n\t    if (!box) {\n\t        var a = [ isRadial ].concat(coords);\n\t        stops.forEach(function(x){\n\t            a.push(x.offset, x.color.a);\n\t        });\n\t        hash = makeHash(a);\n\t        opacity = pdf.GRAD_OPC[hash];\n\t    }\n\t    if (!opacity) {\n\t        opacity = new PDFDictionary({\n\t            Type: _("ExtGState"),\n\t            AIS: false,\n\t            CA: 1,\n\t            ca: 1,\n\t            SMask: {\n\t                Type: _("Mask"),\n\t                S: _("Luminosity"),\n\t                G: pdf.attach(new PDFStream("/a0 gs /s0 sh", {\n\t                    Type: _("XObject"),\n\t                    Subtype: _("Form"),\n\t                    FormType: 1,\n\t                    BBox: (box ? [\n\t                        box.left, box.top + box.height, box.left + box.width, box.top\n\t                    ] : [ 0, 1, 1, 0 ]),\n\t                    Group: {\n\t                        Type: _("Group"),\n\t                        S: _("Transparency"),\n\t                        CS: _("DeviceGray"),\n\t                        I: true\n\t                    },\n\t                    Resources: {\n\t                        ExtGState: {\n\t                            a0: { CA: 1, ca: 1 }\n\t                        },\n\t                        Shading: {\n\t                            s0: {\n\t                                ColorSpace: _("DeviceGray"),\n\t                                Coords: coords,\n\t                                Domain: [ 0, 1 ],\n\t                                ShadingType: isRadial ? 3 : 2,\n\t                                Function: funcs,\n\t                                Extend: [ true, true ]\n\t                            }\n\t                        }\n\t                    }\n\t                }))\n\t            }\n\t        });\n\t        pdf.attach(opacity);\n\t        opacity._resourceName = "O" + (++RESOURCE_COUNTER);\n\t        if (hash) {\n\t            pdf.GRAD_OPC[hash] = opacity;\n\t        }\n\t    }\n\t    return opacity;\n\t}\n\n\tfunction cacheGradient(pdf, gradient, box) {\n\t    var isRadial = gradient.type == "radial";\n\t    var funcs = makeGradientFunctions(pdf, gradient.stops);\n\t    var coords = isRadial ? [\n\t        gradient.start.x , gradient.start.y , gradient.start.r,\n\t        gradient.end.x   , gradient.end.y   , gradient.end.r\n\t    ] : [\n\t        gradient.start.x , gradient.start.y,\n\t        gradient.end.x   , gradient.end.y\n\t    ];\n\t    var shading = cacheColorGradient(\n\t        pdf, isRadial, gradient.stops, coords, funcs.colors, gradient.userSpace && box\n\t    );\n\t    var opacity = funcs.hasAlpha ? cacheOpacityGradient(\n\t        pdf, isRadial, gradient.stops, coords, funcs.opacities, gradient.userSpace && box\n\t    ) : null;\n\t    return {\n\t        hasAlpha: funcs.hasAlpha,\n\t        shading: shading,\n\t        opacity: opacity\n\t    };\n\t}\n\n\t/// page object\n\n\tvar PDFPage = defclass(function PDFPage(pdf, props){\n\t    this._pdf = pdf;\n\t    this._rcount = 0;\n\t    this._textMode = false;\n\t    this._fontResources = {};\n\t    this._gsResources = {};\n\t    this._xResources = {};\n\t    this._patResources = {};\n\t    this._shResources = {};\n\t    this._opacity = 1;\n\t    this._matrix = [ 1, 0, 0, 1, 0, 0 ];\n\t    this._annotations = [];\n\n\t    this._font = null;\n\t    this._fontSize = null;\n\n\t    this._contextStack = [];\n\n\t    props = this.props = props || {};\n\t    props.Type = _("Page");\n\t    props.ProcSet = [\n\t        _("PDF"),\n\t        _("Text"),\n\t        _("ImageB"),\n\t        _("ImageC"),\n\t        _("ImageI")\n\t    ];\n\t    props.Resources = new PDFDictionary({\n\t        Font      : new PDFDictionary(this._fontResources),\n\t        ExtGState : new PDFDictionary(this._gsResources),\n\t        XObject   : new PDFDictionary(this._xResources),\n\t        Pattern   : new PDFDictionary(this._patResources),\n\t        Shading   : new PDFDictionary(this._shResources)\n\t    });\n\t    props.Annots = this._annotations;\n\t}, {\n\t    _out: function() {\n\t        this._content.data.apply(null, arguments);\n\t    },\n\t    transform: function(a, b, c, d, e, f) {\n\t        if (!isIdentityMatrix(arguments)) {\n\t            this._matrix = mmul(arguments, this._matrix);\n\t            this._out(a, " ", b, " ", c, " ", d, " ", e, " ", f, " cm");\n\t            // XXX: debug\n\t            // this._out(" % current matrix: ", this._matrix);\n\t            this._out(NL);\n\t        }\n\t    },\n\t    translate: function(dx, dy) {\n\t        this.transform(1, 0, 0, 1, dx, dy);\n\t    },\n\t    scale: function(sx, sy) {\n\t        this.transform(sx, 0, 0, sy, 0, 0);\n\t    },\n\t    rotate: function(angle) {\n\t        var cos = Math.cos(angle), sin = Math.sin(angle);\n\t        this.transform(cos, sin, -sin, cos, 0, 0);\n\t    },\n\t    beginText: function() {\n\t        this._textMode = true;\n\t        this._out("BT", NL);\n\t    },\n\t    endText: function() {\n\t        this._textMode = false;\n\t        this._out("ET", NL);\n\t    },\n\t    _requireTextMode: function() {\n\t        if (!this._textMode) {\n\t            throw new Error("Text mode required; call page.beginText() first");\n\t        }\n\t    },\n\t    _requireFont: function() {\n\t        if (!this._font) {\n\t            throw new Error("No font selected; call page.setFont() first");\n\t        }\n\t    },\n\t    setFont: function(font, size) {\n\t        this._requireTextMode();\n\t        if (font == null) {\n\t            font = this._font;\n\t        } else if (!(font instanceof PDFFont)) {\n\t            font = this._pdf.getFont(font);\n\t        }\n\t        if (size == null) {\n\t            size = this._fontSize;\n\t        }\n\t        this._fontResources[font._resourceName] = font;\n\t        this._font = font;\n\t        this._fontSize = size;\n\t        this._out(font._resourceName, " ", size, " Tf", NL);\n\t    },\n\t    setTextLeading: function(size) {\n\t        this._requireTextMode();\n\t        this._out(size, " TL", NL);\n\t    },\n\t    setTextRenderingMode: function(mode) {\n\t        this._requireTextMode();\n\t        this._out(mode, " Tr", NL);\n\t    },\n\t    showText: function(text, requestedWidth) {\n\t        this._requireFont();\n\t        if (text.length > 1 && requestedWidth && this._font instanceof PDFFont) {\n\t            var outputWidth = this._font.getTextWidth(this._fontSize, text);\n\t            var scale = requestedWidth / outputWidth * 100;\n\t            this._out(scale, " Tz ");\n\t        }\n\t        this._out(this._font.encodeText(text), " Tj", NL);\n\t    },\n\t    showTextNL: function(text) {\n\t        this._requireFont();\n\t        this._out(this._font.encodeText(text), " \'", NL);\n\t    },\n\t    addLink: function(uri, box) {\n\t        var ll = this._toPage({ x: box.left, y: box.bottom });\n\t        var ur = this._toPage({ x: box.right, y: box.top });\n\t        this._annotations.push(new PDFDictionary({\n\t            Type    : _("Annot"),\n\t            Subtype : _("Link"),\n\t            Rect    : [ ll.x, ll.y, ur.x, ur.y ],\n\t            Border  : [ 0, 0, 0 ],\n\t            A       : new PDFDictionary({\n\t                Type : _("Action"),\n\t                S    : _("URI"),\n\t                URI  : new PDFString(uri)\n\t            })\n\t        }));\n\t    },\n\t    setStrokeColor: function(r, g, b) {\n\t        this._out(r, " ", g, " ", b, " RG", NL);\n\t    },\n\t    setOpacity: function(opacity) {\n\t        this.setFillOpacity(opacity);\n\t        this.setStrokeOpacity(opacity);\n\t        this._opacity *= opacity;\n\t    },\n\t    setStrokeOpacity: function(opacity) {\n\t        if (opacity < 1) {\n\t            var gs = this._pdf.getOpacityGS(this._opacity * opacity, true);\n\t            this._gsResources[gs._resourceName] = gs;\n\t            this._out(gs._resourceName, " gs", NL);\n\t        }\n\t    },\n\t    setFillColor: function(r, g, b) {\n\t        this._out(r, " ", g, " ", b, " rg", NL);\n\t    },\n\t    setFillOpacity: function(opacity) {\n\t        if (opacity < 1) {\n\t            var gs = this._pdf.getOpacityGS(this._opacity * opacity, false);\n\t            this._gsResources[gs._resourceName] = gs;\n\t            this._out(gs._resourceName, " gs", NL);\n\t        }\n\t    },\n\t    gradient: function(gradient, box) {\n\t        this.save();\n\t        this.rect(box.left, box.top, box.width, box.height);\n\t        this.clip();\n\t        if (!gradient.userSpace) {\n\t            this.transform(box.width, 0, 0, box.height, box.left, box.top);\n\t        }\n\t        var g = cacheGradient(this._pdf, gradient, box);\n\t        var sname = g.shading._resourceName, oname;\n\t        this._shResources[sname] = g.shading;\n\t        if (g.hasAlpha) {\n\t            oname = g.opacity._resourceName;\n\t            this._gsResources[oname] = g.opacity;\n\t            this._out("/" + oname + " gs ");\n\t        }\n\t        this._out("/" + sname + " sh", NL);\n\t        this.restore();\n\t    },\n\t    setDashPattern: function(dashArray, dashPhase) {\n\t        this._out(dashArray, " ", dashPhase, " d", NL);\n\t    },\n\t    setLineWidth: function(width) {\n\t        this._out(width, " w", NL);\n\t    },\n\t    setLineCap: function(lineCap) {\n\t        this._out(lineCap, " J", NL);\n\t    },\n\t    setLineJoin: function(lineJoin) {\n\t        this._out(lineJoin, " j", NL);\n\t    },\n\t    setMitterLimit: function(mitterLimit) {\n\t        this._out(mitterLimit, " M", NL);\n\t    },\n\t    save: function() {\n\t        this._contextStack.push(this._context());\n\t        this._out("q", NL);\n\t    },\n\t    restore: function() {\n\t        this._out("Q", NL);\n\t        this._context(this._contextStack.pop());\n\t    },\n\n\t    // paths\n\t    moveTo: function(x, y) {\n\t        this._out(x, " ", y, " m", NL);\n\t    },\n\t    lineTo: function(x, y) {\n\t        this._out(x, " ", y, " l", NL);\n\t    },\n\t    bezier: function(x1, y1, x2, y2, x3, y3) {\n\t        this._out(x1, " ", y1, " ", x2, " ", y2, " ", x3, " ", y3, " c", NL);\n\t    },\n\t    bezier1: function(x1, y1, x3, y3) {\n\t        this._out(x1, " ", y1, " ", x3, " ", y3, " y", NL);\n\t    },\n\t    bezier2: function(x2, y2, x3, y3) {\n\t        this._out(x2, " ", y2, " ", x3, " ", y3, " v", NL);\n\t    },\n\t    close: function() {\n\t        this._out("h", NL);\n\t    },\n\t    rect: function(x, y, w, h) {\n\t        this._out(x, " ", y, " ", w, " ", h, " re", NL);\n\t    },\n\t    ellipse: function(x, y, rx, ry) {\n\t        function _X(v) { return x + v; }\n\t        function _Y(v) { return y + v; }\n\n\t        // how to get to the "magic number" is explained here:\n\t        // http://www.whizkidtech.redprince.net/bezier/circle/kappa/\n\t        var k = 0.5522847498307936;\n\n\t        this.moveTo(_X(0), _Y(ry));\n\t        this.bezier(\n\t            _X(rx * k) , _Y(ry),\n\t            _X(rx)     , _Y(ry * k),\n\t            _X(rx)     , _Y(0)\n\t        );\n\t        this.bezier(\n\t            _X(rx)     , _Y(-ry * k),\n\t            _X(rx * k) , _Y(-ry),\n\t            _X(0)      , _Y(-ry)\n\t        );\n\t        this.bezier(\n\t            _X(-rx * k) , _Y(-ry),\n\t            _X(-rx)     , _Y(-ry * k),\n\t            _X(-rx)     , _Y(0)\n\t        );\n\t        this.bezier(\n\t            _X(-rx)     , _Y(ry * k),\n\t            _X(-rx * k) , _Y(ry),\n\t            _X(0)       , _Y(ry)\n\t        );\n\t    },\n\t    circle: function(x, y, r) {\n\t        this.ellipse(x, y, r, r);\n\t    },\n\t    stroke: function() {\n\t        this._out("S", NL);\n\t    },\n\t    nop: function() {\n\t        this._out("n", NL);\n\t    },\n\t    clip: function() {\n\t        this._out("W n", NL);\n\t    },\n\t    clipStroke: function() {\n\t        this._out("W S", NL);\n\t    },\n\t    closeStroke: function() {\n\t        this._out("s", NL);\n\t    },\n\t    fill: function() {\n\t        this._out("f", NL);\n\t    },\n\t    fillStroke: function() {\n\t        this._out("B", NL);\n\t    },\n\t    drawImage: function(url) {\n\t        var img = this._pdf.getImage(url);\n\t        if (img) { // the result can be null for a cross-domain image\n\t            this._xResources[img._resourceName] = img;\n\t            this._out(img._resourceName, " Do", NL);\n\t        }\n\t    },\n\t    comment: function(txt) {\n\t        var self = this;\n\t        txt.split(/\\r?\\n/g).forEach(function(line){\n\t            self._out("% ", line, NL);\n\t        });\n\t    },\n\n\t    // internal\n\t    _context: function(val) {\n\t        if (val != null) {\n\t            this._opacity = val.opacity;\n\t            this._matrix = val.matrix;\n\t        } else {\n\t            return {\n\t                opacity: this._opacity,\n\t                matrix: this._matrix\n\t            };\n\t        }\n\t    },\n\n\t    _toPage: function(p) {\n\t        var m = this._matrix;\n\t        var a = m[0], b = m[1], c = m[2], d = m[3], e = m[4], f = m[5];\n\t        return {\n\t            x: a*p.x + c*p.y + e,\n\t            y: b*p.x + d*p.y + f\n\t        };\n\t    }\n\t}, PDFDictionary);\n\n\tfunction unquote(str) {\n\t    return str.replace(/^\\s*([\'"])(.*)\\1\\s*$/, "$2");\n\t}\n\n\tfunction parseFontDef(fontdef) {\n\t    // XXX: this is very crude for now and buggy.  Proper parsing is quite involved.\n\t    var rx = /^\\s*((normal|italic)\\s+)?((normal|small-caps)\\s+)?((normal|bold|\\d+)\\s+)?(([0-9.]+)(px|pt))(\\/(([0-9.]+)(px|pt)|normal))?\\s+(.*?)\\s*$/i;\n\t    var m = rx.exec(fontdef);\n\t    if (!m) {\n\t        return { fontSize: 12, fontFamily: "sans-serif" };\n\t    }\n\t    var fontSize = m[8] ? parseInt(m[8], 10) : 12;\n\t    return {\n\t        italic     : m[2] && m[2].toLowerCase() == "italic",\n\t        variant    : m[4],\n\t        bold       : m[6] && /bold|700/i.test(m[6]),\n\t        fontSize   : fontSize,\n\t        lineHeight : m[12] ? m[12] == "normal" ? fontSize : parseInt(m[12], 10) : null,\n\t        fontFamily : m[14].split(/\\s*,\\s*/g).map(unquote)\n\t    };\n\t}\n\n\tfunction getFontURL(style) {\n\t    function mkFamily(name) {\n\t        if (style.bold) {\n\t            name += "|bold";\n\t        }\n\t        if (style.italic) {\n\t            name += "|italic";\n\t        }\n\t        return name.toLowerCase();\n\t    }\n\t    var fontFamily = style.fontFamily;\n\t    var name, url;\n\t    if (fontFamily instanceof Array) {\n\t        for (var i = 0; i < fontFamily.length; ++i) {\n\t            name = mkFamily(fontFamily[i]);\n\t            url = FONT_MAPPINGS[name];\n\t            if (url) {\n\t                break;\n\t            }\n\t        }\n\t    } else {\n\t        url = FONT_MAPPINGS[fontFamily.toLowerCase()];\n\t    }\n\t    while (typeof url == "function") {\n\t        url = url();\n\t    }\n\t    if (!url) {\n\t        url = "Times-Roman";\n\t    }\n\t    return url;\n\t}\n\n\tvar FONT_MAPPINGS = {\n\t    "serif"                    : "Times-Roman",\n\t    "serif|bold"               : "Times-Bold",\n\t    "serif|italic"             : "Times-Italic",\n\t    "serif|bold|italic"        : "Times-BoldItalic",\n\t    "sans-serif"               : "Helvetica",\n\t    "sans-serif|bold"          : "Helvetica-Bold",\n\t    "sans-serif|italic"        : "Helvetica-Oblique",\n\t    "sans-serif|bold|italic"   : "Helvetica-BoldOblique",\n\t    "monospace"                : "Courier",\n\t    "monospace|bold"           : "Courier-Bold",\n\t    "monospace|italic"         : "Courier-Oblique",\n\t    "monospace|bold|italic"    : "Courier-BoldOblique",\n\t    "zapfdingbats"             : "ZapfDingbats",\n\t    "zapfdingbats|bold"        : "ZapfDingbats",\n\t    "zapfdingbats|italic"      : "ZapfDingbats",\n\t    "zapfdingbats|bold|italic" : "ZapfDingbats"\n\t};\n\n\tfunction fontAlias(alias, name) {\n\t    alias = alias.toLowerCase();\n\t    FONT_MAPPINGS[alias] = function() {\n\t        return FONT_MAPPINGS[name];\n\t    };\n\t    FONT_MAPPINGS[alias + "|bold"] = function() {\n\t        return FONT_MAPPINGS[name + "|bold"];\n\t    };\n\t    FONT_MAPPINGS[alias + "|italic"] = function() {\n\t        return FONT_MAPPINGS[name + "|italic"];\n\t    };\n\t    FONT_MAPPINGS[alias + "|bold|italic"] = function() {\n\t        return FONT_MAPPINGS[name + "|bold|italic"];\n\t    };\n\t}\n\n\t// Let\'s define some common names to an appropriate replacement.\n\t// These are overridable via pdf.defineFont, should the user want to\n\t// include the proper versions.\n\n\tfontAlias("Times New Roman" , "serif");\n\tfontAlias("Courier New"     , "monospace");\n\tfontAlias("Arial"           , "sans-serif");\n\tfontAlias("Helvetica"       , "sans-serif");\n\tfontAlias("Verdana"         , "sans-serif");\n\tfontAlias("Tahoma"          , "sans-serif");\n\tfontAlias("Georgia"         , "sans-serif");\n\tfontAlias("Monaco"          , "monospace");\n\tfontAlias("Andale Mono"     , "monospace");\n\n\tfunction defineFont(name, url) {\n\t    if (arguments.length == 1) {\n\t        for (var i in name) {\n\t            if (hasOwnProperty(name, i)) {\n\t                defineFont(i, name[i]);\n\t            }\n\t        }\n\t    } else {\n\t        name = name.toLowerCase();\n\t        FONT_MAPPINGS[name] = url;\n\n\t        // special handling for DejaVu fonts: if they get defined,\n\t        // let them also replace the default families, for good\n\t        // Unicode support out of the box.\n\t        switch (name) {\n\t          case "dejavu sans"               : FONT_MAPPINGS["sans-serif"]              = url; break;\n\t          case "dejavu sans|bold"          : FONT_MAPPINGS["sans-serif|bold"]         = url; break;\n\t          case "dejavu sans|italic"        : FONT_MAPPINGS["sans-serif|italic"]       = url; break;\n\t          case "dejavu sans|bold|italic"   : FONT_MAPPINGS["sans-serif|bold|italic"]  = url; break;\n\t          case "dejavu serif"              : FONT_MAPPINGS["serif"]                   = url; break;\n\t          case "dejavu serif|bold"         : FONT_MAPPINGS["serif|bold"]              = url; break;\n\t          case "dejavu serif|italic"       : FONT_MAPPINGS["serif|italic"]            = url; break;\n\t          case "dejavu serif|bold|italic"  : FONT_MAPPINGS["serif|bold|italic"]       = url; break;\n\t          case "dejavu mono"               : FONT_MAPPINGS["monospace"]               = url; break;\n\t          case "dejavu mono|bold"          : FONT_MAPPINGS["monospace|bold"]          = url; break;\n\t          case "dejavu mono|italic"        : FONT_MAPPINGS["monospace|italic"]        = url; break;\n\t          case "dejavu mono|bold|italic"   : FONT_MAPPINGS["monospace|bold|italic"]   = url; break;\n\t        }\n\t    }\n\t}\n\n\tfunction mmul(a, b) {\n\t    var a1 = a[0], b1 = a[1], c1 = a[2], d1 = a[3], e1 = a[4], f1 = a[5];\n\t    var a2 = b[0], b2 = b[1], c2 = b[2], d2 = b[3], e2 = b[4], f2 = b[5];\n\t    return [\n\t        a1*a2 + b1*c2,          a1*b2 + b1*d2,\n\t        c1*a2 + d1*c2,          c1*b2 + d1*d2,\n\t        e1*a2 + f1*c2 + e2,     e1*b2 + f1*d2 + f2\n\t    ];\n\t}\n\n\tfunction isIdentityMatrix(m) {\n\t    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0;\n\t}\n\n\tvar TEXT_RENDERING_MODE = {\n\t    fill           : 0,\n\t    stroke         : 1,\n\t    fillAndStroke  : 2,\n\t    invisible      : 3,\n\t    fillAndClip    : 4,\n\t    strokeAndClip  : 5,\n\t    fillStrokeClip : 6,\n\t    clip           : 7\n\t};\n\n\t/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */\n\t/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */\n\t/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */\n\t/* eslint-disable no-param-reassign, no-var, block-scoped-var */\n\n\tvar TEXT_RENDERING_MODE$1 = TEXT_RENDERING_MODE;\n\n\tvar DASH_PATTERNS = {\n\t    dash           : [ 4 ],\n\t    dashDot        : [ 4, 2, 1, 2 ],\n\t    dot            : [ 1, 2 ],\n\t    longDash       : [ 8, 2 ],\n\t    longDashDot    : [ 8, 2, 1, 2 ],\n\t    longDashDotDot : [ 8, 2, 1, 2, 1, 2 ],\n\t    solid          : []\n\t};\n\n\tvar LINE_CAP = {\n\t    butt   : 0,\n\t    round  : 1,\n\t    square : 2\n\t};\n\n\tvar LINE_JOIN = {\n\t    miter : 0,\n\t    round : 1,\n\t    bevel : 2\n\t};\n\n\tfunction render(group, callback) {\n\t    var fonts = [], images = {}, options = group.options;\n\n\t    function getOption(name, defval, hash) {\n\t        if (!hash) {\n\t            hash = options;\n\t        }\n\t        if (hash.pdf && hash.pdf[name] != null) {\n\t            return hash.pdf[name];\n\t        }\n\t        return defval;\n\t    }\n\n\t    var multiPage = getOption("multiPage");\n\t    var imgDPI = getOption("imgDPI");\n\n\t    if (imgDPI) {\n\t        clearImageCache();\n\t    }\n\n\t    group.traverse(function(element){\n\t        dispatch({\n\t            Image: function(element) {\n\t                var url = element.src();\n\t                if (imgDPI) {\n\t                    var box = element.bbox().size;\n\t                    var prev = images[url];\n\t                    box = {\n\t                        width: Math.ceil(box.width * imgDPI / 72),\n\t                        height: Math.ceil(box.height * imgDPI / 72)\n\t                    };\n\t                    if (prev) {\n\t                        box.width = Math.max(prev.width, box.width);\n\t                        box.height = Math.max(prev.height, box.height);\n\t                    }\n\t                    images[url] = box;\n\t                } else {\n\t                    images[url] = null;\n\t                }\n\t            },\n\t            Text: function(element) {\n\t                var style = parseFontDef(element.options.font);\n\t                var url = getFontURL(style);\n\t                if (fonts.indexOf(url) < 0) {\n\t                    fonts.push(url);\n\t                }\n\t            }\n\t        }, element);\n\t    });\n\n\t    function doIt() {\n\t        if (--count > 0) {\n\t            return;\n\t        }\n\n\t        var pdf = new (PDFDocument)({\n\t            producer  : getOption("producer"),\n\t            title     : getOption("title"),\n\t            author    : getOption("author"),\n\t            subject   : getOption("subject"),\n\t            keywords  : getOption("keywords"),\n\t            creator   : getOption("creator"),\n\t            date      : getOption("date"),\n\n\t            autoPrint : getOption("autoPrint")\n\t        });\n\n\t        function drawPage(group) {\n\t            var options = group.options;\n\n\t            var tmp = optimize(group);\n\t            var bbox = tmp.bbox;\n\t            group = tmp.root;\n\t            // var tmp, bbox;\n\n\t            var paperSize = getOption("paperSize", getOption("paperSize", "auto"), options), addMargin = false;\n\t            if (paperSize == "auto") {\n\t                if (bbox) {\n\t                    var size = bbox.getSize();\n\t                    paperSize = [ size.width, size.height ];\n\t                    addMargin = true;\n\t                    var origin = bbox.getOrigin();\n\t                    tmp = new drawing.Group();\n\t                    tmp.transform(new kendoGeometry.Matrix(1, 0, 0, 1, -origin.x, -origin.y));\n\t                    tmp.append(group);\n\t                    group = tmp;\n\t                }\n\t                else {\n\t                    paperSize = "A4";\n\t                }\n\t            }\n\n\t            var page;\n\t            page = pdf.addPage({\n\t                paperSize : paperSize,\n\t                margin    : getOption("margin", getOption("margin"), options),\n\t                addMargin : addMargin,\n\t                landscape : getOption("landscape", getOption("landscape", false), options)\n\t            });\n\t            drawElement(group, page, pdf);\n\t        }\n\n\t        if (multiPage) {\n\t            group.children.forEach(drawPage);\n\t        } else {\n\t            drawPage(group);\n\t        }\n\n\t        callback(pdf.render(), pdf);\n\t    }\n\n\t    var count = 2;\n\t    loadFonts(fonts, doIt);\n\t    loadImages(images, doIt);\n\t}\n\n\tfunction toDataURL(group, callback) {\n\t    render(group, function(data){\n\t        callback("data:application/pdf;base64," + data.base64());\n\t    });\n\t}\n\n\tfunction toBlob(group, callback) {\n\t    render(group, function(data){\n\t        callback(new window.Blob([ data.get() ], { type: "application/pdf" }));\n\t    });\n\t}\n\n\tfunction saveAs$1(group, filename, proxy, callback) {\n\t    // XXX: Safari has Blob, but does not support the download attribute\n\t    //      so we\'d end up converting to dataURL and using the proxy anyway.\n\t    if (window.Blob && !supportBrowser.safari) {\n\t        toBlob(group, function(blob){\n\t            kendo.saveAs({ dataURI: blob, fileName: filename });\n\t            if (callback) {\n\t                callback(blob);\n\t            }\n\t        });\n\t    } else {\n\t        toDataURL(group, function(dataURL){\n\t            kendo.saveAs({ dataURI: dataURL, fileName: filename, proxyURL: proxy });\n\t            if (callback) {\n\t                callback(dataURL);\n\t            }\n\t        });\n\t    }\n\t}\n\n\tfunction dispatch(handlers, element) {\n\t    var handler = handlers[element.nodeType];\n\t    if (handler) {\n\t        return handler.call.apply(handler, arguments);\n\t    }\n\t    return element;\n\t}\n\n\tfunction drawElement(element, page, pdf) {\n\t    if (element.options._pdfDebug) {\n\t        page.comment("BEGIN: " + element.options._pdfDebug);\n\t    }\n\n\t    var transform = element.transform();\n\t    var opacity = element.opacity();\n\n\t    page.save();\n\n\t    if (opacity != null && opacity < 1) {\n\t        page.setOpacity(opacity);\n\t    }\n\n\t    setStrokeOptions(element, page, pdf);\n\t    setFillOptions(element, page, pdf);\n\n\t    if (transform) {\n\t        var m = transform.matrix();\n\t        page.transform(m.a, m.b, m.c, m.d, m.e, m.f);\n\t    }\n\n\t    setClipping(element, page, pdf);\n\n\t    dispatch({\n\t        Path      : drawPath,\n\t        MultiPath : drawMultiPath,\n\t        Circle    : drawCircle,\n\t        Arc       : drawArc,\n\t        Text      : drawText,\n\t        Image     : drawImage,\n\t        Group     : drawGroup,\n\t        Rect      : drawRect\n\t    }, element, page, pdf);\n\n\t    page.restore();\n\n\t    if (element.options._pdfDebug) {\n\t        page.comment("END: " + element.options._pdfDebug);\n\t    }\n\t}\n\n\tfunction setStrokeOptions(element, page) {\n\t    var stroke = element.stroke && element.stroke();\n\t    if (!stroke) {\n\t        return;\n\t    }\n\n\t    var color = stroke.color;\n\t    if (color) {\n\t        color = parseColor$1(color);\n\t        if (color == null) {\n\t            return; // no stroke\n\t        }\n\t        page.setStrokeColor(color.r, color.g, color.b);\n\t        if (color.a != 1) {\n\t            page.setStrokeOpacity(color.a);\n\t        }\n\t    }\n\n\t    var width = stroke.width;\n\t    if (width != null) {\n\t        if (width === 0) {\n\t            return; // no stroke\n\t        }\n\t        page.setLineWidth(width);\n\t    }\n\n\t    var dashType = stroke.dashType;\n\t    if (dashType) {\n\t        page.setDashPattern(DASH_PATTERNS[dashType], 0);\n\t    }\n\n\t    var lineCap = stroke.lineCap;\n\t    if (lineCap) {\n\t        page.setLineCap(LINE_CAP[lineCap]);\n\t    }\n\n\t    var lineJoin = stroke.lineJoin;\n\t    if (lineJoin) {\n\t        page.setLineJoin(LINE_JOIN[lineJoin]);\n\t    }\n\n\t    var opacity = stroke.opacity;\n\t    if (opacity != null) {\n\t        page.setStrokeOpacity(opacity);\n\t    }\n\t}\n\n\tfunction setFillOptions(element, page) {\n\t    var fill = element.fill && element.fill();\n\t    if (!fill) {\n\t        return;\n\t    }\n\n\t    if (fill instanceof drawing.Gradient) {\n\t        return;\n\t    }\n\n\t    var color = fill.color;\n\t    if (color) {\n\t        color = parseColor$1(color);\n\t        if (color == null) {\n\t            return; // no fill\n\t        }\n\t        page.setFillColor(color.r, color.g, color.b);\n\t        if (color.a != 1) {\n\t            page.setFillOpacity(color.a);\n\t        }\n\t    }\n\n\t    var opacity = fill.opacity;\n\t    if (opacity != null) {\n\t        page.setFillOpacity(opacity);\n\t    }\n\t}\n\n\tfunction setClipping(element, page, pdf) {\n\t    // XXX: only Path supported at the moment.\n\t    var clip = element.clip();\n\t    if (clip) {\n\t        _drawPath(clip, page, pdf);\n\t        page.clip();\n\t        // page.setStrokeColor(Math.random(), Math.random(), Math.random());\n\t        // page.setLineWidth(1);\n\t        // page.stroke();\n\t    }\n\t}\n\n\tfunction shouldDraw(thing) {\n\t    return (thing &&\n\t            (thing instanceof drawing.Gradient ||\n\t             (thing.color && !/^(none|transparent)$/i.test(thing.color) &&\n\t              (thing.width == null || thing.width > 0) &&\n\t              (thing.opacity == null || thing.opacity > 0))));\n\t}\n\n\tfunction maybeGradient(element, page, pdf, stroke) {\n\t    var fill = element.fill();\n\t    if (fill instanceof drawing.Gradient) {\n\t        if (stroke) {\n\t            page.clipStroke();\n\t        } else {\n\t            page.clip();\n\t        }\n\t        var isRadial = fill instanceof drawing.RadialGradient;\n\t        var start, end;\n\t        if (isRadial) {\n\t            start = { x: fill.center().x , y: fill.center().y , r: 0 };\n\t            end   = { x: fill.center().x , y: fill.center().y , r: fill.radius() };\n\t        } else {\n\t            start = { x: fill.start().x , y: fill.start().y };\n\t            end   = { x: fill.end().x   , y: fill.end().y   };\n\t        }\n\n\t        var stops = fill.stops.elements().map(function(stop){\n\t            var offset = stop.offset();\n\t            if (/%$/.test(offset)) {\n\t                offset = parseFloat(offset) / 100;\n\t            } else {\n\t                offset = parseFloat(offset);\n\t            }\n\t            var color = parseColor$1(stop.color());\n\t            color.a *= stop.opacity();\n\t            return {\n\t                offset: offset,\n\t                color: color\n\t            };\n\t        });\n\n\t        // Duplicats first and last stop to fix\n\t        // https://github.com/telerik/kendo-ui-core/issues/1782\n\t        stops.unshift(stops[0]);\n\t        stops.push(stops[stops.length - 1]);\n\n\t        var gradient = {\n\t            userSpace : fill.userSpace(),\n\t            type      : isRadial ? "radial" : "linear",\n\t            start     : start,\n\t            end       : end,\n\t            stops     : stops\n\t        };\n\t        var box = element.rawBBox();\n\t        var tl = box.topLeft(), size = box.getSize();\n\t        box = {\n\t            left   : tl.x,\n\t            top    : tl.y,\n\t            width  : size.width,\n\t            height : size.height\n\t        };\n\t        page.gradient(gradient, box);\n\t        return true;\n\t    }\n\t}\n\n\tfunction maybeFillStroke(element, page, pdf) {\n\t    if (shouldDraw(element.fill()) && shouldDraw(element.stroke())) {\n\t        if (!maybeGradient(element, page, pdf, true)) {\n\t            page.fillStroke();\n\t        }\n\t    } else if (shouldDraw(element.fill())) {\n\t        if (!maybeGradient(element, page, pdf, false)) {\n\t            page.fill();\n\t        }\n\t    } else if (shouldDraw(element.stroke())) {\n\t        page.stroke();\n\t    } else {\n\t        // we should not get here; the path should have been\n\t        // optimized away.  but let\'s be prepared.\n\t        page.nop();\n\t    }\n\t}\n\n\tfunction maybeDrawRect(path, page) {\n\t    var segments = path.segments;\n\t    if (segments.length == 4 && path.options.closed) {\n\t        // detect if this path looks like a rectangle parallel to the axis\n\t        var a = [];\n\t        for (var i = 0; i < segments.length; ++i) {\n\t            if (segments[i].controlIn()) { // has curve?\n\t                return false;\n\t            }\n\t            a[i] = segments[i].anchor();\n\t        }\n\t        // it\'s a rectangle if the y/x/y/x or x/y/x/y coords of\n\t        // consecutive points are the same.\n\t        var isRect = (\n\t            a[0].y == a[1].y && a[1].x == a[2].x && a[2].y == a[3].y && a[3].x == a[0].x\n\t        ) || (\n\t            a[0].x == a[1].x && a[1].y == a[2].y && a[2].x == a[3].x && a[3].y == a[0].y\n\t        );\n\t        if (isRect) {\n\t            // this saves a bunch of instructions in PDF:\n\t            // moveTo, lineTo, lineTo, lineTo, close -> rect.\n\t            page.rect(a[0].x, a[0].y,\n\t                      a[2].x - a[0].x /*width*/,\n\t                      a[2].y - a[0].y /*height*/);\n\t            return true;\n\t        }\n\t    }\n\t}\n\n\tfunction _drawPath(element, page, pdf) {\n\t    var segments = element.segments;\n\t    if (segments.length === 0) {\n\t        return;\n\t    }\n\t    if (!maybeDrawRect(element, page, pdf)) {\n\t        for (var prev, i = 0; i < segments.length; ++i) {\n\t            var seg = segments[i];\n\t            var anchor = seg.anchor();\n\t            if (!prev) {\n\t                page.moveTo(anchor.x, anchor.y);\n\t            } else {\n\t                var prevOut = prev.controlOut();\n\t                var controlIn = seg.controlIn();\n\t                if (prevOut && controlIn) {\n\t                    page.bezier(\n\t                        prevOut.x   , prevOut.y,\n\t                        controlIn.x , controlIn.y,\n\t                        anchor.x    , anchor.y\n\t                    );\n\t                } else {\n\t                    page.lineTo(anchor.x, anchor.y);\n\t                }\n\t            }\n\t            prev = seg;\n\t        }\n\t        if (element.options.closed) {\n\t            page.close();\n\t        }\n\t    }\n\t}\n\n\tfunction drawPath(element, page, pdf) {\n\t    _drawPath(element, page, pdf);\n\t    maybeFillStroke(element, page, pdf);\n\t}\n\n\tfunction drawMultiPath(element, page, pdf) {\n\t    var paths = element.paths;\n\t    for (var i = 0; i < paths.length; ++i) {\n\t        _drawPath(paths[i], page, pdf);\n\t    }\n\t    maybeFillStroke(element, page, pdf);\n\t}\n\n\tfunction drawCircle(element, page, pdf) {\n\t    var g = element.geometry();\n\t    page.circle(g.center.x, g.center.y, g.radius);\n\t    maybeFillStroke(element, page, pdf);\n\t}\n\n\tfunction drawArc(element, page, pdf) {\n\t    var points = element.geometry().curvePoints();\n\t    page.moveTo(points[0].x, points[0].y);\n\t    for (var i = 1; i < points.length;) {\n\t        page.bezier(\n\t            points[i].x, points[i++].y,\n\t            points[i].x, points[i++].y,\n\t            points[i].x, points[i++].y\n\t        );\n\t    }\n\t    maybeFillStroke(element, page, pdf);\n\t}\n\n\tfunction drawText(element, page) {\n\t    var style = parseFontDef(element.options.font);\n\t    var pos = element._position;\n\t    var mode;\n\t    if (element.fill() && element.stroke()) {\n\t        mode = TEXT_RENDERING_MODE$1.fillAndStroke;\n\t    } else if (element.fill()) {\n\t        mode = TEXT_RENDERING_MODE$1.fill;\n\t    } else if (element.stroke()) {\n\t        mode = TEXT_RENDERING_MODE$1.stroke;\n\t    }\n\n\t    page.transform(1, 0, 0, -1, pos.x, pos.y + style.fontSize);\n\t    page.beginText();\n\t    page.setFont(getFontURL(style), style.fontSize);\n\t    page.setTextRenderingMode(mode);\n\t    page.showText(element.content(), element._pdfRect ? element._pdfRect.width() : null);\n\t    page.endText();\n\t}\n\n\tfunction drawGroup(element, page, pdf) {\n\t    if (element._pdfLink) {\n\t        page.addLink(element._pdfLink.url, element._pdfLink);\n\t    }\n\t    var children = element.children;\n\t    for (var i = 0; i < children.length; ++i) {\n\t        drawElement(children[i], page, pdf);\n\t    }\n\t}\n\n\tfunction drawImage(element, page) {\n\t    var url = element.src();\n\t    if (!url) {\n\t        return;\n\t    }\n\n\t    var rect = element.rect();\n\t    var tl = rect.getOrigin();\n\t    var sz = rect.getSize();\n\t    page.transform(sz.width, 0, 0, -sz.height, tl.x, tl.y + sz.height);\n\t    page.drawImage(url);\n\t}\n\n\tfunction drawRect(element, page, pdf) {\n\t    var geometry = element.geometry();\n\t    page.rect(geometry.origin.x, geometry.origin.y, geometry.size.width, geometry.size.height);\n\t    maybeFillStroke(element, page, pdf);\n\t}\n\n\tfunction parseColor$1(value) {\n\t    var color = kendo.parseColor(value, true);\n\t    return color ? color.toRGB() : null;\n\t}\n\n\tfunction optimize(root) {\n\t    var clipbox = false;\n\t    var matrix = kendoGeometry.Matrix.unit();\n\t    var currentBox = null;\n\t    var changed;\n\t    do {\n\t        changed = false;\n\t        root = opt(root);\n\t    } while (root && changed);\n\t    return { root: root, bbox: currentBox };\n\n\t    function change(newShape) {\n\t        changed = true;\n\t        return newShape;\n\t    }\n\n\t    function visible(shape) {\n\t        return (shape.visible() && shape.opacity() > 0 &&\n\t                ( shouldDraw(shape.fill()) ||\n\t                  shouldDraw(shape.stroke()) ));\n\t    }\n\n\t    function optArray(a) {\n\t        var b = [];\n\t        for (var i = 0; i < a.length; ++i) {\n\t            var el = opt(a[i]);\n\t            if (el != null) {\n\t                b.push(el);\n\t            }\n\t        }\n\t        return b;\n\t    }\n\n\t    function withClipping(shape, f) {\n\t        var saveclipbox = clipbox;\n\t        var savematrix = matrix;\n\n\t        if (shape.transform()) {\n\t            matrix = matrix.multiplyCopy(shape.transform().matrix());\n\t        }\n\n\t        var clip = shape.clip();\n\t        if (clip) {\n\t            clip = clip.bbox();\n\t            if (clip) {\n\t                clip = clip.bbox(matrix);\n\t                clipbox = clipbox ? kendoGeometry.Rect.intersect(clipbox, clip) : clip;\n\t            }\n\t        }\n\n\t        try {\n\t            return f();\n\t        }\n\t        finally {\n\t            clipbox = saveclipbox;\n\t            matrix = savematrix;\n\t        }\n\t    }\n\n\t    function inClipbox(shape) {\n\t        if (clipbox == null) {\n\t            return false;\n\t        }\n\t        var box = shape.rawBBox().bbox(matrix);\n\t        if (clipbox && box) {\n\t            box = kendoGeometry.Rect.intersect(box, clipbox);\n\t        }\n\t        return box;\n\t    }\n\n\t    function opt(shape) {\n\t        return withClipping(shape, function(){\n\t            if (!(shape instanceof drawing.Group || shape instanceof drawing.MultiPath)) {\n\t                var box = inClipbox(shape);\n\t                if (!box) {\n\t                    return change(null);\n\t                }\n\t                currentBox = currentBox ? kendoGeometry.Rect.union(currentBox, box) : box;\n\t            }\n\t            return dispatch({\n\t                Path: function(shape) {\n\t                    if (shape.segments.length === 0 || !visible(shape)) {\n\t                        return change(null);\n\t                    }\n\t                    return shape;\n\t                },\n\t                MultiPath: function(shape) {\n\t                    if (!visible(shape)) {\n\t                        return change(null);\n\t                    }\n\t                    var el = new drawing.MultiPath(shape.options);\n\t                    el.paths = optArray(shape.paths);\n\t                    if (el.paths.length === 0) {\n\t                        return change(null);\n\t                    }\n\t                    return el;\n\t                },\n\t                Circle: function(shape) {\n\t                    if (!visible(shape)) {\n\t                        return change(null);\n\t                    }\n\t                    return shape;\n\t                },\n\t                Arc: function(shape) {\n\t                    if (!visible(shape)) {\n\t                        return change(null);\n\t                    }\n\t                    return shape;\n\t                },\n\t                Text: function(shape) {\n\t                    if (!/\\S/.test(shape.content()) || !visible(shape)) {\n\t                        return change(null);\n\t                    }\n\t                    return shape;\n\t                },\n\t                Image: function(shape) {\n\t                    if (!(shape.visible() && shape.opacity() > 0)) {\n\t                        return change(null);\n\t                    }\n\t                    return shape;\n\t                },\n\t                Group: function(shape) {\n\t                    if (!(shape.visible() && shape.opacity() > 0)) {\n\t                        return change(null);\n\t                    }\n\t                    var el = new drawing.Group(shape.options);\n\t                    el.children = optArray(shape.children);\n\t                    el._pdfLink = shape._pdfLink;\n\t                    if (shape !== root && el.children.length === 0 && !shape._pdfLink) {\n\t                        return change(null);\n\t                    }\n\t                    return el;\n\t                },\n\t                Rect: function(shape) {\n\t                    if (!visible(shape)) {\n\t                        return change(null);\n\t                    }\n\t                    return shape;\n\t                }\n\t            }, shape);\n\t        });\n\t    }\n\t}\n\n\tfunction exportPDF(group, options) {\n\t    var promise = util.createPromise();\n\n\t    for (var i in options) {\n\t        if (i == "margin" && group.options.pdf && group.options.pdf._ignoreMargin) {\n\t            // This hackish option is set by the page breaking code in drawDOM.  The idea is\n\t            // that margin is already taken into account there (that\'s required to do proper\n\t            // page breaking) and we don\'t want to set it again here, as it would double the\n\t            // top-left margin, and truncate the content on bottom/right.\n\t            continue;\n\t        }\n\t        group.options.set("pdf." + i, options[i]);\n\t    }\n\n\t    toDataURL(group, promise.resolve);\n\n\t    return promise;\n\t}\n\n\t// XXX: the duplication is in order to keep exportPDF return a data\n\t// URI, which is what previous versions do.  Currently only IE9 does\n\t// not support Blob, IMO we should switch to Blob by default\n\t// everywhere.\n\tfunction exportPDFToBlob(group, options) {\n\t    var promise = util.createPromise();\n\n\t    for (var i in options) {\n\t        if (i == "margin" && group.options.pdf && group.options.pdf._ignoreMargin) {\n\t            // This hackish option is set by the page breaking code in drawDOM.  The idea is\n\t            // that margin is already taken into account there (that\'s required to do proper\n\t            // page breaking) and we don\'t want to set it again here, as it would double the\n\t            // top-left margin, and truncate the content on bottom/right.\n\t            continue;\n\t        }\n\t        group.options.set("pdf." + i, options[i]);\n\t    }\n\n\t    if (window.Blob && !supportBrowser.safari) {\n\t        toBlob(group, promise.resolve);\n\t    } else {\n\t        toDataURL(group, promise.resolve);\n\t    }\n\n\t    return promise;\n\t}\n\n\tkendo.deepExtend(kendo.pdf, {\n\t    Document: PDFDocument,\n\t    BinaryStream: BinaryStream,\n\t    defineFont: defineFont,\n\t    parseFontDef: parseFontDef,\n\t    getFontURL: getFontURL,\n\t    loadFonts: loadFonts,\n\t    loadImages: loadImages,\n\t    getPaperOptions: getPaperOptions,\n\t    clearImageCache: clearImageCache,\n\t    TEXT_RENDERING_MODE: TEXT_RENDERING_MODE,\n\t    exportPDF: exportPDF,\n\t    exportPDFToBlob: exportPDFToBlob,\n\t    saveAs: saveAs$1,\n\t    toDataURL: toDataURL,\n\t    toBlob: toBlob,\n\t    render: render\n\t});\n\n\tkendo.drawing.exportPDF = kendo.pdf.exportPDF;\n\tkendo.drawing.pdf = kendo.pdf;\n\n\t})(kendo);\n\n\treturn kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ }),\n\n/***/ 1513:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./pako */ "./node_modules/@progress/kendo-ui/js/pdf/pako.js");\n\n/***/ }),\n\n/***/ 1514:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.drawing */ "./node_modules/@progress/kendo-ui/js/kendo.drawing.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/pdf/core.js?')}}]);