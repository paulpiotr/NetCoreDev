(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{"./node_modules/@progress/kendo-ui/js/spreadsheet/clipboard.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/clipboard.js ***!
  \*********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1540);\n\tmodule.exports = __webpack_require__(1540);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1540:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function(kendo) {\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    var $ = kendo.jQuery;\n\t    var CellRef = kendo.spreadsheet.CellRef;\n\n\t    var Clipboard = kendo.Class.extend({\n\t        init: function(workbook) {\n\t            this._content = {};\n\t            this._externalContent = {};\n\t            this._internalContent = {};\n\t            this.workbook = workbook;\n\t            this.origin = kendo.spreadsheet.NULLREF;\n\t            this.iframe = document.createElement("iframe");\n\t            this.iframe.className = "k-spreadsheet-clipboard-paste";\n\t            this.iframe.setAttribute("title", "Spreadsheet clipboard iframe");\n\t            this.menuInvoked = false;\n\t            this._uid = kendo.guid();\n\t            document.body.appendChild(this.iframe);\n\t        },\n\n\t        destroy: function() {\n\t            document.body.removeChild(this.iframe);\n\t        },\n\n\t        canCopy: function() {\n\t            var status = {canCopy: true};\n\t            var selection = this.workbook.activeSheet().select();\n\t            if (selection === kendo.spreadsheet.NULLREF) {\n\t                status.canCopy = false;\n\t            }\n\t            if (selection instanceof kendo.spreadsheet.UnionRef) {\n\t                status.canCopy = false;\n\t                status.multiSelection = true;\n\t            }\n\t            if (this.menuInvoked) {\n\t                status.canCopy = false;\n\t                status.menuInvoked = true;\n\t            }\n\t            return status;\n\t        },\n\n\t        canPaste: function() {\n\t            var sheet = this.workbook.activeSheet();\n\t            var ref = this.pasteRef();\n\t            var range = sheet.range(ref);\n\t            var status = { canPaste: true, pasteOnMerged: false, pasteOnDisabled: false };\n\n\t            if (!range.enable()) {\n\t                status.canPaste =  false;\n\t                status.pasteOnDisabled = true;\n\t            }\n\t            if (!ref.eq(sheet.unionWithMerged(ref))) {\n\t                status.canPaste = false;\n\t                status.pasteOnMerged = true;\n\t            }\n\t            if (this.menuInvoked) {\n\t                status.canPaste = false;\n\t                status.menuInvoked = true;\n\t            }\n\t            if (ref.bottomRight.row >= sheet._rows._count || ref.bottomRight.col >= sheet._columns._count) {\n\t                status.canPaste = false;\n\t                status.overflow = true;\n\t            }\n\t            return status;\n\t        },\n\n\t        intersectsMerged: function() {\n\t            var sheet = this.workbook.activeSheet();\n\t            this.parse();\n\t            this.origin = this._content.origRef;\n\t            var ref = this.pasteRef();\n\t            return !ref.eq(sheet.unionWithMerged(ref));\n\t        },\n\n\t        copy: function() {\n\t            var sheet = this.workbook.activeSheet();\n\t            this.origin = sheet.select();\n\t            this._internalContent = sheet.selection().getState();\n\t            delete this._externalContent.html;\n\t            delete this._externalContent.plain;\n\t        },\n\n\t        cut: function() {\n\t            var sheet = this.workbook.activeSheet();\n\t            this.copy();\n\t            sheet.range(sheet.select()).clear();\n\t        },\n\n\t        pasteRef: function() {\n\t            var sheet = this.workbook.activeSheet();\n\n\t            // When pasting from an external source, origin will be\n\t            // NULLREF.  Just return the destination range.\n\t            // https://github.com/telerik/kendo-ui-core/issues/3486\n\t            if (this.origin === kendo.spreadsheet.NULLREF) {\n\t                return sheet.select();\n\t            }\n\n\t            var destination = sheet.activeCell().first();\n\t            var originActiveCell = this.origin.first();\n\t            var rowDelta = originActiveCell.row - destination.row;\n\t            var colDelta = originActiveCell.col - destination.col;\n\n\t            return this.origin.relative(rowDelta, colDelta, 3);\n\t        },\n\n\t        paste: function() {\n\t            var sheet = this.workbook.activeSheet();\n\t            var pasteRef = this.pasteRef();\n\t            sheet.range(pasteRef).setState(this._content, this);\n\t            sheet.triggerChange({ recalc: true, ref: pasteRef });\n\t        },\n\n\t        external: function(data) {\n\t            if (data && (data.html || data.plain)) {\n\t                this._externalContent = data;\n\t            } else {\n\t                return this._externalContent;\n\t            }\n\t        },\n\n\t        isExternal: function() {\n\t            return !this._isInternal();\n\t        },\n\n\t        parse: function() {\n\t            var state = newState();\n\n\t            if (this._isInternal()) {\n\t                state = this._internalContent;\n\t            } else {\n\t                var data = this._externalContent;\n\t                if (data.html) {\n\t                    var doc = this.iframe.contentWindow.document;\n\t                    doc.open();\n\t                    doc.write(data.html);\n\t                    doc.close();\n\t                    var table = doc.querySelector("table");\n\t                    if (table) {\n\t                        state = parseHTML(table);\n\t                    } else {\n\t                        state = parseTSV(data.plain);\n\t                    }\n\t                } else {\n\t                    state = parseTSV(data.plain);\n\t                }\n\t                this.origin = state.origRef;\n\t            }\n\n\t            this._content = state;\n\t        },\n\n\t        _isInternal: function() {\n\t            if (this._externalContent.html === undefined) {\n\t                return true;\n\t            }\n\t            var internalHTML = $("<div/>").html(this._externalContent.html).find("table.kendo-clipboard-"+ this._uid).length ? true : false;\n\t            var internalPlain = $("<div/>").html(this._externalContent.plain).find("table.kendo-clipboard-"+ this._uid).length ? true : false;\n\t            return (internalHTML || internalPlain);\n\t        }\n\t    });\n\t    kendo.spreadsheet.Clipboard = Clipboard;\n\n\t    function newState() {\n\t        var ref = new CellRef(0, 0, 0);\n\t        return {\n\t            ref         : ref,\n\t            mergedCells : [],\n\t            data        : [],\n\t            foreign     : true,\n\t            origRef     : ref.toRangeRef()\n\t        };\n\t    }\n\n\t    function setStateData(state, row, col, value) {\n\t        var data = state.data || (state.data = []);\n\t        if (!data[row]) {\n\t            data[row] = [];\n\t        }\n\t        data[row][col] = value;\n\t        var br = state.origRef.bottomRight;\n\t        br.row = Math.max(br.row, row);\n\t        br.col = Math.max(br.col, col);\n\t    }\n\n\t    function stripStyle(style) {\n\t        return style.replace(/^-(?:ms|moz|webkit)-/, "");\n\t    }\n\n\t    function borderObject(styles) {\n\t        var obj = {};\n\t        [\n\t            "borderBottom",\n\t            "borderRight",\n\t            "borderLeft",\n\t            "borderTop"\n\t        ].forEach(function(key) {\n\t            obj[key] = styles[key + "Style"] == "none" ? null : {\n\t                size: 1,\n\t                color: styles[key + "Color"]\n\t            };\n\t        });\n\t        return obj;\n\t    }\n\n\t    function cellState(row, col, element, hBorders, vBorders) {\n\t        var styles = window.getComputedStyle(element);\n\n\t        // note: Chrome 70 appends a \\t to a cell\'s text, which is actually mandated by the standard\n\t        // ([1] item 6).  We remove it below.  In [2] it\'s suggested they might switch back to\n\t        // previous behavior, but removing an eventual last TAB won\'t hurt anyway.\n\t        //\n\t        // [1] https://www.w3.org/TR/html53/dom.html#dom-htmlelement-innertext\n\t        // [2] https://bugs.chromium.org/p/chromium/issues/detail?id=897373\n\t        var text = element.innerText.replace(/\\t$/, "");\n\n\t        var borders = borderObject(styles);\n\t        var state = {\n\t            value: text === "" ? null : text,\n\n\t            borderTop    : borders.borderTop    || hBorders.get(row, col)     || null,\n\t            borderBottom : borders.borderBottom || hBorders.get(row + 1, col) || null,\n\t            borderLeft   : borders.borderLeft   || vBorders.get(row, col)     || null,\n\t            borderRight  : borders.borderRight  || vBorders.get(row, col + 1) || null,\n\n\t            fontSize : parseInt(styles["font-size"], 10)\n\t        };\n\n\t        hBorders.set(row, col, state.borderTop);\n\t        hBorders.set(row + 1, col, state.borderBottom);\n\t        vBorders.set(row, col, state.borderLeft);\n\t        vBorders.set(row, col + 1, state.borderRight);\n\n\t        if (styles["background-color"] !== "rgb(0, 0, 0)" && styles["background-color"] !== "rgba(0, 0, 0, 0)") {\n\t            state.background = styles["background-color"];\n\t        }\n\t        if (styles.color !== "rgb(0, 0, 0)" && styles.color !== "rgba(0, 0, 0, 0)") {\n\t            state.color = styles.color;\n\t        }\n\t        if (styles["text-decoration"] == "underline") {\n\t            state.underline = true;\n\t        }\n\t        if (styles["font-style"] == "italic") {\n\t            state.italic = true;\n\t        }\n\t        if (styles["font-weight"] == "bold") {\n\t            state.bold = true;\n\t        }\n\t        if (stripStyle(styles["text-align"]) !== "right") {\n\t            state.textAlign = stripStyle(styles["text-align"]);\n\t        }\n\t        if (styles["vertical-align"] !== "middle") {\n\t            state.verticalAlign = styles["vertical-align"];\n\t        }\n\t        if (styles["word-wrap"] !== "normal" ) {\n\t            state.wrap = true;\n\t        }\n\n\t        return state;\n\t    }\n\n\t    function parseHTML(table) {\n\t        var state = newState();\n\n\t        var done = [], row = 0, col = 0;\n\t        for (var i = 0; i < table.rows.length; ++i) {\n\t            done.push([]);\n\t        }\n\t        var hBorders = new kendo.spreadsheet.calc.runtime.Matrix();\n\t        var vBorders = new kendo.spreadsheet.calc.runtime.Matrix();\n\n\t        for (var ri = 0; ri < table.rows.length; ++ri, ++row) {\n\t            var tr = table.rows[ri];\n\t            col = 0;\n\t            for (var ci = 0; ci < tr.cells.length; ++ci) {\n\t                var td = tr.cells[ci];\n\t                var rowSpan = td.rowSpan;\n\t                var colSpan = td.colSpan;\n\t                while (done[row][col]) {\n\t                    col++;\n\t                }\n\n\t                // A cell containing a long text overflowing the next (empty) cell will weirdly be\n\t                // reported as merged by Excel (has colspan=2).  Then, Excel informatively suggests\n\t                // us to ignore the colSpan by passing mso-ignore:colspan in the style.  Much thanks!\n\t                // https://github.com/telerik/kendo-ui-core/issues/3760\n\t                var style = td.getAttribute("style");\n\t                var ignoreColspan = /mso-ignore:colspan/.test(style);\n\n\t                setStateData(state, row, col, cellState(row, col, td, hBorders, vBorders));\n\t                if (rowSpan > 1 || (colSpan > 1 && !ignoreColspan)) {\n\t                    state.mergedCells.push(\n\t                        new kendo.spreadsheet.RangeRef(\n\t                            new CellRef(row, col),\n\t                            new CellRef(row + rowSpan - 1, col + colSpan - 1)\n\t                        ).toString());\n\t                }\n\t                for (var dr = row + rowSpan; --dr >= row;) {\n\t                    for (var dc = col + colSpan; --dc >= col;) {\n\t                        if (dr < done.length) {\n\t                            done[dr][dc] = true;\n\t                            if (!(dr == row && dc == col)) {\n\t                                setStateData(state, dr, dc, {});\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\n\t        return state;\n\t    }\n\n\t    function parseTSV(data) {\n\t        var state = newState();\n\t        if (data.indexOf("\\t") === -1 && data.indexOf("\\n") == -1) {\n\t            setStateData(state, 0, 0, { value: data });\n\t        } else {\n\t            var rows = data.split("\\n");\n\t            for (var ri = 0; ri < rows.length; ri++) {\n\t                var cols = rows[ri].split("\\t");\n\t                for (var ci = 0; ci < cols.length; ci++) {\n\t                    setStateData(state, ri, ci, { value: cols[ci] });\n\t                }\n\t            }\n\t        }\n\t        return state;\n\t    }\n\n\t})(kendo);\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/clipboard.js?')},"./node_modules/@progress/kendo-ui/js/spreadsheet/commands.js":
/*!********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/commands.js ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1541);\n\tmodule.exports = __webpack_require__(1541);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 944:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.window */ "./node_modules/@progress/kendo-ui/js/kendo.window.js");\n\n/***/ }),\n\n/***/ 1522:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.binder */ "./node_modules/@progress/kendo-ui/js/kendo.binder.js");\n\n/***/ }),\n\n/***/ 1541:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t        __webpack_require__(20),\n\t        __webpack_require__(1522),\n\t        __webpack_require__(944),\n\t        __webpack_require__(1542),\n\t        __webpack_require__(1543)\n\t    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function(kendo) {\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    /* jshint laxbreak:true */\n\n\t    var $ = kendo.jQuery;\n\n\t    var COMMAND_TYPES = {\n\t        AUTO_FILL: "autoFill",\n\t        CLEAR: "clear",\n\t        CUT: "cut",\n\t        EDIT: "edit",\n\t        PASTE: "paste",\n\t        VALIDATION: "validation"\n\t    };\n\n\t    var Command = kendo.spreadsheet.Command = kendo.Class.extend({\n\t        init: function(options) {\n\t            this.options = options;\n\t            this._workbook = options.workbook;\n\t            this._property = options && options.property;\n\t            this._state = {};\n\t        },\n\t        range: function(range) {\n\t            if (range !== undefined) {\n\t                this._setRange(range);\n\t            }\n\n\t            return this._range;\n\t        },\n\t        _setRange: function(range) {\n\t            this._range = range;\n\t        },\n\t        redo: function() {\n\t            this.range().select();\n\t            this.exec();\n\t        },\n\t        undo: function() {\n\t            this.setState(this._state);\n\t        },\n\t        getState: function() {\n\t            this._state = this.range().getState(this._property);\n\t        },\n\t        setState: function(state) {\n\t            this.range().setState(state);\n\t        },\n\t        rejectState: function(validationState) {\n\t            this.undo();\n\t            return {\n\t                title: validationState.title,\n\t                body: validationState.message,\n\t                reason: "error",\n\t                type: "validationError"\n\t            };\n\t        },\n\t        _forEachCell: function(callback) {\n\t            var range = this.range();\n\t            var ref = range._ref;\n\n\t            ref.forEach(function(ref) {\n\t                range.sheet().forEach(ref.toRangeRef(), callback.bind(this));\n\t            }.bind(this));\n\t        },\n\t        usesImage: function(/* image id from workbook._images */) {\n\t            return false;\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.DrawingUpdateCommand = Command.extend({\n\t        init: function(options) {\n\t            this._sheet = options.sheet;\n\t            this._drawing = options.drawing;\n\t            this._orig = this._drawing.clone();\n\t            this._previous = options.previous;\n\t        },\n\t        exec: function() {},\n\t        undo: function() {\n\t            this._drawing.reset(this._previous);\n\t            this._sheet._activeDrawing = this._drawing;\n\t            this._sheet.triggerChange({ layout: true });\n\t        },\n\t        redo: function() {\n\t            this._drawing.reset(this._orig);\n\t            this._sheet._activeDrawing = this._drawing;\n\t            this._sheet.triggerChange({ layout: true });\n\t        },\n\t        usesImage: function(img) {\n\t            return this._drawing.image === img\n\t                || this._orig.image === img\n\t                || this._previous.image === img;\n\t        }\n\t    });\n\n\t    var DrawingCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._drawing = options.drawing;\n\t        },\n\t        usesImage: function(img) {\n\t            return this._drawing.image === img;\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.InsertImageCommand = DrawingCommand.extend({\n\t        init: function(options) {\n\t            DrawingCommand.fn.init.call(this, options);\n\t            this._blob = options.blob;\n\t            this._width = options.width;\n\t            this._height = options.height;\n\t        },\n\t        exec: function() {\n\t            var range = this.range();\n\t            var sheet = range.sheet();\n\t            var width = this._width;\n\t            var height = this._height;\n\t            var aspect = width / height;\n\t            if (width > height) {\n\t                width = Math.min(width, 300);\n\t                height = width / aspect;\n\t            } else {\n\t                height = Math.min(height, 300);\n\t                width = height * aspect;\n\t            }\n\t            this._drawing = sheet.addDrawing({\n\t                topLeftCell : range.topLeft(),\n\t                offsetX     : 5,\n\t                offsetY     : 5,\n\t                width       : width,\n\t                height      : height,\n\t                opacity     : 1,\n\t                image       : this._workbook.addImage(this._blob)\n\t            }, true);\n\t            this._blob = null;\n\t        },\n\t        undo: function() {\n\t            var sheet = this.range().sheet();\n\t            sheet._activeDrawing = null;\n\t            sheet.removeDrawing(this._drawing);\n\t        },\n\t        redo: function() {\n\t            var sheet = this.range().sheet();\n\t            sheet._activeDrawing = this._drawing;\n\t            sheet.addDrawing(this._drawing);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.DeleteDrawingCommand = DrawingCommand.extend({\n\t        exec: function() {\n\t            var sheet = this.range().sheet();\n\t            sheet._activeDrawing = null;\n\t            sheet.removeDrawing(this._drawing);\n\t        },\n\t        undo: function() {\n\t            var sheet = this.range().sheet();\n\t            sheet._activeDrawing = this._drawing;\n\t            sheet.addDrawing(this._drawing);\n\t        },\n\t        redo: function() {\n\t            this.exec();\n\t        }\n\t    });\n\n\t    var ReorderDrawingsCommand = DrawingCommand.extend({\n\t        exec: function() {\n\t            var sheet = this.range().sheet();\n\t            this._origIndex = sheet._drawings.indexOf(this._drawing);\n\t            sheet._drawings.splice(this._origIndex, 1);\n\t            this._newIndex = this._reorder();\n\t            sheet._drawings.splice(this._newIndex, 0, this._drawing);\n\t            sheet.triggerChange({ drawings: true });\n\t        },\n\t        undo: function() {\n\t            var sheet = this.range().sheet();\n\t            sheet._drawings.splice(this._newIndex, 1);\n\t            sheet._drawings.splice(this._origIndex, 0, this._drawing);\n\t            sheet.triggerChange({ drawings: true });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.BringToFrontCommand = ReorderDrawingsCommand.extend({\n\t        _reorder: function() {\n\t            return this.range().sheet()._drawings.length;\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.SendToBackCommand = ReorderDrawingsCommand.extend({\n\t        _reorder: function() {\n\t            return 0;\n\t        }\n\t    });\n\n\t    var TargetValueCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._target = options.target;\n\t            this._value = options.value;\n\t        },\n\t        exec: function() {\n\t            this.getState();\n\t            this.setState(this._value);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.ColumnWidthCommand = TargetValueCommand.extend({\n\t        getState: function() {\n\t            this._state = this.range().sheet().columnWidth(this._target);\n\t        },\n\t        setState: function(state) {\n\t            this.range().sheet().columnWidth(this._target, state);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.RowHeightCommand = TargetValueCommand.extend({\n\t        getState: function() {\n\t            this._state = this.range().sheet().rowHeight(this._target);\n\t        },\n\t        setState: function(state) {\n\t            this.range().sheet().rowHeight(this._target, state);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.HyperlinkCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._link = options.link;\n\t        },\n\t        exec: function() {\n\t            var range = this.range();\n\t            this._prevLink = range.link();\n\t            this._prevUnderline = range.underline();\n\t            range.link(this._link);\n\t            range.underline(true);\n\t            if (range.value() == null) { // jshint ignore:line\n\t                this._hasSetValue = true;\n\t                range.value(this._link);\n\t            }\n\t        },\n\t        undo: function() {\n\t            var range = this.range();\n\t            range.link(this._prevLink);\n\t            range.underline(this._prevUnderline);\n\t            if (this._hasSetValue) {\n\t                range.value(null);\n\t            }\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.GridLinesChangeCommand = TargetValueCommand.extend({\n\t        getState: function() {\n\t            this._state = this._range.sheet().showGridLines();\n\t        },\n\t        setState: function(v) {\n\t            this._range.sheet().showGridLines(v);\n\t        }\n\t    });\n\n\t    var PropertyChangeCommand = kendo.spreadsheet.PropertyChangeCommand = Command.extend({\n\t        _setRange: function(range) {\n\t            Command.prototype._setRange.call(this, range.skipHiddenCells());\n\t        },\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._value = options.value;\n\t        },\n\t        exec: function() {\n\t            var range = this.range();\n\t            if (range.enable()) {\n\t                this.getState();\n\n\t                if (this.options.property === "format") {\n\t                    this._workbook.trigger("changeFormat", { range: range });\n\t                }\n\n\t                range[this._property](this._value);\n\t            }\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.ClearContentCommand = Command.extend({\n\t        exec: function() {\n\t            var values = [], range, rowValues, nullValues, validationState, currentRange;\n\t            if (!this.range().enable()) {\n\t                return { reason: "error", type: "cannotModifyDisabled" };\n\t            }\n\t            if (!this.range().canEditArrayFormula()) {\n\t                return { reason: "error", type: "intersectsArray" };\n\t            }\n\t            this.getState();\n\t            range = this.range().skipHiddenCells();\n\n\t            if(range._ref.refs && range._ref.refs.length > 1) {\n\t                range._ref.refs.forEach(function(ref) {\n\t                    currentRange = range.sheet().range(ref);\n\t                    values = values.concat(currentRange.values());\n\t                });\n\t            } else {\n\t                values = range.values();\n\t            }\n\t            nullValues = [];\n\t            values.forEach(function(row) {\n\t                rowValues = [];\n\t                row.forEach(function() {\n\t                    rowValues.push(null);\n\t                });\n\t                nullValues.push(rowValues);\n\t            });\n\t            if (range.sheet().trigger("changing", { data: nullValues, range: range, changeType: COMMAND_TYPES.CLEAR })) {\n\t                return;\n\t            }\n\t            range.clearContent();\n\t            validationState = range._getValidationState();\n\t            if (validationState) {\n\t                return this.rejectState(validationState);\n\t            }\n\t        },\n\t        undo: function() {\n\t            var range = this.range().skipHiddenCells();\n\t            var sheet = range.sheet();\n\t            var data = this._state.data;\n\t            var values = [];\n\t            var rowValues;\n\t            data.forEach(function(row) {\n\t                rowValues = [];\n\t                row.forEach(function(cell) {\n\t                    rowValues.push(cell.value);\n\t                });\n\t                values.push(rowValues);\n\t            });\n\t            if (sheet.trigger("changing", { data: values, range: range, changeType: COMMAND_TYPES.CLEAR })) {\n\t                return;\n\t            }\n\t            this.setState(this._state);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.EditCommand = PropertyChangeCommand.extend({\n\t        init: function(options) {\n\t            options.property = options.property || "input";\n\t            PropertyChangeCommand.fn.init.call(this, options);\n\t        },\n\t        _setRange: function(range) {\n\t            PropertyChangeCommand.prototype._setRange.apply(this, arguments);\n\t            this._editRange = this.options.arrayFormula ? range : range.sheet().activeCellSelection();\n\t        },\n\t        getState: function() {\n\t            this._state = this.range().getState();\n\t        },\n\t        exec: function() {\n\t            return this.range().sheet().withCultureDecimals(this._exec.bind(this));\n\t        },\n\t        undo: function() {\n\t            var editRange = this._editRange;\n\t            var state = this._state;\n\t            if (editRange.sheet().trigger("changing", { data: state.data[0][0].value, range: editRange, changeType: COMMAND_TYPES.EDIT })) {\n\t                return;\n\t            }\n\t            this.setState(this._state);\n\t        },\n\t        _exec: function() {\n\t            var arrayFormula = this.options.arrayFormula;\n\t            var editRange = this._editRange;\n\n\t            if (!editRange.enable()) {\n\t                return { reason: "error", type: "rangeDisabled" };\n\t            }\n\n\t            if (!editRange.canEditArrayFormula()) {\n\t                return { reason: "error", type: "intersectsArray" };\n\t            }\n\n\t            var value = this._value;\n\t            this.getState();\n\t            if (this.range().sheet().trigger("changing", { data: value, range: this._editRange, changeType: COMMAND_TYPES.EDIT })) {\n\t                return;\n\t            }\n\n\t            if (this._property == "value") {\n\t                editRange.value(value);\n\t                return;\n\t            }\n\n\t            try {\n\t                editRange.link(null);\n\t                if (value === "") {\n\t                    editRange.value(null);\n\t                } else {\n\t                    editRange.input(value, { arrayFormula: arrayFormula });\n\t                    if (/\\n/.test(editRange.value())) {\n\t                        editRange.wrap(true);\n\t                    }\n\t                }\n\t                editRange._adjustRowHeight();\n\n\t                var validationState = editRange._getValidationState();\n\t                if (validationState) {\n\t                    return this.rejectState(validationState);\n\t                }\n\t            } catch(ex) {\n\t                if (ex instanceof kendo.spreadsheet.calc.ParseError) {\n\t                    return {\n\t                        title : "Error in formula",\n\t                        body  : ex+"",\n\t                        reason: "error"\n\t                    };\n\t                } else {\n\t                    throw ex;\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.InsertCommentCommand = PropertyChangeCommand.extend({\n\t        init: function(options) {\n\t            options.property = "comment";\n\t            PropertyChangeCommand.fn.init.call(this, options);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.TextWrapCommand = PropertyChangeCommand.extend({\n\t        init: function(options) {\n\t            options.property = "wrap";\n\t            PropertyChangeCommand.fn.init.call(this, options);\n\n\t            this._value = options.value;\n\t        },\n\t        getState: function() {\n\t            var rowHeight = {};\n\t            this.range().forEachRow(function(range) {\n\t                var index = range.topLeft().row;\n\n\t                rowHeight[index] = range.sheet().rowHeight(index);\n\t            });\n\n\t            this._state = this.range().getState(this._property);\n\t            this._rowHeight = rowHeight;\n\t        },\n\t        undo: function() {\n\t            var sheet = this.range().sheet();\n\t            var rowHeight = this._rowHeight;\n\n\t            this.range().setState(this._state);\n\n\t            for (var row in rowHeight) {\n\t                sheet.rowHeight(row, rowHeight[row]);\n\t            }\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.AdjustDecimalsCommand = Command.extend({\n\t        init: function(options) {\n\t            this._delta = options.value;\n\t            options.property = "format";\n\t            Command.fn.init.call(this, options);\n\t        },\n\t        exec: function() {\n\t            var sheet = this.range().sheet();\n\t            var delta = this._delta;\n\t            var formatting = kendo.spreadsheet.formatting;\n\n\t            this.getState();\n\n\t            sheet.batch(function() {\n\t                this.range().forEachCell(function(row, col, cell) {\n\t                    var format = cell.format;\n\n\t                    if (!format) {\n\t                        var value = cell.value;\n\t                        if (typeof value == "number" && /\\./.test(value)) {\n\t                            format = "0." + String(value).split(".")[1].replace(/\\d/g, "0");\n\t                        }\n\t                    }\n\n\t                    if (format || delta > 0) {\n\t                        format = formatting.adjustDecimals(format || "0", delta);\n\t                        sheet.range(row, col).format(format);\n\t                    }\n\t                });\n\t            }.bind(this));\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.BorderChangeCommand = Command.extend({\n\t        init: function(options) {\n\t            options.property = "border";\n\t            Command.fn.init.call(this, options);\n\t            this._type = options.border;\n\t            this._style = options.style;\n\t        },\n\t        _batch: function(f) {\n\t            return this.range().sheet().batch(f, {});\n\t        },\n\t        exec: function() {\n\t            var self = this;\n\t            self.getState();\n\t            self._batch(function(){\n\t                self[self._type](self._style);\n\t            });\n\t        },\n\t        noBorders: function() {\n\t            this.range().insideBorders(null);\n\t            this.outsideBorders(null);\n\t        },\n\t        allBorders: function(style) {\n\t            this.range().insideBorders(style);\n\t            this.outsideBorders(style);\n\t        },\n\t        leftBorder: function(style) {\n\t            this.range().leftColumn().borderLeft(style);\n\t        },\n\t        rightBorder: function(style) {\n\t            this.range().rightColumn().borderRight(style);\n\t        },\n\t        topBorder: function(style) {\n\t            this.range().topRow().borderTop(style);\n\t        },\n\t        bottomBorder: function(style) {\n\t            this.range().bottomRow().borderBottom(style);\n\t        },\n\t        outsideBorders: function(style) {\n\t            var range = this.range();\n\t            range.leftColumn().borderLeft(style);\n\t            range.topRow().borderTop(style);\n\t            range.rightColumn().borderRight(style);\n\t            range.bottomRow().borderBottom(style);\n\t        },\n\t        insideBorders: function(style) {\n\t            this.range().insideBorders(style);\n\t            this.outsideBorders(null);\n\t        },\n\t        insideHorizontalBorders: function(style) {\n\t            this.range().insideHorizontalBorders(style);\n\t        },\n\t        insideVerticalBorders: function(style) {\n\t            this.range().insideVerticalBorders(style);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.MergeCellCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._type = options.value;\n\t        },\n\t        exec: function() {\n\t            this.getState();\n\t            this[this._type]();\n\t        },\n\t        activate: function(ref) {\n\t            this.range().sheet().activeCell(ref);\n\t        },\n\t        getState: function() {\n\t            this._state = this.range().getState();\n\t        },\n\t        undo: function() {\n\t            if (this._type !== "unmerge") {\n\t                this.range().unmerge();\n\t                this.activate(this.range().topLeft());\n\t            }\n\t            this.range().setState(this._state);\n\t        },\n\t        cells: function() {\n\t            var range = this.range();\n\t            var ref = range._ref;\n\n\t            range.merge();\n\t            this.activate(ref);\n\t        },\n\t        horizontally: function() {\n\t            var ref = this.range().topRow()._ref;\n\n\t            this.range().forEachRow(function(range) {\n\t                range.merge();\n\t            });\n\n\t            this.activate(ref);\n\t        },\n\t        vertically: function() {\n\t            var ref = this.range().leftColumn()._ref;\n\n\t            this.range().forEachColumn(function(range) {\n\t                range.merge();\n\t            });\n\n\t            this.activate(ref);\n\t        },\n\t        unmerge: function() {\n\t            var range = this.range();\n\t            var ref = range._ref.topLeft;\n\n\t            range.unmerge();\n\t            this.activate(ref);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.FreezePanesCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._type = options.value;\n\t        },\n\t        exec: function() {\n\t            this.getState();\n\t            this._topLeft = this.range().topLeft();\n\t            this[this._type]();\n\t        },\n\t        getState: function() {\n\t            this._state = this.range().sheet().getState();\n\t        },\n\t        undo: function() {\n\t            this.range().sheet().setState(this._state);\n\t        },\n\t        panes: function() {\n\t            var topLeft = this._topLeft;\n\t            var sheet = this.range().sheet();\n\n\t            sheet.frozenColumns(topLeft.col).frozenRows(topLeft.row);\n\t        },\n\t        rows: function() {\n\t            var topLeft = this._topLeft;\n\t            var sheet = this.range().sheet();\n\n\t            sheet.frozenRows(topLeft.row);\n\t        },\n\t        columns: function() {\n\t            var topLeft = this._topLeft;\n\t            var sheet = this.range().sheet();\n\n\t            sheet.frozenColumns(topLeft.col);\n\t        },\n\t        unfreeze: function() {\n\t            var sheet = this.range().sheet();\n\t            sheet.frozenRows(0).frozenColumns(0);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.PasteCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._clipboard = options.workbook.clipboard();\n\t            this._clipboard.parse();\n\t            this._event = options.event;\n\t            this._clipboardContent = this._clipboard._content;\n\t            this._clipboardPasteRef = this._clipboard.pasteRef();\n\t            this._sheet = this._workbook.activeSheet();\n\t            this._range = this._sheet.range(this._clipboard.pasteRef());\n\t            this._state = this._range.getState();\n\t        },\n\t        exec: function() {\n\t            return this.range().sheet().withCultureDecimals(this._exec.bind(this));\n\t        },\n\t        undo: function() {\n\t            var sheet = this._sheet;\n\t            var range = sheet.range(this._clipboardPasteRef);\n\t            if (sheet.trigger("changing", { data: this._state.data, range: range, changeType: COMMAND_TYPES.PASTE })) {\n\t                return;\n\t            }\n\t            this.setState(this._state);\n\t        },\n\t        _exec: function() {\n\t            var status = this._clipboard.canPaste();\n\t            if (!status.canPaste) {\n\t                if (status.menuInvoked) {\n\t                    return { reason: "error", type: "useKeyboard" };\n\t                }\n\t                if (status.pasteOnMerged) {\n\t                    return { reason: "error", type: "modifyMerged" };\n\t                }\n\t                if (status.overflow) {\n\t                    return { reason: "error", type: "overflow" };\n\t                }\n\t                if (status.pasteOnDisabled) {\n\t                    this._event.preventDefault();\n\t                    return { reason: "error", type: "cannotModifyDisabled" };\n\t                }\n\t                return { reason: "error" };\n\t            }\n\t            var range = this._sheet.range(this._clipboardPasteRef);\n\t            if(this._workbook.trigger("paste", {range: range, clipboardContent: this._clipboardContent}) ||\n\t                this._sheet.trigger("changing", { data: this._clipboardContent.data, range: range, changeType: COMMAND_TYPES.PASTE })) {\n\t                this._event.preventDefault();\n\t                return;\n\t            } else {\n\t                this._sheet.range(this._clipboardPasteRef).setState(this._clipboardContent, this._clipboard);\n\t                range._adjustRowHeight();\n\t            }\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.AdjustRowHeightCommand = Command.extend({\n\t        exec: function() {\n\t            var options = this.options;\n\t            var sheet = this._workbook.activeSheet();\n\t            var range = options.range || sheet.range(options.rowIndex);\n\n\t            range._adjustRowHeight();\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.ToolbarPasteCommand = Command.extend({\n\t        exec: function() {\n\t            if (kendo.support.clipboard.paste) {\n\t                this._workbook._view.clipboard.focus().select();\n\t                //reason : focusclipbord\n\t                document.execCommand(\'paste\');\n\t            } else {\n\t                return { reason: "error", type: "useKeyboard" };\n\t            }\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.CutCommand = Command.extend({\n\t        _eventType: "cut",\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._clipboard = options.workbook.clipboard();\n\t            this._event = options.event;\n\t        },\n\t        exec: function() {\n\t            var status = this._clipboard.canCopy();\n\t            var data = [], rangeValues, currentRow;\n\t            if (!status.canCopy) {\n\t                if (status.menuInvoked) {\n\t                    return { reason: "error", type: "useKeyboard" };\n\t                } else if (status.multiSelection) {\n\t                    return { reason: "error", type: "unsupportedSelection" };\n\t                }\n\t                return;\n\t            }\n\t            var range = this._workbook.activeSheet().selection();\n\t            if (this._eventType == "cut") {\n\t                if (!range.enable()) {\n\t                    this._event.preventDefault();\n\t                    return { reason: "error", type: "cannotModifyDisabled" };\n\t                }\n\t                this.getState();\n\t            }\n\t            if (this._workbook.trigger(this._eventType, { range: range })) {\n\t                this._event.preventDefault();\n\t            } else if (this._eventType == "cut") {\n\t                rangeValues = range.values();\n\t                rangeValues.forEach(function(row){\n\t                    currentRow = [];\n\t                    row.forEach(function(){\n\t                        currentRow.push({});\n\t                    });\n\t                    data.push(currentRow);\n\t                });\n\t                if (range.sheet().trigger("changing", { data: data, range: range, changeType: COMMAND_TYPES.CUT })) {\n\t                    return;\n\t                }\n\t                this._clipboard.cut();\n\t            } else {\n\t                this._clipboard.copy();\n\t            }\n\t        },\n\t        undo: function() {\n\t            var range = this.range();\n\t            if (range.sheet().trigger("changing", { data: this._state.data, range: range, changeType: COMMAND_TYPES.CUT })) {\n\t                return;\n\t            }\n\t            this.setState(this._state);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.CopyCommand = kendo.spreadsheet.CutCommand.extend({\n\t        _eventType: "copy",\n\t        undo: $.noop\n\t    });\n\n\t    function copyToClipboard(html) {\n\t        var textarea = document.createElement(\'textarea\');\n\t        $(textarea).addClass("k-spreadsheet-clipboard")\n\t            .val(html)\n\t            .appendTo(document.body)\n\t            .focus()\n\t            .select();\n\n\t        document.execCommand(\'copy\');\n\n\t        $(textarea).remove();\n\t    }\n\n\t    kendo.spreadsheet.ToolbarCopyCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._clipboard = options.workbook.clipboard();\n\t        },\n\t        undo: $.noop,\n\t        exec: function() {\n\t            if (kendo.support.clipboard.copy) {\n\t                var clipboard = this._workbook._view.clipboard;\n\t                copyToClipboard(clipboard.html());\n\t                clipboard.trigger("copy");\n\t            } else {\n\t                return { reason: "error", type: "useKeyboard" };\n\t            }\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.AutoFillCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t        },\n\t        origin: function(origin) {\n\t            this._origin = origin;\n\t        },\n\t        exec: function() {\n\t            var range = this.range(), autoFillData;\n\t            if (!range.enable()) {\n\t                return { reason: "error", type: "rangeDisabled" };\n\t            }\n\t            if (range.intersectingArrayFormula()) {\n\t                return { reason: "error", type: "intersectsArray" };\n\t            }\n\t            this.getState();\n\t            try {\n\t                autoFillData = range._previewFillFrom(this._origin);\n\t                if (range.sheet().trigger("changing", { data: autoFillData.props, range: autoFillData.dest, changeType: COMMAND_TYPES.AUTO_FILL })) {\n\t                    return;\n\t                }\n\t                autoFillData.dest._properties(autoFillData.props, true);\n\t            } catch(ex) {\n\t                if (ex instanceof kendo.spreadsheet.Range.FillError) {\n\t                    return { reason: "error", type: ex.code };\n\t                }\n\t                throw ex;\n\t            }\n\t        },\n\t        undo: function() {\n\t            var range = this.range();\n\t            var state = this._state;\n\t            if (range.sheet().trigger("changing", { data: state.data, range: range, changeType: COMMAND_TYPES.AUTO_FILL })) {\n\t                return;\n\t            }\n\t            this.setState(this._state);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.ToolbarCutCommand = Command.extend({\n\t        cannotUndo: true,\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._clipboard = options.workbook.clipboard();\n\t        },\n\t        exec: function() {\n\t            if (kendo.support.clipboard.copy) {\n\t                var clipboard = this._workbook._view.clipboard;\n\t                copyToClipboard(clipboard.html());\n\t                clipboard.trigger("cut");\n\t            } else {\n\t                return { reason: "error", type: "useKeyboard" };\n\t            }\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.FilterCommand = Command.extend({\n\t        undo: function() {\n\t            this.range().filter(this._state);\n\t        },\n\t        exec: function() {\n\t            var range = this.range();\n\t            this._state = range.hasFilter();\n\t            range.filter(!this._state);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.SortCommand = Command.extend({\n\t        undo: function() {\n\t            var sheet = this.range().sheet();\n\t            sheet.setState(this._state);\n\t        },\n\t        exec: function() {\n\t            var range = this.range();\n\t            var sheet = range.sheet();\n\t            var activeCell = sheet.activeCell();\n\t            var col = this.options.sheet ? activeCell.topLeft.col : (this.options.column || 0);\n\t            var ascending = this.options.value === "asc" ? true : false;\n\n\t            this._state = sheet.getState();\n\n\t            if (this.options.sheet) {\n\t                range = this.expandRange();\n\t            }\n\n\t            var reason = range.cantSort();\n\t            if (reason) {\n\t                return { reason: "error", type: reason.code };\n\t            }\n\n\t            range.sort({ column: col, ascending: ascending });\n\t        },\n\t        expandRange: function() {\n\t            var sheet = this.range().sheet();\n\t            return new kendo.spreadsheet.Range(sheet._sheetRef, sheet);\n\t        }\n\t    });\n\n\t    var ApplyFilterCommand = kendo.spreadsheet.ApplyFilterCommand = Command.extend({\n\t        column: function() {\n\t            return this.options.column || 0;\n\t        },\n\t        undo: function() {\n\t            var sheet = this.range().sheet();\n\n\t            sheet.clearFilter(this.column());\n\n\t            if (this._state.length) {\n\t                this.range().filter(this._state);\n\t            }\n\t        },\n\t        getState: function() {\n\t            var sheet = this.range().sheet();\n\t            var current = sheet.filter();\n\n\t            if (current) {\n\t                this._state = current.columns.filter(function(c) {\n\t                    return c.index == this.column();\n\t                }.bind(this));\n\t            }\n\t        },\n\t        exec: function() {\n\t            var range = this.range();\n\t            var column = this.column();\n\t            var current = range.sheet().filter();\n\t            var options;\n\t            var filterRule;\n\t            var exists = false;\n\n\t            if (this.options.valueFilter) {\n\t                filterRule = { column: column, filter: new kendo.spreadsheet.ValueFilter(this.options.valueFilter) };\n\t            } else if (this.options.customFilter) {\n\t                filterRule = { column: column, filter: new kendo.spreadsheet.CustomFilter(this.options.customFilter) };\n\t            }\n\n\t            this.getState();\n\n\t            if (current && current.ref.eq(range._ref) && current.columns.length) {\n\t                current.columns.forEach(function(element) {\n\t                    if (element.index === column) {\n\t                        exists = true;\n\t                    }\n\t                });\n\n\t                options = current.columns.map(function(element) {\n\t                    return element.index === column ? filterRule : { column: element.index, filter: element.filter };\n\t                });\n\n\t                if (!exists) {\n\t                    options.push(filterRule);\n\t                }\n\t            } else {\n\t                options = filterRule;\n\t            }\n\n\t            range.filter(options);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.ClearFilterCommand = ApplyFilterCommand.extend({\n\t        exec: function() {\n\t            var range = this.range();\n\t            var column = this.column();\n\n\t            this.getState();\n\t            range.clearFilter(column);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.HideLineCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this.axis = options.axis;\n\t        },\n\n\t        undo: function() {\n\t            var sheet = this.range().sheet();\n\t            sheet.setAxisState(this._state);\n\t        },\n\n\t        exec: function() {\n\t            var sheet = this.range().sheet();\n\t            this._state = sheet.getAxisState();\n\n\t            if (this.axis == "row") {\n\t                sheet.axisManager().hideSelectedRows();\n\t            } else {\n\t                sheet.axisManager().hideSelectedColumns();\n\t            }\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.UnHideLineCommand = kendo.spreadsheet.HideLineCommand.extend({\n\t        exec: function() {\n\t            var sheet = this.range().sheet();\n\t            this._state = sheet.getAxisState();\n\n\t            if (this.axis == "row") {\n\t                sheet.axisManager().unhideSelectedRows();\n\t            } else {\n\t                sheet.axisManager().unhideSelectedColumns();\n\t            }\n\t        }\n\t    });\n\n\t    var DeleteCommand = Command.extend({\n\t        exec: function() {\n\t            this._expandedRange = this._expand(this.range());\n\t            this._state = this._expandedRange.getState();\n\t            this._indexes = this._exec(this._expandedRange.sheet());\n\t        },\n\t        undo: function() {\n\t            var self = this;\n\t            var range = self._expandedRange;\n\t            var sheet = range.sheet();\n\t            sheet.batch(function(){\n\t                self._indexes.forEach(function(x){\n\t                    self._undoOne(sheet, x);\n\t                    sheet._restoreModifiedFormulas(x.formulas);\n\t                });\n\t                range.setState(self._state);\n\t            }, { layout: true, recalc: true, ref: range._ref });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.DeleteRowCommand = DeleteCommand.extend({\n\t        _expand: function(range) {\n\t            return range.resize({ left: -Infinity, right: +Infinity });\n\t        },\n\t        _exec: function(sheet) {\n\t            return sheet.axisManager().deleteSelectedRows();\n\t        },\n\t        _undoOne: function(sheet, x) {\n\t            sheet.insertRow(x.index);\n\t            sheet.rowHeight(x.index, x.height);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.DeleteColumnCommand = DeleteCommand.extend({\n\t        _expand: function(range) {\n\t            return range.resize({ top: -Infinity, bottom: +Infinity });\n\t        },\n\t        _exec: function(sheet) {\n\t            return sheet.axisManager().deleteSelectedColumns();\n\t        },\n\t        _undoOne: function(sheet, x) {\n\t            sheet.insertColumn(x.index);\n\t            sheet.columnWidth(x.index, x.width);\n\t        }\n\t    });\n\n\t    var AddCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._value = options.value;\n\t        },\n\t        undo: function() {\n\t            var self = this;\n\t            var sheet = self.range().sheet();\n\t            sheet.batch(function(){\n\t                for (var i = self._pos.count; --i >= 0;) {\n\t                    self._undoOne(sheet, self._pos.base);\n\t                }\n\t            }, { layout: true, recalc: true });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.AddColumnCommand = AddCommand.extend({\n\t        exec: function() {\n\t            var value = this._value;\n\t            var sheet = this.range().sheet();\n\t            var result = sheet.axisManager().preventAddColumn();\n\n\t            if(!result && value === "right") {\n\t                result = sheet.axisManager().preventAddColumnAfterLast();\n\t            }\n\n\t            if (result) {\n\t                return result;\n\t            }\n\n\t            if (value === "left") {\n\t                this._pos = sheet.axisManager().addColumnLeft();\n\t            } else {\n\t                this._pos = sheet.axisManager().addColumnRight();\n\t            }\n\t        },\n\t        _undoOne: function(sheet, index) {\n\t            sheet.deleteColumn(index);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.AddRowCommand = AddCommand.extend({\n\t        exec: function() {\n\t            var value = this._value;\n\t            var sheet = this.range().sheet();\n\t            var result = sheet.axisManager().preventAddRow();\n\n\t            if(!result && value === "below") {\n\t                result = sheet.axisManager().preventAddRowAfterLast();\n\t            }\n\n\t            if (result) {\n\t                return result;\n\t            }\n\n\t            if (value === "above") {\n\t                this._pos = sheet.axisManager().addRowAbove();\n\t            } else {\n\t                this._pos = sheet.axisManager().addRowBelow();\n\t            }\n\t        },\n\t        _undoOne: function(sheet, index) {\n\t            sheet.deleteRow(index);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.EditValidationCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._value = options.value;\n\t        },\n\t        exec: function() {\n\t            var self = this, sheet = self.range().sheet();\n\t            this.getState();\n\t            if (sheet.trigger("changing", { data: self._value, range: self.range(), changeType: COMMAND_TYPES.VALIDATION })) {\n\t                return;\n\t            }\n\t            sheet.withCultureDecimals(function(){\n\t                self.range().validation(self._value);\n\t            });\n\t        },\n\t        undo: function() {\n\t            var editRange = this.range();\n\t            var state = this._state;\n\t            if (editRange.sheet().trigger("changing", { data: state.data[0][0].validation, range: editRange, changeType: COMMAND_TYPES.VALIDATION })) {\n\t                return;\n\t            }\n\t            this.setState(this._state);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.OpenCommand = Command.extend({\n\t        cannotUndo: true,\n\t        exec: function() {\n\t            var file = this.options.file;\n\t            if (file.name.match(/.xlsx$/i) === null) {\n\t                return { reason: "error", type: "openUnsupported" };\n\t            }\n\n\t            var workbook = this.options.workbook;\n\t            workbook.fromFile(this.options.file).then(function(){\n\t                var errors = workbook.excelImportErrors;\n\t                if (errors && errors.length) {\n\t                    workbook._view.openDialog("importError", {\n\t                        errors: errors\n\t                    });\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.SaveAsCommand = Command.extend({\n\t        cannotUndo: true,\n\t        exec: function() {\n\t            var fileName = this.options.name + this.options.extension;\n\t            if (this.options.extension === ".xlsx") {\n\t                this.options.workbook.saveAsExcel({\n\t                    fileName: fileName\n\t                });\n\t            } else if (this.options.extension === ".pdf") {\n\t                this.options.workbook.saveAsPDF($.extend(this.options.pdf, {workbook: this.options.workbook, fileName: fileName}));\n\t            }\n\t        }\n\t    });\n\n\t    var NameCommand = Command.extend({\n\t        init: function(options) {\n\t            Command.fn.init.call(this, options);\n\t            this._name = options.name;\n\t            this._value = options.value;\n\t        },\n\t        getState: function() {\n\t            this._state = this._workbook.nameDefinition(this._name);\n\t        },\n\t        setState: function() {\n\t            this._workbook.nameDefinition(this._name, this._state);\n\t            this._workbook.trigger("change", { recalc: true });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.DefineNameCommand = NameCommand.extend({\n\t        exec: function() {\n\t            this.getState();\n\t            try {\n\t                this._workbook.defineName(this._name, this._value);\n\t                this._workbook.trigger("change", { recalc: true });\n\t            } catch(ex) {\n\t                return {\n\t                    title: "Error",\n\t                    body: ex+"",\n\t                    reason: "error"\n\t                };\n\t            }\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.DeleteNameCommand = NameCommand.extend({\n\t        exec: function() {\n\t            this.getState();\n\t            this._workbook.undefineName(this._name);\n\t            this._workbook.trigger("change", { recalc: true });\n\t        }\n\t    });\n\n\t})(kendo);\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1542:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.list */ "./node_modules/@progress/kendo-ui/js/kendo.list.js");\n\n/***/ }),\n\n/***/ 1543:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.tabstrip */ "./node_modules/@progress/kendo-ui/js/kendo.tabstrip.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/commands.js?')},"./node_modules/@progress/kendo-ui/js/spreadsheet/controller.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/controller.js ***!
  \**********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1544);\n\tmodule.exports = __webpack_require__(1544);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1544:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function(kendo) {\n\t    \'use strict\';\n\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    var $ = kendo.jQuery;\n\t    var alphaNumRegExp = /:alphanum$/;\n\n\t    var ACTIONS = {\n\t        "up": "up",\n\t        "down": "down",\n\t        "left": "left",\n\t        "right": "right",\n\t        "home": "first-col",\n\t        "end": "last-col",\n\t        "ctrl+left": "word-left",\n\t        "ctrl+right": "word-right",\n\t        "ctrl+up": "word-up",\n\t        "ctrl+down": "word-down",\n\t        "ctrl+home": "first",\n\t        "ctrl+end": "last",\n\t        "pageup": "prev-page",\n\t        "pagedown": "next-page"\n\t    };\n\n\t    var ENTRY_ACTIONS = {\n\t        "tab": "next",\n\t        "shift+tab": "previous",\n\t        "enter": "lower",\n\t        "shift+enter": "upper",\n\t        "delete": "clearContents",\n\t        "backspace": "clearContents",\n\t        "shift+:alphanum": "edit",\n\t        "alt+:alphanum": "edit",\n\t        ":alphanum": "edit",\n\t        "ctrl+:alphanum": "ctrl",\n\t        "alt+ctrl+:alphanum": "edit",\n\t        ":edit": "edit"\n\t    };\n\n\t    var CONTAINER_EVENTS = {\n\t        "wheel": "onWheel",\n\t        "*+mousedown": "onMouseDown",\n\t        "contextmenu": "onContextMenu",\n\t        "*+mousedrag": "onMouseDrag",\n\t        "*+mouseup": "onMouseUp",\n\t        "*+dblclick": "onDblClick",\n\t        "mousemove": "onMouseMove",\n\t        "touchmove": "onTouchMove",\n\t        "touchend": "onTouchEnd"\n\t    };\n\n\t    var CLIPBOARD_EVENTS = {\n\t        "pageup": "onPageUp",\n\t        "pagedown": "onPageDown",\n\t        "mouseup": "onMouseUp",\n\t        "*+cut": "onCut",\n\t        "*+paste": "onPaste",\n\t        "*+copy": "onCopy"\n\t    };\n\n\t    var EDITOR_EVENTS = {\n\t        "esc": "onEditorEsc",\n\t        "enter": "onEditorBlur",\n\t        "alt+enter": "insertNewline",\n\t        "shift+enter": "onEditorBlur",\n\t        "tab": "onEditorBlur",\n\t        "shift+tab": "onEditorBlur",\n\t        "shift+ctrl+enter": "onEditorArrayFormula"\n\t    };\n\n\t    var FORMULABAR_EVENTS = $.extend({ focus: "onEditorBarFocus" }, EDITOR_EVENTS);\n\t    var FORMULAINPUT_EVENTS = $.extend({ focus: "onEditorCellFocus" }, EDITOR_EVENTS);\n\n\t    var SELECTION_MODES = {\n\t       cell: "range",\n\t       rowheader: "row",\n\t       columnheader: "column",\n\t       topcorner: "sheet",\n\t       autofill: "autofill"\n\t    };\n\n\t    function toActionSelector(selectors) {\n\t        return selectors.map(function(action) {\n\t            return \'[data-action="\' + action + \'"]\';\n\t        }).join(",");\n\t    }\n\n\t    var COMPOSITE_UNAVAILABLE_ACTION_SELECTORS = toActionSelector([ \'cut\', \'copy\', \'paste\', \'insert-left\', \'insert-right\', \'insert-above\', \'insert-below\' ]);\n\t    var UNHIDE_ACTION_SELECTORS = toActionSelector([ \'unhide-row\', \'unhide-column\' ]);\n\n\t    var ACTION_KEYS = [];\n\t    var SHIFT_ACTION_KEYS = [];\n\t    var ENTRY_ACTION_KEYS = [];\n\n\t    for (var key in ACTIONS) {\n\t        ACTION_KEYS.push(key);\n\t        SHIFT_ACTION_KEYS.push("shift+" + key);\n\t    }\n\n\t    for (key in ENTRY_ACTIONS) {\n\t        ENTRY_ACTION_KEYS.push(key);\n\t    }\n\n\t    CLIPBOARD_EVENTS[ACTION_KEYS] = "onAction";\n\t    CLIPBOARD_EVENTS[SHIFT_ACTION_KEYS] = "onShiftAction";\n\t    CLIPBOARD_EVENTS[ENTRY_ACTION_KEYS] = "onEntryAction";\n\n\t    FORMULAINPUT_EVENTS[ACTION_KEYS] = "onEditorAction";\n\t    FORMULAINPUT_EVENTS[SHIFT_ACTION_KEYS] = "onEditorShiftAction";\n\n\t    var Controller = kendo.Class.extend({\n\t        init: function(view, workbook) {\n\t            this.view = view;\n\t            this.workbook(workbook);\n\t            this.container = $(view.container);\n\t            this.clipboardElement = $(view.clipboard);\n\t            this.cellContextMenu = view.cellContextMenu;\n\t            this.rowHeaderContextMenu = view.rowHeaderContextMenu;\n\t            this.colHeaderContextMenu = view.colHeaderContextMenu;\n\t            this.drawingContextMenu = view.drawingContextMenu;\n\t            this.scroller = view.scroller;\n\t            this.tabstrip = view.tabstrip;\n\t            this.sheetsbar = view.sheetsbar;\n\n\t            view.nameEditor.bind("enter", this.onNameEditorEnter.bind(this));\n\t            view.nameEditor.bind("cancel", this.onNameEditorCancel.bind(this));\n\t            view.nameEditor.bind("select", this.onNameEditorSelect.bind(this));\n\t            view.nameEditor.bind("delete", this.onNameEditorDelete.bind(this));\n\n\t            this.editor = view.editor;\n\t            this.editor.bind("change", this.onEditorChange.bind(this));\n\t            this.editor.bind("activate", this.onEditorActivate.bind(this));\n\t            this.editor.bind("deactivate", this.onEditorDeactivate.bind(this));\n\t            this.editor.bind("update", this.onEditorUpdate.bind(this));\n\n\t            $(view.scroller).on("scroll", this.onScroll.bind(this));\n\t            this.listener = new kendo.spreadsheet.EventListener(this.container, this, CONTAINER_EVENTS);\n\n\t            this._enableEditorEvents();\n\n\t            if (this.sheetsbar) {\n\t                this.sheetsbar.bind("select", this.onSheetBarSelect.bind(this));\n\t                this.sheetsbar.bind("reorder", this.onSheetBarReorder.bind(this));\n\t                this.sheetsbar.bind("rename", this.onSheetBarRename.bind(this));\n\t                this.sheetsbar.bind("remove", this.onSheetBarRemove.bind(this));\n\t            }\n\n\t            this.cellContextMenu.bind("select", this.onContextMenuSelect.bind(this));\n\t            this.rowHeaderContextMenu.bind("select", this.onContextMenuSelect.bind(this));\n\t            this.colHeaderContextMenu.bind("select", this.onContextMenuSelect.bind(this));\n\t            this.drawingContextMenu.bind("select", this.onContextMenuSelect.bind(this));\n\n\t            // this is necessary for Windows to catch prevent context menu correctly\n\t            this.cellContextMenu.element\n\t                .add(this.rowHeaderContextMenu.element)\n\t                .add(this.colHeaderContextMenu.element)\n\t                .add(this.drawingContextMenu.element)\n\t                .on("contextmenu", false);\n\n\t            if (this.tabstrip) {\n\t                this.tabstrip.bind("action", this.onCommandRequest.bind(this));\n\t                this.tabstrip.bind("dialog", this.onDialogRequest.bind(this));\n\t            }\n\t        },\n\n\t        _enableEditorEvents: function (enable) {\n\t            if (enable === undefined || enable) {\n\t                this.keyListener = new kendo.spreadsheet.EventListener(this.clipboardElement, this, CLIPBOARD_EVENTS);\n\t                this.barKeyListener = new kendo.spreadsheet.EventListener(this.editor.barElement(), this, FORMULABAR_EVENTS);\n\t                this.inputKeyListener = new kendo.spreadsheet.EventListener(this.editor.cellElement(), this, FORMULAINPUT_EVENTS);\n\t            } else {\n\t                this.keyListener.destroy();\n\t                this.barKeyListener.destroy();\n\t                this.inputKeyListener.destroy();\n\t            }\n\t        },\n\n\t        _execute: function(options) {\n\t            var result = this._workbook.execute(options);\n\n\t            if (options.command === "EditCommand" && !result) {\n\t                this._workbook.trigger("change", { editorClose: true });\n\t            }\n\n\t            if (result) {\n\t                this._preventNavigation = true;\n\t                if (result.reason === "error") {\n\t                    this.editor.deactivate(true); // make sure we don\'t call any change hooks\n\t                    this.view.showError(result, function(){\n\t                        // we only get here in case of a validation error when the user decided to retry.\n\t                        this.activateEditor(false);\n\t                        // reset to last input from user\n\t                        this.editor.value(this._lastEditorValue);\n\t                        // however, set _value manually such that it\'ll detect change properly.  ugly :-\\\n\t                        this.editor._value = this._workbook._inputForRef(this._workbook.activeSheet()._viewActiveCell());\n\t                        // seems like a nice UX to have the whole input selected\n\t                        this.editor.select();\n\t                    }.bind(this));\n\t                } else {\n\t                    this.view.openDialog(result.reason);\n\t                }\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _activeTooltip: function() {\n\t            return this._workbook.activeSheet().activeCell().simplify().toString();\n\t        },\n\n\t        onContextMenuSelect: function(e) {\n\t            var action = $(e.item).data("action");\n\t            var command;\n\t            switch(action) {\n\t              case "cut":\n\t                command = { command: "ToolbarCutCommand", options: { workbook: this._workbook } };\n\t                break;\n\t              case "copy":\n\t                command = { command: "ToolbarCopyCommand", options: { workbook: this._workbook } };\n\t                break;\n\t              case "paste":\n\t                command = { command: "ToolbarPasteCommand", options: { workbook: this._workbook } };\n\t                break;\n\t              case "delete-drawing":\n\t                command = { command: "DeleteDrawingCommand", options: { drawing: this.navigator._sheet._activeDrawing } };\n\t                break;\n\t              case "bring-to-front":\n\t                command = { command: "BringToFrontCommand", options: { drawing: this.navigator._sheet._activeDrawing } };\n\t                break;\n\t              case "send-to-back":\n\t                command = { command: "SendToBackCommand", options: { drawing: this.navigator._sheet._activeDrawing } };\n\t                break;\n\t              case "unmerge":\n\t                command = { command: "MergeCellCommand", options: { value: "unmerge" } };\n\t                break;\n\t              case "merge":\n\t                this.view.openDialog("merge");\n\t                break;\n\t              case "hide-row":\n\t                command = { command: "HideLineCommand", options: { axis: "row" } };\n\t                break;\n\t              case "hide-column":\n\t                command = { command: "HideLineCommand", options: { axis: "column" } };\n\t                break;\n\t              case "unhide-row":\n\t                command = { command: "UnHideLineCommand", options: { axis: "row" } };\n\t                break;\n\t              case "unhide-column":\n\t                command = { command: "UnHideLineCommand", options: { axis: "column" } };\n\t                break;\n\t              case "delete-row":\n\t                command = { command: "DeleteRowCommand" };\n\t                break;\n\t              case "delete-column":\n\t                command = { command: "DeleteColumnCommand" };\n\t                break;\n\t            }\n\n\t            if (command) {\n\t                this._execute(command);\n\t            }\n\t        },\n\n\t        onSheetBarRemove: function(e) {\n\t            var sheet = this._workbook.sheetByName(e.name);\n\n\t            //TODO: move to model!\n\t            if (!sheet) {\n\t                return;\n\t            }\n\n\t            this._workbook.removeSheet(sheet);\n\t        },\n\n\t        destroy: function() {\n\t            this.listener.destroy();\n\t            this._enableEditorEvents(false);\n\t            this.keyListener.destroy();\n\t            this.inputKeyListener.destroy();\n\t        },\n\n\t        onSheetBarSelect: function(e) {\n\t            var sheet;\n\t            var workbook = this._workbook;\n\n\t            if (e.isAddButton) {\n\t                if (this._workbook.trigger("insertSheet")) {\n\t                    return;\n\t                }\n\n\t                sheet = workbook.insertSheet();\n\t            } else {\n\t                sheet = workbook.sheetByName(e.name);\n\t            }\n\n\t            //TODO: move to model\n\t            if (workbook.activeSheet().name() !== sheet.name()) {\n\t                if (this._workbook.trigger("selectSheet", { sheet: sheet })) {\n\t                    return;\n\t                }\n\n\t                if (!this.editor.canInsertRef(false)) {\n\t                    this.editor.deactivate();\n\t                }\n\n\t                workbook.activeSheet(sheet);\n\t            }\n\t        },\n\n\t        onSheetBarReorder: function(e) {\n\t            var sheet = this._workbook.sheetByIndex(e.oldIndex);\n\n\t            this._workbook.moveSheetToIndex(sheet, e.newIndex);\n\n\t            this._workbook.activeSheet(sheet);\n\t        },\n\n\t        onSheetBarRename: function(e) {\n\t            var sheet = this._workbook.sheetByIndex(e.sheetIndex);\n\n\t            if (this._workbook.sheetByName(e.name)) {\n\t                this.view.showError({ reason: "error", type: "duplicateSheetName" });\n\t                return;\n\t            }\n\n\t            this._workbook.renameSheet(sheet, e.name);\n\n\t            this.clipboardElement.focus();\n\t        },\n\n\t        sheet: function(sheet) {\n\t            this.navigator = sheet.navigator();\n\t            this.axisManager = sheet.axisManager();\n\t        },\n\n\t        workbook: function(workbook) {\n\t            this._workbook = workbook;\n\t            this.clipboard = workbook.clipboard();\n\t            workbook.bind("commandRequest", this.onCommandRequest.bind(this));\n\t        },\n\n\t        refresh: function() {\n\t            var editor = this.editor;\n\t            var workbook = this._workbook;\n\t            var sheet = workbook.activeSheet();\n\n\t            this._viewPortHeight = this.view.scroller.clientHeight;\n\t            this.navigator.height(this._viewPortHeight);\n\n\t            if (!editor.isActive() && !this.isEditorDisabled) {\n\t                editor.enable(sheet.selection().enable() !== false);\n\t                this.resetEditorValue();\n\t            }\n\n\t            var ref = sheet.selection()._ref.simplify();\n\t            var def = this._workbook.nameForRef(ref, sheet.name());\n\t            this.view.nameEditor.value(def.name);\n\t        },\n\n\t        onScroll: function() {\n\t            this.view.render({ scroll: true });\n\t        },\n\n\t        onWheel: function(event) {\n\t            var deltaX = event.originalEvent.deltaX;\n\t            var deltaY = event.originalEvent.deltaY;\n\n\t            if (event.originalEvent.deltaMode === 1) {\n\t                deltaX *= 10;\n\t                deltaY *= 10;\n\t            }\n\n\t            this.scrollWith(deltaX, deltaY);\n\n\t            event.preventDefault();\n\t        },\n\n\t        onTouchMove: function() {\n\t            this.view.forceScrollerStackingOrder(2);\n\t        },\n\n\t        onTouchEnd: function() {\n\t            this.view.forceScrollerStackingOrder(1);\n\t        },\n\n\t        onAction: function(event, action) {\n\t            var sheet = this._workbook.activeSheet();\n\t            sheet._activeDrawing = null;\n\t            this.navigator.moveActiveCell(ACTIONS[action]);\n\t            event.preventDefault();\n\t        },\n\n\t        onPageUp: function() {\n\t            this.scrollDown(-this._viewPortHeight);\n\t        },\n\n\t        onPageDown: function() {\n\t            this.scrollDown(this._viewPortHeight);\n\t        },\n\n\t        onEntryAction: function(event, action) {\n\t            var sheet = this._workbook.activeSheet();\n\n\t            if (event.mod) {\n\t                var key = String.fromCharCode(event.keyCode);\n\t                var shouldPrevent = true;\n\n\t                switch(key) {\n\t                  case "A":\n\t                    sheet._activeDrawing = null;\n\t                    this.navigator.selectAll();\n\t                    break;\n\t                  case "Y":\n\t                    this._workbook.undoRedoStack.redo();\n\t                    break;\n\t                  case "Z":\n\t                    this._workbook.undoRedoStack.undo();\n\t                    break;\n\t                  default:\n\t                    shouldPrevent = false;\n\t                    break;\n\t                }\n\t                if (shouldPrevent) {\n\t                    event.preventDefault();\n\t                }\n\t            } else {\n\t                var disabled = sheet.selection().enable() === false;\n\t                var casual = action !== ":edit";\n\n\t                if (action == "delete" || action == "backspace") {\n\t                    if (sheet._activeDrawing) {\n\t                        this._execute({\n\t                            command: "DeleteDrawingCommand",\n\t                            options: { drawing: sheet._activeDrawing }\n\t                        });\n\t                    } else if (!disabled) {\n\t                        this._execute({ command: "ClearContentCommand" });\n\t                    }\n\t                    event.preventDefault();\n\t                } else if (alphaNumRegExp.test(action) || !casual) {\n\t                    sheet._activeDrawing = null;\n\t                    if (disabled) {\n\t                        event.preventDefault();\n\t                        return;\n\t                    }\n\t                    if (casual) {\n\t                        this.editor.value("");\n\t                    }\n\t                    this.activateEditor(casual);\n\t                } else {\n\t                    this.navigator.navigateInSelection(ENTRY_ACTIONS[action]);\n\t                    event.preventDefault();\n\t                }\n\t            }\n\t        },\n\n\t        onShiftAction: function(event, action) {\n\t            this.navigator.modifySelection(ACTIONS[action.replace("shift+", "")], this.appendSelection);\n\t            event.preventDefault();\n\t        },\n\n\t        onMouseMove: function(event) {\n\t            var sheet = this._workbook.activeSheet();\n\n\t            if (sheet.resizingInProgress() || sheet.selectionInProgress()) {\n\t                return;\n\t            }\n\n\t            var object = this.objectAt(event);\n\t            if (object.type === "columnresizehandle" || object.type === "rowresizehandle") {\n\t                sheet.positionResizeHandle(object.ref);\n\t            } else {\n\t                sheet.removeResizeHandle();\n\t            }\n\n\t            sheet._renderComment(object.type == "cell" ? object.ref : null);\n\t        },\n\n\t        onMouseDown: function(event) {\n\t            var object = this.objectAt(event);\n\t            if (object.pane) {\n\t                this.originFrame = object.pane;\n\t            }\n\n\t            if (this._startResizingDrawing(event, object)) {\n\t                event.stopPropagation();\n\t                return;\n\t            }\n\n\t            var sheet = this._workbook.activeSheet();\n\t            var win = this.container.closest(\'[data-role="window"]\');\n\t            if (win.length) {\n\t                win = kendo.widgetInstance(win);\n\t                if (win && win.options.modal) {\n\t                    event.stopPropagation();\n\t                }\n\t            }\n\n\t            sheet._activeDrawing = null;\n\t            if (object.type === "drawing") {\n\t                sheet._activeDrawing = object.drawing;\n\t                object.copy = object.drawing.clone();\n\t                object.startBox = sheet.drawingBoundingBox(object.copy);\n\t                sheet.startDragging(object);\n\t                sheet.triggerChange({ dragging: true });\n\t                event.preventDefault();\n\t                return;\n\t            }\n\n\t            if (object.type === "editor") {\n\t                // XXX: canceling the edits, because they might not\n\t                // validate.  Not sure it\'s the Right Thing.\n\t                this.onEditorEsc();\n\t                this.openCustomEditor();\n\t                event.preventDefault();\n\t                return;\n\t            }\n\n\t            if (this.editor.canInsertRef(false) && object.ref) {\n\t                this._workbook.activeSheet()._setFormulaSelections(this.editor.highlightedRefs());\n\t                this.navigator.startSelection(object.ref, this._selectionMode, this.appendSelection, event.shiftKey, this.view);\n\t                event.preventDefault();\n\t                return;\n\t            } else {\n\t                this._preventNavigation = false;\n\t                this.editor.deactivate();\n\t                if (this._preventNavigation) {\n\t                    return;     // validation error\n\t                }\n\t            }\n\n\t            if (object.type === "columnresizehandle" || object.type === "rowresizehandle") {\n\t                sheet.startResizing({ x: object.x, y: object.y });\n\t                event.preventDefault();\n\t                return;\n\t            }\n\n\t            if (object.type === "filtericon") {\n\t                this.openFilterMenu(event);\n\t                event.preventDefault();\n\t                return;\n\t            }\n\n\t            this._selectionMode = SELECTION_MODES[object.type];\n\t            this.appendSelection = event.mod;\n\t            this.navigator.startSelection(object.ref, this._selectionMode, this.appendSelection, event.shiftKey, this.view);\n\t        },\n\n\t        _startResizingDrawing: function(event) {\n\t            var handle = $(event.target).closest(".k-spreadsheet-drawing-handle");\n\t            if (handle.length) {\n\t                var location = this.translateCoords(event);\n\t                var direction = handle.data("direction");\n\t                var sheet = this._workbook.activeSheet();\n\t                var drawing = sheet._activeDrawing;\n\t                sheet.startDragging({\n\t                    pane     : this.originFrame,\n\t                    drawing  : drawing,\n\t                    copy     : drawing.clone(),\n\t                    startBox : sheet.drawingBoundingBox(drawing),\n\t                    resize   : direction,\n\t                    //aspect   : drawing.width / drawing.height,\n\t                    startX   : location.x,\n\t                    startY   : location.y\n\t                });\n\t                return true;\n\t            }\n\t        },\n\n\t        onContextMenu: function(event) {\n\t            var sheet = this._workbook.activeSheet();\n\n\t            event.preventDefault();\n\n\t            if (sheet.resizingInProgress() || sheet.draggingInProgress()) {\n\t                return;\n\t            }\n\n\t            this.cellContextMenu.close();\n\t            this.colHeaderContextMenu.close();\n\t            this.rowHeaderContextMenu.close();\n\t            this.drawingContextMenu.close();\n\n\t            var menu;\n\n\t            var object = this.objectAt(event);\n\n\t            if (object.type === "columnresizehandle" || object.type === "rowresizehandle") {\n\t                return;\n\t            }\n\n\t            if (object.ref) {\n\t                this.navigator.selectForContextMenu(object.ref, SELECTION_MODES[object.type]);\n\t            } else if (object.type == "drawing") {\n\t                this.navigator.selectDrawingForContextMenu(object.drawing);\n\t            }\n\n\t            var isComposite = this.navigator._sheet.select() instanceof kendo.spreadsheet.UnionRef;\n\t            var showUnhide = false;\n\t            var showUnmerge = false;\n\n\t            if (object.type == "columnheader") {\n\t                menu = this.colHeaderContextMenu;\n\t                showUnhide = !isComposite && this.axisManager.selectionIncludesHiddenColumns();\n\t            } else if (object.type == "rowheader") {\n\t                menu = this.rowHeaderContextMenu;\n\t                showUnhide = !isComposite && this.axisManager.selectionIncludesHiddenRows();\n\t            } else if (object.type == "drawing") {\n\t                menu = this.drawingContextMenu;\n\t            } else {\n\t                menu = this.cellContextMenu;\n\t                showUnmerge = this.navigator.selectionIncludesMergedCells();\n\t            }\n\n\t            menu.element.find(COMPOSITE_UNAVAILABLE_ACTION_SELECTORS).toggle(!isComposite);\n\t            menu.element.find(UNHIDE_ACTION_SELECTORS).toggle(showUnhide);\n\t            menu.element.find(\'[data-action=unmerge]\').toggle(showUnmerge);\n\n\t            // avoid the immediate close\n\t            setTimeout(function() {\n\t                menu.open(event.pageX, event.pageY);\n\t            });\n\t        },\n\n\t        prevent: function(event) {\n\t            event.preventDefault();\n\t        },\n\n\t        constrainResize: function(type, ref) {\n\t            var sheet = this._workbook.activeSheet();\n\t            var resizeHandle = sheet.resizeHandlePosition();\n\n\t            return !resizeHandle || type === "outside" || type === "topcorner" || ref.col < resizeHandle.col || ref.row < resizeHandle.row;\n\t        },\n\n\t        _dragDrawing: function(event) {\n\t            var sheet = this._workbook.activeSheet();\n\t            var drag = sheet.draggingInProgress();\n\t            if (!drag) {\n\t                return false;\n\t            }\n\n\t            var location = this.translateCoords(event);\n\t            var drawing = drag.drawing;\n\t            var deltaX = location.x - drag.startX;\n\t            var deltaY = location.y - drag.startY;\n\n\t            if (drag.resize == "SE") {\n\t                if (drag.aspect) {\n\t                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n\t                        drawing.width = Math.max(drag.copy.width + deltaX, 20);\n\t                        drawing.height = drawing.width / drag.aspect;\n\t                    } else {\n\t                        drawing.height = Math.max(drag.copy.height + deltaY, 20);\n\t                        drawing.width = drawing.height * drag.aspect;\n\t                    }\n\t                } else {\n\t                    drawing.width = Math.max(drag.copy.width + deltaX, 20);\n\t                    drawing.height = Math.max(drag.copy.height + deltaY, 20);\n\t                }\n\t            }\n\t            else if (drag.resize == "E") {\n\t                drawing.width = Math.max(drag.copy.width + deltaX, 20);\n\t            }\n\t            else if (drag.resize == "S") {\n\t                drawing.height = Math.max(drag.copy.height + deltaY, 20);\n\t            }\n\t            else if (drag.resize == "N") {\n\t                if (drag.copy.height - deltaY > 20) {\n\t                    drawing.height = drag.copy.height - deltaY;\n\t                    drawing.offsetY = drag.copy.offsetY + deltaY;\n\t                }\n\t            }\n\t            else if (drag.resize == "W") {\n\t                if (drag.copy.width - deltaX > 20) {\n\t                    drawing.width = drag.copy.width - deltaX;\n\t                    drawing.offsetX = drag.copy.offsetX + deltaX;\n\t                }\n\t            }\n\t            else if (drag.resize == "NE") {\n\t                drawing.width = Math.max(drag.copy.width + deltaX, 20);\n\t                if (drag.copy.height - deltaY > 20) {\n\t                    drawing.height = drag.copy.height - deltaY;\n\t                    drawing.offsetY = drag.copy.offsetY + deltaY;\n\t                }\n\t            }\n\t            else if (drag.resize == "SW") {\n\t                drawing.height = Math.max(drag.copy.height + deltaY, 20);\n\t                if (drag.copy.width - deltaX > 20) {\n\t                    drawing.width = drag.copy.width - deltaX;\n\t                    drawing.offsetX = drag.copy.offsetX + deltaX;\n\t                }\n\t            }\n\t            else if (drag.resize == "NW") {\n\t                if (drag.copy.height - deltaY > 20) {\n\t                    drawing.height = drag.copy.height - deltaY;\n\t                    drawing.offsetY = drag.copy.offsetY + deltaY;\n\t                }\n\t                if (drag.copy.width - deltaX > 20) {\n\t                    drawing.width = drag.copy.width - deltaX;\n\t                    drawing.offsetX = drag.copy.offsetX + deltaX;\n\t                }\n\t            }\n\t            // just moving (no resize)\n\t            else {\n\t                drawing.offsetX = drag.copy.offsetX + deltaX;\n\t                drawing.offsetY = drag.copy.offsetY + deltaY;\n\t            }\n\n\t            sheet.triggerChange({ dragging: true });\n\n\t            return true;\n\t        },\n\n\t        onMouseDrag: function(event) {\n\t            if (this._selectionMode === "sheet") {\n\t                return;\n\t            }\n\n\t            var location = { clientX: event.clientX, clientY: event.clientY };\n\t            var sheet = this._workbook.activeSheet();\n\n\t            if (this._dragDrawing(event)) {\n\t                return;\n\t            }\n\n\t            var object = this.objectAt(location);\n\n\t            if (sheet.resizingInProgress()) {\n\n\t                if (!this.constrainResize(object.type, object.ref)) {\n\t                    sheet.resizeHintPosition({ x: object.x, y: object.y });\n\t                }\n\n\t                return;\n\t            }\n\n\t            if (object.type === "outside") {\n\t                this.startAutoScroll(object);\n\t                return;\n\t            }\n\n\t            if (this.originFrame === object.pane) {\n\t                this.selectToLocation(location);\n\t            } else { // cross frame selection\n\t                var frame = this.originFrame._grid;\n\n\t                if (object.x > frame.right) {\n\t                    this.scrollLeft();\n\t                }\n\n\t                if (object.y > frame.bottom) {\n\t                    this.scrollTop();\n\t                }\n\n\t                if (object.y < frame.top || object.x < frame.left) {\n\t                    this.startAutoScroll(object, location);\n\t                } else {\n\t                    this.selectToLocation(location);\n\t                }\n\t            }\n\n\t            event.preventDefault();\n\t        },\n\n\t        onMouseUp: function(event) {\n\t            var sheet = this._workbook.activeSheet();\n\t            sheet.completeResizing();\n\t            sheet.completeDragging();\n\n\t            this.navigator.completeSelection();\n\t            this.stopAutoScroll();\n\n\t            var editor = this.editor.activeEditor();\n\t            if (!editor) {\n\t                return;\n\t            }\n\t            var el = event.target;\n\t            while (el) {\n\t                if (el === editor.element[0]) {\n\t                    return;\n\t                }\n\t                el = el.parentNode;\n\t            }\n\n\t            var object = this.objectAt(event);\n\t            if (object && object.ref && editor.canInsertRef(false)) {\n\t                editor.refAtPoint(sheet);\n\t                sheet._setFormulaSelections(editor.highlightedRefs());\n\t            }\n\t        },\n\n\t        onDblClick: function(event) {\n\t            var object = this.objectAt(event);\n\t            var disabled = this._workbook.activeSheet().selection().enable() === false;\n\n\t            if (object.type !== "cell" || disabled) {\n\t                return;\n\t            }\n\n\t            var sel = this._workbook.activeSheet().selection();\n\t            this.activateEditor(!sel.value() && !sel.formula());\n\t            this.onEditorUpdate();\n\t        },\n\n\t        onCut: function(e) {\n\t            if (e) {\n\t                var table = this.clipboardElement.find("table.kendo-clipboard-"+ this.clipboard._uid).detach();\n\t                this.clipboardElement.append(table.clone(false));\n\t                setTimeout(function() {\n\t                    this.clipboardElement.empty().append(table);\n\t                }.bind(this));\n\t            }\n\n\t            this.clipboard.menuInvoked = (e === undefined);\n\t            this._execute({\n\t                command: "CutCommand",\n\t                options: { workbook: this.view._workbook, event: e.originalEvent || e }\n\t            });\n\t        },\n\n\t        clipBoardValue: function() {\n\t            return this.clipboardElement.html();\n\t        },\n\n\t        _pasteImage: function(blob) {\n\t            var self = this;\n\t            var img = new window.Image();\n\t            img.src = window.URL.createObjectURL(blob);\n\t            img.onload = function() {\n\t                self._execute({\n\t                    command: "InsertImageCommand",\n\t                    options: {\n\t                        blob: blob,\n\t                        width: img.width,\n\t                        height: img.height\n\t                    }\n\t                });\n\t            };\n\t            setTimeout(function(){\n\t                window.URL.revokeObjectURL(img.src);\n\t            }, 10);\n\t        },\n\n\t        onPaste: function(e) {\n\t            var self = this;\n\t            var html = "";\n\t            var plain = "";\n\t            self.clipboard.menuInvoked = (e === undefined);\n\t            if (e) {\n\t                var clipboardData = e.originalEvent.clipboardData;\n\t                if (clipboardData && clipboardData.getData) {\n\t                    e.preventDefault();\n\t                    var hasHTML = false;\n\t                    var hasPlainText = false;\n\t                    // Firefox uses DOMStringList, needs special handling\n\t                    if (window.DOMStringList && clipboardData.types instanceof window.DOMStringList) {\n\t                        hasHTML = clipboardData.types.contains("text/html");\n\t                        hasPlainText = clipboardData.types.contains("text/plain");\n\t                    } else if (Array.isArray(clipboardData.types)) {\n\t                        hasHTML = clipboardData.types.indexOf("text/html") >= 0;\n\t                        hasPlainText = clipboardData.types.indexOf("text/plain") >= 0;\n\t                    } else {\n\t                        hasHTML = /text\\/html/.test(clipboardData.types);\n\t                        hasPlainText = /text\\/plain/.test(clipboardData.types);\n\t                    }\n\t                    if (hasHTML) {\n\t                        html = clipboardData.getData(\'text/html\').trim();\n\t                    }\n\t                    if (hasPlainText) {\n\t                        plain = clipboardData.getData(\'text/plain\').trim();\n\t                    }\n\t                    if (!html && !plain && clipboardData.items && clipboardData.items.length) {\n\t                        for (var i = 0; i < clipboardData.items.length; ++i) {\n\t                            var item = clipboardData.items[i];\n\t                            if (item.kind == "file" && /^image\\/(?:png|jpe?g|gif)$/i.test(item.type)) {\n\t                                return self._pasteImage(item.getAsFile());\n\t                            }\n\t                        }\n\t                    }\n\t                } else {\n\t                    // workaround for IE\'s lack of access to the HTML clipboard data\n\t                    var table = self.clipboardElement.find("table.kendo-clipboard-"+ self.clipboard._uid).detach();\n\t                    self.clipboardElement.empty();\n\n\t                    if (window.clipboardData.files && window.clipboardData.files.length) {\n\t                        var file = window.clipboardData.files[0];\n\t                        if (/^image\\/(?:png|jpe?g|gif)$/i.test(file.type)) {\n\t                            return self._pasteImage(file);\n\t                        }\n\t                    }\n\t                    html = self.clipboardElement.html();\n\t                    plain = window.clipboardData.getData("Text");\n\t                    if (plain) {\n\t                        plain = plain.trim();\n\t                    }\n\t                    if (!html && !plain) {\n\t                        return;\n\t                    }\n\t                    self.clipboard.external({ html: html, plain: plain });\n\t                    self.clipboardElement.empty().append(table);\n\t                    self._execute({\n\t                        command: "PasteCommand",\n\t                        options: { workbook: self.view._workbook, event: e.originalEvent || e }\n\t                    });\n\t                    self.clipboard.menuInvoked = true;\n\n\t                    return;\n\t                }\n\t            } else {\n\t                if (kendo.support.browser.msie) {\n\t                    self.clipboardElement.focus().select();\n\t                    document.execCommand(\'paste\');\n\t                    return;\n\t                } else {\n\t                    self.clipboard.menuInvoked = true;\n\t                }\n\t            }\n\n\t            if (!html && !plain) {\n\t                return;\n\t            }\n\t            self.clipboard.external({ html: html, plain:plain });\n\t            self._execute({\n\t                command: "PasteCommand",\n\t                options: { workbook: self.view._workbook, event: e.originalEvent || e }\n\t            });\n\t        },\n\n\t        onCopy: function(e) {\n\t            this.clipboard.menuInvoked = (e === undefined);\n\t            this._execute({\n\t                command: "CopyCommand",\n\t                options: { workbook: this.view._workbook, event: e.originalEvent || e }\n\t            });\n\t        },\n\n\t////////////////////////////////////////////////////////////////////\n\n\t        scrollTop: function() {\n\t            this.scroller.scrollTop = 0;\n\t        },\n\n\t        scrollLeft: function() {\n\t            this.scroller.scrollLeft = 0;\n\t        },\n\n\t        scrollDown: function(value) {\n\t            this.scroller.scrollTop += value;\n\t        },\n\n\t        scrollRight: function(value) {\n\t            this.scroller.scrollLeft += value;\n\t        },\n\n\t        scrollWith: function(right, down) {\n\t            this.scroller.scrollTop += down;\n\t            this.scroller.scrollLeft += right;\n\t        },\n\n\t        translateCoords: function(location) {\n\t            var box = this.container[0].getBoundingClientRect();\n\t            return {\n\t                x: location.clientX - box.left,\n\t                y: location.clientY - box.top\n\t            };\n\t        },\n\n\t        objectAt: function(location, noDrawing) {\n\t            if (!location) {\n\t                return;\n\t            }\n\t            location = this.translateCoords(location);\n\t            return this.view.objectAt(location.x, location.y, noDrawing);\n\t        },\n\n\t        selectToLocation: function(cellLocation) {\n\t            var object = this.objectAt(cellLocation, true);\n\n\t            if (object.pane && object.ref) { // cell, rowheader or columnheader\n\t                this.extendSelection(object);\n\t                this.lastKnownCellLocation = cellLocation;\n\t                this.originFrame = object.pane;\n\t            }\n\n\t            this.stopAutoScroll();\n\t        },\n\n\t        extendSelection: function(object) {\n\t            this.navigator.extendSelection(object.ref, this._selectionMode);\n\t        },\n\n\t        autoScroll: function() {\n\t            var x = this._autoScrollTarget.x;\n\t            var y = this._autoScrollTarget.y;\n\t            var boundaries = this.originFrame._grid;\n\t            var scroller = this.view.scroller;\n\t            var scrollStep = 8;\n\n\t            var scrollLeft = scroller.scrollLeft;\n\t            var scrollTop = scroller.scrollTop;\n\n\t            if (x < boundaries.left) {\n\t                this.scrollRight(-scrollStep);\n\t            }\n\t            if (x > boundaries.right) {\n\t                this.scrollRight(scrollStep);\n\t            }\n\t            if (y < boundaries.top) {\n\t                this.scrollDown(-scrollStep);\n\t            }\n\t            if (y > boundaries.bottom) {\n\t                this.scrollDown(scrollStep);\n\t            }\n\n\t            if (scrollTop === scroller.scrollTop && scrollLeft === scroller.scrollLeft) {\n\t                this.selectToLocation(this.finalLocation);\n\t            } else {\n\t                this.extendSelection(this.objectAt(this.lastKnownCellLocation));\n\t            }\n\t        },\n\n\t        startAutoScroll: function(viewObject, location) {\n\t            if (!this._scrollInterval) {\n\t                this._scrollInterval = setInterval(this.autoScroll.bind(this), 50);\n\t            }\n\n\t            this.finalLocation = location || this.lastKnownCellLocation;\n\n\t            this._autoScrollTarget = viewObject;\n\t        },\n\n\t        stopAutoScroll: function() {\n\t            clearInterval(this._scrollInterval);\n\t            this._scrollInterval = null;\n\t        },\n\n\t        openCustomEditor: function() {\n\t            this.view.openCustomEditor();\n\t        },\n\n\t        openFilterMenu: function(event) {\n\t            var object = this.objectAt(event);\n\t            var sheet = this._workbook.activeSheet();\n\t            var column = sheet.filterColumn(object.ref);\n\t            var filterMenu = this.view.createFilterMenu(column);\n\n\t            filterMenu.bind("action", this.onCommandRequest.bind(this));\n\t            filterMenu.bind("action", filterMenu.close.bind(filterMenu));\n\n\t            filterMenu.openFor(event.target);\n\t        },\n\n\t////////////////////////////////////////////////////////////////////\n\n\t        _saveEditorValue: function(arrayFormula) {\n\t            var sheet = this.editor._range.sheet();\n\t            var value = this.editor.value();\n\t            if (this._workbook.activeSheet() !== sheet) {\n\t                // remove highlighted refs (XXX: which are mostly wrong, BTW)\n\t                this._workbook.activeSheet()._setFormulaSelections();\n\t                // go back to the original sheet\n\t                this._workbook.activeSheet(sheet);\n\t            }\n\t            sheet.isInEditMode(false);\n\t            this._lastEditorValue = value;\n\t            this._execute({\n\t                command: "EditCommand",\n\t                options: {\n\t                    value: value,\n\t                    arrayFormula: arrayFormula\n\t                }\n\t            });\n\t        },\n\n\t        onEditorChange: function() {\n\t            this._saveEditorValue(false);\n\t        },\n\n\t        onEditorArrayFormula: function() {\n\t            this._saveEditorValue(true);\n\t            this.editor.deactivate(true);\n\t        },\n\n\t        onEditorActivate: function() {\n\t            var workbook = this._workbook;\n\t            var sheet = workbook.activeSheet();\n\n\t            sheet._setFormulaSelections(this.editor.highlightedRefs());\n\t            sheet.isInEditMode(true);\n\t        },\n\n\t        onEditorDeactivate: function() {\n\t            var sheet = this._workbook.activeSheet();\n\n\t            sheet.isInEditMode(false);\n\t            sheet._setFormulaSelections([]);\n\t        },\n\n\t        onEditorUpdate: function() {\n\t            this._workbook.activeSheet()._setFormulaSelections(this.editor.highlightedRefs());\n\t        },\n\n\t        onEditorBarFocus: function() {\n\t            var disabled = this._workbook.activeSheet().selection().enable() === false;\n\t            if (disabled) {\n\t                return;\n\t            }\n\t            this.editor\n\t                .activate({\n\t                    range: this._workbook.activeSheet().selection(),\n\t                    rect: this.view.activeCellRectangle(),\n\t                    tooltip: this._activeTooltip()\n\t                });\n\t        },\n\n\t        onEditorCellFocus: function() {\n\t            this.editor.scale();\n\t        },\n\n\t        onEditorEsc: function() {\n\t            this.resetEditorValue();\n\t            this.editor.deactivate();\n\n\t            this.clipboardElement.focus();\n\t        },\n\n\t        insertNewline: function(e) {\n\t            e.preventDefault();\n\t            this.editor.insertNewline();\n\t        },\n\n\t        onEditorBlur: function(_, action) {\n\t            if (this.editor.isFiltered()) {\n\t                return;\n\t            }\n\n\t            this._preventNavigation = false;\n\t            this.editor.deactivate();\n\n\t            if (!this._preventNavigation) {\n\t                this.clipboardElement.focus();\n\t                this.navigator.navigateInSelection(ENTRY_ACTIONS[action]);\n\t            }\n\t        },\n\n\t        onEditorAction: function(event, action) {\n\t            var editor = this.editor;\n\t            var sheet = this._workbook.activeSheet();\n\n\t            if (this._casualEditing && /^(?:up|right|down|left)$/.test(action)) {\n\t                this.deactivateEditor();\n\t                this.navigator.moveActiveCell(ACTIONS[action]);\n\t                event.preventDefault();\n\t            }\n\t            else if (editor.canInsertRef(true)) {\n\t                this.navigator.moveActiveCell(ACTIONS[action]);\n\t                editor.activeEditor().refAtPoint(sheet);\n\t                sheet._setFormulaSelections(editor.highlightedRefs());\n\t                event.preventDefault();\n\t            }\n\t        },\n\n\t        onEditorShiftAction: function(event, action) {\n\t            var editor = this.editor;\n\t            var sheet = this._workbook.activeSheet();\n\n\t            if (editor.canInsertRef(true)) {\n\t                this.navigator.modifySelection(ACTIONS[action.replace("shift+", "")], this.appendSelection);\n\n\t                editor.activeEditor().refAtPoint(sheet);\n\t                sheet._setFormulaSelections(editor.highlightedRefs());\n\n\t                event.preventDefault();\n\t            }\n\t        },\n\n\t////////////////////////////////////////////////////////////////////\n\t        resetEditorValue: function() {\n\t            var sheet = this._workbook.activeSheet();\n\t            var ref = sheet.activeCell();\n\t            var input = this._workbook._inputForRef(ref);\n\t            var x = sheet.range(ref).intersectingArrayFormula();\n\t            if (x) {\n\t                input = "=" + x.formula;\n\t            }\n\t            this.editor.value(input, !!x);\n\t        },\n\n\t        activateEditor: function(casual) {\n\t            // This flag will be false when F2 has been pressed, and\n\t            // true when editing is "casual", i.e., user just started\n\t            // typing.  In this case we want arrow keys to do cell\n\t            // navigation rather than move the cursor.\n\t            // https://github.com/telerik/kendo-ui-core/issues/3644\n\t            this._casualEditing = casual;\n\n\t            this.editor.activate({\n\t                range: this._workbook.activeSheet().selection(),\n\t                rect: this.view.activeCellRectangle(),\n\t                tooltip: this._activeTooltip()\n\t            }).focus();\n\t        },\n\n\t        deactivateEditor: function() {\n\t            this.view.editor.deactivate();\n\t        },\n\n\t        onCommandRequest: function(e) {\n\t            if (e.command) {\n\t                this._execute(e);\n\t            } else {\n\t                this._workbook.undoRedoStack[e.action]();\n\t            }\n\t        },\n\n\t        onDialogRequest: function(e) {\n\t            var additionalOptions = {\n\t                pdfExport: this._workbook.options.pdf,\n\t                excelExport: this._workbook.options.excel\n\t            };\n\n\t            if (e.options) {\n\t                $.extend(true, e.options, additionalOptions);\n\t            } else {\n\t                e.options = additionalOptions;\n\t            }\n\n\t            this.view.openDialog(e.name, e.options);\n\t        },\n\n\t        onNameEditorEnter: function() {\n\t            var ref;\n\t            var workbook = this._workbook;\n\t            var sheet = workbook.activeSheet();\n\t            var name = this.view.nameEditor.value();\n\n\t            // 1. does it look like a reference, or already defined\n\t            // name?  If so, just select it (don\'t define/modify any\n\t            // names)\n\t            ref = kendo.spreadsheet.calc.parseReference(name, true) || workbook.nameValue(name);\n\t            if (ref instanceof kendo.spreadsheet.Ref) {\n\t                if (ref.sheet && ref.sheet.toLowerCase() != sheet.name().toLowerCase()) {\n\t                    // reference points to another sheet, select it if found\n\t                    var tmp = workbook.sheetByName(ref.sheet);\n\t                    if (tmp) {\n\t                        workbook.activeSheet(tmp);\n\t                        sheet = tmp;\n\t                    }\n\t                }\n\t                sheet.range(ref).select();\n\t                return;\n\t            }\n\n\t            ref = sheet.selection()._ref.clone().simplify().setSheet(sheet.name(), true);\n\n\t            // XXX: should we check if a name is already defined for this range, and update it instead?\n\t            // Excel just adds a new one, and provides a more complete Name Manager dialog.\n\t            //var def = workbook.nameForRef(ref, sheet.name());\n\n\t            // just define new name\n\t            this._execute({\n\t                command: "DefineNameCommand",\n\t                options: { name: name, value: ref }\n\t            });\n\n\t            this.clipboardElement.focus();\n\t        },\n\t        onNameEditorCancel: function() {\n\t            this.clipboardElement.focus();\n\t        },\n\t        onNameEditorSelect: function(ev) {\n\t            var name = ev.name;\n\t            var workbook = this._workbook;\n\t            var sheet = workbook.activeSheet();\n\t            var ref = workbook.nameValue(name);\n\t            if (ref instanceof kendo.spreadsheet.Ref) {\n\t                if (ref.sheet && ref.sheet.toLowerCase() != sheet.name().toLowerCase()) {\n\t                    // reference points to another sheet, select it if found\n\t                    var tmp = workbook.sheetByName(ref.sheet);\n\t                    if (tmp) {\n\t                        workbook.activeSheet(tmp);\n\t                        sheet = tmp;\n\t                    }\n\t                }\n\t                sheet.range(ref).select();\n\t                return;\n\t            }\n\t            this.clipboardElement.focus();\n\t        },\n\t        onNameEditorDelete: function(ev) {\n\t            this._execute({\n\t                command: "DeleteNameCommand",\n\t                options: { name: ev.name }\n\t            });\n\t            this.clipboardElement.focus();\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.Controller = Controller;\n\t})(window.kendo);\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/controller.js?')},"./node_modules/@progress/kendo-ui/js/spreadsheet/customeditors.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/customeditors.js ***!
  \*************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1545);\n\tmodule.exports = __webpack_require__(1545);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 929:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.popup */ "./node_modules/@progress/kendo-ui/js/kendo.popup.js");\n\n/***/ }),\n\n/***/ 1009:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.listview */ "./node_modules/@progress/kendo-ui/js/kendo.listview.js");\n\n/***/ }),\n\n/***/ 1545:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20), __webpack_require__(929), __webpack_require__(1546), __webpack_require__(1009), __webpack_require__(1547) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function(kendo) {\n\n\t    "use strict";\n\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    // jshint eqnull:true\n\n\t    var $ = kendo.jQuery;\n\n\t    var EDITORS = {};\n\n\t    var registerEditor = kendo.spreadsheet.registerEditor = function(name, editor) {\n\t        EDITORS[name] = editor;\n\t    };\n\n\t    kendo.spreadsheet.Sheet.prototype.activeCellCustomEditor = function() {\n\t        var cell = this.activeCell().first();\n\n\t        if (this.range(cell).enable()) {\n\t            var val = this.validation(cell);\n\t            var key = this._properties.get("editor", this._grid.cellRefIndex(cell));\n\t            var editor;\n\n\t            if (key != null) {\n\t                editor = EDITORS[key];\n\t            }\n\t            else if (val && val.showButton) {\n\t                key = "_validation_" + val.dataType;\n\t                editor = EDITORS[key];\n\t            }\n\n\t            if (typeof editor == "function") {\n\t                editor = EDITORS[key] = editor();\n\t            }\n\n\t            return editor;\n\t        }\n\t    };\n\n\t    registerEditor("_validation_date", function(){\n\t        var context, calendar, popup;\n\n\t        function create() {\n\t            if (!calendar) {\n\t                calendar = $("<div>").kendoCalendar();\n\t                popup = $("<div>").kendoPopup();\n\t                calendar.appendTo(popup);\n\t                calendar = calendar.getKendoCalendar();\n\t                popup = popup.getKendoPopup();\n\n\t                calendar.bind("change", function(){\n\t                    popup.close();\n\t                    var date = calendar.value();\n\t                    if (!context.range.format()) {\n\t                        context.range.format("yyyy-mm-dd");\n\t                    }\n\t                    context.callback(kendo.spreadsheet.dateToNumber(date));\n\t                });\n\t            }\n\t            popup.setOptions({\n\t                anchor: context.view.element.find(".k-spreadsheet-editor-button")\n\t            });\n\t        }\n\n\t        function open() {\n\t            create();\n\t            var date = context.range.value();\n\t            if (date != null) {\n\t                calendar.value(kendo.spreadsheet.numberToDate(date));\n\t            } else {\n\t                calendar.value(null);\n\t            }\n\t            var val = context.validation;\n\t            if (val) {\n\t                var min = kendo.ui.Calendar.fn.options.min;\n\t                var max = kendo.ui.Calendar.fn.options.max;\n\t                if (/^(?:greaterThan|between)/.test(val.comparerType)) {\n\t                    min = kendo.spreadsheet.numberToDate(val.from.value);\n\t                }\n\t                if (val.comparerType == "between") {\n\t                    max = kendo.spreadsheet.numberToDate(val.to.value);\n\t                }\n\t                if (val.comparerType == "lessThan") {\n\t                    max = kendo.spreadsheet.numberToDate(val.from.value);\n\t                }\n\t                calendar.setOptions({\n\t                    disableDates: function(date) {\n\t                        var from = val.from ? val.from.value|0 : 0;\n\t                        var to = val.to ? val.to.value|0 : 0;\n\t                        date = kendo.spreadsheet.dateToNumber(date) | 0;\n\t                        return !kendo.spreadsheet.validation\n\t                            .validationComparers[val.comparerType](date, from, to);\n\t                    },\n\t                    min: min,\n\t                    max: max\n\t                });\n\t            } else {\n\t                calendar.setOptions({ disableDates: null, min: null, max: null });\n\t            }\n\t            popup.open();\n\t        }\n\n\t        return {\n\t            edit: function(options) {\n\t                context = options;\n\t                open();\n\t            },\n\t            icon: "k-i-calendar"\n\t        };\n\t    });\n\n\t    registerEditor("_validation_list", function(){\n\t        var context, list, popup;\n\t        function create() {\n\t            if (!list) {\n\t                list = $("<ul class=\'k-list k-reset\'/>").kendoStaticList({\n\t                    template   : "#:value#",\n\t                    selectable : true,\n\t                    autoBind   : false\n\t                });\n\t                popup = $("<div>").kendoPopup();\n\t                list.appendTo(popup);\n\t                popup = popup.getKendoPopup();\n\t                list = list.getKendoStaticList();\n\n\t                list.bind("change", function(){\n\t                    popup.close();\n\t                    var item = list.value()[0];\n\t                    if (item) {\n\t                        context.callback(item.value);\n\t                    }\n\t                });\n\t            }\n\t            popup.setOptions({\n\t                anchor: context.view.element.find(".k-spreadsheet-editor-button")\n\t            });\n\t        }\n\t        function open() {\n\t            create();\n\t            var items = context.validation.from.value;\n\t            var data = [], add = function(el){ data.push({ value: el }); };\n\t            if (items instanceof kendo.spreadsheet.calc.runtime.Matrix) {\n\t                items.each(add);\n\t            } else {\n\t                // actually Excel expects a simple string for list\n\t                // validation (comma-separated labels).\n\t                (items+"").split(/\\s*,\\s*/).forEach(add);\n\t            }\n\t            var dataSource = new kendo.data.DataSource({ data: data });\n\t            list.setDataSource(dataSource);\n\t            dataSource.read();\n\t            popup.open();\n\t        }\n\t        return {\n\t            edit: function(options) {\n\t                context = options;\n\t                open();\n\t            },\n\t            icon: "k-i-arrow-60-down"\n\t        };\n\t    });\n\n\t})(window.kendo);\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1546:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.calendar */ "./node_modules/@progress/kendo-ui/js/kendo.calendar.js");\n\n/***/ }),\n\n/***/ 1547:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./sheet */ "./node_modules/@progress/kendo-ui/js/spreadsheet/sheet.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/customeditors.js?')}}]);