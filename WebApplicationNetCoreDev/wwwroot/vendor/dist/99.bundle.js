(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{"./node_modules/@progress/kendo-ui/js/kendo.list.js":
/*!**********************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.list.js ***!
  \**********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1243);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 1027:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ "./node_modules/@progress/kendo-ui/js/kendo.data.js");\n\n/***/ }),\n\n/***/ 1054:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.popup */ "./node_modules/@progress/kendo-ui/js/kendo.popup.js");\n\n/***/ }),\n\n/***/ 1243:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1027), __webpack_require__(1054) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "list",\n\t    name: "List",\n\t    category: "framework",\n\t    depends: [ "data", "popup" ],\n\t    hidden: true\n\t};\n\n\t/*jshint evil: true*/\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        outerHeight = kendo._outerHeight,\n\t        percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n\t        Widget = ui.Widget,\n\t        keys = kendo.keys,\n\t        support = kendo.support,\n\t        htmlEncode = kendo.htmlEncode,\n\t        activeElement = kendo._activeElement,\n\t        outerWidth = kendo._outerWidth,\n\t        ObservableArray = kendo.data.ObservableArray,\n\t        ID = "id",\n\t        CHANGE = "change",\n\t        FOCUSED = "k-state-focused",\n\t        HOVER = "k-state-hover",\n\t        LOADING = "k-i-loading",\n\t        GROUPHEADER = ".k-group-header",\n\t        ITEMSELECTOR = ".k-item",\n\t        LABELIDPART = "_label",\n\t        OPEN = "open",\n\t        CLOSE = "close",\n\t        CASCADE = "cascade",\n\t        SELECT = "select",\n\t        SELECTED = "selected",\n\t        REQUESTSTART = "requestStart",\n\t        REQUESTEND = "requestEnd",\n\t        BLUR = "blur",\n\t        FOCUS = "focus",\n\t        FOCUSOUT = "focusout",\n\t        extend = $.extend,\n\t        proxy = $.proxy,\n\t        isArray = $.isArray,\n\t        browser = support.browser,\n\t        HIDDENCLASS = "k-hidden",\n\t        WIDTH = "width",\n\t        isIE = browser.msie,\n\t        isIE8 = isIE && browser.version < 9,\n\t        quotRegExp = /"/g,\n\t        alternativeNames = {\n\t            "ComboBox": [ "DropDownList", "MultiColumnComboBox" ],\n\t            "DropDownList": [ "ComboBox", "MultiColumnComboBox" ],\n\t            "MultiColumnComboBox": [ "ComboBox", "DropDownList" ]\n\t        };\n\n\t    var List = kendo.ui.DataBoundWidget.extend({\n\t        init: function(element, options) {\n\t            var that = this,\n\t                ns = that.ns,\n\t                id;\n\n\t            Widget.fn.init.call(that, element, options);\n\t            element = that.element;\n\t            options = that.options;\n\n\t            that._isSelect = element.is(SELECT);\n\n\t            if (that._isSelect && that.element[0].length) {\n\t                if (!options.dataSource) {\n\t                    options.dataTextField = options.dataTextField || "text";\n\t                    options.dataValueField = options.dataValueField || "value";\n\t                }\n\t            }\n\n\t            that.ul = $(\'<ul unselectable="on" class="k-list k-reset"/>\')\n\t                        .attr({\n\t                            tabIndex: -1,\n\t                            "aria-hidden": true\n\t                        });\n\n\t            that.list = $("<div class=\'k-list-container\'/>")\n\t                        .append(that.ul)\n\t                        .on("mousedown" + ns, proxy(that._listMousedown, that));\n\n\t            id = element.attr(ID);\n\n\t            if (!id) {\n\t                id = kendo.guid();\n\t            }\n\n\t            that.list.attr(ID, id + "-list");\n\t            that.ul.attr(ID, id + "_listbox");\n\n\t            if (options.columns && options.columns.length) {\n\t                that.ul.removeClass("k-list").addClass("k-grid-list");\n\t                that._columnsHeader();\n\t            }\n\n\t            that._header();\n\t            that._noData();\n\t            that._footer();\n\t            that._accessors();\n\t            that._initValue();\n\t        },\n\n\t        options: {\n\t            valuePrimitive: false,\n\t            footerTemplate: "",\n\t            headerTemplate: "",\n\t            noDataTemplate: true,\n\t            messages: {\n\t                "noData": "No data found.",\n\t                "clear": "clear"\n\t            }\n\t        },\n\n\t        setOptions: function(options) {\n\t            Widget.fn.setOptions.call(this, options);\n\n\t            if (options && options.enable !== undefined) {\n\t                options.enabled = options.enable;\n\t            }\n\n\t            if (options.columns && options.columns.length) {\n\t                this._columnsHeader();\n\t            }\n\n\t            this._header();\n\t            this._noData();\n\t            this._footer();\n\n\t            this._renderFooter();\n\t            this._renderNoData();\n\t        },\n\n\t        focus: function() {\n\t            this._focused.focus();\n\t        },\n\n\t        readonly: function(readonly) {\n\t            this._editable({\n\t                readonly: readonly === undefined ? true : readonly,\n\t                disable: false\n\t            });\n\t        },\n\n\t        enable: function(enable) {\n\t            this._editable({\n\t                readonly: false,\n\t                disable: !(enable = enable === undefined ? true : enable)\n\t            });\n\t        },\n\n\t        _header: function() {\n\t            var list = this;\n\t            var header = $(list.header);\n\t            var template = list.options.headerTemplate;\n\n\t            this._angularElement(header, "cleanup");\n\t            kendo.destroy(header);\n\t            header.remove();\n\n\t            if (!template) {\n\t                list.header = null;\n\t                return;\n\t            }\n\n\t            var headerTemplate = typeof template !== "function" ? kendo.template(template) : template;\n\t            header = $(headerTemplate({}));\n\n\t            list.header = header[0] ? header : null;\n\t            list.list.prepend(header);\n\n\t            this._angularElement(list.header, "compile");\n\t        },\n\n\t        _columnsHeader: function() {\n\t            var list = this;\n\t            var columnsHeader = $(list.columnsHeader);\n\n\t            this._angularElement(columnsHeader, "cleanup");\n\t            kendo.destroy(columnsHeader);\n\t            columnsHeader.remove();\n\n\t            var header = "<div class=\'k-grid-header\'><div class=\'k-grid-header-wrap\'><table role=\'presentation\'>";\n\t            var colGroup = "<colgroup>";\n\t            var row = "<tr>";\n\n\t            for (var idx = 0; idx < this.options.columns.length; idx++) {\n\t                var currentColumn = this.options.columns[idx];\n\t                var title = currentColumn.title || currentColumn.field || "";\n\t                var template = currentColumn.headerTemplate || title;\n\t                var columnsHeaderTemplate = typeof template !== "function" ? kendo.template(template) : template;\n\t                var currentWidth = currentColumn.width;\n\t                var currentWidthInt = parseInt(currentWidth, 10);\n\t                var widthStyle = \'\';\n\n\t                if (currentWidth && !isNaN(currentWidthInt)) {\n\t                    widthStyle += "style=\'width:";\n\t                    widthStyle += currentWidthInt;\n\t                    widthStyle += percentageUnitsRegex.test(currentWidth) ? "%" : "px";\n\t                    widthStyle += ";\'";\n\t                }\n\n\t                colGroup += "<col " + widthStyle + "/>";\n\n\t                row += "<th class=\'k-header\'>";\n\t                row += columnsHeaderTemplate(currentColumn);\n\t                row += "</th>";\n\t            }\n\t            colGroup += "</colgroup>";\n\t            row += "</tr>";\n\t            header += colGroup;\n\t            header += row;\n\t            header += "</table></div></div>";\n\n\t            list.columnsHeader = columnsHeader = $(header);\n\t            list.list.prepend(columnsHeader);\n\n\t            this._angularElement(list.columnsHeader, "compile");\n\t        },\n\n\t        _noData: function() {\n\t            var list = this;\n\t            var noData = $(list.noData);\n\t            var template = list.options.noDataTemplate === true ?  list.options.messages.noData : list.options.noDataTemplate;\n\n\t            list.angular("cleanup", function() { return { elements: noData }; });\n\t            kendo.destroy(noData);\n\t            noData.remove();\n\n\t            if (!template) {\n\t                list.noData = null;\n\t                return;\n\t            }\n\n\t            list.noData = $(\'<div class="k-nodata" style="display:none"><div></div></div>\').appendTo(list.list);\n\t            list.noDataTemplate = typeof template !== "function" ? kendo.template(template) : template;\n\t        },\n\n\t        _footer: function() {\n\t            var list = this;\n\t            var footer = $(list.footer);\n\t            var template = list.options.footerTemplate;\n\n\t            this._angularElement(footer, "cleanup");\n\t            kendo.destroy(footer);\n\t            footer.remove();\n\n\t            if (!template) {\n\t                list.footer = null;\n\t                return;\n\t            }\n\n\t            list.footer = $(\'<div class="k-footer"></div>\').appendTo(list.list);\n\t            list.footerTemplate = typeof template !== "function" ? kendo.template(template) : template;\n\t        },\n\n\t        _listOptions: function(options) {\n\t            var that = this;\n\t            var currentOptions = that.options;\n\t            var virtual = currentOptions.virtual;\n\t            var changeEventOption = {change: proxy(that._listChange, that)};\n\t            var listBoundHandler = proxy(that._listBound, that);\n\n\t            virtual = typeof virtual === "object" ? virtual : {};\n\n\t            options = $.extend({\n\t                autoBind: false,\n\t                selectable: true,\n\t                dataSource: that.dataSource,\n\t                click: proxy(that._click, that),\n\t                activate: proxy(that._activateItem, that),\n\t                columns: currentOptions.columns,\n\t                deactivate: proxy(that._deactivateItem, that),\n\t                dataBinding: function() {\n\t                    that.trigger("dataBinding");\n\t                },\n\t                dataBound: listBoundHandler,\n\t                height: currentOptions.height,\n\t                dataValueField: currentOptions.dataValueField,\n\t                dataTextField: currentOptions.dataTextField,\n\t                groupTemplate: currentOptions.groupTemplate,\n\t                fixedGroupTemplate: currentOptions.fixedGroupTemplate,\n\t                template: currentOptions.template\n\t            }, options, virtual, changeEventOption);\n\n\t            if (!options.template) {\n\t                options.template = "#:" + kendo.expr(options.dataTextField, "data") + "#";\n\t            }\n\n\t            if (currentOptions.$angular) {\n\t                options.$angular = currentOptions.$angular;\n\t            }\n\n\t            return options;\n\t        },\n\n\t        _initList: function() {\n\t            var that = this;\n\t            var listOptions = that._listOptions({\n\t                selectedItemChange: proxy(that._listChange, that)\n\t            });\n\n\t            if (!that.options.virtual) {\n\t                that.listView = new kendo.ui.StaticList(that.ul, listOptions);\n\t            } else {\n\t                that.listView = new kendo.ui.VirtualList(that.ul, listOptions);\n\t            }\n\n\t            that.listView.bind("listBound", proxy(that._listBound, that));\n\t            that._setListValue();\n\t        },\n\n\t        _setListValue: function(value) {\n\t            value = value || this.options.value;\n\n\t            if (value !== undefined) {\n\t                this.listView.value(value)\n\t                    .done(proxy(this._updateSelectionState, this));\n\t            }\n\t        },\n\n\t        _updateSelectionState: $.noop,\n\n\t        _listMousedown: function(e) {\n\t            if (!this.filterInput || this.filterInput[0] !== e.target) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _isFilterEnabled: function() {\n\t            var filter = this.options.filter;\n\t            return filter && filter !== "none";\n\t        },\n\n\t        _hideClear: function() {\n\t            var list = this;\n\n\t            if (list._clear) {\n\t                list._clear.addClass(HIDDENCLASS);\n\t            }\n\t        },\n\n\t        _showClear: function() {\n\t            if (this._clear) {\n\t                this._clear.removeClass(HIDDENCLASS);\n\t            }\n\t        },\n\n\t        _clearValue: function() {\n\t            this._clearText();\n\t            this._accessor("");\n\t            this.listView.value([]);\n\n\t            if (this._isSelect) {\n\t                this._customOption = undefined;\n\t            }\n\n\t            if (this._isFilterEnabled() && !this.options.enforceMinLength) {\n\t                this._filter({word: "", open: false});\n\n\t                if (this.options.highlightFirst) {\n\t                    this.listView.focus(0);\n\t                }\n\t            }\n\t            this._change();\n\t        },\n\n\t        _clearText: function() {\n\t            this.text("");\n\t        },\n\n\t        _clearFilter: function() {\n\t            if (!this.options.virtual) {\n\t                this.listView.bound(false);\n\t            }\n\n\t            this._filterSource();\n\t        },\n\n\t        _filterSource: function(filter, force) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var isMultiColumnFiltering = options.filterFields && filter && filter.logic && filter.filters && filter.filters.length;\n\t            var dataSource = that.dataSource;\n\t            var expression = extend({}, dataSource.filter() || {});\n\t            var resetPageSettings = filter || (expression.filters && expression.filters.length && !filter);\n\n\t            var removed = removeFiltersForField(expression, options.dataTextField);\n\n\t            this._clearFilterExpressions(expression);\n\n\t            if ((filter || removed) && that.trigger("filtering", { filter: filter })) {\n\t                return;\n\t            }\n\n\t            var newExpression = {\n\t                filters: [],\n\t                logic: "and"\n\t            };\n\n\t            if (isMultiColumnFiltering) {\n\t                newExpression.filters.push(filter);\n\t            } else {\n\t                this._pushFilterExpression(newExpression, filter);\n\t            }\n\n\t            if (isValidFilterExpr(expression)) {\n\t                if (newExpression.logic === expression.logic) {\n\t                    newExpression.filters = newExpression.filters.concat(expression.filters);\n\t                } else {\n\t                    newExpression.filters.push(expression);\n\t                }\n\t            }\n\n\t            if (that._cascading) {\n\t                this.listView.setDSFilter(newExpression);\n\t            }\n\n\t            var dataSourceState = extend({}, {\n\t                page: resetPageSettings ? 1 : dataSource.page(),\n\t                pageSize: resetPageSettings ? dataSource.options.pageSize : dataSource.pageSize(),\n\t                sort: dataSource.sort(),\n\t                filter: dataSource.filter(),\n\t                group: dataSource.group(),\n\t                aggregate: dataSource.aggregate()\n\t            }, { filter: newExpression });\n\n\t            return dataSource[force ? "read" : "query"](dataSource._mergeState(dataSourceState));\n\t        },\n\n\t        _pushFilterExpression: function (newExpression, filter) {\n\t            if (isValidFilterExpr(filter) && filter.value !== "") {\n\t                newExpression.filters.push(filter);\n\t            }\n\t        },\n\n\t        _clearFilterExpressions: function (expression) {\n\t            if (!expression.filters) {\n\t                return;\n\t            }\n\n\t            var filtersToRemove;\n\n\t            for(var i = 0; i < expression.filters.length; i++) {\n\t                if ("fromFilter" in expression.filters[i]) {\n\t                    filtersToRemove = i;\n\t                }\n\t            }\n\n\t            if (!isNaN(filtersToRemove)){\n\t                expression.filters.splice(filtersToRemove, 1);\n\t            }\n\t        },\n\n\t        _angularElement: function(element, action) {\n\t            if (!element) {\n\t                return;\n\t            }\n\n\t            this.angular(action, function() {\n\t                return { elements: element };\n\t            });\n\t        },\n\n\t        _renderNoData: function() {\n\t            var list = this;\n\t            var noData = list.noData;\n\n\t            if (!noData) {\n\t                return;\n\t            }\n\n\t            this._angularElement(noData, "cleanup");\n\t            noData.children(":first").html(list.noDataTemplate({ instance: list }));\n\t            this._angularElement(noData, "compile");\n\t        },\n\n\t        _toggleNoData: function(show) {\n\t            $(this.noData).toggle(show);\n\t        },\n\n\t        _toggleHeader: function(show) {\n\t            var groupHeader = this.listView.content.prev(GROUPHEADER);\n\t            groupHeader.toggle(show);\n\t        },\n\n\t        _renderFooter: function() {\n\t            var list = this;\n\t            var footer = list.footer;\n\n\t            if (!footer) {\n\t                return;\n\t            }\n\n\t            this._angularElement(footer, "cleanup");\n\t            footer.html(list.footerTemplate({ instance: list }));\n\t            this._angularElement(footer, "compile");\n\t        },\n\n\t        _allowOpening: function() {\n\t            return this.options.noDataTemplate || this.dataSource.flatView().length;\n\t        },\n\n\t        _initValue: function() {\n\t            var that = this,\n\t                value = that.options.value;\n\n\t            if (value !== null) {\n\t                that.element.val(value);\n\t            } else {\n\t                value = that._accessor();\n\t                that.options.value = value;\n\t            }\n\n\t            that._old = value;\n\t        },\n\n\t        _ignoreCase: function() {\n\t            var that = this,\n\t                model = that.dataSource.reader.model,\n\t                field;\n\n\t            if (model && model.fields) {\n\t                field = model.fields[that.options.dataTextField];\n\n\t                if (field && field.type && field.type !== "string") {\n\t                    that.options.ignoreCase = false;\n\t                }\n\t            }\n\t        },\n\n\t        _focus: function(candidate) {\n\t            return this.listView.focus(candidate);\n\t        },\n\n\t        _filter: function(options) {\n\t            var that = this;\n\t            var widgetOptions = that.options;\n\t            var word = options.word;\n\t            var filterFields = widgetOptions.filterFields;\n\t            var field = widgetOptions.dataTextField;\n\t            var expression;\n\n\t            if (filterFields && filterFields.length) {\n\t                expression = {\n\t                    logic: "or",\n\t                    filters: [],\n\t                    fromFilter: true\n\t                };\n\t                for(var i = 0; i < filterFields.length; i++) {\n\t                    this._pushFilterExpression(expression, that._buildExpression(word, filterFields[i]));\n\t                }\n\t            } else {\n\t                expression = that._buildExpression(word, field);\n\t            }\n\n\t            that._open = options.open;\n\t            that._filterSource(expression);\n\t        },\n\n\t        _buildExpression: function(value, field) {\n\t            var that = this;\n\t            var widgetOptions = that.options;\n\t            var ignoreCase = widgetOptions.ignoreCase;\n\t            var accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;\n\n\t            return {\n\t                value: ignoreCase ? (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()) : value,\n\t                field: field,\n\t                operator: widgetOptions.filter,\n\t                ignoreCase: ignoreCase\n\t            };\n\t        },\n\n\t        _clearButton: function() {\n\t            var list = this;\n\t            var clearTitle = list.options.messages.clear;\n\n\t            if (!list._clear){\n\t                list._clear = $(\'<span unselectable="on" class="k-icon k-clear-value k-i-close" title="\' + clearTitle + \'"></span>\').attr({\n\t                    "role": "button",\n\t                    "tabIndex": -1\n\t                });\n\t            }\n\n\t            if (!list.options.clearButton) {\n\t                list._clear.remove();\n\t            }\n\t            this._hideClear();\n\t        },\n\n\t        search: function(word) {\n\t            var options = this.options;\n\n\t            word = typeof word === "string" ? word : this._inputValue();\n\n\t            clearTimeout(this._typingTimeout);\n\n\t            if ((!options.enforceMinLength && !word.length) || word.length >= options.minLength) {\n\t                this._state = "filter";\n\t                if (this.listView){\n\t                    this.listView._emptySearch = !kendo.trim(word).length;\n\t                }\n\n\t                if (!this._isFilterEnabled()) {\n\t                    this._searchByWord(word);\n\t                } else {\n\t                    this._filter({word: word, open: true});\n\t                }\n\t            }\n\t        },\n\n\t        current: function(candidate) {\n\t            return this._focus(candidate);\n\t        },\n\n\t        items: function() {\n\t            return this.ul[0].children;\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\t            var ns = that.ns;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            that._unbindDataSource();\n\n\t            that.listView.destroy();\n\t            that.list.off(ns);\n\n\t            that.popup.destroy();\n\n\t            if (that._form) {\n\t                that._form.off("reset", that._resetHandler);\n\t            }\n\t        },\n\n\t        dataItem: function(index) {\n\t            var that = this;\n\n\t            if (index === undefined) {\n\t                return that.listView.selectedDataItems()[0];\n\t            }\n\n\t            if (typeof index !== "number") {\n\t                if (that.options.virtual) {\n\t                    return that.dataSource.getByUid($(index).data("uid"));\n\t                }\n\n\t                index = $(that.items()).index(index);\n\t            }\n\n\t            return that.dataSource.flatView()[index];\n\t        },\n\n\t        _activateItem: function() {\n\t            var current = this.listView.focus();\n\t            if (current) {\n\t                this._focused.add(this.filterInput).attr("aria-activedescendant", current.attr("id"));\n\t            }\n\t        },\n\n\t        _deactivateItem: function() {\n\t            this._focused.add(this.filterInput).removeAttr("aria-activedescendant");\n\t        },\n\n\t        _accessors: function() {\n\t            var that = this;\n\t            var element = that.element;\n\t            var options = that.options;\n\t            var getter = kendo.getter;\n\t            var textField = element.attr(kendo.attr("text-field"));\n\t            var valueField = element.attr(kendo.attr("value-field"));\n\n\t            if (!options.dataTextField && textField) {\n\t                options.dataTextField = textField;\n\t            }\n\n\t            if (!options.dataValueField && valueField) {\n\t                options.dataValueField = valueField;\n\t            }\n\n\t            that._text = getter(options.dataTextField);\n\t            that._value = getter(options.dataValueField);\n\t        },\n\n\t        _aria: function(id) {\n\t            var that = this,\n\t                options = that.options,\n\t                element = that._focused.add(that.filterInput);\n\n\t            if (options.suggest !== undefined) {\n\t                element.attr("aria-autocomplete", options.suggest ? "both" : "list");\n\t            }\n\n\t            id = id ? id + " " + that.ul[0].id : that.ul[0].id;\n\n\t            element.attr("aria-owns", id);\n\n\t            that.ul.attr("aria-live", !that._isFilterEnabled() ? "off" : "polite");\n\n\t            that._ariaLabel();\n\t        },\n\n\t        _ariaLabel: function(){\n\t            var that = this;\n\t            var focusedElm = that._focused;\n\t            var inputElm = that.element;\n\t            var inputId = inputElm.attr("id");\n\t            var labelElm = $("label[for=\\"" + inputId  + "\\"]");\n\t            var ariaLabel = inputElm.attr("aria-label");\n\t            var ariaLabelledBy = inputElm.attr("aria-labelledby");\n\n\t            if (focusedElm === inputElm) {\n\t                return;\n\t            }\n\n\t            if (ariaLabel) {\n\t                focusedElm.attr("aria-label", ariaLabel);\n\t            } else if (ariaLabelledBy){\n\t                focusedElm.attr("aria-labelledby", ariaLabelledBy);\n\t            } else if (labelElm.length){\n\t                var labelId = labelElm.attr("id") || that._generateLabelId(labelElm, inputId || kendo.guid());\n\t                focusedElm.attr("aria-labelledby", labelId);\n\t            }\n\t        },\n\n\t        _generateLabelId: function(label, inputId){\n\t            var labelId = inputId + LABELIDPART;\n\t            label.attr("id", labelId);\n\n\t            return labelId;\n\t        },\n\n\t        _blur: function() {\n\t            var that = this;\n\n\t            that._change();\n\t            that.close();\n\t            that._userTriggered = false;\n\t        },\n\n\t        _change: function() {\n\t            var that = this;\n\t            var index = that.selectedIndex;\n\t            var optionValue = that.options.value;\n\t            var value = that.value();\n\t            var trigger;\n\n\t            if (that._isSelect && !that.listView.bound() && optionValue) {\n\t                value = optionValue;\n\t            }\n\n\t            if (value !== unifyType(that._old, typeof value) &&\n\t                value !== unifyType(that._oldText, typeof value)) { // _oldText should be compared for ComboBox when arbitrary text is added https://github.com/telerik/kendo-ui-core/issues/4496\n\t                trigger = true;\n\t            } else if (that._valueBeforeCascade !== undefined && that._valueBeforeCascade !== unifyType(that._old, typeof that._valueBeforeCascade) && that._userTriggered) {\n\t                trigger = true;\n\t            } else if (index !== undefined && index !== that._oldIndex && !that.listView.isFiltered()) {\n\t                trigger = true;\n\t            }\n\n\t            if (trigger) {\n\n\t                if (that._old === null || that._old === "" || value === "") {\n\t                    that._valueBeforeCascade = that._old = value;\n\t                } else {\n\t                    if (that.dataItem()) {\n\t                        that._valueBeforeCascade = that._old = that.options.dataValueField ? that.dataItem()[that.options.dataValueField] : that.dataItem();\n\t                    } else {\n\t                        that._valueBeforeCascade = that._old = null;\n\t                    }\n\t                }\n\t                that._oldIndex = index;\n\t                // _oldText should be compared for ComboBox when arbitrary text is added https://github.com/telerik/kendo-ui-core/issues/4496\n\t                that._oldText = that.text && that.text();\n\n\t                if (!that._typing) {\n\t                    // trigger the DOM change event so any subscriber gets notified\n\t                    that.element.trigger(CHANGE);\n\t                }\n\n\t                that.trigger(CHANGE);\n\t            }\n\n\t            that.typing = false;\n\t        },\n\n\t        _data: function() {\n\t            return this.dataSource.view();\n\t        },\n\n\t        _enable: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                disabled = that.element.is("[disabled]");\n\n\t            if (options.enable !== undefined) {\n\t                options.enabled = options.enable;\n\t            }\n\n\t            if (!options.enabled || disabled) {\n\t                that.enable(false);\n\t            } else {\n\t                that.readonly(that.element.is("[readonly]"));\n\t            }\n\t        },\n\n\t        _dataValue: function(dataItem) {\n\t            var value = this._value(dataItem);\n\n\t            if (value === undefined) {\n\t                value = this._text(dataItem);\n\t            }\n\n\t            return value;\n\t        },\n\n\t        _offsetHeight: function() {\n\t            var offsetHeight = 0;\n\t            var siblings = this.listView.content.prevAll(":visible");\n\n\t            siblings.each(function() {\n\t                var element = $(this);\n\n\t                offsetHeight += outerHeight(element, true);\n\t            });\n\n\t            return offsetHeight;\n\t        },\n\n\t        _height: function(length) {\n\t            var that = this;\n\t            var list = that.list;\n\t            var height = that.options.height;\n\t            var visible = that.popup.visible();\n\t            var offsetTop;\n\t            var popups;\n\t            var footerHeight;\n\n\t            if (length || that.options.noDataTemplate) {\n\t                popups = list.add(list.parent(".k-animation-container")).show();\n\n\t                if (!list.is(":visible")) {\n\t                    popups.hide();\n\t                    return;\n\t                }\n\n\t                height = that.listView.content[0].scrollHeight > height ? height : "auto";\n\n\t                popups.height(height);\n\n\t                if (height !== "auto") {\n\t                    offsetTop = that._offsetHeight();\n\t                    footerHeight = outerHeight($(that.footer)) || 0;\n\t                    height = height - offsetTop - footerHeight;\n\t                }\n\n\t                that.listView.content.height(height);\n\n\t                if (!visible) {\n\t                    popups.hide();\n\t                }\n\t            }\n\n\t            return height;\n\t        },\n\n\t        _openHandler: function(e) {\n\t            this._adjustListWidth();\n\n\t            if (this.trigger(OPEN)) {\n\t                e.preventDefault();\n\t            } else {\n\t                this._focused.attr("aria-expanded", true);\n\t                this.ul.attr("aria-hidden", false);\n\t            }\n\t        },\n\n\t        _adjustListWidth: function() {\n\t            var that = this,\n\t                list = that.list,\n\t                width = list[0].style.width,\n\t                wrapper = that.wrapper,\n\t                computedStyle, computedWidth;\n\n\t            if (!list.data(WIDTH) && width) {\n\t                return;\n\t            }\n\n\t            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;\n\t            computedWidth = parseFloat(computedStyle  && computedStyle.width) || outerWidth(wrapper);\n\n\t            if (computedStyle && browser.msie) { // getComputedStyle returns different box in IE.\n\t                computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);\n\t            }\n\n\t            if (list.css("box-sizing") !== "border-box") {\n\t                width = computedWidth - (outerWidth(list) - list.width());\n\t            } else {\n\t                width = computedWidth;\n\t            }\n\n\t            list.css({\n\t                fontFamily: wrapper.css("font-family"),\n\t                width: that.options.autoWidth ? "auto" : width,\n\t                minWidth: width,\n\t                whiteSpace: that.options.autoWidth ? "nowrap" : "normal"\n\t            })\n\t            .data(WIDTH, width);\n\n\t            return true;\n\t        },\n\n\t        _closeHandler: function(e) {\n\t            if (this.trigger(CLOSE)) {\n\t                e.preventDefault();\n\t            } else {\n\t                this._focused.attr("aria-expanded", false);\n\t                this.ul.attr("aria-hidden", true);\n\t            }\n\t        },\n\n\t        _focusItem: function() {\n\t            var listView = this.listView;\n\t            var noFocusedItem = !listView.focus();\n\t            var index = last(listView.select());\n\n\t            if (index === undefined && this.options.highlightFirst && noFocusedItem) {\n\t                index = 0;\n\t            }\n\n\t            if (index !== undefined) {\n\t                listView.focus(index);\n\t            } else if (noFocusedItem) {\n\t                listView.scrollToIndex(0);\n\t            }\n\t        },\n\n\t        _calculateGroupPadding: function(height) {\n\t            var li = this.ul.children(".k-first:first");\n\t            var groupHeader = this.listView.content.prev(GROUPHEADER);\n\t            var padding = 0;\n\t            var direction = \'right\';\n\n\t            if (groupHeader[0] && groupHeader[0].style.display !== "none") {\n\t                if (height !== "auto") {\n\t                    padding = kendo.support.scrollbar();\n\t                }\n\n\t                if(this.element.parents(\'.k-rtl\').length) {\n\t                    direction = \'left\';\n\t                }\n\n\t                padding += parseFloat(li.css("border-" + direction + "-width"), 10) + parseFloat(li.children(".k-group").css("padding-" + direction), 10);\n\t                groupHeader.css("padding-" + direction, padding);\n\t            }\n\t        },\n\n\t        _calculatePopupHeight: function(force) {\n\t            var height = this._height(this.dataSource.flatView().length || force);\n\t            this._calculateGroupPadding(height);\n\t            this._calculateColumnsHeaderPadding(height);\n\t        },\n\n\t        _calculateColumnsHeaderPadding: function(height){\n\t            if (this.options.columns && this.options.columns.length) {\n\t                var list = this;\n\t                var isRtl = support.isRtl(list.wrapper);\n\t                var scrollbar = kendo.support.scrollbar();\n\n\t                list.columnsHeader.css((isRtl ? "padding-left" : "padding-right"), height !== "auto" ? scrollbar : 0);\n\t            }\n\t        },\n\n\t        _refreshScroll: function () {\n\t            var listView = this.listView;\n\t            var enableYScroll = listView.element.height() > listView.content.height();\n\n\t            if (this.options.autoWidth) {\n\t                listView.content.css({\n\t                    overflowX: "hidden",\n\t                    overflowY: enableYScroll ? "scroll" : "auto"\n\t                });\n\t            }\n\t        },\n\n\t        _resizePopup: function(force) {\n\t            if (this.options.virtual) {\n\t                return;\n\t            }\n\n\t            if (!this.popup.element.is(":visible")) {\n\t                this.popup.one("open", (function(force) {\n\t                    return proxy(function() {\n\t                        this._calculatePopupHeight(force);\n\t                    }, this);\n\t                }).call(this, force));\n\n\t                this.popup.one("activate", proxy(this._refreshScroll, this));\n\t            } else {\n\t                this._calculatePopupHeight(force);\n\t            }\n\t        },\n\n\t        _popup: function() {\n\t            var list = this;\n\n\t            list.popup = new ui.Popup(list.list, extend({}, list.options.popup, {\n\t                anchor: list.wrapper,\n\t                open: proxy(list._openHandler, list),\n\t                close: proxy(list._closeHandler, list),\n\t                animation: list.options.animation,\n\t                isRtl: support.isRtl(list.wrapper),\n\t                autosize :list.options.autoWidth\n\t            }));\n\t        },\n\n\t        _makeUnselectable: function() {\n\t            if (isIE8) {\n\t                this.list.find("*").not(".k-textbox").attr("unselectable", "on");\n\t            }\n\t        },\n\n\t        _toggleHover: function(e) {\n\t            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");\n\t        },\n\n\t        _toggle: function(open, preventFocus) {\n\t            var that = this;\n\t            var touchEnabled = support.mobileOS && (support.touch || support.MSPointers || support.pointers);\n\n\t            open = open !== undefined? open : !that.popup.visible();\n\n\t            if (!preventFocus && !touchEnabled && that._focused[0] !== activeElement()) {\n\t                that._prevent = true;\n\t                that._focused.focus();\n\t                that._prevent = false;\n\t            }\n\n\t            that[open ? OPEN : CLOSE]();\n\t        },\n\n\t        _triggerCascade: function() {\n\t            var that = this;\n\n\t            if (!that._cascadeTriggered || that.value() !== unifyType(that._cascadedValue, typeof that.value())) {\n\t                that._cascadedValue = that.value();\n\t                that._cascadeTriggered = true;\n\t                that.trigger(CASCADE, { userTriggered: that._userTriggered });\n\t            }\n\t        },\n\n\t        _triggerChange: function() {\n\t            if (this._valueBeforeCascade !== this.value()) {\n\t                this.trigger(CHANGE);\n\t            }\n\t        },\n\n\t        _unbindDataSource: function() {\n\t            var that = this;\n\n\t            that.dataSource.unbind(REQUESTSTART, that._requestStartHandler)\n\t                           .unbind(REQUESTEND, that._requestEndHandler)\n\t                           .unbind("error", that._errorHandler);\n\t        },\n\n\t        requireValueMapper: function(options, value) {\n\t            var hasValue = (options.value instanceof Array ? options.value.length : options.value) || (value instanceof Array ? value.length : value);\n\t            if (hasValue && options.virtual && typeof options.virtual.valueMapper !== "function") {\n\t                throw new Error("ValueMapper is not provided while the value is being set. See http://docs.telerik.com/kendo-ui/controls/editors/combobox/virtualization#the-valuemapper-function");\n\t            }\n\t        }\n\t    });\n\n\t    function unifyType(value, type) {\n\t        if (value !== undefined && value !== "" && value !== null) {\n\t            if (type === "boolean") {\n\t                if (typeof value !== "boolean") {\n\t                    value = value.toLowerCase() === "true";\n\t                }\n\t                value = Boolean(value);\n\t            } else if (type === "number") {\n\t                value = Number(value);\n\t            } else if (type === "string") {\n\t                value = value.toString();\n\t            }\n\t        }\n\n\t        return value;\n\t    }\n\n\t    extend(List, {\n\t        inArray: function(node, parentNode) {\n\t            var idx, length, siblings = parentNode.children;\n\n\t            if (!node || node.parentNode !== parentNode) {\n\t                return -1;\n\t            }\n\n\t            for (idx = 0, length = siblings.length; idx < length; idx++) {\n\t                if (node === siblings[idx]) {\n\t                    return idx;\n\t                }\n\t            }\n\n\t            return -1;\n\t        },\n\t        unifyType: unifyType\n\t    });\n\n\t    kendo.ui.List = List;\n\n\t    ui.Select = List.extend({\n\t        init: function(element, options) {\n\t            List.fn.init.call(this, element, options);\n\t            this._initial = this.element.val();\n\t        },\n\n\t        setDataSource: function(dataSource) {\n\t            var that = this;\n\t            var parent;\n\n\t            that.options.dataSource = dataSource;\n\n\t            that._dataSource();\n\n\t            if (that.listView.bound()) {\n\t                that._initialIndex = null;\n\t                that.listView._current = null;\n\t            }\n\n\t            that.listView.setDataSource(that.dataSource);\n\n\t            if (that.options.autoBind) {\n\t                that.dataSource.fetch();\n\t            }\n\n\t            parent = that._parentWidget();\n\n\t            if (parent) {\n\t                that._cascadeSelect(parent);\n\t            }\n\t        },\n\n\t        close: function() {\n\t            this.popup.close();\n\t        },\n\n\t        select: function(candidate) {\n\t            var that = this;\n\n\t            if (candidate === undefined) {\n\t                return that.selectedIndex;\n\t            } else {\n\t                return that._select(candidate).done(function() {\n\t                    that._cascadeValue = that._old = that._accessor();\n\t                    that._oldIndex = that.selectedIndex;\n\t                });\n\t            }\n\t        },\n\n\t        _accessor: function(value, idx) {\n\t            return this[this._isSelect ? "_accessorSelect" : "_accessorInput"](value, idx);\n\t        },\n\n\t        _accessorInput: function(value) {\n\t            var element = this.element[0];\n\n\t            if (value === undefined) {\n\t                return element.value;\n\t            } else {\n\t                if (value === null) {\n\t                    value = "";\n\t                }\n\t                element.value = value;\n\t            }\n\t        },\n\n\t        _accessorSelect: function(value, idx) {\n\t            var element = this.element[0];\n\t            var hasValue;\n\n\t            if (value === undefined) {\n\t                return getSelectedOption(element).value || "";\n\t            }\n\n\t            getSelectedOption(element).selected = false;\n\n\t            if (idx === undefined) {\n\t                idx = -1;\n\t            }\n\n\t            hasValue = (value !== null && value !== "");\n\n\t            if (hasValue && idx == -1) {\n\t                this._custom(value);\n\t            } else {\n\t                if (value) {\n\t                    element.value = value;\n\t                } else {\n\t                    element.selectedIndex = idx;\n\t                }\n\t            }\n\t        },\n\n\t        _syncValueAndText: function () {\n\t            return true;\n\t        },\n\n\t        _custom: function(value) {\n\t            var that = this;\n\t            var element = that.element;\n\t            var custom = that._customOption;\n\n\t            if (!custom) {\n\t                custom = $("<option/>");\n\t                that._customOption = custom;\n\n\t                element.append(custom);\n\t            }\n\n\t            custom.text(value);\n\t            custom[0].selected = true;\n\t        },\n\n\t        _hideBusy: function () {\n\t            var that = this;\n\t            clearTimeout(that._busy);\n\t            that._arrowIcon.removeClass(LOADING);\n\t            that._focused.attr("aria-busy", false);\n\t            that._busy = null;\n\t            that._showClear();\n\t        },\n\n\t        _showBusy: function (e) {\n\t            var that = this;\n\n\t            if (e.isDefaultPrevented()) {\n\t                return;\n\t            }\n\n\t            that._request = true;\n\n\t            if (that._busy) {\n\t                return;\n\t            }\n\n\t            that._busy = setTimeout(function () {\n\t                if (that._arrowIcon) { //destroyed after request start\n\t                    that._focused.attr("aria-busy", true);\n\t                    that._arrowIcon.addClass(LOADING);\n\t                    that._hideClear();\n\t                }\n\t            }, 100);\n\t        },\n\n\t        _requestEnd: function() {\n\t            this._request = false;\n\t            this._hideBusy();\n\t        },\n\n\t        _dataSource: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                options = that.options,\n\t                dataSource = options.dataSource || {},\n\t                idx;\n\n\t            dataSource = $.isArray(dataSource) ? {data: dataSource} : dataSource;\n\n\t            if (that._isSelect) {\n\t                idx = element[0].selectedIndex;\n\t                if (idx > -1) {\n\t                    options.index = idx;\n\t                }\n\n\t                dataSource.select = element;\n\t                dataSource.fields = [{ field: options.dataTextField },\n\t                                     { field: options.dataValueField }];\n\t            }\n\n\t            if (that.dataSource) {\n\t                that._unbindDataSource();\n\t            } else {\n\t                that._requestStartHandler = proxy(that._showBusy, that);\n\t                that._requestEndHandler = proxy(that._requestEnd, that);\n\t                that._errorHandler = proxy(that._hideBusy, that);\n\t            }\n\n\t            that.dataSource = kendo.data.DataSource.create(dataSource)\n\t                                   .bind(REQUESTSTART, that._requestStartHandler)\n\t                                   .bind(REQUESTEND, that._requestEndHandler)\n\t                                   .bind("error", that._errorHandler);\n\t        },\n\n\t        _firstItem: function() {\n\t            this.listView.focusFirst();\n\t        },\n\n\t        _lastItem: function() {\n\t            this.listView.focusLast();\n\t        },\n\n\t        _nextItem: function() {\n\t            return this.listView.focusNext();\n\t        },\n\n\t        _prevItem: function() {\n\t            return this.listView.focusPrev();\n\t        },\n\n\t        _getNormalizedDataItem: function(candidate) {\n\t            var that = this,\n\t                listView = that.listView,\n\t                isIndex = typeof candidate === "number",\n\t                hasOptionLabel = that.optionLabel && that.optionLabel.length,\n\t                index;\n\n\t            if (isIndex) {\n\t                index =  hasOptionLabel ? --candidate : candidate;\n\t            } else {\n\t                index = listView.getElementIndex(candidate);\n\t            }\n\n\t            return listView.dataItemByIndex(index);\n\t        },\n\n\t        _getNormalizedSelectCandidate: function(candidate) {\n\t            var that = this,\n\t                hasOptionLabel = that.optionLabel && that.optionLabel.length,\n\t                isIndex = typeof candidate === "number",\n\t                normalizedCandidate = candidate;\n\n\t            if (hasOptionLabel && isIndex) {\n\t                normalizedCandidate++;\n\t            }\n\n\t            return normalizedCandidate;\n\t        },\n\n\t        _move: function(e) {\n\t            var that = this;\n\t            var listView = that.listView;\n\t            var key = e.keyCode;\n\t            var down = key === keys.DOWN;\n\t            var isVirtual = that.options.virtual;\n\t            var dataItem;\n\t            var pressed;\n\t            var current;\n\t            var moveIndex;\n\t            var selectCandidate;\n\n\t            if (key === keys.UP || down) {\n\t                if (e.altKey) {\n\t                    that.toggle(down);\n\t                } else {\n\t                    if (!listView.bound() && !that.ul[0].firstChild) {\n\t                        if (!that._fetch) {\n\t                            that.dataSource.one(CHANGE, function() {\n\t                                that._fetch = false;\n\t                                that._move(e);\n\t                            });\n\n\t                            that._fetch = true;\n\t                            that._filterSource();\n\t                        }\n\n\t                        e.preventDefault();\n\n\t                        return true; //pressed\n\t                    }\n\n\t                    current = that._focus();\n\n\t                    if (!that._fetch && (!current || current.hasClass("k-state-selected"))) {\n\t                        if (down) {\n\t                            moveIndex = that._nextItem();\n\n\t                            if ((isVirtual && moveIndex <= 0) || (!that._focus() && !moveIndex) ) {\n\t                                that._lastItem();\n\t                            }\n\t                        } else {\n\t                            moveIndex = that._prevItem();\n\n\t                            if ((isVirtual && moveIndex >= listView.dataSource.total() - 1) || (!that._focus() && !moveIndex)) {\n\t                                that._firstItem();\n\t                            }\n\t                        }\n\t                    }\n\n\t                    selectCandidate = that._getNormalizedSelectCandidate(that._get(that._focus()) || moveIndex || 0);\n\n\t                    that._select(selectCandidate, true).done(function() {\n\t                        var done = function() {\n\t                            if (!that.popup.visible()) {\n\t                                that._blur();\n\t                            }\n\n\t                            if (that._cascadedValue === null) {\n\t                                that._cascadedValue = that.value();\n\t                            } else {\n\t                                that._cascadedValue = that.dataItem() ? that.dataItem()[that.options.dataValueField] || that.dataItem() : null;\n\t                            }\n\t                        };\n\n\t                        if (that.trigger(SELECT, { dataItem: that._getNormalizedDataItem(selectCandidate), item: that._focus() })) {\n\t                            that._select(current).done(done);\n\t                        } else {\n\t                            done();\n\t                        }\n\t                    });\n\t                }\n\n\t                e.preventDefault();\n\t                pressed = true;\n\t            } else if (key === keys.ENTER || key === keys.TAB) {\n\t                if (that.popup.visible()) {\n\t                    e.preventDefault();\n\t                }\n\n\t                current = that._focus();\n\t                dataItem = that.dataItem();\n\n\t                if (!that.popup.visible() && (!dataItem || that.text() !== that._text(dataItem))) {\n\t                    current = null;\n\t                }\n\n\t                var activeFilter = that.filterInput && that.filterInput[0] === activeElement();\n\t                var selection;\n\n\t                if (current) {\n\t                    dataItem = listView.dataItemByIndex(listView.getElementIndex(current));\n\t                    var shouldTrigger = true;\n\n\t                    if (dataItem) {\n\t                        shouldTrigger = that._value(dataItem) !==  List.unifyType(that.value(), typeof that._value(dataItem));\n\t                    }\n\n\t                    if (shouldTrigger && that.trigger(SELECT, { dataItem: dataItem, item: current })) {\n\t                        return;\n\t                    }\n\n\t                    selection = that._select(current);\n\t                } else if (that.input) {\n\t                    if (that._syncValueAndText() || that._isSelect) {\n\t                        that._accessor(that.input.val());\n\t                    }\n\t                    that.listView.value(that.input.val());\n\t                }\n\n\t                if (that._focusElement) {\n\t                    that._focusElement(that.wrapper);\n\t                }\n\n\t                if (activeFilter && key === keys.TAB) {\n\t                    that.wrapper.focusout();\n\t                } else {\n\t                    if (selection && typeof selection.done === "function") {\n\t                        selection.done(function () {\n\t                            that._blur();\n\t                        });\n\t                    } else {\n\t                        that._blur();\n\t                    }\n\t                }\n\n\t                that.close();\n\t                pressed = true;\n\t            } else if (key === keys.ESC) {\n\t                if (that.popup.visible()) {\n\t                    e.preventDefault();\n\t                }\n\t                that.close();\n\t                pressed = true;\n\t            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n\t                e.preventDefault();\n\n\t                var direction = key === keys.PAGEDOWN ? 1 : -1;\n\t                listView.scrollWith(direction * listView.screenHeight());\n\n\t                pressed = true;\n\t            }\n\n\t            return pressed;\n\t        },\n\n\t        _fetchData: function() {\n\t            var that = this;\n\t            var hasItems = !!that.dataSource.view().length;\n\n\t            if (that._request || that.options.cascadeFrom) {\n\t                return;\n\t            }\n\n\t            if (!that.listView.bound() && !that._fetch && !hasItems) {\n\t                that._fetch = true;\n\t                that.dataSource.fetch().done(function() {\n\t                    that._fetch = false;\n\t                });\n\t            }\n\t        },\n\n\t        _options: function(data, optionLabel, value) {\n\t            var that = this,\n\t                element = that.element,\n\t                htmlElement = element[0],\n\t                length = data.length,\n\t                options = "",\n\t                option,\n\t                dataItem,\n\t                dataText,\n\t                dataValue,\n\t                idx = 0;\n\n\t            if (optionLabel) {\n\t                options = optionLabel;\n\t            }\n\n\t            for (; idx < length; idx++) {\n\t                option = "<option";\n\t                dataItem = data[idx];\n\t                dataText = that._text(dataItem);\n\t                dataValue = that._value(dataItem);\n\n\t                if (dataValue !== undefined) {\n\t                    dataValue += "";\n\n\t                    if (dataValue.indexOf(\'"\') !== -1) {\n\t                        dataValue = dataValue.replace(quotRegExp, "&quot;");\n\t                    }\n\n\t                    option += \' value="\' + dataValue + \'"\';\n\t                }\n\n\t                option += ">";\n\n\t                if (dataText !== undefined) {\n\t                    option += htmlEncode(dataText);\n\t                }\n\n\t                option += "</option>";\n\t                options += option;\n\t            }\n\n\t            element.html(options);\n\n\t            if (value !== undefined) {\n\t                htmlElement.value = value;\n\t                if (htmlElement.value && !value) {\n\t                    htmlElement.selectedIndex = -1;\n\t                }\n\t            }\n\n\t            if (htmlElement.selectedIndex !== -1) {\n\t                option = getSelectedOption(htmlElement);\n\n\t                if (option) {\n\t                    option.setAttribute(SELECTED, SELECTED);\n\t                }\n\t            }\n\t        },\n\n\t        _reset: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                formId = element.attr("form"),\n\t                form = formId ? $("#" + formId) : element.closest("form");\n\n\t            if (form[0]) {\n\t                that._resetHandler = function() {\n\t                    setTimeout(function() {\n\t                        that.value(that._initial);\n\t                    });\n\t                };\n\n\t                that._form = form.on("reset", that._resetHandler);\n\t            }\n\t        },\n\n\t        _parentWidget: function() {\n\t            var name = this.options.name;\n\n\t            if (!this.options.cascadeFrom) {\n\t                return;\n\t            }\n\n\t            var parentElement = $("#" + this.options.cascadeFrom);\n\t            var parent = parentElement.data("kendo" + name);\n\n\t            if (!parent) {\n\t                for(var i = 0; i < alternativeNames[name].length; i+=1) {\n\t                    parent = parentElement.data("kendo" + alternativeNames[name][i]);\n\n\t                    if (!!parent) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\n\t            return parent;\n\t        },\n\n\t        _cascade: function() {\n\t            var that = this;\n\t            var options = that.options;\n\t            var cascade = options.cascadeFrom;\n\t            var parent;\n\n\t            if (cascade) {\n\t                parent = that._parentWidget();\n\n\t                if (!parent) {\n\t                    return;\n\t                }\n\n\t                that._cascadeHandlerProxy = proxy(that._cascadeHandler, that);\n\t                that._cascadeFilterRequests = [];\n\n\t                options.autoBind = false;\n\n\t                parent.bind("set", function() { //will cascade\n\t                    that.one("set", function(e) { //get your value\n\t                        that._selectedValue = e.value || that._accessor();\n\t                    });\n\t                });\n\n\t                parent.first(CASCADE, that._cascadeHandlerProxy);\n\n\t                //refresh was called\n\t                if (parent.listView.bound()) {\n\t                    that._toggleCascadeOnFocus();\n\t                    that._cascadeSelect(parent);\n\t                } else {\n\t                    parent.one("dataBound", function() {\n\t                        that._toggleCascadeOnFocus();\n\t                        if (parent.popup.visible()) {\n\t                            parent._focused.focus();\n\t                        }\n\t                    });\n\n\t                    if (!parent.value()) {\n\t                        that.enable(false);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _toggleCascadeOnFocus: function() {\n\t            var that = this;\n\t            var parent = that._parentWidget();\n\t            var focusout = isIE && parent instanceof ui.DropDownList ? BLUR : FOCUSOUT;\n\n\t            parent._focused.add(parent.filterInput).bind(FOCUS, function() {\n\t                parent.unbind(CASCADE, that._cascadeHandlerProxy);\n\t                parent.first(CHANGE, that._cascadeHandlerProxy);\n\t            });\n\n\t            parent._focused.add(parent.filterInput).bind(focusout, function() {\n\t                parent.unbind(CHANGE, that._cascadeHandlerProxy);\n\t                parent.first(CASCADE, that._cascadeHandlerProxy);\n\t            });\n\t        },\n\n\t        _cascadeHandler: function(e) {\n\t            var parent = this._parentWidget();\n\t            var valueBeforeCascade = this.value();\n\n\t            this._userTriggered = e.userTriggered || parent._userTriggered;\n\n\t            if (this.listView.bound()) {\n\t                this._clearSelection(parent, true);\n\t            }\n\n\t            this._cascadeSelect(parent, valueBeforeCascade);\n\t        },\n\n\t        _cascadeChange: function(parent) {\n\t            var that = this;\n\t            var value = that._accessor() || that._selectedValue;\n\n\t            if (!that._cascadeFilterRequests.length) {\n\t                that._selectedValue = null;\n\t            }\n\n\t            if (that._userTriggered) {\n\t                that._clearSelection(parent, true);\n\t            } else if (value) {\n\t                if (value !==  unifyType(that.listView.value()[0], typeof value)) {\n\t                    that.value(value);\n\t                }\n\n\t                if (!that.dataSource.view()[0] || that.selectedIndex === -1) {\n\t                    that._clearSelection(parent, true);\n\t                }\n\t            } else if (that.dataSource.flatView().length) {\n\t                that.select(that.options.index);\n\t            }\n\n\t            that.enable();\n\t            that._triggerCascade();\n\t            that._triggerChange();\n\t            that._userTriggered = false;\n\t        },\n\n\t        _cascadeSelect: function(parent, valueBeforeCascade) {\n\t            var that = this;\n\t            var dataItem = parent.dataItem();\n\t            var filterValue = dataItem ? dataItem[that.options.cascadeFromParentField] || parent._value(dataItem) : null;\n\t            var valueField = that.options.cascadeFromField || parent.options.dataValueField;\n\t            var expressions;\n\n\t            that._valueBeforeCascade = valueBeforeCascade !== undefined ? valueBeforeCascade : that.value();\n\n\t            if (filterValue || filterValue === 0) {\n\t                expressions = that.dataSource.filter() || {};\n\t                removeFiltersForField(expressions, valueField);\n\n\t                var handler = function () {\n\t                    var currentHandler = that._cascadeFilterRequests.shift();\n\t                    if (currentHandler) {\n\t                        that.unbind(\'dataBound\', currentHandler);\n\t                    }\n\n\t                    currentHandler = that._cascadeFilterRequests[0];\n\t                    if (currentHandler) {\n\t                        that.first(\'dataBound\', currentHandler);\n\t                    }\n\n\t                    that._cascadeChange(parent);\n\t                };\n\n\t                that._cascadeFilterRequests.push(handler);\n\n\t                if (that._cascadeFilterRequests.length === 1) {\n\t                    that.first(\'dataBound\', handler);\n\t                }\n\n\t                that._cascading = true;\n\t                that._filterSource({\n\t                    field: valueField,\n\t                    operator: "eq",\n\t                    value: filterValue\n\t                });\n\t                that._cascading = false;\n\t            } else {\n\t                that.enable(false);\n\t                that._clearSelection(parent);\n\t                that._triggerCascade();\n\t                that._triggerChange();\n\t                that._userTriggered = false;\n\t            }\n\t        }\n\t    });\n\n\t    var STATIC_LIST_NS = ".StaticList";\n\n\t    var StaticList = kendo.ui.DataBoundWidget.extend({\n\t        init: function(element, options) {\n\t            Widget.fn.init.call(this, element, options);\n\n\t            this.element.attr("role", "listbox")\n\t                        .on("click" + STATIC_LIST_NS, "li", proxy(this._click, this))\n\t                        .on("mouseenter" + STATIC_LIST_NS, "li", function() { $(this).addClass(HOVER); })\n\t                        .on("mouseleave" + STATIC_LIST_NS, "li", function() { $(this).removeClass(HOVER); });\n\n\t            if (support.touch) {\n\t                this._touchHandlers();\n\t            }\n\n\t            if (this.options.selectable === "multiple") {\n\t                this.element.attr("aria-multiselectable", true);\n\t            }\n\n\t            this.content = this.element.wrap("<div class=\'k-list-scroller\' unselectable=\'on\'></div>").parent();\n\t            this.header = this.content.before(\'<div class="k-group-header" style="display:none"></div>\').prev();\n\n\t            this.bound(false);\n\n\t            this._optionID = kendo.guid();\n\n\t            this._selectedIndices = [];\n\n\t            this._view = [];\n\t            this._dataItems = [];\n\t            this._values = [];\n\n\t            var value = this.options.value;\n\n\t            if (value) {\n\t                this._values = $.isArray(value) ? value.slice(0) : [value];\n\t            }\n\n\t            this._getter();\n\t            this._templates();\n\n\t            this.setDataSource(this.options.dataSource);\n\n\t            this._onScroll = proxy(function() {\n\t                var that = this;\n\t                clearTimeout(that._scrollId);\n\n\t                that._scrollId = setTimeout(function() {\n\t                    that._renderHeader();\n\t                }, 50);\n\t            }, this);\n\t        },\n\n\t        options: {\n\t            name: "StaticList",\n\t            dataValueField: null,\n\t            valuePrimitive: false,\n\t            selectable: true,\n\t            template: null,\n\t            groupTemplate: null,\n\t            fixedGroupTemplate: null\n\t        },\n\n\t        events: [\n\t           "click",\n\t            CHANGE,\n\t           "activate",\n\t           "deactivate",\n\t           "dataBinding",\n\t           "dataBound",\n\t           "selectedItemChange"\n\t        ],\n\n\t        setDataSource: function(source) {\n\t            var that = this;\n\t            var dataSource = source || {};\n\t            var value;\n\n\t            dataSource = $.isArray(dataSource) ? { data: dataSource } : dataSource;\n\t            dataSource = kendo.data.DataSource.create(dataSource);\n\n\t            if (that.dataSource) {\n\t                that.dataSource.unbind(CHANGE, that._refreshHandler);\n\n\t                value = that.value();\n\n\t                that.value([]);\n\t                that.bound(false);\n\n\t                that.value(value);\n\t            } else {\n\t                that._refreshHandler = proxy(that.refresh, that);\n\t            }\n\n\t            that.setDSFilter(dataSource.filter());\n\n\t            that.dataSource = dataSource.bind(CHANGE, that._refreshHandler);\n\t            that._fixedHeader();\n\t        },\n\n\t        _touchHandlers: function () {\n\t            var that = this;\n\t            var startY;\n\t            var endY;\n\t            var tapPosition = function (event) {\n\t                return (event.originalEvent || event).changedTouches[0].pageY;\n\t            };\n\n\t            that.element.on("touchstart" + STATIC_LIST_NS, function (e) {\n\t                startY = tapPosition(e);\n\t            });\n\n\t            that.element.on("touchend" + STATIC_LIST_NS, function (e) {\n\t                if (e.isDefaultPrevented()) {\n\t                    return;\n\t                }\n\n\t                endY = tapPosition(e);\n\n\t                if (Math.abs(endY - startY) < 10) {\n\t                    that._touchTriggered = true;\n\t                    that._triggerClick($(e.target).closest(ITEMSELECTOR).get(0));\n\t                }\n\t            });\n\t        },\n\n\t        skip: function() {\n\t            return this.dataSource.skip();\n\t        },\n\n\t        setOptions: function(options) {\n\t            Widget.fn.setOptions.call(this, options);\n\n\t            this._getter();\n\t            this._templates();\n\t            this._render();\n\t        },\n\n\t        destroy: function() {\n\t            this.element.off(STATIC_LIST_NS);\n\n\t            if (this._refreshHandler) {\n\t                this.dataSource.unbind(CHANGE, this._refreshHandler);\n\t            }\n\n\t            clearTimeout(this._scrollId);\n\n\t            Widget.fn.destroy.call(this);\n\t        },\n\n\t        dataItemByIndex: function(index) {\n\t            return this.dataSource.flatView()[index];\n\t        },\n\n\t        screenHeight: function() {\n\t            return this.content[0].clientHeight;\n\t        },\n\n\t        scrollToIndex: function(index) {\n\t            var item = this.element[0].children[index];\n\n\t            if (item) {\n\t                this.scroll(item);\n\t            }\n\t        },\n\n\t        scrollWith: function(value) {\n\t            this.content.scrollTop(this.content.scrollTop() + value);\n\t        },\n\n\t        scroll: function (item) {\n\t            if (!item) {\n\t                return;\n\t            }\n\n\t            if (item[0]) {\n\t                item = item[0];\n\t            }\n\n\t            var content = this.content[0],\n\t                itemOffsetTop = item.offsetTop,\n\t                itemOffsetHeight = item.offsetHeight,\n\t                contentScrollTop = content.scrollTop,\n\t                contentOffsetHeight = content.clientHeight,\n\t                bottomDistance = itemOffsetTop + itemOffsetHeight;\n\n\t                if (contentScrollTop > itemOffsetTop) {\n\t                    contentScrollTop = itemOffsetTop;\n\t                } else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {\n\t                    contentScrollTop = (bottomDistance - contentOffsetHeight);\n\t                }\n\n\t                content.scrollTop = contentScrollTop;\n\t        },\n\n\t        selectedDataItems: function(dataItems) {\n\t            if (dataItems === undefined) {\n\t                return this._dataItems.slice();\n\t            }\n\n\t            this._dataItems = dataItems;\n\t            this._values = this._getValues(dataItems);\n\t        },\n\n\t        _getValues: function(dataItems) {\n\t            var getter = this._valueGetter;\n\n\t            return $.map(dataItems, function(dataItem) {\n\t                return getter(dataItem);\n\t            });\n\t        },\n\n\t        focusNext: function() {\n\t            var current = this.focus();\n\n\t            if (!current) {\n\t                current = 0;\n\t            } else {\n\t                current = current.next();\n\t            }\n\n\t            this.focus(current);\n\t        },\n\n\t        focusPrev: function() {\n\t            var current = this.focus();\n\n\t            if (!current) {\n\t                current = this.element[0].children.length - 1;\n\t            } else {\n\t                current = current.prev();\n\t            }\n\n\t            this.focus(current);\n\t        },\n\n\t        focusFirst: function() {\n\t            this.focus(this.element[0].children[0]);\n\t        },\n\n\t        focusLast: function() {\n\t            this.focus(last(this.element[0].children));\n\t        },\n\n\t        focus: function(candidate) {\n\t            var that = this;\n\t            var id = that._optionID;\n\t            var hasCandidate;\n\n\t            if (candidate === undefined) {\n\t                return that._current;\n\t            }\n\n\t            candidate = last(that._get(candidate));\n\t            candidate = $(this.element[0].children[candidate]);\n\n\t            if (that._current) {\n\t                that._current\n\t                    .removeClass(FOCUSED)\n\t                    .removeAttr(ID);\n\n\t                that.trigger("deactivate");\n\t            }\n\n\t            hasCandidate = !!candidate[0];\n\n\t            if (hasCandidate) {\n\t                candidate.addClass(FOCUSED);\n\t                that.scroll(candidate);\n\n\t                candidate.attr("id", id);\n\t            }\n\n\t            that._current = hasCandidate ? candidate : null;\n\t            that.trigger("activate");\n\t        },\n\n\t        focusIndex: function() {\n\t            return this.focus() ? this.focus().index() : undefined;\n\t        },\n\n\t        skipUpdate: function(skipUpdate) {\n\t            this._skipUpdate = skipUpdate;\n\t        },\n\n\t        select: function(indices) {\n\t            var that = this;\n\t            var selectable = that.options.selectable;\n\t            var singleSelection = selectable !== "multiple" && selectable !== false;\n\t            var selectedIndices = that._selectedIndices;\n\t            var uiSelectedIndices = [this.element.find(".k-state-selected").index()];\n\n\t            var added = [];\n\t            var removed = [];\n\t            var result;\n\n\t            if (indices === undefined) {\n\t                return selectedIndices.slice();\n\t            }\n\n\t            indices = that._get(indices);\n\n\t            if (indices.length === 1 && indices[0] === -1) {\n\t                indices = [];\n\t            }\n\n\t            var deferred = $.Deferred().resolve();\n\t            var filtered = that.isFiltered();\n\n\t            if (filtered && !singleSelection && that._deselectFiltered(indices)) {\n\t                return deferred;\n\t            }\n\n\t            if (singleSelection && !filtered &&\n\t                $.inArray(last(indices), selectedIndices) !== -1 && $.inArray(last(indices), uiSelectedIndices) !== -1) {\n\n\t                if (that._dataItems.length && that._view.length) {\n\t                    that._dataItems = [that._view[selectedIndices[0]].item];\n\t                }\n\n\t                return deferred;\n\t            }\n\n\t            result = that._deselect(indices);\n\n\t            removed = result.removed;\n\t            indices = result.indices;\n\n\t            if (indices.length) {\n\t                if (singleSelection) {\n\t                    indices = [last(indices)];\n\t                }\n\n\t                added = that._select(indices);\n\t            }\n\n\t            if (added.length || removed.length) {\n\t                that._valueComparer = null;\n\t                that.trigger(CHANGE, {\n\t                    added: added,\n\t                    removed: removed\n\t                });\n\t            }\n\n\t            return deferred;\n\t        },\n\n\t        removeAt: function(position) {\n\t            this._selectedIndices.splice(position, 1);\n\t            this._values.splice(position, 1);\n\t            this._valueComparer = null;\n\n\t            return {\n\t                position: position,\n\t                dataItem: this._dataItems.splice(position, 1)[0]\n\t            };\n\t        },\n\n\t        setValue: function(value) {\n\t            value = $.isArray(value) || value instanceof ObservableArray ? value.slice(0) : [value];\n\n\t            this._values = value;\n\n\t            this._valueComparer = null;\n\t        },\n\n\t        value: function(value) {\n\t            var that = this;\n\t            var deferred = that._valueDeferred;\n\t            var indices;\n\n\t            if (value === undefined) {\n\t                return that._values.slice();\n\t            }\n\n\t            that.setValue(value);\n\n\t            if (!deferred || deferred.state() === "resolved") {\n\t                that._valueDeferred = deferred = $.Deferred();\n\t            }\n\n\t            if (that.bound()) {\n\t                indices = that._valueIndices(that._values);\n\n\t                if (that.options.selectable === "multiple") {\n\t                    that.select(-1);\n\t                }\n\n\t                that.select(indices);\n\n\t                deferred.resolve();\n\t            }\n\n\t            that._skipUpdate = false;\n\n\t            return deferred;\n\t        },\n\n\t        items: function() {\n\t            return this.element.children(ITEMSELECTOR);\n\t        },\n\n\t        _click: function(e) {\n\t            if (this._touchTriggered)\n\t            {\n\t                this._touchTriggered = false;\n\t                return;\n\t            }\n\n\t            if (!e.isDefaultPrevented()) {\n\t                this._triggerClick(e.currentTarget);\n\t            }\n\t        },\n\n\t        _triggerClick: function (item) {\n\t            if (!this.trigger("click", { item: $(item) })) {\n\t                this.select(item);\n\t            }\n\t        },\n\n\t        _valueExpr: function(type, values) {\n\t            var that = this;\n\t            var idx = 0;\n\n\t            var body;\n\t            var comparer;\n\t            var normalized = [];\n\n\t            if (!that._valueComparer  || that._valueType !== type) {\n\t                that._valueType = type;\n\n\t                for (; idx < values.length; idx++) {\n\t                    normalized.push(unifyType(values[idx], type));\n\t                }\n\n\t                body = "for (var idx = 0; idx < " + normalized.length + "; idx++) {" +\n\t                        " if (current === values[idx]) {" +\n\t                        "   return idx;" +\n\t                        " }" +\n\t                        "} " +\n\t                        "return -1;";\n\n\t                comparer = new Function("current", "values", body);\n\n\t                that._valueComparer = function(current) {\n\t                    return comparer(current, normalized);\n\t                };\n\t            }\n\n\t            return that._valueComparer;\n\t        },\n\n\t        _dataItemPosition: function(dataItem, values) {\n\t            var value = this._valueGetter(dataItem);\n\n\t            var valueExpr = this._valueExpr(typeof value, values);\n\n\t            return valueExpr(value);\n\t        },\n\n\t        _getter: function() {\n\t            this._valueGetter = kendo.getter(this.options.dataValueField);\n\t        },\n\n\t        _deselect: function(indices) {\n\t            var that = this;\n\t            var children = that.element[0].children;\n\t            var selectable = that.options.selectable;\n\t            var selectedIndices = that._selectedIndices;\n\t            var dataItems = that._dataItems;\n\t            var values = that._values;\n\t            var removed = [];\n\t            var i = 0;\n\t            var j;\n\n\t            var index, selectedIndex;\n\t            var removedIndices = 0;\n\n\t            indices = indices.slice();\n\n\t            if (selectable === true || !indices.length) {\n\t                for (; i < selectedIndices.length; i++) {\n\t                    $(children[selectedIndices[i]]).removeClass("k-state-selected").attr("aria-selected", false);\n\n\t                    removed.push({\n\t                        position: i,\n\t                        dataItem: dataItems[i]\n\t                    });\n\t                }\n\n\t                that._values = [];\n\t                that._dataItems = [];\n\t                that._selectedIndices = [];\n\t            } else if (selectable === "multiple") {\n\t                for (; i < indices.length; i++) {\n\t                    index = indices[i];\n\n\t                    if (!$(children[index]).hasClass("k-state-selected")) {\n\t                        continue;\n\t                    }\n\n\t                    for (j = 0; j < selectedIndices.length; j++) {\n\t                        selectedIndex = selectedIndices[j];\n\n\t                        if (selectedIndex === index) {\n\t                            $(children[selectedIndex]).removeClass("k-state-selected").attr("aria-selected", false);\n\n\t                            removed.push({\n\t                                position: j + removedIndices,\n\t                                dataItem: dataItems.splice(j, 1)[0]\n\t                            });\n\n\t                            selectedIndices.splice(j, 1);\n\t                            indices.splice(i, 1);\n\t                            values.splice(j, 1);\n\n\t                            removedIndices += 1;\n\t                            i -= 1;\n\t                            j -= 1;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\n\t            return {\n\t                indices: indices,\n\t                removed: removed\n\t            };\n\t        },\n\n\t        _deselectFiltered: function(indices) {\n\t            var children = this.element[0].children;\n\t            var dataItem, index, position;\n\t            var removed = [];\n\t            var idx = 0;\n\n\t            for (; idx < indices.length; idx++) {\n\t                index = indices[idx];\n\t                dataItem = this._view[index].item;\n\t                position = this._dataItemPosition(dataItem, this._values);\n\n\t                if (position > -1) {\n\t                    removed.push(this.removeAt(position));\n\t                    $(children[index]).removeClass("k-state-selected");\n\t                }\n\t            }\n\n\t            if (removed.length) {\n\t                this.trigger(CHANGE, {\n\t                    added: [],\n\t                    removed: removed\n\t                });\n\n\t                return true;\n\t            }\n\n\t            return false;\n\t        },\n\n\t        _select: function(indices) {\n\t            var that = this;\n\t            var children = that.element[0].children;\n\t            var data = that._view;\n\t            var dataItem, index;\n\t            var added = [];\n\t            var idx = 0;\n\n\t            if (last(indices) !== -1) {\n\t                that.focus(indices);\n\t            }\n\n\t            for (; idx < indices.length; idx++) {\n\t                index = indices[idx];\n\t                dataItem = data[index];\n\n\t                if (index === -1 || !dataItem) {\n\t                    continue;\n\t                }\n\n\t                dataItem = dataItem.item;\n\n\t                that._selectedIndices.push(index);\n\t                that._dataItems.push(dataItem);\n\t                that._values.push(that._valueGetter(dataItem));\n\n\t                $(children[index]).addClass("k-state-selected").attr("aria-selected", true);\n\n\t                added.push({\n\t                    dataItem: dataItem\n\t                });\n\t            }\n\n\t            return added;\n\t        },\n\n\t        getElementIndex: function(element) {\n\t            return $(element).data("offset-index");\n\t        },\n\n\t        _get: function(candidate) {\n\t            if (typeof candidate === "number") {\n\t                candidate = [candidate];\n\t            } else if (!isArray(candidate)) {\n\t                candidate = this.getElementIndex(candidate);\n\t                candidate = [candidate !== undefined ? candidate : -1];\n\t            }\n\n\t            return candidate;\n\t        },\n\n\t        _template: function() {\n\t            var that = this;\n\t            var options = that.options;\n\t            var template = options.template;\n\n\t            if (!template) {\n\t                template = kendo.template(\'<li tabindex="-1" role="option" unselectable="on" class="k-item">${\' + kendo.expr(options.dataTextField, "data") + "}</li>", { useWithBlock: false });\n\t            } else {\n\t                template = kendo.template(template);\n\t                template = function(data) {\n\t                    return \'<li tabindex="-1" role="option" unselectable="on" class="k-item">\' + template(data) + "</li>";\n\t                };\n\t            }\n\n\t            return template;\n\t        },\n\n\t        _templates: function() {\n\t            var template;\n\t            var options = this.options;\n\t            var templates = {\n\t                template: options.template,\n\t                groupTemplate: options.groupTemplate,\n\t                fixedGroupTemplate: options.fixedGroupTemplate\n\t            };\n\n\t            if (options.columns) {\n\t                for (var i = 0; i < options.columns.length; i++) {\n\t                    var currentColumn = options.columns[i];\n\t                    var templateText = currentColumn.field ? currentColumn.field.toString(): "text";\n\n\t                    templates["column"+ i] = currentColumn.template || "#: " + templateText + "#";\n\t                }\n\t            }\n\n\t            for (var key in templates) {\n\t                template = templates[key];\n\t                if (template && typeof template !== "function") {\n\t                    templates[key] = kendo.template(template);\n\t                }\n\t            }\n\n\t            this.templates = templates;\n\t        },\n\n\t        _normalizeIndices: function(indices) {\n\t            var newIndices = [];\n\t            var idx = 0;\n\n\t            for (; idx < indices.length; idx++) {\n\t                if (indices[idx] !== undefined) {\n\t                    newIndices.push(indices[idx]);\n\t                }\n\t            }\n\n\t            return newIndices;\n\t        },\n\n\t        _valueIndices: function(values, indices) {\n\t            var data = this._view;\n\t            var idx = 0;\n\t            var index;\n\n\t            indices = indices ? indices.slice() : [];\n\n\t            if (!values.length) {\n\t                return [];\n\t            }\n\n\t            for (; idx < data.length; idx++) {\n\t                index = this._dataItemPosition(data[idx].item, values);\n\n\t                if (index !== -1) {\n\t                    indices[index] = idx;\n\t                }\n\t            }\n\n\t            return this._normalizeIndices(indices);\n\t        },\n\n\t        _firstVisibleItem: function() {\n\t            var element = this.element[0];\n\t            var content = this.content[0];\n\t            var scrollTop = content.scrollTop;\n\t            var itemHeight = $(element.children[0]).height();\n\t            var itemIndex = Math.floor(scrollTop / itemHeight) || 0;\n\t            var item = element.children[itemIndex] || element.lastChild;\n\t            var forward = item.offsetTop < scrollTop;\n\n\t            while (item) {\n\t                if (forward) {\n\t                    if ((item.offsetTop + itemHeight) > scrollTop || !item.nextSibling) {\n\t                        break;\n\t                    }\n\n\t                    item = item.nextSibling;\n\t                } else {\n\t                    if (item.offsetTop <= scrollTop || !item.previousSibling) {\n\t                        break;\n\t                    }\n\n\t                    item = item.previousSibling;\n\t                }\n\t            }\n\n\t            return this._view[$(item).data("offset-index")];\n\t        },\n\n\t        _fixedHeader: function() {\n\t            if (this.isGrouped() && this.templates.fixedGroupTemplate) {\n\t                this.header.show();\n\t                this.content.scroll(this._onScroll);\n\t            } else {\n\t                this.header.hide();\n\t                this.content.off("scroll", this._onScroll);\n\t            }\n\t        },\n\n\t        _renderHeader: function() {\n\t            var template = this.templates.fixedGroupTemplate;\n\t            if (!template) {\n\t                return;\n\t            }\n\n\t            var visibleItem = this._firstVisibleItem();\n\n\t            if (visibleItem && visibleItem.group.toString().length) {\n\t                this.header.html(template(visibleItem.group));\n\t            }\n\t        },\n\n\t        _renderItem: function(context) {\n\t            var item = \'<li tabindex="-1" role="option" unselectable="on" class="k-item\';\n\n\t            var dataItem = context.item;\n\t            var notFirstItem = context.index !== 0;\n\t            var selected = context.selected;\n\t            var isGrouped = this.isGrouped();\n\t            var hasColumns = this.options.columns && this.options.columns.length;\n\n\t            if (notFirstItem && context.newGroup) {\n\t                item += \' k-first\';\n\t            }\n\n\t            if (context.isLastGroupedItem && hasColumns) {\n\t                item += \' k-last\';\n\t            }\n\n\t            if (selected) {\n\t                item += \' k-state-selected\';\n\t            }\n\n\t            item += \'" aria-selected="\' + (selected ? "true" : "false") + \'" data-offset-index="\' + context.index + \'">\';\n\t            if (hasColumns) {\n\t                item += this._renderColumns(dataItem);\n\t            } else {\n\t                item += this.templates.template(dataItem);\n\t            }\n\n\t            if (notFirstItem && context.newGroup) {\n\t                if (hasColumns) {\n\t                    item += \'<div class="k-cell k-group-cell"><span>\' + this.templates.groupTemplate(context.group) + \'</span></div>\';\n\t                } else {\n\t                    item += \'<div class="k-group">\' + this.templates.groupTemplate(context.group) + \'</div>\';\n\t                }\n\t            } else if (isGrouped && hasColumns) {\n\t                item += "<div class=\'k-cell k-spacer-cell\'></div>";\n\t            }\n\n\t            return item + "</li>";\n\t        },\n\n\t        _renderColumns: function(dataItem) {\n\t            var item = "";\n\n\t            for (var i = 0; i < this.options.columns.length; i++) {\n\t                var currentWidth = this.options.columns[i].width;\n\t                var currentWidthInt = parseInt(currentWidth, 10);\n\t                var widthStyle = \'\';\n\n\t                if (currentWidth && !isNaN(currentWidthInt)) {\n\t                    widthStyle += "style=\'width:";\n\t                    widthStyle += currentWidthInt;\n\t                    widthStyle += percentageUnitsRegex.test(currentWidth) ? "%" : "px";\n\t                    widthStyle += ";\'";\n\t                }\n\t                item += "<span class=\'k-cell\' " + widthStyle + ">";\n\t                item += this.templates["column"+ i](dataItem);\n\t                item += "</span>";\n\t            }\n\n\t            return item;\n\t        },\n\n\t        _render: function() {\n\t            var html = "";\n\n\t            var i = 0;\n\t            var idx = 0;\n\t            var context;\n\t            var dataContext = [];\n\t            var view = this.dataSource.view();\n\t            var values = this.value();\n\n\t            var group, newGroup, j;\n\t            var isGrouped = this.isGrouped();\n\n\t            if (isGrouped) {\n\t                for (i = 0; i < view.length; i++) {\n\t                    group = view[i];\n\t                    newGroup = true;\n\n\t                    for (j = 0; j < group.items.length; j++) {\n\t                        context = {\n\t                            selected: this._selected(group.items[j], values),\n\t                            item: group.items[j],\n\t                            group: group.value,\n\t                            newGroup: newGroup,\n\t                            isLastGroupedItem: j === group.items.length - 1,\n\t                            index: idx };\n\t                        dataContext[idx] = context;\n\t                        idx += 1;\n\n\t                        html += this._renderItem(context);\n\t                        newGroup = false;\n\t                    }\n\t                }\n\t            } else {\n\t                for (i = 0; i < view.length; i++) {\n\t                    context = { selected: this._selected(view[i], values), item: view[i], index: i };\n\n\t                    dataContext[i] = context;\n\n\t                    html += this._renderItem(context);\n\t                }\n\t            }\n\n\t            this._view = dataContext;\n\n\t            this.element[0].innerHTML = html;\n\n\t            if (isGrouped && dataContext.length) {\n\t                this._renderHeader();\n\t            }\n\t        },\n\n\t        _selected: function(dataItem, values) {\n\t            var select = !this.isFiltered() || this.options.selectable === "multiple";\n\t            return select && this._dataItemPosition(dataItem, values) !== -1;\n\t        },\n\n\t        setDSFilter: function(filter) {\n\t            this._lastDSFilter = extend({}, filter);\n\t        },\n\n\t        isFiltered: function() {\n\t            if (!this._lastDSFilter) {\n\t                this.setDSFilter(this.dataSource.filter());\n\t            }\n\n\t            return !kendo.data.Query.compareFilters(this.dataSource.filter(), this._lastDSFilter);\n\t        },\n\n\t        refresh: function(e) {\n\t            var that = this;\n\t            var action = e && e.action;\n\t            var skipUpdateOnBind = that.options.skipUpdateOnBind;\n\t            var isItemChange = action === "itemchange";\n\t            var result;\n\n\t            that.trigger("dataBinding");\n\t            that._angularItems("cleanup");\n\n\t            that._fixedHeader();\n\n\t            that._render();\n\n\t            that.bound(true);\n\n\t            if (isItemChange || action === "remove") {\n\t                result = mapChangedItems(that._dataItems, e.items);\n\n\t                if (result.changed.length) {\n\t                    if (isItemChange) {\n\t                        that.trigger("selectedItemChange", {\n\t                            items: result.changed\n\t                        });\n\t                    } else {\n\t                        that.value(that._getValues(result.unchanged));\n\t                    }\n\t                }\n\t            } else if (that.isFiltered() || that._skipUpdate || that._emptySearch) {\n\t                that.focus(0);\n\t                if (that._skipUpdate) {\n\t                    that._skipUpdate = false;\n\t                    that._selectedIndices = that._valueIndices(that._values, that._selectedIndices);\n\t                }\n\t            } else if (!skipUpdateOnBind && (!action || action === "add")) {\n\t                that.value(that._values);\n\t            }\n\n\t            if (that._valueDeferred) {\n\t                that._valueDeferred.resolve();\n\t            }\n\n\t            that._angularItems("compile");\n\t            that.trigger("dataBound");\n\t        },\n\n\t        bound: function(bound) {\n\t            if (bound === undefined) {\n\t                return this._bound;\n\t            }\n\n\t            this._bound = bound;\n\t        },\n\n\t        isGrouped: function() {\n\t            return (this.dataSource.group() || []).length;\n\t        }\n\t    });\n\n\t    ui.plugin(StaticList);\n\n\t    function last(list) {\n\t        return list[list.length - 1];\n\t    }\n\n\t    function getSelectedOption(select) {\n\t        var index = select.selectedIndex;\n\t        return index > -1 ? select.options[index] : {};\n\t    }\n\n\t    function mapChangedItems(selected, itemsToMatch) {\n\t        var itemsLength = itemsToMatch.length;\n\t        var selectedLength = selected.length;\n\t        var dataItem;\n\t        var found;\n\t        var i, j;\n\n\t        var changed = [];\n\t        var unchanged = [];\n\n\t        if (selectedLength) {\n\t            for (i = 0; i < selectedLength; i++) {\n\t                dataItem = selected[i];\n\t                found = false;\n\n\t                for (j = 0; j < itemsLength; j++) {\n\t                    if (dataItem === itemsToMatch[j]) {\n\t                        found = true;\n\t                        changed.push({ index: i, item: dataItem });\n\t                        break;\n\t                    }\n\t                }\n\n\t                if (!found) {\n\t                    unchanged.push(dataItem);\n\t                }\n\t            }\n\t        }\n\n\t        return {\n\t            changed: changed,\n\t            unchanged: unchanged\n\t        };\n\t    }\n\n\t    function isValidFilterExpr(expression) {\n\t        if (!expression || $.isEmptyObject(expression)) {\n\t            return false;\n\t        }\n\n\t        if (expression.filters && !expression.filters.length) {\n\t            return false;\n\t        }\n\n\t        return true;\n\t    }\n\n\t    function removeFiltersForField(expression, field) {\n\t        var filters;\n\t        var found = false;\n\n\t        if (expression.filters) {\n\t            filters = $.grep(expression.filters, function(filter) {\n\t                found = removeFiltersForField(filter, field);\n\t                if (filter.filters) {\n\t                    return filter.filters.length;\n\t                } else {\n\t                    return filter.field != field;\n\t                }\n\t            });\n\n\t            if (!found && expression.filters.length !== filters.length) {\n\t                found = true;\n\t            }\n\n\t            expression.filters = filters;\n\t        }\n\n\t        return found;\n\t    }\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.list.js?')}}]);