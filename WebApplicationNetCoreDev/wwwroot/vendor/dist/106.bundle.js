(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{"./node_modules/@progress/kendo-ui/js/kendo.scheduler.view.js":
/*!********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.scheduler.view.js ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1336);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1336:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "scheduler.view",\n\t    name: "Scheduler View",\n\t    category: "web",\n\t    description: "The Scheduler Common View",\n\t    depends: [ "core" ],\n\t    hidden: true\n\t};\n\t    kendo.ui.scheduler = {};\n\t/* jshint eqnull: true */\n\t(function($) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        getDate = kendo.date.getDate,\n\t        Widget = ui.Widget,\n\t        outerHeight = kendo._outerHeight,\n\t        keys = kendo.keys,\n\t        NS = ".kendoSchedulerView",\n\t        INVERSE_COLOR_CLASS = "k-event-inverse",\n\t        MIN_HORIZONTAL_SCROLL_SIZE = 1024,\n\t        math = Math;\n\n\t    function levels(values, key) {\n\t        var result = [];\n\n\t        function collect(depth, values) {\n\t            values = values[key];\n\n\t            if (values) {\n\t                var level = result[depth] = result[depth] || [];\n\n\t                for (var idx = 0; idx < values.length; idx++) {\n\t                    level.push(values[idx]);\n\t                    collect(depth + 1, values[idx]);\n\t                }\n\t            }\n\t        }\n\n\t        collect(0, values);\n\n\t        return result;\n\t    }\n\n\t    function cellspacing() {\n\t        if (kendo.support.cssBorderSpacing) {\n\t            return "";\n\t        }\n\n\t        return \'cellspacing="0"\';\n\t    }\n\n\t    function table(tableRows, className) {\n\t        if (!tableRows.length) {\n\t            return "";\n\t        }\n\n\t        return \'<table role="presentation"\' + cellspacing() + \' class="\' + kendo.trim(\'k-scheduler-table \' + (className || "")) + \'">\' +\n\t               \'<tr>\' +\n\t                    tableRows.join("</tr><tr>") +\n\t               \'</tr>\' +\n\t               \'</table>\';\n\t    }\n\n\t    function allDayTable(tableRows, className) {\n\t        if (!tableRows.length) {\n\t            return "";\n\t        }\n\n\t        return "<div style=\'position:relative\'>" + table(tableRows, className) + "</div>";\n\t    }\n\n\t    function timesHeader(columnLevelCount, allDaySlot, rowCount) {\n\t        var tableRows = [];\n\n\t        if (rowCount > 0) {\n\t            for (var idx = 0; idx < columnLevelCount; idx++) {\n\t                tableRows.push("<th>&#8203;</th>");\n\t            }\n\t        }\n\n\t        if (allDaySlot) {\n\t            tableRows.push(\'<th class="k-scheduler-times-all-day">\' + allDaySlot.text + \'</th>\');\n\t        }\n\n\t        if (rowCount < 1) {\n\t           return $();\n\t        }\n\n\t        return $(\'<div class="k-scheduler-times">\' + table(tableRows) + \'</div>\');\n\t    }\n\n\t    function datesHeader(columnLevels, columnCount, allDaySlot) {\n\t        var dateTableRows = [];\n\t        var columnIndex;\n\n\t        for (var columnLevelIndex = 0; columnLevelIndex < columnLevels.length; columnLevelIndex++) {\n\t            var level = columnLevels[columnLevelIndex];\n\t            var th = [];\n\t            var colspan = columnCount / level.length;\n\n\t            for (columnIndex = 0; columnIndex < level.length; columnIndex ++) {\n\t                var column = level[columnIndex];\n\n\t                th.push(\'<th colspan="\' + (column.colspan || colspan) + \'" class="\' + (column.className || "")  + \'">\' + column.text + "</th>");\n\t            }\n\n\t            dateTableRows.push(th.join(""));\n\t        }\n\n\t        var allDayTableRows = [];\n\n\t        if (allDaySlot) {\n\t            var lastLevel = columnLevels[columnLevels.length - 1];\n\t            var td = [];\n\t            var cellContent = allDaySlot.cellContent;\n\n\t            for (columnIndex = 0; columnIndex < lastLevel.length; columnIndex++) {\n\t                td.push(\'<td class="\' + (lastLevel[columnIndex].className || "")  + \'">\' + (cellContent ? cellContent(columnIndex) : \'&nbsp;\') + \'</td>\');\n\t            }\n\n\t            allDayTableRows.push(td.join(""));\n\t        }\n\n\t        return $(\n\t            \'<div class="k-scheduler-header k-state-default">\' +\n\t                \'<div class="k-scheduler-header-wrap">\' +\n\t                    table(dateTableRows) +\n\t                    allDayTable(allDayTableRows, "k-scheduler-header-all-day") +\n\t                \'</div>\' +\n\t            \'</div>\'\n\t        );\n\t    }\n\n\t    function times(rowLevels, rowCount, isMobile) {\n\t        var rows = new Array(rowCount).join().split(",");\n\t        var rowHeaderRows = [];\n\t        var rowIndex;\n\n\t        for (var rowLevelIndex = 0; rowLevelIndex < rowLevels.length; rowLevelIndex++) {\n\t            var level = rowLevels[rowLevelIndex];\n\t            var rowspan = rowCount / level.length;\n\t            var className;\n\t            var text;\n\n\t            for (rowIndex = 0; rowIndex < level.length; rowIndex++) {\n\t                className = level[rowIndex].className || "";\n\t                text = level[rowIndex].text;\n\n\t                if (level[rowIndex].allDay) {\n\t                    className = "k-scheduler-times-all-day";\n\t                }\n\n\t                if (isMobile && className.indexOf("k-scheduler-group-cell") !== -1) {\n\t                    text = \'<span class="k-scheduler-group-text">\' + text + \'</span>\';\n\t                }\n\n\t                rows[rowspan * rowIndex] += \'<th class="\' + className + \'" rowspan="\' + rowspan + \'">\' + text + "</th>";\n\t            }\n\t        }\n\n\t        for (rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n\t            rowHeaderRows.push(rows[rowIndex]);\n\t        }\n\n\t        if (rowCount < 1) {\n\t            return $();\n\t        }\n\n\t        return $(\'<div class="k-scheduler-times">\' + table(rowHeaderRows) + \'</div>\');\n\t    }\n\n\t    function content() {\n\t        return $(\n\t            \'<div class="k-scheduler-content">\' +\n\t                \'<table role="presentation"\' + cellspacing() + \' class="k-scheduler-table"></table>\' +\n\t            \'</div>\'\n\t        );\n\t    }\n\t    var HINT = \'<div class="k-marquee k-scheduler-marquee">\' +\n\t                    \'<div class="k-marquee-color"></div>\' +\n\t                    \'<div class="k-marquee-text">\' +\n\t                        \'<div class="k-label-top"></div>\' +\n\t                        \'<div class="k-label-bottom"></div>\' +\n\t                    \'</div>\' +\n\t                \'</div>\';\n\n\n\t    var ResourceView = kendo.Class.extend({\n\t        init: function(index, isRtl) {\n\t            this._index = index;\n\t            this._timeSlotCollections = [];\n\t            this._daySlotCollections = [];\n\t            this._isRtl = isRtl;\n\t        },\n\n\t        addTimeSlotCollection: function(startDate, endDate) {\n\t            return this._addCollection(startDate, endDate, this._timeSlotCollections);\n\t        },\n\n\t        addDaySlotCollection: function(startDate, endDate) {\n\t            return this._addCollection(startDate, endDate, this._daySlotCollections);\n\t        },\n\n\t        _addCollection: function(startDate, endDate, collections) {\n\t            var collection = new SlotCollection(startDate, endDate, this._index, collections.length);\n\n\t            collections.push(collection);\n\n\t            return collection;\n\t        },\n\n\t        timeSlotCollectionCount: function() {\n\t            return this._timeSlotCollections.length;\n\t        },\n\n\t        daySlotCollectionCount: function() {\n\t            return this._daySlotCollections.length;\n\t        },\n\n\t        daySlotByPosition: function(x, y, byDate) {\n\t            return this._slotByPosition(x, y, this._daySlotCollections, byDate);\n\t        },\n\n\t        timeSlotByPosition: function(x, y, byDate) {\n\t            return this._slotByPosition(x, y, this._timeSlotCollections, byDate);\n\t        },\n\n\t        _slotByPosition: function(x, y, collections, byDate) {\n\t           for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n\t               var collection = collections[collectionIndex];\n\n\t               for (var slotIndex = 0; slotIndex < collection.count(); slotIndex++) {\n\t                   var slot = collection.at(slotIndex);\n\t                   var width = slot.offsetWidth;\n\t                   var height = slot.offsetHeight;\n\t                   var nextSlot;\n\n\t                   var horizontalEnd = slot.offsetLeft + width;\n\t                   var verticalEnd =  slot.offsetTop + height;\n\n\t                   if (!byDate) {\n\t                        nextSlot =  collection.at(slotIndex + 1);\n\t                   }\n\n\t                   if (nextSlot) {\n\t                       if (nextSlot.offsetLeft != slot.offsetLeft) {\n\t                           if (this._isRtl) {\n\t                               horizontalEnd = slot.offsetLeft + (slot.offsetLeft - nextSlot.offsetLeft);\n\t                           } else {\n\t                               horizontalEnd = nextSlot.offsetLeft;\n\t                           }\n\t                       } else {\n\t                           verticalEnd = nextSlot.offsetTop;\n\t                       }\n\t                   }\n\n\t                   if (x >= slot.offsetLeft && x < horizontalEnd &&\n\t                       y >= slot.offsetTop && y < verticalEnd) {\n\t                       return slot;\n\t                   }\n\t               }\n\t           }\n\t        },\n\n\t        refresh: function() {\n\t            var collectionIndex;\n\n\t            for (collectionIndex = 0; collectionIndex < this._daySlotCollections.length; collectionIndex++) {\n\t                this._daySlotCollections[collectionIndex].refresh();\n\t            }\n\n\t            for (collectionIndex = 0; collectionIndex < this._timeSlotCollections.length; collectionIndex++) {\n\t                this._timeSlotCollections[collectionIndex].refresh();\n\t            }\n\t        },\n\n\t        timeSlotRanges: function(startTime, endTime) {\n\t            var collections = this._timeSlotCollections;\n\n\t            var start = this._startSlot(startTime, collections);\n\n\t            if (!start.inRange && startTime >= start.slot.end) {\n\t                start = null;\n\t            }\n\n\t            var end = start;\n\n\t            if (startTime < endTime) {\n\t                end = this._endSlot(endTime, collections);\n\t            }\n\n\t            if (end && !end.inRange && endTime <= end.slot.start) {\n\t                end = null;\n\t            }\n\n\t            if (start === null && end === null) {\n\t                return [];\n\t            }\n\n\t            if (start === null) {\n\t                if (end.slot.end <= startTime) {\n\t                    return [];\n\t                }\n\n\t                start = {\n\t                    inRange: true,\n\t                    slot: collections[end.slot.collectionIndex].first()\n\t                };\n\t            }\n\n\t            if (end === null) {\n\t                if (start.slot.start >= endTime) {\n\t                    return [];\n\t                }\n\n\t                end = {\n\t                    inRange: true,\n\t                    slot: collections[start.slot.collectionIndex].last()\n\t                };\n\t            }\n\n\t            return this._continuousRange(TimeSlotRange, collections, start, end);\n\t        },\n\n\t        daySlotRanges: function(startTime, endTime, isAllDay) {\n\t            var collections = this._daySlotCollections;\n\n\t            var start = this._startSlot(startTime, collections, isAllDay);\n\n\t            if (!start.inRange && startTime >= start.slot.end) {\n\t                start = null;\n\t            }\n\n\t            var end = start;\n\n\t            if (startTime < endTime) {\n\t                end = this._endSlot(endTime, collections, isAllDay);\n\t            }\n\n\t            if (end && !end.inRange && endTime <= end.slot.start) {\n\t                end = null;\n\t            }\n\n\t            if (start === null && end === null) {\n\t                return [];\n\t            }\n\n\t            if (start === null) {\n\t                if (end.slot.end <= startTime) {\n\t                    return [];\n\t                }\n\n\t                do {\n\t                    startTime += kendo.date.MS_PER_DAY;\n\t                    start = this._startSlot(startTime, collections, isAllDay);\n\t                } while (!start.inRange && startTime >= start.slot.end);\n\t            }\n\n\t            if (end === null) {\n\t                if (start.slot.start >= endTime) {\n\t                    return [];\n\t                }\n\n\t                do {\n\t                    endTime -= kendo.date.MS_PER_DAY;\n\t                    end = this._endSlot(endTime, collections, isAllDay);\n\t                } while (!end.inRange && endTime <= end.slot.start);\n\t            }\n\n\t            return this._continuousRange(DaySlotRange, collections, start, end);\n\t        },\n\n\t        _continuousRange: function(range, collections, start, end) {\n\t            var startSlot = start.slot;\n\t            var endSlot = end.slot;\n\n\t            var startIndex = startSlot.collectionIndex;\n\t            var endIndex = endSlot.collectionIndex;\n\n\t            var ranges = [];\n\n\t            for (var collectionIndex = startIndex; collectionIndex <= endIndex; collectionIndex++) {\n\t                var collection = collections[collectionIndex];\n\n\t                var first = collection.first();\n\t                var last = collection.last();\n\t                var head = false;\n\t                var tail = false;\n\n\t                if (collectionIndex == startIndex) {\n\t                    tail = !start.inRange;\n\t                }\n\n\t                if (collectionIndex == endIndex) {\n\t                    head = !end.inRange;\n\t                }\n\n\t                if (first.start < startSlot.start) {\n\t                    first = startSlot;\n\t                }\n\n\t                if (last.start > endSlot.start) {\n\t                    last = endSlot;\n\t                }\n\n\t                if (startIndex < endIndex) {\n\t                    if (collectionIndex == startIndex) {\n\t                        head = true;\n\t                    } else if (collectionIndex == endIndex) {\n\t                        tail = true;\n\t                    } else {\n\t                        head = tail = true;\n\t                    }\n\t                }\n\n\t                ranges.push(new range({\n\t                    start: first,\n\t                    end: last,\n\t                    collection: collection,\n\t                    head: head,\n\t                    tail: tail\n\t                }));\n\t            }\n\n\t            return ranges;\n\t        },\n\n\t        slotRanges: function(event, isDay) {\n\t            var startTime = event._startTime || kendo.date.toUtcTime(event.start);\n\t            var endTime = event._endTime || kendo.date.toUtcTime(event.end);\n\n\t            if (isDay === undefined) {\n\t                isDay = event.isMultiDay();\n\t            }\n\n\t            if (isDay) {\n\t                return this.daySlotRanges(startTime, endTime, event.isAllDay);\n\t            }\n\n\t            return this.timeSlotRanges(startTime, endTime);\n\t        },\n\n\t        ranges: function(startTime, endTime, isDay, isAllDay) {\n\t            if (typeof startTime != "number") {\n\t                startTime = kendo.date.toUtcTime(startTime);\n\t            }\n\n\t            if (typeof endTime != "number") {\n\t                endTime = kendo.date.toUtcTime(endTime);\n\t            }\n\n\t            if (isDay) {\n\t                return this.daySlotRanges(startTime, endTime, isAllDay);\n\t            }\n\n\t            return this.timeSlotRanges(startTime, endTime);\n\t        },\n\n\t        _startCollection: function(date, collections) {\n\t            for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n\t                var collection = collections[collectionIndex];\n\n\t                if (collection.startInRange(date)) {\n\t                    return collection;\n\t                }\n\t            }\n\n\t            return null;\n\t        },\n\n\t        _endCollection: function(date, collections, isAllDay) {\n\t            for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n\t                var collection = collections[collectionIndex];\n\n\t                if (collection.endInRange(date, isAllDay)) {\n\t                    return collection;\n\t                }\n\t            }\n\n\t            return null;\n\t        },\n\n\t        _getCollections: function(isDay) {\n\t            return isDay ? this._daySlotCollections : this._timeSlotCollections;\n\t        },\n\n\t        continuousSlot: function(slot, reverse) {\n\t            var pad = reverse ? -1 : 1;\n\t            var collections = this._getCollections(slot.isDaySlot);\n\t            var collection = collections[slot.collectionIndex + pad];\n\n\t            return collection ? collection[reverse ? "last" : "first"]() : undefined;\n\t        },\n\n\t        firstSlot: function() {\n\t            var collections = this._getCollections(this.daySlotCollectionCount());\n\n\t            return collections[0].first();\n\t        },\n\n\t        lastSlot: function() {\n\t            var collections = this._getCollections(this.daySlotCollectionCount());\n\n\t            return collections[collections.length - 1].last();\n\t        },\n\n\t        upSlot: function(slot, keepCollection, groupByDateVertically) {\n\t            var that = this;\n\t            var moveToDaySlot = function(isDaySlot, collectionIndex, index) {\n\t                var isFirstCell = index === 0;\n\n\t                if (!keepCollection && !isDaySlot && isFirstCell && that.daySlotCollectionCount()) {\n\t                    return that._daySlotCollections[0].at(collectionIndex);\n\t                }\n\t            };\n\n\t            if (!this.timeSlotCollectionCount()) {\n\t                keepCollection = true;\n\t            }\n\n\t            return this._verticalSlot(slot, -1, moveToDaySlot, groupByDateVertically);\n\t        },\n\n\t        downSlot: function(slot, keepCollection, groupByDateVertically) {\n\t            var that = this;\n\t            var moveToTimeSlot = function(isDaySlot, collectionIndex, index) {\n\t                if (!keepCollection && isDaySlot && that.timeSlotCollectionCount()) {\n\t                    return that._timeSlotCollections[index].at(0);\n\t                }\n\t            };\n\n\t            if (!this.timeSlotCollectionCount()) {\n\t                keepCollection = true;\n\t            }\n\n\t            return this._verticalSlot(slot, 1, moveToTimeSlot, groupByDateVertically);\n\t        },\n\n\t        leftSlot: function(slot, groupByDateVertically) {\n\t            return this._horizontalSlot(slot, -1, groupByDateVertically);\n\t        },\n\n\t        rightSlot: function(slot, groupByDateVertically) {\n\t            return this._horizontalSlot(slot, 1, groupByDateVertically);\n\t        },\n\n\t        _horizontalSlot: function(slot, step, groupByDateVertically) {\n\t            var index = slot.index;\n\t            var isDaySlot = slot.isDaySlot;\n\t            var collectionIndex = slot.collectionIndex;\n\t            var collections = this._getCollections(isDaySlot);\n\n\t            isDaySlot = groupByDateVertically ? false : isDaySlot;\n\n\t            if (isDaySlot) {\n\t                index += step;\n\t            } else {\n\t                collectionIndex += step;\n\t            }\n\n\t            var collection = collections[collectionIndex];\n\n\t            return collection ? collection.at(index) : undefined;\n\t        },\n\n\t        _verticalSlot: function(slot, step, swapCollection, groupByDateVertically) {\n\t            var index = slot.index;\n\t            var isDaySlot = slot.isDaySlot;\n\t            var collectionIndex = slot.collectionIndex;\n\t            var collections = this._getCollections(isDaySlot);\n\n\t            slot = swapCollection(isDaySlot, collectionIndex, index);\n\t            if (slot) {\n\t                return slot;\n\t            }\n\n\t            isDaySlot = groupByDateVertically ? false : isDaySlot;\n\n\t            if (isDaySlot) {\n\t                collectionIndex += step;\n\t            } else {\n\t                index += step;\n\t            }\n\n\t            var collection = collections[collectionIndex];\n\n\t            return collection ? collection.at(index) : undefined;\n\t        },\n\n\t        _collection: function(index, multiday) {\n\t            var collections = multiday? this._daySlotCollections : this._timeSlotCollections;\n\n\t            return collections[index];\n\t        },\n\n\t        _startSlot: function(time, collections, isAllDay) {\n\t            var collection = this._startCollection(time, collections);\n\n\t            var inRange = true;\n\n\t            if (!collection) {\n\t                collection = collections[0];\n\t                inRange = false;\n\t            }\n\n\t            var slot = collection.slotByStartDate(time, isAllDay);\n\n\t            if (!slot) {\n\t                slot = collection.first();\n\t                inRange = false;\n\t            }\n\n\t            return {\n\t                slot: slot,\n\t                inRange: inRange\n\t            };\n\t        },\n\n\t        _endSlot: function(time, collections, isAllDay) {\n\t            var collection = this._endCollection(time, collections, isAllDay);\n\n\t            var inRange = true;\n\n\t            if (!collection) {\n\t                collection = collections[collections.length - 1];\n\t                inRange = false;\n\t            }\n\n\t            var slot = collection.slotByEndDate(time, isAllDay);\n\n\t            if (!slot) {\n\t                slot = collection.last();\n\t                inRange = false;\n\t            }\n\n\t            return {\n\t                slot: slot,\n\t                inRange: inRange\n\t            };\n\t        },\n\n\t        getSlotCollection: function(index, isDay) {\n\t            return this[isDay ? "getDaySlotCollection" : "getTimeSlotCollection"](index);\n\t        },\n\n\t        getTimeSlotCollection: function(index) {\n\t            return this._timeSlotCollections[index];\n\t        },\n\n\t        getDaySlotCollection: function(index) {\n\t            return this._daySlotCollections[index];\n\t        }\n\t    });\n\n\t    var SlotRange = kendo.Class.extend({\n\t        init: function(options) {\n\t            $.extend(this, options);\n\t        },\n\n\t        innerHeight: function() {\n\t            var collection = this.collection;\n\n\t            var startIndex = this.start.index;\n\n\t            var endIndex = this.end.index;\n\n\t            var result = 0;\n\n\t            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n\t               result += collection.at(slotIndex).offsetHeight;\n\t            }\n\n\t            return result;\n\t        },\n\n\t        events: function () {\n\t            return this.collection.events();\n\t        },\n\n\t        addEvent: function(event) {\n\t            this.events().push(event);\n\t        },\n\n\t        startSlot: function() {\n\t            if (this.start.offsetLeft > this.end.offsetLeft) {\n\t                return this.end;\n\t            }\n\t            return this.start;\n\t        },\n\n\t        endSlot: function() {\n\t            if (this.start.offsetLeft > this.end.offsetLeft) {\n\t                return this.start;\n\t            }\n\t            return this.end;\n\t        }\n\t    });\n\n\t    var TimeSlotRange = SlotRange.extend({\n\t        innerHeight: function() {\n\t            var collection = this.collection;\n\n\t            var startIndex = this.start.index;\n\n\t            var endIndex = this.end.index;\n\n\t            var result = 0;\n\n\t            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n\t               result += collection.at(slotIndex).offsetHeight;\n\t            }\n\n\t            return result;\n\t        },\n\n\t        outerRect: function(start, end, snap) {\n\t            return this._rect("offset", start, end, snap);\n\t        },\n\n\t        _rect: function(property, start, end, snap) {\n\t            var top;\n\t            var bottom;\n\t            var left;\n\t            var right;\n\t            var startSlot = this.start;\n\t            var endSlot = this.end;\n\t            var isRtl = kendo.support.isRtl(startSlot.element);\n\n\t            if (typeof start != "number") {\n\t                start = kendo.date.toUtcTime(start);\n\t            }\n\n\t            if (typeof end != "number") {\n\t                end = kendo.date.toUtcTime(end);\n\t            }\n\n\t            if (snap) {\n\t                top = startSlot.offsetTop;\n\t                bottom = endSlot.offsetTop + endSlot[property + "Height"];\n\t                if(isRtl) {\n\t                    left = endSlot.offsetLeft;\n\t                    right = startSlot.offsetLeft + startSlot[property + "Width"];\n\t                } else {\n\t                    left = startSlot.offsetLeft;\n\t                    right = endSlot.offsetLeft + endSlot[property + "Width"];\n\t                }\n\t            } else {\n\t                var startOffset = start - startSlot.start;\n\n\t                if (startOffset < 0) {\n\t                    startOffset = 0;\n\t                }\n\n\t                var startSlotDuration = startSlot.end - startSlot.start;\n\n\t                top = startSlot.offsetTop + startSlot[property + "Height"] * startOffset / startSlotDuration;\n\n\t                var endOffset = endSlot.end - end;\n\n\t                if (endOffset < 0) {\n\t                    endOffset = 0;\n\t                }\n\n\t                var endSlotDuration = endSlot.end - endSlot.start;\n\n\t                bottom = endSlot.offsetTop + endSlot[property + "Height"] - endSlot[property + "Height"] * endOffset / endSlotDuration;\n\n\t                if(isRtl) {\n\t                    left = Math.round(endSlot.offsetLeft + endSlot[property + "Width"]* endOffset / endSlotDuration);\n\t                    right = Math.round(startSlot.offsetLeft + startSlot[property + "Width"] - startSlot[property + "Width"] * startOffset / startSlotDuration);\n\t                } else {\n\t                    left = Math.round(startSlot.offsetLeft + startSlot[property + "Width"] * startOffset / startSlotDuration);\n\t                    right = Math.round(endSlot.offsetLeft + endSlot[property + "Width"] - endSlot[property + "Width"] * endOffset / endSlotDuration);\n\t                }\n\t            }\n\n\t            return {\n\t                top: top,\n\t                bottom: bottom,\n\t                //first column has no left border\n\t                left: left === 0 ? left : left + 1,\n\t                right: right\n\t            };\n\t        },\n\n\t        innerRect: function(start, end, snap) {\n\t            return this._rect("client", start, end, snap);\n\t        }\n\t    });\n\n\t    var DaySlotRange = SlotRange.extend({\n\t        innerWidth: function() {\n\t            var collection = this.collection;\n\n\t            var startIndex = this.start.index;\n\n\t            var endIndex = this.end.index;\n\n\t            var result = 0;\n\n\t            var width = startIndex !== endIndex ? "offsetWidth" : "clientWidth";\n\n\t            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n\t               result += collection.at(slotIndex)[width];\n\t            }\n\n\t            return result;\n\t        }\n\t    });\n\n\t    var SlotCollection = kendo.Class.extend({\n\t        init: function(startDate, endDate, groupIndex, collectionIndex) {\n\t            this._slots = [];\n\n\t            this._events = [];\n\n\t            this._start = kendo.date.toUtcTime(startDate);\n\n\t            this._end = kendo.date.toUtcTime(endDate);\n\n\t            this._groupIndex = groupIndex;\n\n\t            this._collectionIndex = collectionIndex;\n\t        },\n\t        refresh: function() {\n\t            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n\t                this._slots[slotIndex].refresh();\n\t            }\n\t        },\n\n\t        startInRange: function(date) {\n\t            return this._start <= date && date < this._end;\n\t        },\n\n\t        endInRange: function(date, isAllDay) {\n\t            var end = isAllDay ? date < this._end : date <= this._end;\n\t            return this._start <= date && end;\n\t        },\n\n\t        slotByStartDate: function(date) {\n\t            var time = date;\n\n\t            if (typeof time != "number") {\n\t                time = kendo.date.toUtcTime(date);\n\t            }\n\n\t            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n\t                var slot = this._slots[slotIndex];\n\n\t                if (slot.startInRange(time)) {\n\t                    return slot;\n\t                }\n\t            }\n\n\t            return null;\n\t        },\n\n\t        slotByEndDate: function(date, allday) {\n\t            var time = date;\n\n\t            if (typeof time != "number") {\n\t                time = kendo.date.toUtcTime(date);\n\t            }\n\n\t            if (allday) {\n\t                return this.slotByStartDate(date, false);\n\t            }\n\n\t            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n\t                var slot = this._slots[slotIndex];\n\n\t                if (slot.endInRange(time)) {\n\t                    return slot;\n\t                }\n\t            }\n\n\t            return null;\n\t        },\n\n\t        count: function() {\n\t            return this._slots.length;\n\t        },\n\t        events: function() {\n\t            return this._events;\n\t        },\n\t        addTimeSlot: function(element, start, end, isHorizontal) {\n\t            var slot = new TimeSlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, isHorizontal);\n\n\t            this._slots.push(slot);\n\t        },\n\t        addDaySlot: function(element, start, end, eventCount) {\n\t            var slot = new DaySlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, eventCount);\n\n\t            this._slots.push(slot);\n\t        },\n\t        first: function() {\n\t            return this._slots[0];\n\t        },\n\t        last: function() {\n\t            return this._slots[this._slots.length - 1];\n\t        },\n\t        at: function(index) {\n\t            return this._slots[index];\n\t        }\n\t    });\n\n\t    var Slot = kendo.Class.extend({\n\t        init: function(element, start, end, groupIndex, collectionIndex, index) {\n\t            this.element = element;\n\t            this.clientWidth = element.clientWidth;\n\t            this.clientHeight = element.clientHeight;\n\t            this.offsetWidth = element.offsetWidth;\n\t            this.offsetHeight = element.offsetHeight;\n\t            this.offsetTop = element.offsetTop;\n\t            this.offsetLeft = element.offsetLeft;\n\n\t            this.start = start;\n\t            this.end = end;\n\t            this.element = element;\n\t            this.groupIndex = groupIndex;\n\t            this.collectionIndex = collectionIndex;\n\t            this.index = index;\n\t            this.isDaySlot = false;\n\t        },\n\n\t        refresh: function() {\n\t            var element = this.element;\n\n\t            this.clientWidth = element.clientWidth;\n\t            this.clientHeight = element.clientHeight;\n\t            this.offsetWidth = element.offsetWidth;\n\t            this.offsetHeight = element.offsetHeight;\n\t            this.offsetTop = element.offsetTop;\n\t            this.offsetLeft = element.offsetLeft;\n\t        },\n\n\t        startDate: function() {\n\t            return kendo.timezone.toLocalDate(this.start);\n\t        },\n\n\t        endDate: function() {\n\t            return kendo.timezone.toLocalDate(this.end);\n\t        },\n\n\t        startInRange: function(date) {\n\t            return this.start <= date && date < this.end;\n\t        },\n\n\t        endInRange: function(date) {\n\t            return this.start < date && date <= this.end;\n\t        },\n\n\t        startOffset: function() {\n\t           return this.start;\n\t        },\n\n\t        endOffset: function() {\n\t            return this.end;\n\t        }\n\t    });\n\n\t    var TimeSlot = Slot.extend({\n\t        init: function(element, start, end, groupIndex, collectionIndex, index, isHorizontal) {\n\t            Slot.fn.init.apply(this, arguments);\n\n\t            this.isHorizontal = isHorizontal ? true : false;\n\t        },\n\n\t        offsetX: function(rtl, offset) {\n\t            if (rtl) {\n\t                return this.offsetLeft + offset;\n\t            } else {\n\t                return this.offsetLeft + offset;\n\t            }\n\t        },\n\n\t        startInRange: function(date) {\n\t            return this.start <= date && date < this.end;\n\t        },\n\n\t        endInRange: function(date) {\n\t            return this.start < date && date <= this.end;\n\t        },\n\n\t        startOffset: function(x, y, snap) {\n\t            if (snap) {\n\t                return this.start;\n\t            }\n\n\t            var offset = $(this.element).offset();\n\n\t            var duration = this.end - this.start;\n\t            var difference;\n\t            var time;\n\n\t            if (this.isHorizontal) {\n\t                //need update\n\t                var isRtl = kendo.support.isRtl(this.element);\n\t                difference =  x - offset.left;\n\t                time = Math.floor(duration * ( difference / this.offsetWidth));\n\n\t                if (isRtl) {\n\t                    return this.start + duration - time;\n\t                }\n\t            } else {\n\t                difference = y - offset.top;\n\t                time = Math.floor(duration * ( difference / this.offsetHeight));\n\t            }\n\n\t            return this.start + time;\n\t        },\n\n\t        endOffset: function(x, y, snap) {\n\t            if (snap) {\n\t                return this.end;\n\t            }\n\n\t            var offset = $(this.element).offset();\n\n\t            var duration = this.end - this.start;\n\t            var difference;\n\t            var time;\n\n\t            if (this.isHorizontal) {\n\t                //need update\n\t                var isRtl = kendo.support.isRtl(this.element);\n\t                difference = x - offset.left;\n\t                time = Math.floor(duration * ( difference / this.offsetWidth));\n\n\t                if (isRtl) {\n\t                    return this.start + duration - time;\n\t                }\n\t            } else {\n\t                difference = y - offset.top;\n\t                time = Math.floor(duration * ( difference / this.offsetHeight));\n\t            }\n\n\t            return this.start + time;\n\t        }\n\t    });\n\n\t    var DaySlot = Slot.extend({\n\t        init: function(element, start, end, groupIndex, collectionIndex, index, eventCount) {\n\t            Slot.fn.init.apply(this, arguments);\n\n\t            this.eventCount = eventCount;\n\t            this.isDaySlot = true;\n\n\t            if (this.element.children.length) {\n\t                var firstChild = this.element.children[0];\n\n\t                this.firstChildHeight = firstChild.offsetHeight;\n\t                this.firstChildTop = firstChild.offsetTop;\n\t            } else {\n\t                this.firstChildHeight = 3;\n\t                this.firstChildTop = 0;\n\t            }\n\t        },\n\n\t        startDate: function() {\n\t            var date = new Date(this.start);\n\n\t            return kendo.timezone.apply(date, "Etc/UTC");\n\t        },\n\n\t        endDate: function() {\n\t            var date = new Date(this.end);\n\n\t            return kendo.timezone.apply(date, "Etc/UTC");\n\t        },\n\n\t        startInRange: function(date) {\n\t            return this.start <= date && date < this.end;\n\t        },\n\n\t        endInRange: function(date) {\n\t            return this.start < date && date <= this.end;\n\t        }\n\t    });\n\n\t    var scrollbarWidth;\n\t    function scrollbar() {\n\t        scrollbarWidth = scrollbarWidth ? scrollbarWidth : kendo.support.scrollbar();\n\t        return scrollbarWidth;\n\t    }\n\n\t    kendo.ui.SchedulerView = Widget.extend({\n\t        init: function(element, options) {\n\t            Widget.fn.init.call(this, element, options);\n\n\t            this._normalizeOptions();\n\t            this._scrollbar = scrollbar();\n\t            this._isRtl = kendo.support.isRtl(element);\n\t            this._resizeHint = $();\n\t            this._moveHint = $();\n\t            this._cellId = kendo.guid();\n\t            this._resourcesForGroups();\n\t            this._selectedSlots = [];\n\t        },\n\n\t        visibleEndDate: function () {\n\t            return this.endDate();\n\t        },\n\n\t        _normalizeOptions: function() {\n\t            var options = this.options;\n\n\t            if (options.startTime) {\n\t                options.startTime.setMilliseconds(0);\n\t            }\n\n\t            if (options.endTime) {\n\t                options.endTime.setMilliseconds(0);\n\t            }\n\n\t            if (options.workDayStart) {\n\t                options.workDayStart.setMilliseconds(0);\n\t            }\n\n\t            if (options.workDayEnd) {\n\t                options.workDayEnd.setMilliseconds(0);\n\t            }\n\t        },\n\n\t        _isMobile: function() {\n\t            var options = this.options;\n\t            return (options.mobile === true && kendo.support.mobileOS) || options.mobile === "phone" || options.mobile === "tablet";\n\t        },\n\n\t        _addResourceView: function() {\n\t            var resourceView = new ResourceView(this.groups.length, this._isRtl);\n\n\t            this.groups.push(resourceView);\n\n\t            return resourceView;\n\t        },\n\n\t        dateForTitle: function() {\n\t            return kendo.format(this.options.selectedDateFormat, this.startDate(), this.endDate());\n\t        },\n\n\t        shortDateForTitle: function() {\n\t            return kendo.format(this.options.selectedShortDateFormat, this.startDate(), this.endDate());\n\t        },\n\n\t        mobileDateForTitle: function () {\n\t            return kendo.format(this.options.selectedMobileDateFormat || this.options.selectedShortDateFormat, this.startDate(), this.endDate());\n\t        },\n\n\t        _changeGroup: function(selection, previous) {\n\t            var method = previous ? "prevGroupSlot" : "nextGroupSlot";\n\t            var slot = this[method](selection.start, selection.groupIndex, selection.isAllDay);\n\n\t            if (slot) {\n\t                selection.groupIndex += previous ? -1 : 1;\n\t            }\n\n\t            if (this._isGroupedByDate() && !slot) {\n\t               selection.groupIndex = previous ? this.groups.length - 1 : 0;\n\t            }\n\n\t            return slot;\n\t        },\n\n\t        _changeDate: function(selection, slot, previous) {\n\t            var group = this.groups[selection.groupIndex];\n\t            var collections, index;\n\n\t            if (previous) {\n\t                  collections = group._getCollections(false);\n\t                  index = group.daySlotCollectionCount() ? slot.index - 1 : slot.collectionIndex - 1;\n\n\t                  if (index >= 0) {\n\t                      return  collections[index]._slots[collections[index]._slots.length - 1];\n\t                  }\n\t              } else {\n\t                  collections = group._getCollections(group.daySlotCollectionCount());\n\t                  index = group.daySlotCollectionCount() ? 0 : slot.collectionIndex + 1;\n\t                  var slotIndex = group.daySlotCollectionCount() ? slot.collectionIndex + 1 : 0;\n\n\t                  if (collections[index] && collections[index]._slots[slotIndex]) {\n\t                      return  collections[index]._slots[slotIndex];\n\t                  }\n\t               }\n\t        },\n\n\t        _changeGroupContinuously: function() {\n\t            return null;\n\t        },\n\n\t        _changeViewPeriod: function() {\n\t            return false;\n\t        },\n\n\t        _isInRange: function(newStart, newEnd) {\n\t            if(!newStart || !newEnd || !this.options.min || !this.options.max){\n\t                return false;\n\t            }\n\t            return getDate(newStart) <= getDate(this.options.min) || getDate(newEnd) >= getDate(this.options.max);\n\t        },\n\n\t        _horizontalSlots: function(selection, ranges, multiple, reverse) {\n\t            var method = reverse ? "leftSlot" : "rightSlot";\n\t            var horizontalRange = {\n\t                 startSlot: ranges[0].start,\n\t                 endSlot: ranges[ranges.length - 1].end\n\t             };\n\t            var group = this.groups[selection.groupIndex];\n\t            var isVertical = this._isVerticallyGrouped();\n\n\t            if (!multiple) {\n\t                var slot = this._normalizeHorizontalSelection(selection, ranges, reverse);\n\t                if (slot) {\n\t                    horizontalRange.startSlot = horizontalRange.endSlot = slot;\n\t                }\n\t            }\n\n\t            if (this._isGroupedByDate() && !multiple) {\n\t                  var tempSlot = this._changeGroup(selection, reverse);\n\n\t                  if(!tempSlot)\n\t                  {\n\t                    horizontalRange = this._getNextHorizontalRange(group, method, horizontalRange);\n\t                  } else {\n\t                      horizontalRange.startSlot = horizontalRange.endSlot = tempSlot;\n\t                  }\n\t            } else {\n\t                  horizontalRange.startSlot = group[method](horizontalRange.startSlot);\n\t                  horizontalRange.endSlot = group[method](horizontalRange.endSlot);\n\n\t                  if (!multiple && !isVertical && (!horizontalRange.startSlot || !horizontalRange.endSlot)) {\n\t                        horizontalRange.startSlot = horizontalRange.endSlot = this._changeGroup(selection, reverse);\n\t                  }\n\t            }\n\n\t            var continuousSlot;\n\n\t            if ((!horizontalRange.startSlot || !horizontalRange.endSlot) && !this._isGroupedByDate()) {\n\t                continuousSlot = this._continuousSlot(selection, ranges, reverse);\n\t                continuousSlot = this._changeGroupContinuously(selection, continuousSlot, multiple, reverse);\n\n\t                if (continuousSlot) {\n\t                    horizontalRange.startSlot = horizontalRange.endSlot = continuousSlot;\n\t                }\n\t            }\n\n\t            return horizontalRange;\n\t        },\n\n\t         _getNextHorizontalRange: function(group, method, horizontalRange){\n\t            if(!this._isVerticallyGrouped()){\n\t                horizontalRange.startSlot = group[method](horizontalRange.startSlot);\n\t                horizontalRange.endSlot = group[method](horizontalRange.endSlot);\n\t            }\n\n\t             return horizontalRange;\n\t        },\n\n\t        _verticalSlots: function(selection, ranges, multiple, reverse) {\n\t            var group = this.groups[selection.groupIndex];\n\t            var slot;\n\t            var verticalRange = {\n\t                startSlot: ranges[0].start,\n\t                endSlot: ranges[ranges.length - 1].end\n\t            };\n\n\t            if (!multiple) {\n\t                slot = this._normalizeVerticalSelection(selection, ranges, reverse);\n\t                if (slot) {\n\t                    verticalRange.startSlot = verticalRange.endSlot = slot;\n\t                }\n\t            }\n\n\t            var method = reverse ? "upSlot" : "downSlot";\n\n\t            verticalRange = this._getNextVerticalRange(group, method, verticalRange, multiple);\n\n\t            if (!multiple && this._isVerticallyGrouped() && (!verticalRange.startSlot || !verticalRange.endSlot)) {\n\t                if (this._isGroupedByDate()) {\n\t                    verticalRange.startSlot = verticalRange.endSlot = this._changeDate(selection, slot, reverse);\n\n\t               }else{\n\t                    verticalRange.startSlot = verticalRange.endSlot = this._changeGroup(selection, reverse);\n\t               }\n\t            }\n\n\t            return verticalRange;\n\t        },\n\n\t        _getNextVerticalRange: function(group, method, verticalRange, multiple){\n\t             verticalRange.startSlot = group[method](verticalRange.startSlot, multiple);\n\t             verticalRange.endSlot = group[method](verticalRange.endSlot, multiple);\n\n\t             return verticalRange;\n\t        },\n\n\t        _normalizeHorizontalSelection: function() {\n\t            return null;\n\t        },\n\n\t        _normalizeVerticalSelection: function(selection, ranges, reverse) {\n\t            var slot;\n\n\t            if (reverse) {\n\t                slot = ranges[0].start;\n\t            } else {\n\t                slot = ranges[ranges.length - 1].end;\n\t            }\n\n\t            return slot;\n\t        },\n\n\t        _continuousSlot: function() {\n\t            return null;\n\t        },\n\n\t        _footer: function() {\n\t            var that = this;\n\t            var options = that.options;\n\n\t            if (that._isMobile()) {\n\t                var html = \'<div class="k-scheduler-footer k-toolbar">\';\n\t                html += \'<span class="k-state-default k-scheduler-today"><a href="#" class="k-link">\';\n\t                html += options.messages.today + \'</a></span>\';\n\t                html += "</div>";\n\t                that.footer = $(html).appendTo(that.element);\n\t            }\n\n\t            if(that.footer) {\n\t                that.footer.on("click" + NS, ".k-scheduler-today", function(e) {\n\t                    e.preventDefault();\n\t                    var timezone = that.options.timezone;\n\t                    var action = "today";\n\t                    var currentDate = new Date();\n\t                    var date;\n\n\t                    if(timezone){\n\t                        var timezoneOffset = kendo.timezone.offset(currentDate, timezone);\n\t                        date = kendo.timezone.convert(currentDate, currentDate.getTimezoneOffset(), timezoneOffset);\n\t                    }else{\n\t                        date = currentDate;\n\t                    }\n\n\t                    that.trigger("navigate", { view: that.name || options.name, action: action, date: date });\n\t                });\n\t            }\n\t        },\n\n\t        constrainSelection: function(selection) {\n\t            var group = this.groups[0];\n\t            var slot;\n\n\t            if (!this.inRange(selection)) {\n\t               slot = group.firstSlot();\n\n\t               selection.isAllDay = slot.isDaySlot;\n\t               selection.start = slot.startDate();\n\t               selection.end = slot.endDate();\n\t            } else {\n\t                if (!group.daySlotCollectionCount()) {\n\t                    selection.isAllDay = false;\n\t                } else if (!group.timeSlotCollectionCount()) {\n\t                    selection.isAllDay = true;\n\t                }\n\t           }\n\n\t            if (!this.groups[selection.groupIndex]) {\n\t                selection.groupIndex = 0;\n\t            }\n\t        },\n\n\t        move: function(selection, key, shift) {\n\t            var handled = false;\n\t            var group = this.groups[selection.groupIndex];\n\t            var verticalByDate = this._isGroupedByDate()  && this._isVerticallyGrouped();\n\n\t            if (!group.timeSlotCollectionCount()) {\n\t                selection.isAllDay = true;\n\t            }\n\n\t            var ranges = group.ranges(selection.start, selection.end, selection.isAllDay, false);\n\t            var startSlot, endSlot, reverse, slots;\n\n\t            if (key === keys.DOWN || key === keys.UP) {\n\t                handled = true;\n\t                reverse = key === keys.UP;\n\n\t                this._updateDirection(selection, ranges, shift, reverse, true);\n\n\t                slots = this._verticalSlots(selection, ranges, shift, reverse);\n\n\t                if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, !verticalByDate)) {\n\t                    return handled;\n\t                }\n\n\t            } else if (key === keys.LEFT || key === keys.RIGHT) {\n\t                handled = true;\n\t                reverse = key === keys.LEFT;\n\n\t                this._updateDirection(selection, ranges, shift, reverse, false);\n\n\t                slots = this._horizontalSlots(selection, ranges, shift, reverse);\n\n\t                if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, verticalByDate)) {\n\t                    return handled;\n\t                }\n\t            }\n\n\t            if (handled) {\n\t                startSlot = slots.startSlot;\n\t                endSlot = slots.endSlot;\n\n\t                if (shift) {\n\t                    var backward = selection.backward;\n\t                    if (backward && startSlot) {\n\t                        selection.start = startSlot.startDate();\n\t                    } else if (!backward && endSlot) {\n\t                        selection.end = endSlot.endDate();\n\t                    }\n\t                } else if (startSlot && endSlot) {\n\t                    selection.isAllDay = startSlot.isDaySlot;\n\t                    selection.start = startSlot.startDate();\n\t                    selection.end = endSlot.endDate();\n\t                }\n\n\t                selection.events = [];\n\t            }\n\n\t            return handled;\n\t        },\n\n\t        moveToEventInGroup: function(group, slot, selectedEvents, prev) {\n\t            var events = group._continuousEvents || [];\n\n\t            var found, event;\n\n\t            var pad = prev ? -1 : 1;\n\n\t            var length = events.length;\n\t            var idx = prev ? length - 1 : 0;\n\n\t            if (selectedEvents.length) {\n\t                var lastSelected = selectedEvents[selectedEvents.length - 1];\n\n\t                for (var i = 0; i < events.length; i++) {\n\t                    if (events[i].uid === lastSelected) {\n\t                        idx = i + pad;\n\t                    }\n\t                }\n\t            }\n\n\t            while (idx < length && idx > -1) {\n\t                event = events[idx];\n\n\t                if ( (!prev && event.start.startDate() >= slot.startDate()) ||\n\t                    (prev && event.start.startDate() <= slot.startDate()) ) {\n\n\t                    if (event && $.inArray(event.uid, selectedEvents) === -1) {\n\t                        found = !!event;\n\t                        break;\n\t                    }\n\t                }\n\n\t                idx += pad;\n\t            }\n\n\t            return event;\n\t        },\n\n\t        moveToEvent: function(selection, prev) {\n\t            var groupIndex = selection.groupIndex;\n\n\t            var group = this.groups[groupIndex];\n\t            var slot = group.ranges(selection.start, selection.end, selection.isAllDay, false)[0].start;\n\n\t            var length = this.groups.length;\n\t            var pad = prev ? -1 : 1;\n\t            var events = selection.events;\n\t            var event;\n\n\t            if (this._isGroupedByDate()) {\n\t                var allEvents = this._getAllEvents();\n\t                var uniqueAllEvents = this._getUniqueEvents(allEvents);\n\t                var sortedEvents = this._getSortedEvents(uniqueAllEvents);\n\n\t                if(events.length === 0){\n\t                    var eventIndex = this._getNextEventIndexBySlot(slot, sortedEvents, groupIndex);\n\n\t                    if(prev){\n\t                        eventIndex--;\n\t                    }\n\n\t                    event = sortedEvents[eventIndex];\n\t                } else{\n\t                     var idx = this._getStartIdx(events, sortedEvents);\n\n\t                    while (idx < sortedEvents.length && idx > -1) {\n\t                        if(events.length > 0){\n\t                            slot = this._getSelectedSlot(slot, sortedEvents, event, idx, pad, prev);\n\t                        }\n\n\t                        if(!slot){\n\t                            break;\n\t                        }\n\n\t                        if ( (!prev && sortedEvents[idx].start.startDate() >= slot.startDate()) ||\n\t                              (prev && sortedEvents[idx].start.startDate() <= slot.startDate())) {\n\t                             if (events[0] != sortedEvents[idx].uid) {\n\t                                 event = sortedEvents[idx];\n\t                                  break;\n\t                             }\n\t                        }\n\t                        idx += pad;\n\t                    }\n\t                }\n\t            } else {\n\t                  while (groupIndex < length && groupIndex > -1) {\n\t                    event = this.moveToEventInGroup(group, slot, events, prev);\n\n\t                    groupIndex += pad;\n\t                    group = this.groups[groupIndex];\n\n\t                    if (!group || event) {\n\t                        break;\n\t                    }\n\n\t                    events = [];\n\t                    if (prev) {\n\t                        slot = group.lastSlot();\n\t                    } else {\n\t                        slot = group.firstSlot(true);\n\t                    }\n\t                }\n\t            }\n\n\t            if (event) {\n\t                selection.events = [ event.uid ];\n\t                selection.start = event.start.startDate();\n\t                selection.end = event.end.endDate();\n\t                selection.isAllDay = event.start.isDaySlot;\n\t                selection.groupIndex = event.start.groupIndex;\n\t            }\n\n\t            return !!event;\n\t        },\n\n\t        current: function(candidate) {\n\t            if (candidate !== undefined) {\n\t                this._current = candidate;\n\t                if (this.content.has(candidate)) {\n\t                    this._scrollTo(candidate, this.content[0]);\n\t                }\n\t            } else {\n\t                return this._current;\n\t            }\n\t        },\n\n\t        select: function(selection) {\n\t            this.clearSelection();\n\n\t            if (!this._selectEvents(selection)) {\n\t                this._selectSlots(selection);\n\t            }\n\t        },\n\n\t        _getNextEventIndexBySlot: function(slot, sortedEvents, groupIndex){\n\t            var tempIndex = 0;\n\t            var slotStartDate = kendo.date.getDate(slot.startDate());\n\n\t            for (var i = 0; i < sortedEvents.length; i++) {\n\t                var eventStartDate = kendo.date.getDate(sortedEvents[i].start.startDate());\n\t                if (slotStartDate > eventStartDate) {\n\t                    tempIndex++;\n\t                    continue;\n\t                }\n\n\t                if (slotStartDate.getTime() === eventStartDate.getTime() && groupIndex > sortedEvents[i].start.groupIndex) {\n\t                      tempIndex++;\n\t                      continue;\n\t                }\n\n\t                if (slotStartDate.getTime() === eventStartDate.getTime() &&\n\t                    groupIndex >= sortedEvents[i].start.groupIndex &&\n\t                    slot.startDate() > sortedEvents[i].start.startDate()) {\n\t                    tempIndex++;\n\t                    continue;\n\t                 }\n\n\t                 break;\n\t            }\n\t            return tempIndex;\n\t        },\n\n\t        _getSelectedSlot: function(slot, sortedEvents, event, idx, pad, prev) {\n\t              if (sortedEvents[idx + pad] &&\n\t               sortedEvents[idx].start.groupIndex !== sortedEvents[idx + pad].start.groupIndex) {\n\t                    var groupIndex = sortedEvents[idx + pad].start.groupIndex;\n\t                    var group = this.groups[groupIndex];\n\n\t                    if (!group || event) {\n\t                       slot = null;\n\t                    }\n\n\t                    if (prev) {\n\t                        slot = group.lastSlot();\n\t                    } else {\n\t                        slot = group.firstSlot(true);\n\t                    }\n\t                }\n\t             return slot;\n\t        },\n\n\t        _getStartIdx: function(events, sortedEvents){\n\t            var selectedEventIndex = 0;\n\n\t            $.each(sortedEvents, function() {\n\t                if (this.uid === events[0]){\n\t                     return false;\n\t                }\n\n\t                selectedEventIndex++;\n\t            });\n\n\t            return selectedEventIndex;\n\t        },\n\n\t        _getAllEvents: function(){\n\t            var allEvents = [];\n\t            var groups = this.groups;\n\n\t            for (var idx = 0; idx < groups.length; idx++) {\n\t                if (groups[idx]._continuousEvents) {\n\t                    allEvents= allEvents.concat(groups[idx]._continuousEvents);\n\t                }\n\t            }\n\n\t            return allEvents;\n\t        },\n\n\t        _getUniqueEvents: function(allEvents){\n\t            var uniqueAllEvents = [];\n\n\t            for (var i = 0; i < allEvents.length; i++) {\n\t                var exists = false;\n\t                for (var j = 0; j < uniqueAllEvents.length; j++) {\n\t                    if (allEvents[i].uid === uniqueAllEvents[j].uid) {\n\t                        exists = true;\n\t                        break;\n\t                    }\n\t                }\n\n\t                if (!exists) {\n\t                    uniqueAllEvents.push(allEvents[i]);\n\t                }\n\t            }\n\n\t            return uniqueAllEvents;\n\t        },\n\n\t        _getSortedEvents: function(uniqueAllEvents){\n\t             return uniqueAllEvents.sort(function(first, second) {\n\t                var firstStartDate = first.start.startDate();\n\t                var secondStartDate = second.start.startDate();\n\t                var result = kendo.date.getDate(firstStartDate) - kendo.date.getDate(secondStartDate);\n\n\t                if (result === 0) {\n\t                    result = first.start.groupIndex - second.start.groupIndex;\n\t                }\n\n\t                if (result === 0) {\n\t                    result = firstStartDate.getTime() - secondStartDate.getTime();\n\t                }\n\n\t                if (result === 0) {\n\t                    if (first.start.isDaySlot && !second.start.isDaySlot) {\n\t                            result = -1;\n\t                    }\n\n\t                    if (!first.start.isDaySlot && second.start.isDaySlot) {\n\t                            result = 1;\n\t                    }\n\t                }\n\n\t                if (result === 0) {\n\t                    result = $(first.element).index() - $(second.element).index();\n\t                }\n\n\t                return result;\n\t            });\n\t        },\n\n\t        _selectSlots: function(selection) {\n\t            var isAllDay = selection.isAllDay;\n\t            var group = this.groups[selection.groupIndex];\n\n\t            if (!group.timeSlotCollectionCount()) {\n\t                isAllDay = true;\n\t            }\n\n\t            this._selectedSlots = [];\n\n\t            var ranges = group.ranges(selection.start, selection.end, isAllDay, false);\n\t            var element;\n\t            var slot;\n\n\t            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n\t                var range = ranges[rangeIndex];\n\t                var collection = range.collection;\n\n\t                for (var slotIndex = range.start.index; slotIndex <= range.end.index; slotIndex++) {\n\t                    slot = collection.at(slotIndex);\n\n\t                    element = slot.element;\n\t                    element.setAttribute("aria-selected", true);\n\t                    addSelectedState(element);\n\n\t                    this._selectedSlots.push({\n\t                        start: slot.startDate(),\n\t                        end: slot.endDate(),\n\t                        element: element\n\t                    });\n\t                }\n\t            }\n\n\t            if (selection.backward) {\n\t                element = ranges[0].start.element;\n\t            }\n\n\t            this.current(element);\n\t        },\n\n\t        _selectEvents: function(selection) {\n\t            var found = false;\n\t            var events = selection.events;\n\t            var groupEvents = this._getAllEvents();\n\t            var idx, groupEvent, length = groupEvents.length;\n\n\t            if (!events[0] || !groupEvents[0]) {\n\t                return found;\n\t            }\n\n\t            var result = $();\n\t            selection.events = [];\n\t            for (idx = 0; idx < length; idx ++) {\n\t                if ($.inArray(groupEvents[idx].uid, events) > -1) {\n\t                    groupEvent = groupEvents[idx];\n\t                    result = result.add(groupEvent.element);\n\t                    if(selection.events.indexOf(groupEvent.uid) === -1){\n\t                        selection.events.push(groupEvent.uid);\n\t                    }\n\t                }\n\t            }\n\n\t            if (result[0]) {\n\t                result.addClass("k-state-selected").attr("aria-selected", true);\n\t                this.current(result.last()[0]);\n\t                this._selectedSlots = [];\n\t                found = true;\n\t            }\n\n\t            return found;\n\t        },\n\n\t        inRange: function(options) {\n\t            var startDate = this.startDate();\n\t            var endDate = kendo.date.addDays(this.endDate(), 1);\n\t            var start = options.start;\n\t            var end = options.end;\n\n\t            return startDate <= start && start < endDate && startDate < end && end <= endDate;\n\t        },\n\n\t        _resourceValue: function(resource, item) {\n\t            if (resource.valuePrimitive) {\n\t                item = kendo.getter(resource.dataValueField)(item);\n\t            }\n\t            return item;\n\t        },\n\n\t        _resourceBySlot: function(slot) {\n\t            var resources = this.groupedResources;\n\t            var result = {};\n\n\t            if (resources.length) {\n\t                var resourceIndex = slot.groupIndex;\n\n\t                for (var idx = resources.length - 1; idx >=0; idx--) {\n\t                    var resource = resources[idx];\n\n\t                    var value = this._resourceValue(resource, resource.dataSource.view()[resourceIndex % resource.dataSource.total()]);\n\n\t                    if (resource.multiple) {\n\t                        value = [value];\n\t                    }\n\n\t                    var setter = kendo.setter(resource.field);\n\t                    setter(result, value);\n\n\t                    resourceIndex = Math.floor(resourceIndex / resource.dataSource.total());\n\t                }\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _createResizeHint: function(left, top, width, height) {\n\t            return $(HINT).css({\n\t                left: left,\n\t                top: top,\n\t                width: width,\n\t                height: height\n\t            });\n\t        },\n\n\t        _removeResizeHint: function() {\n\t            this._resizeHint.remove();\n\t            this._resizeHint = $();\n\t        },\n\n\t        _removeMoveHint: function (uid) {\n\t            if (uid) {\n\t                this._moveHint.filter("[data-uid=\'" + uid + "\']").remove();\n\n\t                this._moveHint = this._moveHint.filter("[data-uid!=\'" + uid + "\']");\n\t            } else {\n\t                this._moveHint.remove();\n\t                this._moveHint = $();\n\t            }\n\t        },\n\n\t        _scrollTo: function(element, container) {\n\t            var elementOffset = element.offsetTop,\n\t                elementOffsetDir = element.offsetHeight,\n\t                containerScroll = container.scrollTop,\n\t                containerOffsetDir = container.clientHeight,\n\t                bottomDistance = elementOffset + elementOffsetDir,\n\t                result = 0;\n\n\t                if (containerScroll > elementOffset) {\n\t                    result = elementOffset;\n\t                } else if (bottomDistance > (containerScroll + containerOffsetDir)) {\n\t                    if (elementOffsetDir <= containerOffsetDir) {\n\t                        result = (bottomDistance - containerOffsetDir);\n\t                    } else {\n\t                        result = elementOffset;\n\t                    }\n\t                } else {\n\t                    result = containerScroll;\n\t                }\n\t                container.scrollTop = result;\n\t        },\n\n\t        _inverseEventColor: function(element) {\n\t            var eventColor = element.css("color");\n\t            var eventColorIsDark = new Color(eventColor).isDark();\n\t            var eventBackground = element.css("background-color");\n\t            var eventBackgroundIsDark = new Color(eventBackground).isDark();\n\n\t            if(eventColorIsDark == eventBackgroundIsDark) {\n\t                element.addClass(INVERSE_COLOR_CLASS);\n\t            }\n\t        },\n\n\t       _eventTmpl: function(template, wrapper) {\n\t           var options = this.options,\n\t               settings = $.extend({}, kendo.Template, options.templateSettings),\n\t               paramName = settings.paramName,\n\t               html = "",\n\t               type = typeof template,\n\t               state = { storage: {}, count: 0 };\n\n\t            if (type === "function") {\n\t                state.storage["tmpl" + state.count] = template;\n\t                html += "#=this.tmpl" + state.count + "(" + paramName + ")#";\n\t                state.count ++;\n\t            } else if (type === "string") {\n\t                html += template;\n\t            }\n\n\t            var tmpl = kendo.template(kendo.format(wrapper, html), settings);\n\n\t            if (state.count > 0) {\n\t                tmpl = $.proxy(tmpl, state.storage);\n\t            }\n\n\t            return tmpl;\n\t       },\n\n\t        eventResources: function(event) {\n\t            var resources = [],\n\t                options = this.options;\n\n\t            if (!options.resources) {\n\t                return resources;\n\t            }\n\n\t            for (var idx = 0; idx < options.resources.length; idx++) {\n\t                var resource = options.resources[idx];\n\t                var field = resource.field;\n\t                var eventResources = kendo.getter(field)(event);\n\n\t                if (eventResources == null) {\n\t                    continue;\n\t                }\n\n\t                if (!resource.multiple) {\n\t                    eventResources = [eventResources];\n\t                }\n\n\t                var data = resource.dataSource.view();\n\n\t                for (var resourceIndex = 0; resourceIndex < eventResources.length; resourceIndex++) {\n\t                    var eventResource = null;\n\n\t                    var value = eventResources[resourceIndex];\n\n\t                    if (!resource.valuePrimitive) {\n\t                        value = kendo.getter(resource.dataValueField)(value);\n\t                    }\n\n\t                    for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n\t                        if (data[dataIndex].get(resource.dataValueField) == value) {\n\t                            eventResource = data[dataIndex];\n\t                            break;\n\t                        }\n\t                    }\n\n\t                    if (eventResource !== null) {\n\t                        var resourceColor = kendo.getter(resource.dataColorField)(eventResource);\n\t                        resources.push({\n\t                            field: resource.field,\n\t                            title: resource.title,\n\t                            name: resource.name,\n\t                            text: kendo.getter(resource.dataTextField)(eventResource),\n\t                            value: value,\n\t                            color: resourceColor\n\t                        });\n\t                    }\n\t                }\n\t            }\n\t            return resources;\n\t        },\n\n\t        createLayout: function(layout) {\n\t            var allDayIndex = -1;\n\n\t            if (!layout.rows) {\n\t                layout.rows = [];\n\t            }\n\n\t            for (var idx = 0; idx < layout.rows.length; idx++) {\n\t                if (layout.rows[idx].allDay) {\n\t                    allDayIndex = idx;\n\t                    break;\n\t                }\n\t            }\n\n\t            var allDaySlot = layout.rows[allDayIndex];\n\n\t            if (allDayIndex >= 0) {\n\t                layout.rows.splice(allDayIndex, 1);\n\t            }\n\n\t            var columnLevels = this.columnLevels = levels(layout, "columns");\n\t            var rowLevels = this.rowLevels = levels(layout, "rows");\n\n\t            if(this._isVirtualized()) {\n\t                this._trimRowLevels(rowLevels);\n\t            }\n\n\t            this.table = $(\'<table role="presentation"\' + cellspacing() + \' class="k-scheduler-layout k-scheduler-\' + this.name + \'view"><tbody></tbody></table>\');\n\n\t            var rowCount = rowLevels[rowLevels.length - 1].length;\n\n\t            this.table.find("tbody:first").append(this._topSection(columnLevels, allDaySlot, rowCount));\n\n\t            this.table.find("tbody:first").append(this._bottomSection(columnLevels, rowLevels, rowCount));\n\n\t            this.element.append(this.table);\n\n\t            if(this._isVirtualized()) {\n\t                this._updateDomRowLevels();\n\t            }\n\n\t            // Enable horizontal scrolling when mobile, grouped and less than 1024px width\n\t            if(this._isMobile() &&\n\t                    columnLevels.length > 1 &&\n\t                    this._groupOrientation() === "horizontal" &&\n\t                    kendo._outerWidth($(window)) < MIN_HORIZONTAL_SCROLL_SIZE ){\n\n\t                this.table.find(".k-scheduler-content .k-scheduler-table").width((columnLevels[columnLevels.length - 2].length * 100)  + "%");\n\t                this.table.find(".k-scheduler-header .k-scheduler-table").width((columnLevels[columnLevels.length - 2].length * 100) + "%");\n\t            }\n\n\t            this._scroller();\n\t        },\n\n\t        _isVirtualized: function () {\n\t            return this.options.virtual && this.rowLevels.length > 1 && this._isVerticallyGrouped();\n\t        },\n\n\t        _trimRowLevels: function (rowLevels){\n\t            var lastGroup = rowLevels[rowLevels.length - 2];\n\t            var cachedRowLevels = this.cachedRowLevels || [];\n\t            var levelMarker;\n\n\t            this._hasContentToRender = true;\n\n\t            var stopAtLevel = function(levels, index) {\n\t                var hasParent  = levels[index - 1].length > 0;\n\n\t                if (hasParent) {\n\t                    return (levels[index].length % levels[index - 1][0].rows.length) !== 0;\n\t                } else {\n\t                    return true;\n\t                }\n\t            };\n\n\t            for (var rowLevelIndex = rowLevels.length - 2; rowLevelIndex >= 0; rowLevelIndex--) {\n\t                var stop = false;\n\t                if(rowLevelIndex > 0 && stopAtLevel(rowLevels, rowLevelIndex)) {\n\t                    stop = true;\n\t                    levelMarker = rowLevelIndex;\n\t                }\n\n\t                cachedRowLevels[rowLevelIndex] = rowLevels[rowLevelIndex].splice(1);\n\n\t                if(stop) {\n\t                    break;\n\t                }\n\t            }\n\n\t            cachedRowLevels[rowLevels.length - 1] = rowLevels[rowLevels.length - 1].splice(lastGroup[0].rows.length);\n\n\t            this.cachedRowLevels = cachedRowLevels;\n\n\t            if(!cachedRowLevels[cachedRowLevels.length - 1].length) {\n\t                this._hasContentToRender = false;\n\t            }\n\n\t            return {\n\t                levelMarker: levelMarker || 0,\n\t                rowLevels: rowLevels\n\t            };\n\t        },\n\n\t        createNextLayout: function (){\n\t            var clone = [];\n\t            var trimmedRowLevels;\n\t            var rowLevels;\n\t            var levelMarker;\n\t            var rowCount;\n\n\t            for (var rowLevelIndex = 0; rowLevelIndex < this.cachedRowLevels.length; rowLevelIndex++) {\n\t                clone[rowLevelIndex] = this.cachedRowLevels[rowLevelIndex];\n\t            }\n\n\t            trimmedRowLevels = this._trimRowLevels(clone);\n\t            rowLevels = trimmedRowLevels.rowLevels.splice(trimmedRowLevels.levelMarker);\n\t            levelMarker = trimmedRowLevels.levelMarker;\n\t            rowCount = rowLevels[rowLevels.length - 1].length;\n\n\t            delete this._height;\n\n\t            for (var i = levelMarker; i < this.rowLevels.length; i++) {\n\t                this.rowLevels[i] = this.rowLevels[i].concat(rowLevels[i - levelMarker]);\n\t            }\n\n\t            this.table\n\t                .find(".k-scheduler-times:last tbody")\n\t                .append(times(rowLevels, rowCount, this._isMobile()).find("tr"));\n\n\t            this._updateDomRowLevels();\n\n\t            if(levelMarker > 0) {\n\t                for (i = 0; i < levelMarker; i++) {\n\t                    var cell = this.table.find("[data-row-level=" + i + "]:last");\n\t                    var rowSpan = parseInt(cell.attr("rowspan"),10) + rowCount;\n\t                    cell.attr("rowspan", rowSpan);\n\t                }\n\t            }\n\n\t            this._virtualContent(rowLevels, this.columnLevels);\n\t            this.render(this._cachedEvents);\n\t        },\n\n\t        _tryRenderContent: function (){\n\t            var that = this;\n\t            var bufferHeight = that.table.innerHeight();\n\t            var height = that.content.find("table").innerHeight();\n\t            var scrollTop = that.content.scrollTop();\n\n\t            while(that._hasContentToRender && height - bufferHeight < scrollTop) {\n\t                that.createNextLayout();\n\t                height = that.content.find("table").innerHeight();\n\t            }\n\t        },\n\n\t        _updateDomRowLevels: function () {\n\t            var that = this;\n\t            var groupCells = that.times.find(".k-scheduler-group-cell:not([data-row-level])");\n\n\t            if(!this._rowLevelIndices) {\n\t                this._rowLevelIndices = groupCells.map(function(index, item){\n\t                    $(item).attr("data-row-level", index);\n\t                    return index;\n\t                }).toArray().reverse();\n\t                return;\n\t            }\n\n\t            groupCells = groupCells.toArray().reverse();\n\n\t            for(var i = 0; i <= groupCells.length; i++) {\n\t                $(groupCells[i]).attr("data-row-level", this._rowLevelIndices[i]);\n\t            }\n\t        },\n\n\t        refreshLayout: function() {\n\t            var that = this,\n\t                toolbar = that.element.find("> .k-scheduler-toolbar"),\n\t                height = that.element.innerHeight(),\n\t                scrollbar = this._scrollbar,\n\t                headerHeight = 0,\n\t                paddingDirection = this._isRtl ? "left" : "right";\n\n\t            for (var idx = 0; idx < toolbar.length; idx++) {\n\t                height -= outerHeight(toolbar.eq(idx));\n\t            }\n\n\t            if (that.datesHeader) {\n\t                headerHeight = outerHeight(that.datesHeader);\n\t            }\n\n\t            if (that.timesHeader && outerHeight(that.timesHeader) > headerHeight) {\n\t                headerHeight = outerHeight(that.timesHeader);\n\t            }\n\n\t            if (that.datesHeader && that.timesHeader) {\n\t                var datesHeaderRows = that.datesHeader.find("table:first tr");\n\n\t                that.timesHeader.find("tr").height(function(index) {\n\t                    $(this).height(datesHeaderRows.eq(index).height());\n\t                });\n\t            }\n\n\t            if (headerHeight) {\n\t                height -= headerHeight;\n\t            }\n\n\t            if (that.footer) {\n\t                height -= outerHeight(that.footer);\n\t            }\n\n\t            var isSchedulerHeightSet = function(el) {\n\t                var initialHeight, newHeight;\n\t                if (el[0].style.height) {\n\t                    return true;\n\t                } else {\n\t                    initialHeight = el.height();\n\t                }\n\n\t                el.height("auto");\n\t                newHeight = el.height();\n\n\t                if (initialHeight != newHeight) {\n\t                    el.height("");\n\t                    return true;\n\t                }\n\t                el.height("");\n\t                return false;\n\t            };\n\n\t            var contentDiv = that.content[0],\n\t                scrollbarWidth = !kendo.support.kineticScrollNeeded ? scrollbar : 0;\n\n\t            if (isSchedulerHeightSet(that.element)) { // set content height only if needed\n\t                if (height > scrollbar * 2) { // do not set height if proper scrollbar cannot be displayed\n\t                    that.content.height(height);\n\t                } else {\n\t                    that.content.height(scrollbar * 2 + 1);\n\t                }\n\t                that.times.height(contentDiv.clientHeight);\n\n\t                var timesTable = that.times.find("table");\n\t                if (timesTable.length) {\n\t                    timesTable.height(that.content.find("table")[0].clientHeight);\n\t                }\n\t            }\n\n\n\t            if (contentDiv.offsetWidth - contentDiv.clientWidth > 0) {\n\t                that.table.addClass("k-scrollbar-v");\n\t                that.datesHeader.css("padding-" + paddingDirection, scrollbarWidth - parseInt(that.datesHeader.children().css("border-" + paddingDirection + "-width"), 10));\n\t            } else {\n\t                that.datesHeader.css("padding-" + paddingDirection, "");\n\t            }\n\t            if (contentDiv.offsetHeight - contentDiv.clientHeight > 0 || contentDiv.clientHeight > that.content.children(".k-scheduler-table").height()) {\n\t                that.table.addClass("k-scrollbar-h");\n\t            } else {\n\t                that.table.removeClass("k-scrollbar-h");\n\t            }\n\t        },\n\n\t        _topSection: function(columnLevels, allDaySlot, rowCount) {\n\t            var thElm = $("<tr>");\n\t            var columnCount = columnLevels[columnLevels.length - 1].length;\n\n\t            this.timesHeader = timesHeader(columnLevels.length, allDaySlot, rowCount);\n\t            this.datesHeader = datesHeader(columnLevels, columnCount, allDaySlot);\n\n\t            var dateGroup = this.datesHeader.find(".k-nav-day");\n\n\t            if (dateGroup.length) {\n\t                dateGroup.closest("tr").addClass("k-scheduler-date-group");\n\t            }\n\n\t            if (this._isMobile())  {\n\t                thElm.addClass("k-mobile-header");\n\t                thElm.addClass("k-mobile-" + this._groupOrientation() + "-header");\n\t            }\n\n\t            return $(thElm).append(this.timesHeader.add(this.datesHeader).wrap("<td>").parent());\n\t        },\n\n\t        _bottomSection: function(columnLevels, rowLevels, rowCount) {\n\t            this.times = times(rowLevels, rowCount, this._isMobile());\n\n\t            this.content = content(columnLevels[columnLevels.length - 1], rowLevels[rowLevels.length - 1]);\n\n\t            return $("<tr>").append(this.times.add(this.content).wrap("<td>").parent());\n\t        },\n\n\t        _scroller: function() {\n\t            var that = this;\n\n\t            this.content.bind("scroll" + NS, function () {\n\t                that.datesHeader.find(">.k-scheduler-header-wrap").scrollLeft(this.scrollLeft);\n\t                that.times.scrollTop(this.scrollTop);\n\t                if(that._isVirtualized()) {\n\t                    that._tryRenderContent();\n\t                }\n\t            });\n\n\t            var touchScroller = kendo.touchScroller(this.content, {\n\t                avoidScrolling: function(e) {\n\t                    return $(e.event.target).closest(".k-event.k-event-active").length > 0;\n\t                }\n\t            });\n\n\t            if (touchScroller && touchScroller.movable) {\n\n\t                this._touchScroller = touchScroller;\n\n\t                this.content = touchScroller.scrollElement;\n\n\t                touchScroller.movable.bind("change", function(e) {\n\t                    that.datesHeader.find(">.k-scheduler-header-wrap").scrollLeft(-e.sender.x);\n\t                    that.times.scrollTop(-e.sender.y);\n\t                    if(that._isVirtualized()) {\n\t                        that._tryRenderContent();\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        _resourcesForGroups: function() {\n\t            var result = [];\n\t            var groups = this.options.group;\n\t            var resources = this.options.resources;\n\n\t            groups = groups && groups.resources ? groups.resources : [];\n\n\t            if (resources && groups.length) {\n\t                for (var idx = 0, length = resources.length; idx < length; idx++) {\n\t                    for (var groupIdx = 0, groupLength = groups.length; groupIdx < groupLength; groupIdx++) {\n\t                        if (resources[idx].name === groups[groupIdx]) {\n\t                            result.push(resources[idx]);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\n\t            this.groupedResources = result;\n\t        },\n\n\t        _createDateLayout: function(dates, inner, times) {\n\t            return createDateLayoutConfiguration("rows", dates, inner, times);\n\t        },\n\n\t        _createColumnsLayout: function(resources, inner, template, dates, times) {\n\t            return createLayoutConfiguration("columns", resources, inner, template, dates, times);\n\t        },\n\n\t        _groupOrientation: function() {\n\t            var groups = this.options.group;\n\t            return groups && groups.resources ? groups.orientation : "horizontal";\n\t        },\n\n\t        _isGroupedByDate: function() {\n\t            return this.options.group && this.options.group.date;\n\t        },\n\n\t        _isVerticallyGrouped: function() {\n\t            return this.groupedResources.length && this._groupOrientation() === "vertical";\n\t        },\n\n\t        _createRowsLayout: function(resources, inner, template, dates) {\n\t            return createLayoutConfiguration("rows", resources, inner, template, dates);\n\t        },\n\n\t        selectionByElement: function() {\n\t            return null;\n\t        },\n\n\t        clearSelection: function() {\n\t            this.content\n\t                .find(".k-state-selected")\n\t                .removeAttr("id")\n\t                .attr("aria-selected", false)\n\t                .removeClass("k-state-selected");\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(this);\n\n\t            if (that.table) {\n\t                kendo.destroy(that.table);\n\t                that.table.remove();\n\t            }\n\n\t            if (that.footer) {\n\t                kendo.destroy(that.footer);\n\t                that.footer.remove();\n\t            }\n\n\t            that.groups = null;\n\t            that.table = null;\n\t            that.content = null;\n\t            that.times = null;\n\t            that.datesHeader = null;\n\t            that.timesHeader = null;\n\t            that.footer = null;\n\t            that._resizeHint = null;\n\t            that._moveHint = null;\n\t        },\n\n\t        calendarInfo: function() {\n\t            return kendo.getCulture().calendars.standard;\n\t        },\n\n\t        prevGroupSlot: function(date, groupIndex, isDay) {\n\t            var collection;\n\t            var group = this.groups[groupIndex];\n\t            var slot = group.ranges(date, date, isDay, false)[0].start;\n\n\t            if (groupIndex <= 0) {\n\t                return;\n\t            }\n\n\t            if (this._isGroupedByDate()) {\n\t               return slot;\n\t            }\n\n\t            if (this._isVerticallyGrouped()) {\n\t                if (!group.timeSlotCollectionCount()) {\n\t                    collection = group._collection(group.daySlotCollectionCount() - 1, true);\n\t                    return collection.at(slot.index);\n\t                } else {\n\t                    collection = group._collection(isDay ? slot.index : slot.collectionIndex, false);\n\t                    return collection.last();\n\t                }\n\t            } else {\n\t                if (!group.timeSlotCollectionCount()) {\n\t                    collection = group._collection(slot.collectionIndex, true);\n\t                    return collection.last();\n\t                } else {\n\t                    collection = group._collection(isDay ? 0 : group.timeSlotCollectionCount() - 1, isDay);\n\t                    return isDay ? collection.last() : collection.at(slot.index);\n\t                }\n\t            }\n\t        },\n\n\t        nextGroupSlot: function(date, groupIndex, isDay) {\n\t            var collection;\n\t            var group = this.groups[groupIndex];\n\t            var slot = group.ranges(date, date, isDay, false)[0].start;\n\t            var daySlotCollectionCount;\n\n\t            if (groupIndex >= this.groups.length - 1) {\n\t                return;\n\t            }\n\n\t            if (this._isGroupedByDate()) {\n\t               return slot;\n\t            }\n\n\t            if (this._isVerticallyGrouped()) {\n\t                if (!group.timeSlotCollectionCount()) {\n\t                    collection = group._collection(0, true);\n\t                    return collection.at(slot.index);\n\t                } else {\n\t                    daySlotCollectionCount = group.daySlotCollectionCount();\n\t                    collection = group._collection(daySlotCollectionCount ? 0 : slot.collectionIndex, daySlotCollectionCount);\n\n\t                    return isDay ? collection.first() : collection.at(slot.collectionIndex);\n\t                }\n\t            } else {\n\t                if (!group.timeSlotCollectionCount()) {\n\t                    collection = group._collection(slot.collectionIndex, true);\n\t                    return collection.first();\n\t                } else {\n\t                    collection = group._collection(0, isDay);\n\t                    return isDay ? collection.first() : collection.at(slot.index);\n\t                }\n\t            }\n\t        },\n\n\t        _eventOptionsForMove: function () {\n\t            return {};\n\t        },\n\n\t        _updateEventForResize: function () {\n\t            return;\n\t        },\n\n\t        _updateEventForSelection: function (event) {\n\t            return event;\n\t        }\n\t    });\n\n\t    function collidingEvents(elements, start, end) {\n\t        var idx,\n\t            index,\n\t            startIndex,\n\t            overlaps,\n\t            endIndex;\n\n\t        for (idx = elements.length-1; idx >= 0; idx--) {\n\t            index = rangeIndex(elements[idx]);\n\t            startIndex = index.start;\n\t            endIndex = index.end;\n\n\t            overlaps = startIndex <= start && endIndex >= start;\n\n\t            if (overlaps || (startIndex >= start && endIndex <= end) || (start <= startIndex && end >= startIndex)) {\n\t                if (startIndex < start) {\n\t                    start = startIndex;\n\t                }\n\n\t                if (endIndex > end) {\n\t                    end = endIndex;\n\t                }\n\t            }\n\t        }\n\n\t        return eventsForSlot(elements, start, end);\n\t    }\n\n\t    function rangeIndex(eventElement) {\n\t        return {\n\t            start: eventElement.start,\n\t            end: eventElement.end\n\t        };\n\t    }\n\n\t    function eventsForSlot(elements, slotStart, slotEnd) {\n\t        var events = [];\n\n\t        for (var idx = 0; idx < elements.length; idx++) {\n\t            var event = rangeIndex(elements[idx]);\n\n\t            if ((event.start < slotStart && event.end > slotStart) || (event.start >= slotStart && event.end <= slotEnd)) {\n\t                events.push(elements[idx]);\n\t            }\n\t        }\n\n\t        return events;\n\t    }\n\n\t    function createColumns(eventElements) {\n\t        return _createColumns(eventElements);\n\t    }\n\n\t    function createRows(eventElements) {\n\t        return _createColumns(eventElements);\n\t    }\n\n\t    var Color = function(value) {\n\t        var color = this,\n\t            formats = Color.formats,\n\t            re,\n\t            processor,\n\t            parts,\n\t            i,\n\t            channels;\n\n\t        if (arguments.length === 1) {\n\t            value = color.resolveColor(value);\n\n\t            for (i = 0; i < formats.length; i++) {\n\t                re = formats[i].re;\n\t                processor = formats[i].process;\n\t                parts = re.exec(value);\n\n\t                if (parts) {\n\t                    channels = processor(parts);\n\t                    color.r = channels[0];\n\t                    color.g = channels[1];\n\t                    color.b = channels[2];\n\t                }\n\t            }\n\t        } else {\n\t            color.r = arguments[0];\n\t            color.g = arguments[1];\n\t            color.b = arguments[2];\n\t        }\n\n\t        color.r = color.normalizeByte(color.r);\n\t        color.g = color.normalizeByte(color.g);\n\t        color.b = color.normalizeByte(color.b);\n\t    };\n\n\t    Color.prototype = {\n\t        resolveColor: function(value) {\n\t            value = value || "#000";\n\n\t            if (value.charAt(0) == "#") {\n\t                value = value.substr(1, 6);\n\t            }\n\n\t            value = value.replace(/ /g, "");\n\t            value = value.toLowerCase();\n\t            value = Color.namedColors[value] || value;\n\n\t            return value;\n\t        },\n\n\t        normalizeByte: function(value) {\n\t            return (value < 0 || isNaN(value)) ? 0 : ((value > 255) ? 255 : value);\n\t        },\n\n\t        percBrightness: function() {\n\t            var color = this;\n\t            return math.sqrt(0.241 * color.r * color.r + 0.691 * color.g * color.g + 0.068 * color.b * color.b);\n\t        },\n\n\t        isDark: function() {\n\t            var color = this;\n\t            var brightnessValue = color.percBrightness();\n\t            return brightnessValue < 180;\n\t        }\n\t    };\n\n\t    Color.formats = [{\n\t            re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n\t            process: function(parts) {\n\t                return [\n\t                    parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)\n\t                ];\n\t            }\n\t        }, {\n\t            re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n\t            process: function(parts) {\n\t                return [\n\t                    parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)\n\t                ];\n\t            }\n\t        }, {\n\t            re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n\t            process: function(parts) {\n\t                return [\n\t                    parseInt(parts[1] + parts[1], 16),\n\t                    parseInt(parts[2] + parts[2], 16),\n\t                    parseInt(parts[3] + parts[3], 16)\n\t                ];\n\t            }\n\t        }\n\t    ];\n\n\t    Color.namedColors = {\n\t        aqua: "00ffff", azure: "f0ffff", beige: "f5f5dc",\n\t        black: "000000", blue: "0000ff", brown: "a52a2a",\n\t        coral: "ff7f50", cyan: "00ffff", darkblue: "00008b",\n\t        darkcyan: "008b8b", darkgray: "a9a9a9", darkgreen: "006400",\n\t        darkorange: "ff8c00", darkred: "8b0000", dimgray: "696969",\n\t        fuchsia: "ff00ff", gold: "ffd700", goldenrod: "daa520",\n\t        gray: "808080", green: "008000", greenyellow: "adff2f",\n\t        indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c",\n\t        lightblue: "add8e6", lightgrey: "d3d3d3", lightgreen: "90ee90",\n\t        lightpink: "ffb6c1", lightyellow: "ffffe0", lime: "00ff00",\n\t        limegreen: "32cd32", linen: "faf0e6", magenta: "ff00ff",\n\t        maroon: "800000", mediumblue: "0000cd", navy: "000080",\n\t        olive: "808000", orange: "ffa500", orangered: "ff4500",\n\t        orchid: "da70d6", pink: "ffc0cb", plum: "dda0dd",\n\t        purple: "800080", red: "ff0000", royalblue: "4169e1",\n\t        salmon: "fa8072", silver: "c0c0c0", skyblue: "87ceeb",\n\t        slateblue: "6a5acd", slategray: "708090", snow: "fffafa",\n\t        steelblue: "4682b4", tan: "d2b48c", teal: "008080",\n\t        tomato: "ff6347", turquoise: "40e0d0", violet: "ee82ee",\n\t        wheat: "f5deb3", white: "ffffff", whitesmoke: "f5f5f5",\n\t        yellow: "ffff00", yellowgreen: "9acd32"\n\t    };\n\n\t    function _createColumns(eventElements) {\n\t        var columns = [];\n\n\t        for (var idx = 0; idx < eventElements.length; idx++) {\n\t            var event = eventElements[idx];\n\t            var eventRange = rangeIndex(event);\n\t            var column = null;\n\n\t            for (var j = 0, columnLength = columns.length; j < columnLength; j++) {\n\t                var endOverlaps = eventRange.start > columns[j].end;\n\n\t                if (eventRange.start < columns[j].start || endOverlaps) {\n\n\t                    column = columns[j];\n\n\t                    if (column.end < eventRange.end) {\n\t                        column.end = eventRange.end;\n\t                    }\n\n\t                    break;\n\t                }\n\t            }\n\n\t            if (!column) {\n\t                column = { start: eventRange.start, end: eventRange.end, events: [] };\n\t                columns.push(column);\n\t            }\n\n\t            column.events.push(event);\n\t        }\n\n\t        return columns;\n\t    }\n\n\t    function createDateLayoutConfiguration(name, dates, inner, times) {\n\t         var configuration = [];\n\n\t         $.each(dates, function(index, item) {\n\t            var className = item.className ? "k-slot-cell " + item.className : "k-slot-cell";\n\n\t            var obj = {\n\t                text: item.text,\n\t                className: className\n\t            };\n\n\t            if(times && !item.minorTicks){\n\t                obj[name] = createDateLayoutConfiguration(name, item.columns, inner, times);\n\t            } else {\n\t                obj[name] = inner;\n\t            }\n\t            configuration.push(obj);\n\t        });\n\n\t        return configuration;\n\t    }\n\n\t    function createLayoutConfiguration(name, resources, inner, template, dates, times) {\n\t        var resource = resources[0];\n\t        var configuration = [];\n\n\t        if (resource) {\n\t            if (dates && inner) {\n\t                $.each(dates, function(index, item) {\n\n\t                    if (times && !item.minorTicks) {\n\t                        item[name] = createLayoutConfiguration(name, resources, item.columns, template, item.columns, times);\n\t                    } else {\n\t                         item[name] = createLayoutConfiguration(name, resources, null, template);\n\t                    }\n\t                });\n\t                configuration = dates;\n\t            } else {\n\t                var data = resource.dataSource.view();\n\n\t                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n\t                    var obj = {\n\t                        text: template({\n\t                            text: kendo.htmlEncode(kendo.getter(resource.dataTextField)(data[dataIndex])),\n\t                            color: kendo.getter(resource.dataColorField)(data[dataIndex]),\n\t                            field: resource.field,\n\t                            title: resource.title,\n\t                            name: resource.name,\n\t                            value:kendo.getter(resource.dataValueField)(data[dataIndex])\n\t                        }),\n\t                        className: "k-slot-cell k-scheduler-group-cell"\n\t                    };\n\t                    obj[name] = createLayoutConfiguration(name, resources.slice(1), inner, template);\n\n\t                    configuration.push(obj);\n\t                }\n\t            }\n\t            return configuration;\n\t        }\n\t        return inner;\n\t    }\n\n\t    function groupEqFilter(value) {\n\t        return function(item) {\n\t            if ($.isArray(item) || item instanceof kendo.data.ObservableArray) {\n\t                for (var idx = 0; idx < item.length; idx++) {\n\t                    if (item[idx] == value) {\n\t                        return true;\n\t                    }\n\t                }\n\t                return false;\n\t            }\n\t            return item == value;\n\t        };\n\t    }\n\n\t    var selectedStateRegExp = /\\s*k-state-selected/;\n\t    function addSelectedState(cell) {\n\t        cell.className = cell.className.replace(selectedStateRegExp, "") + " k-state-selected";\n\t    }\n\n\t    $.extend(ui.SchedulerView, {\n\t        createColumns: createColumns,\n\t        createRows: createRows,\n\t        rangeIndex: rangeIndex,\n\t        collidingEvents: collidingEvents,\n\t        groupEqFilter: groupEqFilter\n\t    });\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.scheduler.view.js?')}}]);