(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{"./node_modules/@progress/kendo-ui/js/dataviz/diagram/services.js":
/*!************************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/dataviz/diagram/services.js ***!
  \************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(881);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 860:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../../kendo.drawing */ "./node_modules/@progress/kendo-ui/js/kendo.drawing.js");\n\n/***/ }),\n\n/***/ 874:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./svg */ "./node_modules/@progress/kendo-ui/js/dataviz/diagram/svg.js");\n\n/***/ }),\n\n/***/ 881:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (f, define) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(860), __webpack_require__(874) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function () {\n\n\t    (function ($, undefined) {\n\t        // Imports ================================================================\n\t        var kendo = window.kendo,\n\t            dataviz = kendo.dataviz,\n\t            diagram = dataviz.diagram,\n\t            Class = kendo.Class,\n\t            Group = diagram.Group,\n\t            Rect = diagram.Rect,\n\t            Rectangle = diagram.Rectangle,\n\t            Utils = diagram.Utils,\n\t            isUndefined = Utils.isUndefined,\n\t            Point = diagram.Point,\n\t            Circle = diagram.Circle,\n\t            Ticker = diagram.Ticker,\n\t            deepExtend = kendo.deepExtend,\n\t            Movable = kendo.ui.Movable,\n\t            browser = kendo.support.browser,\n\t            util = kendo.drawing.util,\n\t            defined = util.defined,\n\t            inArray = $.inArray,\n\t            proxy = $.proxy;\n\n\t        // Constants ==============================================================\n\t        var Cursors = {\n\t                arrow: "default",\n\t                grip: "pointer",\n\t                cross: "pointer",\n\t                add: "pointer",\n\t                move: "move",\n\t                select: "pointer",\n\t                south: "s-resize",\n\t                east: "e-resize",\n\t                west: "w-resize",\n\t                north: "n-resize",\n\t                rowresize: "row-resize",\n\t                colresize: "col-resize"\n\t            },\n\t            HIT_TEST_DISTANCE = 10,\n\t            AUTO = "Auto",\n\t            TOP = "Top",\n\t            RIGHT = "Right",\n\t            LEFT = "Left",\n\t            BOTTOM = "Bottom",\n\t            DEFAULT_SNAP_SIZE = 10,\n\t            DEFAULT_SNAP_ANGLE = 10,\n\t            DRAG_START = "dragStart",\n\t            DRAG = "drag",\n\t            DRAG_END = "dragEnd",\n\t            ITEMROTATE = "itemRotate",\n\t            ITEMBOUNDSCHANGE = "itemBoundsChange",\n\t            MIN_SNAP_SIZE = 5,\n\t            MIN_SNAP_ANGLE = 5,\n\t            MOUSE_ENTER = "mouseEnter",\n\t            MOUSE_LEAVE = "mouseLeave",\n\t            ZOOM_START = "zoomStart",\n\t            ZOOM_END = "zoomEnd",\n\t            SCROLL_MIN = -20000,\n\t            SCROLL_MAX = 20000,\n\t            FRICTION = 0.90,\n\t            FRICTION_MOBILE = 0.93,\n\t            VELOCITY_MULTIPLIER = 5,\n\t            TRANSPARENT = "transparent",\n\t            PAN = "pan",\n\t            ROTATED = "rotated",\n\t            SOURCE = "source",\n\t            TARGET = "target",\n\t            HANDLE_NAMES = {\n\t                "-1": SOURCE,\n\t                "1": TARGET\n\t            };\n\n\t        diagram.Cursors = Cursors;\n\n\t        var PositionAdapter = kendo.Class.extend({\n\t            init: function (layoutState) {\n\t                this.layoutState = layoutState;\n\t                this.diagram = layoutState.diagram;\n\t            },\n\t            initState: function () {\n\t                this.froms = [];\n\t                this.tos = [];\n\t                this.subjects = [];\n\t                function pusher(id, bounds) {\n\t                    var shape = this.diagram.getShapeById(id);\n\t                    if (shape) {\n\t                        this.subjects.push(shape);\n\t                        this.froms.push(shape.bounds().topLeft());\n\t                        this.tos.push(bounds.topLeft());\n\t                    }\n\t                }\n\n\t                this.layoutState.nodeMap.forEach(pusher, this);\n\t            },\n\t            update: function (tick) {\n\t                if (this.subjects.length <= 0) {\n\t                    return;\n\t                }\n\t                for (var i = 0; i < this.subjects.length; i++) {\n\t                    //todo: define a Lerp function instead\n\t                    this.subjects[i].position(\n\t                        new Point(this.froms[i].x + (this.tos[i].x - this.froms[i].x) * tick, this.froms[i].y + (this.tos[i].y - this.froms[i].y) * tick)\n\t                    );\n\t                }\n\t            }\n\t        });\n\n\t        var LayoutUndoUnit = Class.extend({\n\t            init: function (initialState, finalState, animate) {\n\t                if (isUndefined(animate)) {\n\t                    this.animate = false;\n\t                }\n\t                else {\n\t                    this.animate = animate;\n\t                }\n\t                this._initialState = initialState;\n\t                this._finalState = finalState;\n\t                this.title = "Diagram layout";\n\t            },\n\t            undo: function () {\n\t                this.setState(this._initialState);\n\t            },\n\t            redo: function () {\n\t                this.setState(this._finalState);\n\t            },\n\t            setState: function (state) {\n\t                var diagram = state.diagram;\n\t                if (this.animate) {\n\t                    state.linkMap.forEach(\n\t                        function (id, points) {\n\t                            var conn = diagram.getShapeById(id);\n\t                            conn.visible(false);\n\t                            if (conn) {\n\t                                conn.points(points);\n\t                            }\n\t                        }\n\t                    );\n\t                    var ticker = new Ticker();\n\t                    ticker.addAdapter(new PositionAdapter(state));\n\t                    ticker.onComplete(function () {\n\t                        state.linkMap.forEach(\n\t                            function (id) {\n\t                                var conn = diagram.getShapeById(id);\n\t                                conn.visible(true);\n\t                            }\n\t                        );\n\t                    });\n\t                    ticker.play();\n\t                }\n\t                else {\n\t                    state.nodeMap.forEach(function (id, bounds) {\n\t                        var shape = diagram.getShapeById(id);\n\t                        if (shape) {\n\t                            shape.position(bounds.topLeft());\n\t                        }\n\t                    });\n\t                    state.linkMap.forEach(\n\t                        function (id, points) {\n\t                            var conn = diagram.getShapeById(id);\n\t                            if (conn) {\n\t                                conn.points(points);\n\t                            }\n\t                        }\n\t                    );\n\t                }\n\t            }\n\t        });\n\n\t        var CompositeUnit = Class.extend({\n\t            init: function (unit) {\n\t                this.units = [];\n\t                this.title = "Composite unit";\n\t                if (unit !== undefined) {\n\t                    this.units.push(unit);\n\t                }\n\t            },\n\t            add: function (undoUnit) {\n\t                this.units.push(undoUnit);\n\t            },\n\t            undo: function () {\n\t                for (var i = 0; i < this.units.length; i++) {\n\t                    this.units[i].undo();\n\t                }\n\t            },\n\t            redo: function () {\n\t                for (var i = 0; i < this.units.length; i++) {\n\t                    this.units[i].redo();\n\t                }\n\t            }\n\t        });\n\n\t        var ConnectionEditUnit = Class.extend({\n\t            init: function (item, redoSource, redoTarget) {\n\t                this.item = item;\n\t                this._redoSource = redoSource;\n\t                this._redoTarget = redoTarget;\n\t                if (defined(redoSource)) {\n\t                    this._undoSource = item.source();\n\t                }\n\n\t                if (defined(redoTarget)) {\n\t                    this._undoTarget = item.target();\n\t                }\n\t                this.title = "Connection Editing";\n\t            },\n\t            undo: function () {\n\t                if (this._undoSource !== undefined) {\n\t                    this.item._updateConnector(this._undoSource, "source");\n\t                }\n\n\t                if (this._undoTarget !== undefined) {\n\t                    this.item._updateConnector(this._undoTarget, "target");\n\t                }\n\n\t                this.item.updateModel();\n\t            },\n\t            redo: function () {\n\t                if (this._redoSource !== undefined) {\n\t                    this.item._updateConnector(this._redoSource, "source");\n\t                }\n\n\t                if (this._redoTarget !== undefined) {\n\t                    this.item._updateConnector(this._redoTarget, "target");\n\t                }\n\n\t                this.item.updateModel();\n\t            }\n\t        });\n\n\t        var ConnectionEditUndoUnit = Class.extend({\n\t            init: function (item, undoSource, undoTarget) {\n\t                this.item = item;\n\t                this._undoSource = undoSource;\n\t                this._undoTarget = undoTarget;\n\t                this._redoSource = item.source();\n\t                this._redoTarget = item.target();\n\t                this.title = "Connection Editing";\n\t            },\n\t            undo: function () {\n\t                this.item._updateConnector(this._undoSource, "source");\n\t                this.item._updateConnector(this._undoTarget, "target");\n\t                this.item.updateModel();\n\t            },\n\t            redo: function () {\n\t                this.item._updateConnector(this._redoSource, "source");\n\t                this.item._updateConnector(this._redoTarget, "target");\n\t                this.item.updateModel();\n\t            }\n\t        });\n\n\t        var DeleteConnectionUnit = Class.extend({\n\t            init: function (connection) {\n\t                this.connection = connection;\n\t                this.diagram = connection.diagram;\n\t                this.targetConnector = connection.targetConnector;\n\t                this.title = "Delete connection";\n\t            },\n\t            undo: function () {\n\t                this.diagram._addConnection(this.connection, false);\n\t            },\n\t            redo: function () {\n\t                this.diagram.remove(this.connection, false);\n\t            }\n\t        });\n\n\t        var DeleteShapeUnit = Class.extend({\n\t            init: function (shape) {\n\t                this.shape = shape;\n\t                this.diagram = shape.diagram;\n\t                this.title = "Deletion";\n\t            },\n\t            undo: function () {\n\t                this.diagram._addShape(this.shape, false);\n\t                this.shape.select(false);\n\t            },\n\t            redo: function () {\n\t                this.shape.select(false);\n\t                this.diagram.remove(this.shape, false);\n\t            }\n\t        });\n\t        /**\n\t         * Holds the undoredo state when performing a rotation, translation or scaling. The adorner is optional.\n\t         * @type {*}\n\t         */\n\t        var TransformUnit = Class.extend({\n\t            init: function (shapes, undoStates, adorner) {\n\t                this.shapes = shapes;\n\t                this.undoStates = undoStates;\n\t                this.title = "Transformation";\n\t                this.redoStates = [];\n\t                this.adorner = adorner;\n\t                for (var i = 0; i < this.shapes.length; i++) {\n\t                    var shape = this.shapes[i];\n\t                    this.redoStates.push(shape.bounds());\n\t                }\n\t            },\n\t            undo: function () {\n\t                for (var i = 0; i < this.shapes.length; i++) {\n\t                    var shape = this.shapes[i];\n\t                    shape.bounds(this.undoStates[i]);\n\t                    if (shape.hasOwnProperty("layout")) {\n\t                        shape.layout(shape, this.redoStates[i], this.undoStates[i]);\n\t                    }\n\t                    shape.updateModel();\n\t                }\n\t                if (this.adorner) {\n\t                    this.adorner.refreshBounds();\n\t                    this.adorner.refresh();\n\t                }\n\t            },\n\t            redo: function () {\n\t                for (var i = 0; i < this.shapes.length; i++) {\n\t                    var shape = this.shapes[i];\n\t                    shape.bounds(this.redoStates[i]);\n\t                    // the \'layout\' property, if implemented, lets the shape itself work out what to do with the new bounds\n\t                    if (shape.hasOwnProperty("layout")) {\n\t                        shape.layout(shape, this.undoStates[i], this.redoStates[i]);\n\t                    }\n\t                    shape.updateModel();\n\t                }\n\n\t                if (this.adorner) {\n\t                    this.adorner.refreshBounds();\n\t                    this.adorner.refresh();\n\t                }\n\t            }\n\t        });\n\n\t        var AddConnectionUnit = Class.extend({\n\t            init: function (connection, diagram) {\n\t                this.connection = connection;\n\t                this.diagram = diagram;\n\t                this.title = "New connection";\n\t            },\n\n\t            undo: function () {\n\t                this.diagram.remove(this.connection, false);\n\t            },\n\n\t            redo: function () {\n\t                this.diagram._addConnection(this.connection, false);\n\t            }\n\t        });\n\n\t        var AddShapeUnit = Class.extend({\n\t            init: function (shape, diagram) {\n\t                this.shape = shape;\n\t                this.diagram = diagram;\n\t                this.title = "New shape";\n\t            },\n\n\t            undo: function () {\n\t                this.diagram.deselect();\n\t                this.diagram.remove(this.shape, false);\n\t            },\n\n\t            redo: function () {\n\t                this.diagram._addShape(this.shape, false);\n\t            }\n\t        });\n\n\t        var PanUndoUnit = Class.extend({\n\t            init: function (initialPosition, finalPosition, diagram) {\n\t                this.initial = initialPosition;\n\t                this.finalPos = finalPosition;\n\t                this.diagram = diagram;\n\t                this.title = "Pan Unit";\n\t            },\n\t            undo: function () {\n\t                this.diagram.pan(this.initial);\n\t            },\n\t            redo: function () {\n\t                this.diagram.pan(this.finalPos);\n\t            }\n\t        });\n\n\t        var RotateUnit = Class.extend({\n\t            init: function (adorner, shapes, undoRotates) {\n\t                this.shapes = shapes;\n\t                this.undoRotates = undoRotates;\n\t                this.title = "Rotation";\n\t                this.redoRotates = [];\n\t                this.redoAngle = adorner._angle;\n\t                this.adorner = adorner;\n\t                this.center = adorner._innerBounds.center();\n\t                for (var i = 0; i < this.shapes.length; i++) {\n\t                    var shape = this.shapes[i];\n\t                    this.redoRotates.push(shape.rotate().angle);\n\t                }\n\t            },\n\t            undo: function () {\n\t                var i, shape;\n\t                for (i = 0; i < this.shapes.length; i++) {\n\t                    shape = this.shapes[i];\n\t                    shape.rotate(this.undoRotates[i], this.center, false);\n\t                    if (shape.hasOwnProperty("layout")) {\n\t                        shape.layout(shape);\n\t                    }\n\t                    shape.updateModel();\n\t                }\n\t                if (this.adorner) {\n\t                    this.adorner._initialize();\n\t                    this.adorner.refresh();\n\t                }\n\t            },\n\t            redo: function () {\n\t                var i, shape;\n\t                for (i = 0; i < this.shapes.length; i++) {\n\t                    shape = this.shapes[i];\n\t                    shape.rotate(this.redoRotates[i], this.center, false);\n\t                    if (shape.hasOwnProperty("layout")) {\n\t                        shape.layout(shape);\n\t                    }\n\t                    shape.updateModel();\n\t                }\n\t                if (this.adorner) {\n\t                    this.adorner._initialize();\n\t                    this.adorner.refresh();\n\t                }\n\t            }\n\t        });\n\n\t        var ToFrontUnit = Class.extend({\n\t            init: function (diagram, items, initialIndices) {\n\t                this.diagram = diagram;\n\t                this.indices = initialIndices;\n\t                this.items = items;\n\t                this.title = "Rotate Unit";\n\t            },\n\t            undo: function () {\n\t                this.diagram._toIndex(this.items, this.indices);\n\t            },\n\t            redo: function () {\n\t                this.diagram.toFront(this.items, false);\n\t            }\n\t        });\n\n\t        var ToBackUnit = Class.extend({\n\t            init: function (diagram, items, initialIndices) {\n\t                this.diagram = diagram;\n\t                this.indices = initialIndices;\n\t                this.items = items;\n\t                this.title = "Rotate Unit";\n\t            },\n\t            undo: function () {\n\t                this.diagram._toIndex(this.items, this.indices);\n\t            },\n\t            redo: function () {\n\t                this.diagram.toBack(this.items, false);\n\t            }\n\t        });\n\n\t        /**\n\t         * Undo-redo service.\n\t         */\n\t        var UndoRedoService = kendo.Observable.extend({\n\t            init: function (options) {\n\t                kendo.Observable.fn.init.call(this, options);\n\t                this.bind(this.events, options);\n\t                this.stack = [];\n\t                this.index = 0;\n\t                this.capacity = 100;\n\t            },\n\n\t            events: ["undone", "redone"],\n\n\t            /**\n\t             * Starts the collection of units. Add those with\n\t             * the addCompositeItem method and call commit. Or cancel to forget about it.\n\t             */\n\t            begin: function () {\n\t                this.composite = new CompositeUnit();\n\t            },\n\n\t            /**\n\t             * Cancels the collection process of unit started with \'begin\'.\n\t             */\n\t            cancel: function () {\n\t                this.composite = undefined;\n\t            },\n\n\t            /**\n\t             * Commits a batch of units.\n\t             */\n\t            commit: function (execute) {\n\t                if (this.composite.units.length > 0) {\n\t                    this._restart(this.composite, execute);\n\t                }\n\t                this.composite = undefined;\n\t            },\n\n\t            /**\n\t             * Adds a unit as part of the begin-commit batch.\n\t             * @param undoUnit\n\t             */\n\t            addCompositeItem: function (undoUnit) {\n\t                if (this.composite) {\n\t                    this.composite.add(undoUnit);\n\t                } else {\n\t                    this.add(undoUnit);\n\t                }\n\t            },\n\n\t            /**\n\t             * Standard addition of a unit. See also the batch version; begin-addCompositeUnit-commit methods.\n\t             * @param undoUnit The unit to be added.\n\t             * @param execute If false, the unit will be added but not executed.\n\t             */\n\t            add: function (undoUnit, execute) {\n\t                this._restart(undoUnit, execute);\n\t            },\n\n\t            /**\n\t             * Returns the number of undoable unit in the stack.\n\t             * @returns {Number}\n\t             */\n\n\t            pop: function() {\n\t                if (this.index > 0) {\n\t                    this.stack.pop();\n\t                    this.index--;\n\t                }\n\t            },\n\n\t            count: function () {\n\t                return this.stack.length;\n\t            },\n\n\t            /**\n\t             * Rollback of the unit on top of the stack.\n\t             */\n\t            undo: function () {\n\t                if (this.index > 0) {\n\t                    this.index--;\n\t                    this.stack[this.index].undo();\n\t                    this.trigger("undone");\n\t                }\n\t            },\n\n\t            /**\n\t             * Redo of the last undone action.\n\t             */\n\t            redo: function () {\n\t                if (this.stack.length > 0 && this.index < this.stack.length) {\n\t                    this.stack[this.index].redo();\n\t                    this.index++;\n\t                    this.trigger("redone");\n\t                }\n\t            },\n\n\t            _restart: function (composite, execute) {\n\t                // throw away anything beyond this point if this is a new branch\n\t                this.stack.splice(this.index, this.stack.length - this.index);\n\t                this.stack.push(composite);\n\t                if (execute !== false) {\n\t                    this.redo();\n\t                } else {\n\t                    this.index++;\n\t                }\n\t                // check the capacity\n\t                if (this.stack.length > this.capacity) {\n\t                    this.stack.splice(0, this.stack.length - this.capacity);\n\t                    this.index = this.capacity; //points to the end of the stack\n\t                }\n\t            },\n\n\t            /**\n\t             * Clears the stack.\n\t             */\n\t            clear: function () {\n\t                this.stack = [];\n\t                this.index = 0;\n\t            }\n\t        });\n\n\t// Tools =========================================\n\n\t        var EmptyTool = Class.extend({\n\t            init: function (toolService) {\n\t                this.toolService = toolService;\n\t            },\n\t            start: function () {\n\t            },\n\t            move: function () {\n\t            },\n\t            end: function () {\n\t            },\n\t            tryActivate: function () {\n\t                return false;\n\t            },\n\t            getCursor: function () {\n\t                return Cursors.arrow;\n\t            }\n\t        });\n\n\t        var ScrollerTool = EmptyTool.extend({\n\t            init: function (toolService) {\n\t                var tool = this;\n\t                var friction = kendo.support.mobileOS ? FRICTION_MOBILE : FRICTION;\n\t                EmptyTool.fn.init.call(tool, toolService);\n\n\t                var diagram = tool.toolService.diagram,\n\t                    canvas = diagram.canvas;\n\n\t                var scroller = diagram.scroller = tool.scroller = $(diagram.scrollable).kendoMobileScroller({\n\t                    friction: friction,\n\t                    velocityMultiplier: VELOCITY_MULTIPLIER,\n\t                    mousewheelScrolling: false,\n\t                    zoom: false,\n\t                    scroll: proxy(tool._move, tool)\n\t                }).data("kendoMobileScroller");\n\n\t                if (canvas.translate) {\n\t                    tool.movableCanvas = new Movable(canvas.element);\n\t                }\n\n\t                var virtualScroll = function (dimension, min, max) {\n\t                    dimension.makeVirtual();\n\t                    dimension.virtualSize(min || SCROLL_MIN, max || SCROLL_MAX);\n\t                };\n\n\t                virtualScroll(scroller.dimensions.x);\n\t                virtualScroll(scroller.dimensions.y);\n\t                scroller.disable();\n\t            },\n\n\t            tryActivate: function (p, meta) {\n\t                var toolService = this.toolService;\n\t                var options = toolService.diagram.options.pannable;\n\t                var enabled = meta.ctrlKey;\n\n\t                if (defined(options.key)) {\n\t                    if (!options.key || options.key == "none") {\n\t                        enabled = noMeta(meta) && !defined(toolService.hoveredItem);\n\t                    } else {\n\t                        enabled = meta[options.key + "Key"];\n\t                    }\n\t                }\n\n\t                return  options !== false && enabled && !defined(toolService.hoveredAdorner) && !defined(toolService._hoveredConnector);\n\t            },\n\n\t            start: function () {\n\t                this.scroller.enable();\n\t            },\n\t            move: function () {\n\t            },//the tool itself should not handle the scrolling. Let kendo scroller take care of this part. Check _move\n\t            _move: function (args) {\n\t                var tool = this,\n\t                    diagram = tool.toolService.diagram,\n\t                    canvas = diagram.canvas,\n\t                    scrollPos = new Point(args.scrollLeft, args.scrollTop);\n\n\t                if (canvas.translate) {\n\t                    diagram._storePan(scrollPos.times(-1));\n\t                    tool.movableCanvas.moveTo(scrollPos);\n\t                    canvas.translate(scrollPos.x, scrollPos.y);\n\t                } else {\n\t                    scrollPos = scrollPos.plus(diagram._pan.times(-1));\n\t                }\n\n\t                diagram.trigger(PAN, {pan: scrollPos});\n\t            },\n\t            end: function () {\n\t                this.scroller.disable();\n\t            },\n\t            getCursor: function () {\n\t                return Cursors.move;\n\t            }\n\t        });\n\n\t        /**\n\t         * The tool handling the transformations via the adorner.\n\t         * @type {*}\n\t         */\n\t        var PointerTool = Class.extend({\n\t            init: function (toolService) {\n\t                this.toolService = toolService;\n\t            },\n\t            tryActivate: function () {\n\t                return true; // the pointer tool is last and handles all others requests.\n\t            },\n\t            start: function (p, meta) {\n\t                var toolService = this.toolService,\n\t                    diagram = toolService.diagram,\n\t                    hoveredItem = toolService.hoveredItem;\n\n\t                if (hoveredItem) {\n\t                    toolService.selectSingle(hoveredItem, meta);\n\t                    if (hoveredItem.adorner) { //connection\n\t                        this.adorner = hoveredItem.adorner;\n\t                        this.handle = this.adorner._hitTest(p);\n\t                    }\n\t                }\n\n\t                if (!this.handle) {\n\t                    this.handle = diagram._resizingAdorner._hitTest(p);\n\t                    if (this.handle) {\n\t                        this.adorner = diagram._resizingAdorner;\n\t                    }\n\t                }\n\n\t                if (this.adorner) {\n\t                    if (!this.adorner.isDragHandle(this.handle) || !diagram.trigger(DRAG_START, { shapes: this.adorner.shapes, connections: [] })) {\n\t                        this.adorner.start(p);\n\t                    } else {\n\t                        toolService.startPoint = p;\n\t                        toolService.end(p);\n\t                    }\n\t                }\n\t            },\n\n\t            move: function (p) {\n\t                if (this.adorner) {\n\t                    this.adorner.move(this.handle, p);\n\t                    if (this.adorner.isDragHandle(this.handle)) {\n\t                        this.toolService.diagram.trigger(DRAG, { shapes: this.adorner.shapes, connections: [] });\n\t                    }\n\t                }\n\t            },\n\n\t            end: function () {\n\t                var diagram = this.toolService.diagram,\n\t                    adorner = this.adorner,\n\t                    unit;\n\n\t                if (adorner) {\n\t                    if (!adorner.isDragHandle(this.handle) || !diagram.trigger(DRAG_END, { shapes: adorner.shapes, connections: [] })) {\n\t                        unit = adorner.stop();\n\t                        if (unit) {\n\t                            diagram.undoRedoService.add(unit, false);\n\t                        }\n\t                    } else {\n\t                        adorner.cancel();\n\t                    }\n\t                }\n\n\t                this.adorner = undefined;\n\t                this.handle = undefined;\n\t            },\n\t            getCursor: function (p) {\n\t                return this.toolService.hoveredItem ? this.toolService.hoveredItem._getCursor(p) : Cursors.arrow;\n\t            }\n\t        });\n\n\t        var SelectionTool = Class.extend({\n\t            init: function (toolService) {\n\t                this.toolService = toolService;\n\t            },\n\t            tryActivate: function (p, meta) {\n\t                var toolService = this.toolService;\n\t                var selectable = toolService.diagram.options.selectable;\n\t                var enabled = selectable && selectable.multiple !== false;\n\n\t                if (enabled) {\n\t                    if (selectable.key && selectable.key != "none") {\n\t                        enabled = meta[selectable.key + "Key"];\n\t                    } else {\n\t                        enabled = noMeta(meta);\n\t                    }\n\t                }\n\n\t                return enabled && !defined(toolService.hoveredItem) && !defined(toolService.hoveredAdorner);\n\t            },\n\t            start: function (p) {\n\t                var diagram = this.toolService.diagram;\n\t                diagram.deselect();\n\t                diagram.selector.start(p);\n\t            },\n\t            move: function (p) {\n\t                var diagram = this.toolService.diagram;\n\t                diagram.selector.move(p);\n\t            },\n\t            end: function (p, meta) {\n\t                var diagram = this.toolService.diagram, hoveredItem = this.toolService.hoveredItem;\n\t                var rect = diagram.selector.bounds();\n\t                if ((!hoveredItem || !hoveredItem.isSelected) && !meta.ctrlKey) {\n\t                    diagram.deselect();\n\t                }\n\t                if (!rect.isEmpty()) {\n\t                    diagram.selectArea(rect);\n\t                }\n\t                diagram.selector.end();\n\t            },\n\t            getCursor: function () {\n\t                return Cursors.arrow;\n\t            }\n\t        });\n\n\t        var ConnectionTool = Class.extend({\n\t            init: function (toolService) {\n\t                this.toolService = toolService;\n\t                this.type = "ConnectionTool";\n\t            },\n\t            tryActivate: function() {\n\t                return this.toolService._hoveredConnector;\n\t            },\n\t            start: function (p, meta) {\n\t                var toolService = this.toolService,\n\t                    diagram = toolService.diagram,\n\t                    connector = toolService._hoveredConnector,\n\t                    connection = diagram._createConnection({}, connector._c, p);\n\n\t                if (canDrag(connection) && !diagram.trigger(DRAG_START, { shapes: [], connections: [connection], connectionHandle: TARGET }) && diagram._addConnection(connection)) {\n\t                    toolService._connectionManipulation(connection, connector._c.shape, true);\n\t                    toolService._removeHover();\n\t                    toolService.selectSingle(toolService.activeConnection, meta);\n\t                    if (meta.type == "touchmove") {\n\t                        diagram._cachedTouchTarget = connector.visual;\n\t                    }\n\t                } else {\n\t                    connection.source(null);\n\t                    toolService.end(p);\n\t                }\n\t            },\n\n\t            move: function (p) {\n\t                var toolService = this.toolService;\n\t                var connection = toolService.activeConnection;\n\n\t                connection.target(p);\n\t                toolService.diagram.trigger(DRAG, { shapes: [], connections: [connection], connectionHandle: TARGET  });\n\t                return true;\n\t            },\n\n\t            end: function (p) {\n\t                var toolService = this.toolService,\n\t                    d = toolService.diagram,\n\t                    connection = toolService.activeConnection,\n\t                    hoveredItem = toolService.hoveredItem,\n\t                    connector = toolService._hoveredConnector,\n\t                    target,\n\t                    cachedTouchTarget = d._cachedTouchTarget;\n\n\t                if (!connection) {\n\t                    return;\n\t                }\n\n\t                if (connector && connector._c != connection.sourceConnector) {\n\t                    target = connector._c;\n\t                } else if (hoveredItem && hoveredItem instanceof diagram.Shape) {\n\t                    target = hoveredItem.getConnector(AUTO) || hoveredItem.getConnector(p);\n\t                } else {\n\t                    target = p;\n\t                }\n\n\t                connection.target(target);\n\n\t                if (!d.trigger(DRAG_END, { shapes: [], connections: [connection], connectionHandle: TARGET })) {\n\t                    connection.updateModel();\n\t                    d._syncConnectionChanges();\n\t                } else {\n\t                    d.remove(connection, false);\n\t                    d.undoRedoService.pop();\n\t                }\n\t                toolService._connectionManipulation();\n\n\t                if(cachedTouchTarget) {\n\t                    d._connectorsAdorner.visual.remove(cachedTouchTarget);\n\t                    d._cachedTouchTarget = null;\n\t                }\n\t            },\n\n\t            getCursor: function () {\n\t                return Cursors.arrow;\n\t            }\n\t        });\n\n\t        var ConnectionEditTool = Class.extend({\n\t            init: function (toolService) {\n\t                this.toolService = toolService;\n\t                this.type = "ConnectionTool";\n\t            },\n\n\t            tryActivate: function (p, meta) {\n\t                var toolService = this.toolService,\n\t                    diagram = toolService.diagram,\n\t                    selectable =  diagram.options.selectable,\n\t                    item = toolService.hoveredItem,\n\t                    isActive = selectable !== false &&\n\t                               item && item.path && !(item.isSelected && meta.ctrlKey);\n\n\t                if (isActive) {\n\t                    this._c = item;\n\t                }\n\n\t                return isActive;\n\t            },\n\n\t            start: function (p, meta) {\n\t                var toolService = this.toolService;\n\t                var connection = this._c;\n\n\t                toolService.selectSingle(connection, meta);\n\n\t                var adorner = connection.adorner;\n\n\t                var handle, name;\n\t                if (adorner) {\n\t                    handle = adorner._hitTest(p);\n\t                    name = HANDLE_NAMES[handle];\n\t                }\n\n\t                if (canDrag(connection) && adorner && !toolService.diagram.trigger(DRAG_START, { shapes: [], connections: [connection], connectionHandle: name })) {\n\t                    this.handle = handle;\n\t                    this.handleName = name;\n\t                    adorner.start(p);\n\t                } else {\n\t                    toolService.startPoint = p;\n\t                    toolService.end(p);\n\t                }\n\t            },\n\n\t            move: function (p) {\n\t                var adorner = this._c.adorner;\n\t                if (canDrag(this._c) && adorner) {\n\t                    adorner.move(this.handle, p);\n\t                    this.toolService.diagram.trigger(DRAG, { shapes: [], connections: [this._c], connectionHandle: this.handleName });\n\n\t                    return true;\n\t                }\n\t            },\n\n\t            end: function (p) {\n\t                var connection = this._c;\n\t                var adorner = connection.adorner;\n\t                var toolService = this.toolService;\n\t                var diagram = toolService.diagram;\n\n\t                if (adorner) {\n\t                    if (canDrag(connection)) {\n\t                        var unit = adorner.stop(p);\n\t                        if (!diagram.trigger(DRAG_END, { shapes: [], connections: [connection], connectionHandle: this.handleName })) {\n\t                            diagram.undoRedoService.add(unit, false);\n\t                            connection.updateModel();\n\t                            diagram._syncConnectionChanges();\n\t                        } else {\n\t                            unit.undo();\n\t                        }\n\t                    }\n\t                }\n\t            },\n\n\t            getCursor: function () {\n\t                return Cursors.move;\n\t            }\n\t        });\n\n\t        function testKey(key, str) {\n\t            return str.charCodeAt(0) == key || str.toUpperCase().charCodeAt(0) == key;\n\t        }\n\n\t        /**\n\t         * The service managing the tools.\n\t         * @type {*}\n\t         */\n\t        var ToolService = Class.extend({\n\t            init: function (diagram) {\n\t                this.diagram = diagram;\n\t                this.tools = [\n\t                    new ScrollerTool(this),\n\t                    new ConnectionEditTool(this),\n\t                    new ConnectionTool(this),\n\t                    new SelectionTool(this),\n\t                    new PointerTool(this)\n\t                ]; // the order matters.\n\n\t                this.activeTool = undefined;\n\t            },\n\n\t            start: function (p, meta) {\n\t                meta = deepExtend({}, meta);\n\t                if (this.activeTool) {\n\t                    this.activeTool.end(p, meta);\n\t                }\n\t                this._updateHoveredItem(p);\n\t                this._activateTool(p, meta);\n\t                this.activeTool.start(p, meta);\n\t                this._updateCursor(p);\n\t                this.diagram.focus();\n\t                this.diagram.canvas.surface.suspendTracking();\n\t                this.startPoint = p;\n\t                return true;\n\t            },\n\n\t            move: function (p, meta) {\n\t                meta = deepExtend({}, meta);\n\t                var updateHovered = true;\n\t                if (this.activeTool) {\n\t                    updateHovered = this.activeTool.move(p, meta);\n\t                }\n\t                if (updateHovered) {\n\t                    this._updateHoveredItem(p);\n\t                }\n\t                this._updateCursor(p);\n\t                return true;\n\t            },\n\n\t            end: function (p, meta) {\n\t                meta = deepExtend({}, meta);\n\t                if (this.activeTool) {\n\t                    this.activeTool.end(p, meta);\n\t                }\n\t                this.diagram.canvas.surface.resumeTracking();\n\t                this.activeTool = undefined;\n\t                this._updateCursor(p);\n\t                return true;\n\t            },\n\n\t            keyDown: function (key, meta) {\n\t                var diagram = this.diagram;\n\t                meta = deepExtend({ ctrlKey: false, metaKey: false, altKey: false }, meta);\n\t                if ((meta.ctrlKey || meta.metaKey) && !meta.altKey) {// ctrl or option\n\t                    if (testKey(key, "a")) {// A: select all\n\t                        diagram.selectAll();\n\t                        diagram._destroyToolBar();\n\t                        return true;\n\t                    } else if (testKey(key, "z")) {// Z: undo\n\t                        diagram.undo();\n\t                        diagram._destroyToolBar();\n\t                        return true;\n\t                    } else if (testKey(key, "y")) {// y: redo\n\t                        diagram.redo();\n\t                        diagram._destroyToolBar();\n\t                        return true;\n\t                    } else if (testKey(key, "c")) {\n\t                        diagram.copy();\n\t                        diagram._destroyToolBar();\n\t                    } else if (testKey(key, "x")) {\n\t                        diagram.cut();\n\t                        diagram._destroyToolBar();\n\t                    } else if (testKey(key, "v")) {\n\t                        diagram.paste();\n\t                        diagram._destroyToolBar();\n\t                    } else if (testKey(key, "l")) {\n\t                        diagram.layout();\n\t                        diagram._destroyToolBar();\n\t                    } else if (testKey(key, "d")) {\n\t                        diagram._destroyToolBar();\n\t                        diagram.copy();\n\t                        diagram.paste();\n\t                    }\n\t                } else if (key === 46 || key === 8) {// del: deletion\n\t                    var toRemove = this.diagram._triggerRemove(diagram.select());\n\t                    if (toRemove.length) {\n\t                        this.diagram.remove(toRemove, true);\n\t                        this.diagram._syncChanges();\n\t                        this.diagram._destroyToolBar();\n\t                    }\n\n\t                    return true;\n\t                } else if (key === 27) {// ESC: stop any action\n\t                    this._discardNewConnection();\n\t                    diagram.deselect();\n\t                    diagram._destroyToolBar();\n\t                    return true;\n\t                }\n\n\t            },\n\t            wheel: function (p, meta) {\n\t                var diagram = this.diagram,\n\t                    delta = meta.delta,\n\t                    z = diagram.zoom(),\n\t                    options = diagram.options,\n\t                    zoomRate = options.zoomRate,\n\t                    zoomOptions = { point: p, meta: meta, zoom: z };\n\n\t                if (diagram.trigger(ZOOM_START, zoomOptions)) {\n\t                    return;\n\t                }\n\n\t                if (delta < 0) {\n\t                    z += zoomRate;\n\t                } else {\n\t                    z -= zoomRate;\n\t                }\n\n\t                z = kendo.dataviz.round(Math.max(options.zoomMin, Math.min(options.zoomMax, z)), 2);\n\t                zoomOptions.zoom = z;\n\n\t                diagram.zoom(z, zoomOptions);\n\t                diagram.trigger(ZOOM_END, zoomOptions);\n\n\t                return true;\n\t            },\n\t            setTool: function (tool, index) {\n\t                tool.toolService = this;\n\t                this.tools[index] = tool;\n\t            },\n\n\t            selectSingle: function(item, meta) {\n\t                var diagram = this.diagram;\n\t                var selectable = diagram.options.selectable;\n\t                if (selectable && !item.isSelected && item.options.selectable !== false) {\n\t                    var addToSelection = meta.ctrlKey && selectable.multiple !== false;\n\t                    diagram.select(item, { addToSelection: addToSelection });\n\t                }\n\t            },\n\n\t            _discardNewConnection: function () {\n\t                if (this.newConnection) {\n\t                    this.diagram.remove(this.newConnection);\n\t                    this.newConnection = undefined;\n\t                }\n\t            },\n\t            _activateTool: function (p, meta) {\n\t                for (var i = 0; i < this.tools.length; i++) {\n\t                    var tool = this.tools[i];\n\t                    if (tool.tryActivate(p, meta)) {\n\t                        this.activeTool = tool;\n\t                        break; // activating the first available tool in the loop.\n\t                    }\n\t                }\n\t            },\n\t            _updateCursor: function (p) {\n\t                var element = this.diagram.element;\n\t                var cursor = this.activeTool ? this.activeTool.getCursor(p) : (this.hoveredAdorner ? this.hoveredAdorner._getCursor(p) : (this.hoveredItem ? this.hoveredItem._getCursor(p) : Cursors.arrow));\n\n\t                element.css({cursor: cursor});\n\t                // workaround for IE 7 issue in which the elements overflow the container after setting cursor\n\t                if (browser.msie && browser.version == 7) {\n\t                    element[0].style.cssText = element[0].style.cssText;\n\t                }\n\t            },\n\t            _connectionManipulation: function (connection, disabledShape, isNew) {\n\t                this.activeConnection = connection;\n\t                this.disabledShape = disabledShape;\n\t                if (isNew) {\n\t                    this.newConnection = this.activeConnection;\n\t                } else {\n\t                    this.newConnection = undefined;\n\t                }\n\t            },\n\t            _updateHoveredItem: function (p) {\n\t                var hit = this._hitTest(p);\n\t                var diagram = this.diagram;\n\n\t                if (hit != this.hoveredItem && (!this.disabledShape || hit != this.disabledShape)) {\n\t                    if (this.hoveredItem) {\n\t                        diagram.trigger(MOUSE_LEAVE, { item: this.hoveredItem });\n\t                        this.hoveredItem._hover(false);\n\t                    }\n\n\t                    if (hit && hit.options.enable) {\n\t                        diagram.trigger(MOUSE_ENTER, { item: hit });\n\n\t                        this.hoveredItem = hit; // Shape, connection or connector\n\t                        this.hoveredItem._hover(true);\n\t                    } else {\n\t                        this.hoveredItem = undefined;\n\t                    }\n\t                }\n\t            },\n\t            _removeHover: function () {\n\t                if (this.hoveredItem) {\n\t                    this.hoveredItem._hover(false);\n\t                    this.hoveredItem = undefined;\n\t                }\n\t            },\n\t            _hitTest: function (point) {\n\t                var hit, d = this.diagram, item, i;\n\n\t                // connectors\n\t                if (this._hoveredConnector) {\n\t                    this._hoveredConnector._hover(false);\n\t                    this._hoveredConnector = undefined;\n\t                }\n\t                if (d._connectorsAdorner._visible) {\n\t                    hit = d._connectorsAdorner._hitTest(point);\n\t                    if (hit) {\n\t                        return hit;\n\t                    }\n\t                }\n\n\t                hit = this.diagram._resizingAdorner._hitTest(point);\n\t                if (hit) {\n\t                    this.hoveredAdorner = d._resizingAdorner;\n\t                    if (hit.x !== 0 || hit.y !== 0) { // hit testing for resizers or rotator, otherwise if (0,0) than pass through.\n\t                        return;\n\t                    }\n\t                    hit = undefined;\n\t                } else {\n\t                    this.hoveredAdorner = undefined;\n\t                }\n\n\t                if (!this.activeTool || this.activeTool.type !== "ConnectionTool") {\n\t                    var selectedConnections = []; // only the connections should have higher presence because the connection edit point is on top of connector.\n\t                    // TODO: This should be reworked. The connection adorner should be one for all selected connections and should be hit tested prior the connections and shapes itself.\n\t                    for (i = 0; i < d._selectedItems.length; i++) {\n\t                        item = d._selectedItems[i];\n\t                        if (item instanceof diagram.Connection) {\n\t                            selectedConnections.push(item);\n\t                        }\n\t                    }\n\t                    hit = this._hitTestItems(selectedConnections, point);\n\t                }\n\n\t                return hit || this._hitTestElements(point);\n\t            },\n\n\t            _hitTestElements: function(point) {\n\t                var diagram = this.diagram;\n\t                var shapeHit = this._hitTestItems(diagram.shapes, point);\n\t                var connectionHit = this._hitTestItems(diagram.connections, point);\n\t                var hit;\n\n\t                if ((!this.activeTool || this.activeTool.type != "ConnectionTool") && shapeHit && connectionHit && !hitTestShapeConnectors(shapeHit, point)) {\n\t                    var mainLayer = diagram.mainLayer;\n\t                    var shapeIdx = inArray(shapeHit.visual, mainLayer.children);\n\t                    var connectionIdx = inArray(connectionHit.visual, mainLayer.children);\n\t                    hit = shapeIdx > connectionIdx ? shapeHit : connectionHit;\n\t                }\n\t                return hit || shapeHit || connectionHit;\n\t            },\n\n\t            _hitTestItems: function (array, point) {\n\t                var i, item, hit;\n\t                for (i = array.length - 1; i >= 0; i--) {\n\t                    item = array[i];\n\t                    hit = item._hitTest(point);\n\t                    if (hit) {\n\t                        return hit;\n\t                    }\n\t                }\n\t            }\n\t        });\n\n\t// Routing =========================================\n\n\t        /**\n\t         * Base class for connection routers.\n\t         */\n\t        var ConnectionRouterBase = kendo.Class.extend({\n\t            init: function () {\n\t            }\n\t            /*route: function (connection) {\n\t             },\n\t             hitTest: function (p) {\n\n\t             },\n\t             getBounds: function () {\n\n\t             }*/\n\t        });\n\n\t        /**\n\t         * Base class for polyline and cascading routing.\n\t         */\n\t        var LinearConnectionRouter = ConnectionRouterBase.extend({\n\t            init: function (connection) {\n\t                var that = this;\n\t                ConnectionRouterBase.fn.init.call(that);\n\t                this.connection = connection;\n\t            },\n\t            /**\n\t             * Hit testing for polyline paths.\n\t             */\n\t            hitTest: function (p) {\n\t                var rec = this.getBounds().inflate(HIT_TEST_DISTANCE);\n\t                if (!rec.contains(p)) {\n\t                    return false;\n\t                }\n\t                return diagram.Geometry.distanceToPolyline(p, this.connection.allPoints()) < HIT_TEST_DISTANCE;\n\t            },\n\n\t            /**\n\t             * Bounds of a polyline.\n\t             * @returns {kendo.dataviz.diagram.Rect}\n\t             */\n\t            getBounds: function () {\n\t                var points = this.connection.allPoints(),\n\t                    s = points[0],\n\t                    e = points[points.length - 1],\n\t                    right = Math.max(s.x, e.x),\n\t                    left = Math.min(s.x, e.x),\n\t                    top = Math.min(s.y, e.y),\n\t                    bottom = Math.max(s.y, e.y);\n\n\t                for (var i = 1; i < points.length - 1; ++i) {\n\t                    right = Math.max(right, points[i].x);\n\t                    left = Math.min(left, points[i].x);\n\t                    top = Math.min(top, points[i].y);\n\t                    bottom = Math.max(bottom, points[i].y);\n\t                }\n\n\t                return new Rect(left, top, right - left, bottom - top);\n\t            }\n\t        });\n\n\t        /**\n\t         * A simple poly-linear routing which does not alter the intermediate points.\n\t         * Does hold the underlying hit, bounds....logic.\n\t         * @type {*|Object|void|extend|Zepto.extend|b.extend}\n\t         */\n\t        var PolylineRouter = LinearConnectionRouter.extend({\n\t            init: function (connection) {\n\t                var that = this;\n\t                LinearConnectionRouter.fn.init.call(that);\n\t                this.connection = connection;\n\t            },\n\t            route: function () {\n\t                // just keep the points as is\n\t            }\n\t        });\n\n\t        var CascadingRouter = LinearConnectionRouter.extend({\n\t            SAME_SIDE_DISTANCE_RATIO: 5,\n\n\t            init: function (connection) {\n\t                var that = this;\n\t                LinearConnectionRouter.fn.init.call(that);\n\t                this.connection = connection;\n\t            },\n\n\t            routePoints: function(start, end, sourceConnector, targetConnector) {\n\t                var result;\n\n\t                if (sourceConnector && targetConnector) {\n\t                    result = this._connectorPoints(start, end, sourceConnector, targetConnector);\n\t                } else {\n\t                    result = this._floatingPoints(start, end, sourceConnector);\n\t                }\n\t                return result;\n\t            },\n\n\t            route: function () {\n\t                var sourceConnector = this.connection._resolvedSourceConnector;\n\t                var targetConnector = this.connection._resolvedTargetConnector;\n\t                var start = this.connection.sourcePoint();\n\t                var end = this.connection.targetPoint();\n\t                var points = this.routePoints(start, end, sourceConnector, targetConnector);\n\t                this.connection.points(points);\n\t            },\n\n\t            _connectorSides: [{\n\t                name: "Top",\n\t                axis: "y",\n\t                boundsPoint: "topLeft",\n\t                secondarySign: 1\n\t            }, {\n\t                name: "Left",\n\t                axis: "x",\n\t                boundsPoint: "topLeft",\n\t                secondarySign: 1\n\t            }, {\n\t                name: "Bottom",\n\t                axis: "y",\n\t                boundsPoint: "bottomRight",\n\t                secondarySign: -1\n\t            }, {\n\t                name: "Right",\n\t                axis: "x",\n\t                boundsPoint: "bottomRight",\n\t                secondarySign: -1\n\t            }],\n\n\t            _connectorSide: function(connector, targetPoint) {\n\t                var position = connector.position();\n\t                var shapeBounds = connector.shape.bounds(ROTATED);\n\t                var bounds = {\n\t                    topLeft: shapeBounds.topLeft(),\n\t                    bottomRight: shapeBounds.bottomRight()\n\t                };\n\t                var sides = this._connectorSides;\n\t                var min = util.MAX_NUM;\n\t                var sideDistance;\n\t                var minSide;\n\t                var axis;\n\t                var side;\n\t                for (var idx = 0; idx < sides.length; idx++) {\n\t                    side = sides[idx];\n\t                    axis = side.axis;\n\t                    sideDistance = Math.round(Math.abs(position[axis] - bounds[side.boundsPoint][axis]));\n\t                    if (sideDistance < min) {\n\t                        min = sideDistance;\n\t                        minSide = side;\n\t                    } else if (sideDistance === min &&\n\t                        (position[axis] - targetPoint[axis]) * side.secondarySign > (position[minSide.axis] - targetPoint[minSide.axis]) * minSide.secondarySign) {\n\t                        minSide = side;\n\t                    }\n\t                }\n\t                return minSide.name;\n\t            },\n\n\t            _sameSideDistance: function(connector) {\n\t                var bounds = connector.shape.bounds(ROTATED);\n\t                return Math.min(bounds.width, bounds.height) / this.SAME_SIDE_DISTANCE_RATIO;\n\t            },\n\n\t            _connectorPoints: function(start, end, sourceConnector, targetConnector) {\n\t                var sourceConnectorSide = this._connectorSide(sourceConnector, end);\n\t                var targetConnectorSide = this._connectorSide(targetConnector, start);\n\t                var deltaX = end.x - start.x;\n\t                var deltaY = end.y - start.y;\n\t                var sameSideDistance = this._sameSideDistance(sourceConnector);\n\t                var result = [];\n\t                var pointX, pointY;\n\n\t                if (sourceConnectorSide === TOP || sourceConnectorSide == BOTTOM) {\n\t                    if (targetConnectorSide == TOP || targetConnectorSide == BOTTOM) {\n\t                        if (sourceConnectorSide == targetConnectorSide) {\n\t                            if (sourceConnectorSide == TOP) {\n\t                                pointY = Math.min(start.y, end.y) - sameSideDistance;\n\t                            } else {\n\t                                pointY = Math.max(start.y, end.y) + sameSideDistance;\n\t                            }\n\t                            result = [new Point(start.x, pointY), new Point(end.x, pointY)];\n\t                        } else {\n\t                            result = [new Point(start.x, start.y + deltaY / 2), new Point(end.x, start.y + deltaY / 2)];\n\t                        }\n\t                    } else {\n\t                        result = [new Point(start.x, end.y)];\n\t                    }\n\t                } else {\n\t                    if (targetConnectorSide == LEFT || targetConnectorSide == RIGHT) {\n\t                        if (sourceConnectorSide == targetConnectorSide) {\n\t                            if (sourceConnectorSide == LEFT) {\n\t                                pointX = Math.min(start.x, end.x) - sameSideDistance;\n\t                            } else {\n\t                                pointX = Math.max(start.x, end.x) + sameSideDistance;\n\t                            }\n\t                            result = [new Point(pointX, start.y), new Point(pointX, end.y)];\n\t                        } else {\n\t                            result = [new Point(start.x + deltaX / 2, start.y), new Point(start.x + deltaX / 2, start.y + deltaY)];\n\t                        }\n\t                    } else {\n\t                        result = [new Point(end.x, start.y)];\n\t                    }\n\t                }\n\t                return result;\n\t            },\n\n\t            _floatingPoints: function(start, end, sourceConnector) {\n\t                var sourceConnectorSide = sourceConnector ? this._connectorSide(sourceConnector, end) : null;\n\t                var cascadeStartHorizontal = this._startHorizontal(start, end, sourceConnectorSide);\n\t                var points = [start, start, end, end];\n\t                var deltaX = end.x - start.x;\n\t                var deltaY = end.y - start.y;\n\t                var length = points.length;\n\t                var shiftX;\n\t                var shiftY;\n\n\t                // note that this is more generic than needed for only two intermediate points.\n\t                for (var idx = 1; idx < length - 1; ++idx) {\n\t                    if (cascadeStartHorizontal) {\n\t                        if (idx % 2 !== 0) {\n\t                            shiftX = deltaX / (length / 2);\n\t                            shiftY = 0;\n\t                        }\n\t                        else {\n\t                            shiftX = 0;\n\t                            shiftY = deltaY / ((length - 1) / 2);\n\t                        }\n\t                    }\n\t                    else {\n\t                        if (idx % 2 !== 0) {\n\t                            shiftX = 0;\n\t                            shiftY = deltaY / (length / 2);\n\t                        }\n\t                        else {\n\t                            shiftX = deltaX / ((length - 1) / 2);\n\t                            shiftY = 0;\n\t                        }\n\t                    }\n\t                    points[idx] = new Point(points[idx - 1].x + shiftX, points[idx - 1].y + shiftY);\n\t                }\n\t                // need to fix the wrong 1.5 factor of the last intermediate point\n\t                idx--;\n\t                if ((cascadeStartHorizontal && (idx % 2 !== 0)) || (!cascadeStartHorizontal && (idx % 2 === 0))) {\n\t                    points[length - 2] = new Point(points[length - 1].x, points[length - 2].y);\n\t                } else {\n\t                    points[length - 2] = new Point(points[length - 2].x, points[length - 1].y);\n\t                }\n\n\t                return [points[1], points[2]];\n\t            },\n\n\t            _startHorizontal: function (start, end, sourceSide) {\n\t                var horizontal;\n\t                if (sourceSide !== null && (sourceSide === RIGHT || sourceSide === LEFT)) {\n\t                    horizontal = true;\n\t                } else {\n\t                    horizontal = Math.abs(start.x - end.x) > Math.abs(start.y - end.y);\n\t                }\n\n\t                return horizontal;\n\t            }\n\t        });\n\n\t// Adorners =========================================\n\n\t        var AdornerBase = Class.extend({\n\t            init: function (diagram, options) {\n\t                var that = this;\n\t                that.diagram = diagram;\n\t                that.options = deepExtend({}, that.options, options);\n\t                that.visual = new Group();\n\t                that.diagram._adorners.push(that);\n\t            },\n\t            refresh: function () {\n\n\t            }\n\t        });\n\n\t        var ConnectionEditAdorner = AdornerBase.extend({\n\t            init: function (connection, options) {\n\t                var that = this, diagram;\n\t                that.connection = connection;\n\t                diagram = that.connection.diagram;\n\t                that._ts = diagram.toolService;\n\t                AdornerBase.fn.init.call(that, diagram, options);\n\t                var sp = that.connection.sourcePoint();\n\t                var tp = that.connection.targetPoint();\n\t                that.spVisual = new Circle(deepExtend(that.options.handles, { center: sp }));\n\t                that.epVisual = new Circle(deepExtend(that.options.handles, { center: tp }));\n\t                that.visual.append(that.spVisual);\n\t                that.visual.append(that.epVisual);\n\t            },\n\n\t            options: {\n\t                handles: {}\n\t            },\n\n\t            _getCursor: function () {\n\t                return Cursors.move;\n\t            },\n\n\t            start: function (p) {\n\t                this.handle = this._hitTest(p);\n\t                this.startPoint = p;\n\t                this._initialSource = this.connection.source();\n\t                this._initialTarget = this.connection.target();\n\t                switch (this.handle) {\n\t                    case -1:\n\t                        if (this.connection.targetConnector) {\n\t                            this._ts._connectionManipulation(this.connection, this.connection.targetConnector.shape);\n\t                        }\n\t                        break;\n\t                    case 1:\n\t                        if (this.connection.sourceConnector) {\n\t                            this._ts._connectionManipulation(this.connection, this.connection.sourceConnector.shape);\n\t                        }\n\t                        break;\n\t                }\n\t            },\n\n\t            move: function (handle, p) {\n\t                switch (handle) {\n\t                    case -1:\n\t                        this.connection.source(p);\n\t                        break;\n\t                    case 1:\n\t                        this.connection.target(p);\n\t                        break;\n\t                    default:\n\t                        var delta = p.minus(this.startPoint);\n\t                        this.startPoint = p;\n\t                        if (!this.connection.sourceConnector) {\n\t                            this.connection.source(this.connection.sourcePoint().plus(delta));\n\t                        }\n\t                        if (!this.connection.targetConnector) {\n\t                            this.connection.target(this.connection.targetPoint().plus(delta));\n\t                        }\n\t                        break;\n\t                }\n\t                this.refresh();\n\t                return true;\n\t            },\n\n\t            stop: function (p) {\n\t                var ts = this.diagram.toolService, item = ts.hoveredItem, target;\n\t                if (ts._hoveredConnector) {\n\t                    target = ts._hoveredConnector._c;\n\t                } else if (item && item instanceof diagram.Shape) {\n\t                    target = item.getConnector(AUTO) || item.getConnector(p);\n\t                } else {\n\t                    target = p;\n\t                }\n\n\t                if (this.handle === -1) {\n\t                    this.connection.source(target);\n\t                } else if (this.handle === 1) {\n\t                    this.connection.target(target);\n\t                }\n\n\t                this.handle = undefined;\n\t                this._ts._connectionManipulation();\n\t                return new ConnectionEditUndoUnit(this.connection, this._initialSource, this._initialTarget);\n\t            },\n\n\t            _hitTest: function (point) {\n\t                var sourcePoint = this.connection.sourcePoint();\n\t                var targetPoint = this.connection.targetPoint();\n\t                var radiusX = this.options.handles.width / 2 + HIT_TEST_DISTANCE;\n\t                var radiusY = this.options.handles.height / 2 + HIT_TEST_DISTANCE;\n\t                var sourcePointDistance = sourcePoint.distanceTo(point);\n\t                var targetPointDistance = targetPoint.distanceTo(point);\n\t                var sourceHandle = new Rect(sourcePoint.x, sourcePoint.y).inflate(radiusX, radiusY).contains(point);\n\t                var targetHandle = new Rect(targetPoint.x, targetPoint.y).inflate(radiusX, radiusY).contains(point);\n\t                var handle = 0;\n\n\t                if (sourceHandle && (!targetHandle || sourcePointDistance < targetPointDistance)) {\n\t                    handle = -1;\n\t                } else if (targetHandle && (!sourceHandle || targetPointDistance < sourcePointDistance)) {\n\t                    handle = 1;\n\t                }\n\n\t                return handle;\n\t            },\n\n\t            refresh: function () {\n\t                this.spVisual.redraw({ center: this.diagram.modelToLayer(this.connection.sourcePoint()) });\n\t                this.epVisual.redraw({ center: this.diagram.modelToLayer(this.connection.targetPoint()) });\n\t            }\n\t        });\n\n\t        var ConnectorsAdorner = AdornerBase.extend({\n\t            init: function (diagram, options) {\n\t                var that = this;\n\t                AdornerBase.fn.init.call(that, diagram, options);\n\t                that._refreshHandler = function (e) {\n\t                    if (e.item == that.shape) {\n\t                        that.refresh();\n\t                    }\n\t                };\n\t            },\n\n\t            show: function (shape) {\n\t                var that = this, len, i, ctr;\n\t                that._visible = true;\n\t                that.shape = shape;\n\t                that.diagram.bind(ITEMBOUNDSCHANGE, that._refreshHandler);\n\t                len = shape.connectors.length;\n\t                that.connectors = [];\n\t                that._clearVisual();\n\t                for (i = 0; i < len; i++) {\n\t                    ctr = new ConnectorVisual(shape.connectors[i]);\n\t                    that.connectors.push(ctr);\n\t                    that.visual.append(ctr.visual);\n\t                }\n\t                that.visual.visible(true);\n\t                that.refresh();\n\t            },\n\n\t            _clearVisual: function() {\n\t                var that = this;\n\t                if(that.diagram._cachedTouchTarget) {\n\t                    that._keepCachedTouchTarget();\n\t                } else {\n\t                    that.visual.clear();\n\t                }\n\t            },\n\n\t            _keepCachedTouchTarget: function () {\n\t                var that = this,\n\t                    visualChildren = that.visual.children;\n\t                var childrenCount = visualChildren.length;\n\t                var index = inArray(that.diagram._cachedTouchTarget, visualChildren);\n\t                for (var i = childrenCount - 1; i >= 0; i--) {\n\t                    if(i == index) {\n\t                        continue;\n\t                    }\n\t                    that.visual.remove(visualChildren[i]);\n\t                }\n\t            },\n\n\t            destroy: function () {\n\t                var that = this;\n\t                that.diagram.unbind(ITEMBOUNDSCHANGE, that._refreshHandler);\n\t                that.shape = undefined;\n\t                that._visible = undefined;\n\t                that.visual.visible(false);\n\t            },\n\n\t            _hitTest: function (p) {\n\t                var ctr, i;\n\t                for (i = 0; i < this.connectors.length; i++) {\n\t                    ctr = this.connectors[i];\n\t                    if (ctr._hitTest(p)) {\n\t                        ctr._hover(true);\n\t                        this.diagram.toolService._hoveredConnector = ctr;\n\t                        break;\n\t                    }\n\t                }\n\t            },\n\n\t            refresh: function () {\n\t                if (this.shape) {\n\t                    var bounds = this.shape.bounds();\n\t                        bounds = this.diagram.modelToLayer(bounds);\n\t                    this.visual.position(bounds.topLeft());\n\t                    $.each(this.connectors, function () {\n\t                        this.refresh();\n\t                    });\n\t                }\n\t            }\n\t        });\n\n\t        function hitToOppositeSide(hit, bounds) {\n\t            var result;\n\n\t            if (hit.x == -1 && hit.y == -1) {\n\t                result = bounds.bottomRight();\n\t            } else if (hit.x == 1 && hit.y == 1) {\n\t                result = bounds.topLeft();\n\t            } else if (hit.x == -1 && hit.y == 1) {\n\t                result = bounds.topRight();\n\t            } else if (hit.x == 1 && hit.y == -1) {\n\t                result = bounds.bottomLeft();\n\t            } else if (hit.x === 0 && hit.y == -1) {\n\t                result = bounds.bottom();\n\t            } else if (hit.x === 0 && hit.y == 1) {\n\t                result = bounds.top();\n\t            } else if (hit.x == 1 && hit.y === 0) {\n\t                result = bounds.left();\n\t            } else if (hit.x == -1 && hit.y === 0) {\n\t                result = bounds.right();\n\t            }\n\n\t            return result;\n\t        }\n\n\t        var ResizingAdorner = AdornerBase.extend({\n\t            init: function (diagram, options) {\n\t                var that = this;\n\t                AdornerBase.fn.init.call(that, diagram, options);\n\t                that._manipulating = false;\n\t                that.map = [];\n\t                that.shapes = [];\n\n\t                that._initSelection();\n\t                that._createHandles();\n\t                that.redraw();\n\t                that.diagram.bind("select", function (e) {\n\t                    that._initialize(e.selected);\n\t                });\n\n\t                that._refreshHandler = function () {\n\t                    if (!that._internalChange) {\n\t                        that.refreshBounds();\n\t                        that.refresh();\n\t                    }\n\t                };\n\n\t                that._rotatedHandler = function () {\n\t                    if (that.shapes.length == 1) {\n\t                        that._angle = that.shapes[0].rotate().angle;\n\t                    }\n\t                    that._refreshHandler();\n\t                };\n\n\t                that.diagram.bind(ITEMBOUNDSCHANGE, that._refreshHandler).bind(ITEMROTATE, that._rotatedHandler);\n\t                that.refreshBounds();\n\t                that.refresh();\n\t            },\n\n\t            options: {\n\t                handles: {\n\t                    fill: {\n\t                        color: "#fff"\n\t                    },\n\t                    stroke: {\n\t                        color: "#282828"\n\t                    },\n\t                    height: 7,\n\t                    width: 7,\n\t                    hover: {\n\t                        fill: {\n\t                            color: "#282828"\n\t                        },\n\t                        stroke: {\n\t                            color: "#282828"\n\t                        }\n\t                    }\n\t                },\n\t                selectable: {\n\t                    stroke: {\n\t                        color: "#778899",\n\t                        width: 1,\n\t                        dashType: "dash"\n\t                    },\n\t                    fill: {\n\t                        color: TRANSPARENT\n\t                    }\n\t                },\n\t                offset: 10\n\t            },\n\n\t            _initSelection: function() {\n\t                var that = this;\n\t                var diagram = that.diagram;\n\t                var selectable = diagram.options.selectable;\n\t                var options = deepExtend({}, that.options.selectable, selectable);\n\t                that.rect = new Rectangle(options);\n\t                that.visual.append(that.rect);\n\t            },\n\n\t            _resizable: function() {\n\t                return this.options.editable && this.options.editable.resize !== false;\n\t            },\n\n\t            _handleOptions: function() {\n\t                return (this.options.editable.resize || {}).handles || this.options.handles;\n\t            },\n\n\t            _createHandles: function() {\n\t                var handles, item, y, x;\n\n\t                if (this._resizable()) {\n\t                    handles = this._handleOptions();\n\t                    for (x = -1; x <= 1; x++) {\n\t                        for (y = -1; y <= 1; y++) {\n\t                            if ((x !== 0) || (y !== 0)) { // (0, 0) element, (-1, -1) top-left, (+1, +1) bottom-right\n\t                                item = new Rectangle(handles);\n\t                                item.drawingElement._hover = proxy(this._hover, this);\n\t                                this.map.push({ x: x, y: y, visual: item });\n\t                                this.visual.append(item);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            },\n\n\t            bounds: function (value) {\n\t                if (value) {\n\t                    this._innerBounds = value.clone();\n\t                    this._bounds = this.diagram.modelToLayer(value).inflate(this.options.offset, this.options.offset);\n\t                } else {\n\t                    return this._bounds;\n\t                }\n\t            },\n\n\t            _hitTest: function (p) {\n\t                var tp = this.diagram.modelToLayer(p),\n\t                    i, hit, handleBounds, handlesCount = this.map.length, handle;\n\n\t                if (this._angle) {\n\t                    tp = tp.clone().rotate(this._bounds.center(), this._angle);\n\t                }\n\n\t                if (this._resizable()) {\n\t                    for (i = 0; i < handlesCount; i++) {\n\t                        handle = this.map[i];\n\t                        hit = new Point(handle.x, handle.y);\n\t                        handleBounds = this._getHandleBounds(hit); //local coordinates\n\t                        handleBounds.offset(this._bounds.x, this._bounds.y);\n\t                        if (handleBounds.contains(tp)) {\n\t                            return hit;\n\t                        }\n\t                    }\n\t                }\n\n\t                if (this._bounds.contains(tp)) {\n\t                    return new Point(0, 0);\n\t                }\n\t            },\n\n\t            _getHandleBounds: function (p) {\n\t                if (this._resizable()) {\n\t                    var handles = this._handleOptions(),\n\t                        w = handles.width,\n\t                        h = handles.height,\n\t                        r = new Rect(0, 0, w, h);\n\n\t                    if (p.x < 0) {\n\t                        r.x = - w / 2;\n\t                    } else if (p.x === 0) {\n\t                        r.x = Math.floor(this._bounds.width / 2) - w / 2;\n\t                    } else if (p.x > 0) {\n\t                        r.x = this._bounds.width + 1.0 - w / 2;\n\t                    } if (p.y < 0) {\n\t                        r.y = - h / 2;\n\t                    } else if (p.y === 0) {\n\t                        r.y = Math.floor(this._bounds.height / 2) - h / 2;\n\t                    } else if (p.y > 0) {\n\t                        r.y = this._bounds.height + 1.0 - h / 2;\n\t                    }\n\n\t                    return r;\n\t                }\n\t            },\n\n\t            _getCursor: function (point) {\n\t                var hit = this._hitTest(point);\n\t                if (hit && (hit.x >= -1) && (hit.x <= 1) && (hit.y >= -1) && (hit.y <= 1) && this._resizable()) {\n\t                    var angle = this._angle;\n\t                    if (angle) {\n\t                        angle = 360 - angle;\n\t                        hit.rotate(new Point(0, 0), angle);\n\t                        hit = new Point(Math.round(hit.x), Math.round(hit.y));\n\t                    }\n\n\t                    if (hit.x == -1 && hit.y == -1) {\n\t                        return "nw-resize";\n\t                    }\n\t                    if (hit.x == 1 && hit.y == 1) {\n\t                        return "se-resize";\n\t                    }\n\t                    if (hit.x == -1 && hit.y == 1) {\n\t                        return "sw-resize";\n\t                    }\n\t                    if (hit.x == 1 && hit.y == -1) {\n\t                        return "ne-resize";\n\t                    }\n\t                    if (hit.x === 0 && hit.y == -1) {\n\t                        return "n-resize";\n\t                    }\n\t                    if (hit.x === 0 && hit.y == 1) {\n\t                        return "s-resize";\n\t                    }\n\t                    if (hit.x == 1 && hit.y === 0) {\n\t                        return "e-resize";\n\t                    }\n\t                    if (hit.x == -1 && hit.y === 0) {\n\t                        return "w-resize";\n\t                    }\n\t                }\n\t                return this._manipulating ? Cursors.move : Cursors.select;\n\t            },\n\n\t            _initialize: function() {\n\t                var that = this, i, item,\n\t                    items = that.diagram.select();\n\n\t                that.shapes = [];\n\t                for (i = 0; i < items.length; i++) {\n\t                    item = items[i];\n\t                    if (item instanceof diagram.Shape) {\n\t                        that.shapes.push(item);\n\t                        item._rotationOffset = new Point();\n\t                    }\n\t                }\n\n\t                that._angle = that.shapes.length == 1 ? that.shapes[0].rotate().angle : 0;\n\t                that._startAngle = that._angle;\n\t                that._rotates();\n\t                that._positions();\n\t                that.refreshBounds();\n\t                that.refresh();\n\t                that.redraw();\n\t            },\n\n\t            _rotates: function () {\n\t                var that = this, i, shape;\n\t                that.initialRotates = [];\n\t                for (i = 0; i < that.shapes.length; i++) {\n\t                    shape = that.shapes[i];\n\t                    that.initialRotates.push(shape.rotate().angle);\n\t                }\n\t            },\n\n\t            _positions: function () {\n\t                var that = this, i, shape;\n\t                that.initialStates = [];\n\t                for (i = 0; i < that.shapes.length; i++) {\n\t                    shape = that.shapes[i];\n\t                    that.initialStates.push(shape.bounds());\n\t                }\n\t            },\n\n\t            _hover: function(value, element) {\n\t                if (this._resizable()) {\n\t                    var handleOptions = this._handleOptions(),\n\t                        hover = handleOptions.hover,\n\t                        stroke = handleOptions.stroke,\n\t                        fill = handleOptions.fill;\n\n\t                    if (value && Utils.isDefined(hover.stroke)) {\n\t                        stroke = deepExtend({}, stroke, hover.stroke);\n\t                    }\n\n\t                    if (value && Utils.isDefined(hover.fill)) {\n\t                        fill = hover.fill;\n\t                    }\n\t                    element.stroke(stroke.color, stroke.width, stroke.opacity);\n\t                    element.fill(fill.color, fill.opacity);\n\t                }\n\t            },\n\n\t            start: function (p) {\n\t                this._sp = p;\n\t                this._cp = p;\n\t                this._lp = p;\n\t                this._manipulating = true;\n\t                this._internalChange = true;\n\t                this.shapeStates = [];\n\t                for (var i = 0; i < this.shapes.length; i++) {\n\t                    var shape = this.shapes[i];\n\t                    this.shapeStates.push(shape.bounds());\n\t                }\n\t            },\n\n\t            redraw: function () {\n\t                var i, handle,\n\t                    visibleHandles = this._resizable();\n\n\t                for (i = 0; i < this.map.length; i++) {\n\t                    handle = this.map[i];\n\t                    handle.visual.visible(visibleHandles);\n\t                }\n\t            },\n\n\t            angle: function(value) {\n\t                if (defined(value)) {\n\t                    this._angle = value;\n\t                }\n\n\t                return this._angle;\n\t            },\n\n\t            rotate: function() {\n\t                var center = this._innerBounds.center();\n\t                var currentAngle = this.angle();\n\t                this._internalChange = true;\n\t                for (var i = 0; i < this.shapes.length; i++) {\n\t                    var shape = this.shapes[i];\n\t                    currentAngle = (currentAngle + this.initialRotates[i] - this._startAngle) % 360;\n\t                    shape.rotate(currentAngle, center);\n\t                }\n\t                this.refresh();\n\t            },\n\n\t            move: function (handle, p) {\n\t                var delta, dragging,\n\t                    dtl = new Point(),\n\t                    dbr = new Point(),\n\t                    bounds, center, shape,\n\t                    i, angle, newBounds,\n\t                    changed = 0, staticPoint,\n\t                    scaleX, scaleY;\n\n\t                if (handle.y === -2 && handle.x === -1) {\n\t                    center = this._innerBounds.center();\n\t                    this._angle = this._truncateAngle(Utils.findAngle(center, p));\n\t                    for (i = 0; i < this.shapes.length; i++) {\n\t                        shape = this.shapes[i];\n\t                        angle = (this._angle + this.initialRotates[i] - this._startAngle) % 360;\n\t                        shape.rotate(angle, center);\n\t                        if (shape.hasOwnProperty("layout")) {\n\t                            shape.layout(shape);\n\t                        }\n\t                        this._rotating = true;\n\t                    }\n\t                    this.refresh();\n\t                } else {\n\t                    if (this.shouldSnap()) {\n\t                        var thr = this._truncateDistance(p.minus(this._lp));\n\t                        // threshold\n\t                        if (thr.x === 0 && thr.y === 0) {\n\t                            this._cp = p;\n\t                            return;\n\t                        }\n\t                        delta = thr;\n\t                        this._lp = new Point(this._lp.x + thr.x, this._lp.y + thr.y);\n\t                    } else {\n\t                        delta = p.minus(this._cp);\n\t                    }\n\n\t                    if (this.isDragHandle(handle)) {\n\t                        dbr = dtl = delta; // dragging\n\t                        dragging = true;\n\t                    } else {\n\t                        if (this._angle) { // adjust the delta so that resizers resize in the correct direction after rotation.\n\t                            delta.rotate(new Point(0, 0), this._angle);\n\t                        }\n\t                        if (handle.x == -1) {\n\t                            dtl.x = delta.x;\n\t                        } else if (handle.x == 1) {\n\t                            dbr.x = delta.x;\n\t                        }\n\t                        if (handle.y == -1) {\n\t                            dtl.y = delta.y;\n\t                        } else if (handle.y == 1) {\n\t                            dbr.y = delta.y;\n\t                        }\n\t                    }\n\n\t                    if (!dragging) {\n\t                        staticPoint = hitToOppositeSide(handle, this._innerBounds);\n\t                        scaleX = (this._innerBounds.width + delta.x * handle.x) / this._innerBounds.width;\n\t                        scaleY = (this._innerBounds.height + delta.y * handle.y) / this._innerBounds.height;\n\t                    }\n\n\t                    for (i = 0; i < this.shapes.length; i++) {\n\t                        shape = this.shapes[i];\n\t                        bounds = shape.bounds();\n\t                        if (dragging) {\n\t                            if (!canDrag(shape)) {\n\t                                continue;\n\t                            }\n\t                            newBounds = this._displaceBounds(bounds, dtl, dbr, dragging);\n\t                        } else {\n\t                            newBounds = bounds.clone();\n\t                            newBounds.scale(scaleX, scaleY, staticPoint, this._innerBounds.center(), shape.rotate().angle);\n\t                            var newCenter = newBounds.center(); // fixes the new rotation center.\n\t                            newCenter.rotate(bounds.center(), -this._angle);\n\t                            newBounds = new Rect(newCenter.x - newBounds.width / 2, newCenter.y - newBounds.height / 2, newBounds.width, newBounds.height);\n\t                        }\n\t                        if (newBounds.width >= shape.options.minWidth && newBounds.height >= shape.options.minHeight) { // if we up-size very small shape\n\t                            var oldBounds = bounds;\n\t                            shape.bounds(newBounds);\n\t                            if (shape.hasOwnProperty("layout")) {\n\t                                shape.layout(shape, oldBounds, newBounds);\n\t                            }\n\t                            if (oldBounds.width !== newBounds.width || oldBounds.height !== newBounds.height) {\n\t                                shape.rotate(shape.rotate().angle); // forces the rotation to update it\'s rotation center\n\t                            }\n\t                            changed += 1;\n\t                        }\n\t                    }\n\n\t                    if (changed) {\n\t                        if (changed == i) {\n\t                            newBounds = this._displaceBounds(this._innerBounds, dtl, dbr, dragging);\n\t                            this.bounds(newBounds);\n\t                        } else {\n\t                            this.refreshBounds();\n\t                        }\n\t                        this.refresh();\n\t                    }\n\n\t                    this._positions();\n\t                }\n\n\t                this._cp = p;\n\t            },\n\n\t            isDragHandle: function(handle) {\n\t                return handle.x === 0 && handle.y === 0;\n\t            },\n\n\t            cancel: function() {\n\t                var shapes = this.shapes;\n\t                var states = this.shapeStates;\n\t                for (var idx = 0; idx < shapes.length; idx++) {\n\t                    shapes[idx].bounds(states[idx]);\n\t                }\n\t                this.refreshBounds();\n\t                this.refresh();\n\t                this._manipulating = undefined;\n\t                this._internalChange = undefined;\n\t                this._rotating = undefined;\n\t            },\n\n\t            _truncatePositionToGuides: function (bounds) {\n\t                if (this.diagram.ruler) {\n\t                    return this.diagram.ruler.truncatePositionToGuides(bounds);\n\t                }\n\t                return bounds;\n\t            },\n\n\t            _truncateSizeToGuides: function (bounds) {\n\t                if (this.diagram.ruler) {\n\t                    return this.diagram.ruler.truncateSizeToGuides(bounds);\n\t                }\n\t                return bounds;\n\t            },\n\n\t            _truncateAngle: function (a) {\n\t                var snap = this.snapOptions();\n\t                var snapAngle = Math.max(snap.angle || DEFAULT_SNAP_ANGLE, MIN_SNAP_ANGLE);\n\t                return snap ? Math.floor((a % 360) / snapAngle) * snapAngle : (a % 360);\n\t            },\n\n\t            _truncateDistance: function (d) {\n\t                if (d instanceof diagram.Point) {\n\t                    return new diagram.Point(this._truncateDistance(d.x), this._truncateDistance(d.y));\n\t                } else {\n\t                    var snap = this.snapOptions() || {};\n\t                    var snapSize = Math.max(snap.size || DEFAULT_SNAP_SIZE, MIN_SNAP_SIZE);\n\t                    return snap ? Math.floor(d / snapSize) * snapSize : d;\n\t                }\n\t            },\n\n\t            snapOptions: function() {\n\t                var editable = this.diagram.options.editable;\n\t                var snap = ((editable || {}).drag || {}).snap || {};\n\t                return snap;\n\t            },\n\n\t            shouldSnap: function() {\n\t                var editable = this.diagram.options.editable;\n\t                var drag = (editable || {}).drag;\n\t                var snap = (drag || {}).snap;\n\t                return editable !== false && drag !== false && snap !== false;\n\t            },\n\n\t            _displaceBounds: function (bounds, dtl, dbr, dragging) {\n\t                var tl = bounds.topLeft().plus(dtl),\n\t                    br = bounds.bottomRight().plus(dbr),\n\t                    newBounds = Rect.fromPoints(tl, br),\n\t                    newCenter;\n\t                if (!dragging) {\n\t                    newCenter = newBounds.center();\n\t                    newCenter.rotate(bounds.center(), -this._angle);\n\t                    newBounds = new Rect(newCenter.x - newBounds.width / 2, newCenter.y - newBounds.height / 2, newBounds.width, newBounds.height);\n\t                }\n\t                return newBounds;\n\t            },\n\n\t            stop: function () {\n\t                var unit, i, shape;\n\t                if (this._cp != this._sp) {\n\t                    if (this._rotating) {\n\t                        unit = new RotateUnit(this, this.shapes, this.initialRotates);\n\t                        this._rotating = false;\n\t                    } else if (this._diffStates()) {\n\t                        if (this.diagram.ruler) {\n\t                            for (i = 0; i < this.shapes.length; i++) {\n\t                                shape = this.shapes[i];\n\t                                var bounds = shape.bounds();\n\t                                bounds = this._truncateSizeToGuides(this._truncatePositionToGuides(bounds));\n\t                                shape.bounds(bounds);\n\t                                this.refreshBounds();\n\t                                this.refresh();\n\t                            }\n\t                        }\n\t                        for (i = 0; i < this.shapes.length; i++) {\n\t                            shape = this.shapes[i];\n\t                            shape.updateModel();\n\t                        }\n\t                        unit = new TransformUnit(this.shapes, this.shapeStates, this);\n\t                        this.diagram._syncShapeChanges();\n\t                    }\n\t                }\n\n\t                this._manipulating = undefined;\n\t                this._internalChange = undefined;\n\t                this._rotating = undefined;\n\t                return unit;\n\t            },\n\n\t            _diffStates: function() {\n\t                var shapes = this.shapes;\n\t                var states = this.shapeStates;\n\t                for (var idx = 0; idx < shapes.length; idx++) {\n\t                    if (!shapes[idx].bounds().equals(states[idx])) {\n\t                        return true;\n\t                    }\n\t                }\n\t                return false;\n\t            },\n\n\t            refreshBounds: function () {\n\t                var bounds = this.shapes.length == 1 ?\n\t                    this.shapes[0].bounds().clone() :\n\t                    this.diagram.boundingBox(this.shapes, true);\n\n\t                this.bounds(bounds);\n\t            },\n\n\t            refresh: function () {\n\t                var that = this, b, bounds;\n\t                if (this.shapes.length > 0) {\n\t                    bounds = this.bounds();\n\t                    this.visual.visible(true);\n\t                    this.visual.position(bounds.topLeft());\n\t                    $.each(this.map, function () {\n\t                        b = that._getHandleBounds(new Point(this.x, this.y));\n\t                        this.visual.position(b.topLeft());\n\t                    });\n\t                    this.visual.position(bounds.topLeft());\n\n\t                    var center = new Point(bounds.width / 2, bounds.height / 2);\n\t                    this.visual.rotate(this._angle, center);\n\t                    this.rect.redraw({ width: bounds.width, height: bounds.height });\n\t                    if (this.rotationThumb) {\n\t                        var thumb = this.options.editable.rotate.thumb;\n\t                        this._rotationThumbBounds = new Rect(bounds.center().x, bounds.y + thumb.y, 0, 0).inflate(thumb.width);\n\t                        this.rotationThumb.redraw({ x: bounds.width / 2 - thumb.width / 2 });\n\t                    }\n\t                } else {\n\t                    this.visual.visible(false);\n\t                }\n\t            }\n\t        });\n\n\t        var Selector = Class.extend({\n\t            init: function (diagram) {\n\t                var selectable = diagram.options.selectable;\n\t                this.options = deepExtend({}, this.options, selectable);\n\n\t                this.visual = new Rectangle(this.options);\n\t                this.diagram = diagram;\n\t            },\n\t            options: {\n\t                stroke: {\n\t                    color: "#778899",\n\t                    width: 1,\n\t                    dashType: "dash"\n\t                },\n\t                fill: {\n\t                    color: TRANSPARENT\n\t                }\n\t            },\n\t            start: function (p) {\n\t                this._sp = this._ep = p;\n\t                this.refresh();\n\t                this.diagram._adorn(this, true);\n\t            },\n\t            end: function () {\n\t                this._sp = this._ep = undefined;\n\t                this.diagram._adorn(this, false);\n\t            },\n\t            bounds: function (value) {\n\t                if (value) {\n\t                    this._bounds = value;\n\t                }\n\t                return this._bounds;\n\t            },\n\t            move: function (p) {\n\t                this._ep = p;\n\t                this.refresh();\n\t            },\n\t            refresh: function () {\n\t                if (this._sp) {\n\t                    var visualBounds = Rect.fromPoints(this.diagram.modelToLayer(this._sp), this.diagram.modelToLayer(this._ep));\n\t                    this.bounds(Rect.fromPoints(this._sp, this._ep));\n\t                    this.visual.position(visualBounds.topLeft());\n\t                    this.visual.redraw({ height: visualBounds.height + 1, width: visualBounds.width + 1 });\n\t                }\n\t            }\n\t        });\n\n\t        var ConnectorVisual = Class.extend({\n\t            init: function (connector) {\n\t                this.options = deepExtend({}, connector.options);\n\t                this._c = connector;\n\t                this.visual = new Circle(this.options);\n\t                this.refresh();\n\t            },\n\t            _hover: function (value) {\n\t                var options = this.options,\n\t                    hover = options.hover,\n\t                    stroke = options.stroke,\n\t                    fill = options.fill;\n\n\t                if (value && Utils.isDefined(hover.stroke)) {\n\t                    stroke = deepExtend({}, stroke, hover.stroke);\n\t                }\n\n\t                if (value && Utils.isDefined(hover.fill)) {\n\t                    fill = hover.fill;\n\t                }\n\n\t                this.visual.redraw({\n\t                    stroke: stroke,\n\t                    fill: fill\n\t                });\n\t            },\n\t            refresh: function () {\n\t                var p = this._c.shape.diagram.modelToView(this._c.position()),\n\t                    relative = p.minus(this._c.shape.bounds("transformed").topLeft()),\n\t                    value = new Rect(p.x, p.y, 0, 0);\n\t                value.inflate(this.options.width / 2, this.options.height / 2);\n\t                this._visualBounds = value;\n\t                this.visual.redraw({ center: new Point(relative.x, relative.y) });\n\t            },\n\t            _hitTest: function (p) {\n\t                var tp = this._c.shape.diagram.modelToView(p);\n\t                return this._visualBounds.contains(tp);\n\t            }\n\t        });\n\n\t        function canDrag(element) {\n\t            var editable = element.options.editable;\n\t            return editable && editable.drag !== false;\n\t        }\n\n\t        function hitTestShapeConnectors(shape, point) {\n\t            var connector, position, rect;\n\t            for (var idx = 0; idx < shape.connectors.length; idx++) {\n\t                connector = shape.connectors[idx];\n\t                position = connector.position();\n\t                rect = new Rect(position.x, position.y);\n\t                rect.inflate(HIT_TEST_DISTANCE, HIT_TEST_DISTANCE);\n\t                if (rect.contains(point)) {\n\t                    return connector;\n\t                }\n\t            }\n\t        }\n\n\t        function noMeta(meta) {\n\t            return meta.ctrlKey === false && meta.altKey === false && meta.shiftKey === false;\n\t        }\n\n\t        deepExtend(diagram, {\n\t            CompositeUnit: CompositeUnit,\n\t            TransformUnit: TransformUnit,\n\t            PanUndoUnit: PanUndoUnit,\n\t            AddShapeUnit: AddShapeUnit,\n\t            AddConnectionUnit: AddConnectionUnit,\n\t            DeleteShapeUnit: DeleteShapeUnit,\n\t            DeleteConnectionUnit: DeleteConnectionUnit,\n\t            ConnectionEditAdorner: ConnectionEditAdorner,\n\t            ConnectionTool: ConnectionTool,\n\t            ConnectorVisual: ConnectorVisual,\n\t            UndoRedoService: UndoRedoService,\n\t            ResizingAdorner: ResizingAdorner,\n\t            Selector: Selector,\n\t            ToolService: ToolService,\n\t            ConnectorsAdorner: ConnectorsAdorner,\n\t            LayoutUndoUnit: LayoutUndoUnit,\n\t            ConnectionEditUnit: ConnectionEditUnit,\n\t            ToFrontUnit: ToFrontUnit,\n\t            ToBackUnit: ToBackUnit,\n\t            ConnectionRouterBase: ConnectionRouterBase,\n\t            PolylineRouter: PolylineRouter,\n\t            CascadingRouter: CascadingRouter,\n\t            SelectionTool: SelectionTool,\n\t            ScrollerTool: ScrollerTool,\n\t            PointerTool: PointerTool,\n\t            ConnectionEditTool: ConnectionEditTool,\n\t            RotateUnit: RotateUnit\n\t        });\n\t})(window.kendo.jQuery);\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/dataviz/diagram/services.js?')}}]);