(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{"./node_modules/@progress/kendo-ui/js/spreadsheet/sorter.js":
/*!******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/sorter.js ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1582);\n\tmodule.exports = __webpack_require__(1582);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1582:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function(kendo) {\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    var Sorter = kendo.Class.extend({\n\t        init: function(grid, lists) {\n\t            this._grid = grid;\n\t            this._lists = lists;\n\t        },\n\n\t        indices: function(rangeRef, list, ascending, indices) {\n\t            var comparer = Sorter.ascendingComparer;\n\n\t            if (ascending === false) {\n\t                comparer = Sorter.descendingComparer;\n\t            }\n\n\t            return list.sortedIndices(this._grid.cellRefIndex(rangeRef.topLeft),\n\t                this._grid.cellRefIndex(rangeRef.bottomRight), comparer, indices);\n\t        },\n\n\t        sortBy: function(ref, column, list, ascending, indices) {\n\t            var sortedIndices = this.indices(ref.toColumn(column), list, ascending, indices);\n\n\t            for (var ci = ref.topLeft.col; ci <= ref.bottomRight.col; ci++) {\n\t                var start = this._grid.index(ref.topLeft.row, ci);\n\t                var end = this._grid.index(ref.bottomRight.row, ci);\n\n\t                for (var li = 0; li < this._lists.length; li++) {\n\t                    if (start < this._lists[li].lastRangeStart()) {\n\t                        this._lists[li].sort(start, end, sortedIndices);\n\t                    }\n\t                }\n\t            }\n\n\t            return sortedIndices;\n\t        }\n\t    });\n\n\t    Sorter.ascendingComparer = function(a, b) {\n\t        if (a === null && b === null) {\n\t            return 0;\n\t        }\n\n\t        if (a === null) {\n\t            return 1;\n\t        }\n\n\t        if (b === null) {\n\t            return -1;\n\t        }\n\n\t        var typeA = typeof a;\n\t        var typeB = typeof b;\n\n\t        if (typeA === "number") {\n\t            if (typeB === "number") {\n\t                return a - b;\n\t            } else {\n\t               return -1;\n\t            }\n\t        }\n\n\t        if (typeA === "string") {\n\t            switch (typeB) {\n\t                case "number":\n\t                    return 1;\n\t                case "string":\n\t                    return a.localeCompare(b);\n\t                default:\n\t                    return -1;\n\t            }\n\t        }\n\n\t        if (typeA === "boolean") {\n\t            switch (typeB) {\n\t                case "number":\n\t                    return 1;\n\t                case "string":\n\t                    return 1;\n\t                case "boolean":\n\t                    return a - b;\n\t                default:\n\t                    return -1;\n\t            }\n\t        }\n\n\t        if (a instanceof kendo.spreadsheet.calc.runtime.CalcError) {\n\t            if (b instanceof kendo.spreadsheet.calc.runtime.CalcError) {\n\t                return 0;\n\t            } else {\n\t                return 1;\n\t            }\n\t        }\n\n\t        throw new Error("Cannot compare " + a + " and " + b);\n\t    };\n\n\t    Sorter.descendingComparer = function(a, b) {\n\t        if (a === null && b === null) {\n\t            return 0;\n\t        }\n\n\t        if (a === null) {\n\t            return 1;\n\t        }\n\n\t        if (b === null) {\n\t            return -1;\n\t        }\n\n\t        return Sorter.ascendingComparer(b, a);\n\t    };\n\n\t    kendo.spreadsheet.Sorter = Sorter;\n\t})(kendo);\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/sorter.js?')},"./node_modules/@progress/kendo-ui/js/spreadsheet/toolbar.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/toolbar.js ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1583);\n\tmodule.exports = __webpack_require__(1583);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 6:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.combobox */ "./node_modules/@progress/kendo-ui/js/kendo.combobox.js");\n\n/***/ }),\n\n/***/ 929:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.popup */ "./node_modules/@progress/kendo-ui/js/kendo.popup.js");\n\n/***/ }),\n\n/***/ 943:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.dropdownlist */ "./node_modules/@progress/kendo-ui/js/kendo.dropdownlist.js");\n\n/***/ }),\n\n/***/ 945:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.colorpicker */ "./node_modules/@progress/kendo-ui/js/kendo.colorpicker.js");\n\n/***/ }),\n\n/***/ 1006:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.toolbar */ "./node_modules/@progress/kendo-ui/js/kendo.toolbar.js");\n\n/***/ }),\n\n/***/ 1583:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1006), __webpack_require__(945), __webpack_require__(6), __webpack_require__(943), __webpack_require__(929), __webpack_require__(1584) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function(kendo) {\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    /* jshint eqnull:true */\n\n\t    var $ = kendo.jQuery;\n\n\t    var ToolBar = kendo.ui.ToolBar;\n\n\t    var MESSAGES = kendo.spreadsheet.messages.toolbar = {\n\t        addColumnLeft: "Add column left",\n\t        addColumnRight: "Add column right",\n\t        addRowAbove: "Add row above",\n\t        addRowBelow: "Add row below",\n\t        alignment: "Alignment",\n\t        alignmentButtons: {\n\t            justtifyLeft: "Align left",\n\t            justifyCenter: "Center",\n\t            justifyRight: "Align right",\n\t            justifyFull: "Justify",\n\t            alignTop: "Align top",\n\t            alignMiddle: "Align middle",\n\t            alignBottom: "Align bottom"\n\t        },\n\t        backgroundColor: "Background",\n\t        bold: "Bold",\n\t        borders: "Borders",\n\t        copy: "Copy",\n\t        cut: "Cut",\n\t        deleteColumn: "Delete column",\n\t        deleteRow: "Delete row",\n\t        filter: "Filter",\n\t        fontFamily: "Font",\n\t        fontSize: "Font size",\n\t        format: "Custom format...",\n\t        formatTypes: {\n\t            automatic: "Automatic",\n\t            text: "Text",\n\t            number: "Number",\n\t            percent: "Percent",\n\t            financial: "Financial",\n\t            currency: "Currency",\n\t            date: "Date",\n\t            time: "Time",\n\t            dateTime: "Date time",\n\t            duration: "Duration",\n\t            moreFormats: "More formats..."\n\t        },\n\t        formatDecreaseDecimal: "Decrease decimal",\n\t        formatIncreaseDecimal: "Increase decimal",\n\t        freeze: "Freeze panes",\n\t        freezeButtons: {\n\t            freezePanes: "Freeze panes",\n\t            freezeRows: "Freeze rows",\n\t            freezeColumns: "Freeze columns",\n\t            unfreeze: "Unfreeze panes"\n\t        },\n\t        insertComment: "Insert comment",\n\t        insertImage: "Insert image",\n\t        italic: "Italic",\n\t        merge: "Merge cells",\n\t        mergeButtons: {\n\t            mergeCells: "Merge all",\n\t            mergeHorizontally: "Merge horizontally",\n\t            mergeVertically: "Merge vertically",\n\t            unmerge: "Unmerge"\n\t        },\n\t        open: "Open...",\n\t        paste: "Paste",\n\t        quickAccess: {\n\t            redo: "Redo",\n\t            undo: "Undo"\n\t        },\n\t        exportAs: "Export...",\n\t        toggleGridlines: "Toggle gridlines",\n\t        sort: "Sort",\n\t        sortButtons: {\n\t            // sortSheetAsc: "Sort sheet A to Z",\n\t            // sortSheetDesc: "Sort sheet Z to A",\n\t            sortRangeAsc: "Sort range A to Z",\n\t            sortRangeDesc: "Sort range Z to A"\n\t        },\n\t        textColor: "Text Color",\n\t        textWrap: "Wrap text",\n\t        underline: "Underline",\n\t        validation: "Data validation...",\n\t        hyperlink: "Link"\n\t    };\n\n\t    var defaultTools = {\n\t        home: [\n\t            "open",\n\t            "exportAs",\n\t            [ "cut", "copy", "paste" ],\n\t            [ "bold", "italic", "underline" ], "hyperlink", "insertComment", "insertImage",\n\t            "backgroundColor", "textColor",\n\t            "borders",\n\t            "fontSize", "fontFamily",\n\t            "alignment",\n\t            "textWrap",\n\t            [ "formatDecreaseDecimal", "formatIncreaseDecimal" ],\n\t            "format",\n\t            "merge",\n\t            "freeze",\n\t            "filter",\n\t            "toggleGridlines"\n\t        ],\n\t        insert: [\n\t            [ "addColumnLeft", "addColumnRight", "addRowBelow", "addRowAbove" ],\n\t            [ "deleteColumn", "deleteRow" ]\n\t        ],\n\t        data: [\n\t            "sort",\n\t            "filter",\n\t            "validation"\n\t        ]\n\t    };\n\n\t    var toolDefaults = {\n\t        //home tab\n\t        open:                  { type: "open",                                     overflow: "never",                          iconClass: "file-excel" },\n\t        exportAs:              { type: "exportAsDialog", dialogName: "exportAs",   overflow: "never",       text: "",        iconClass: "file-excel" },\n\t        bold:                  { type: "button", command: "PropertyChangeCommand", property: "bold",          value: true,     iconClass: "bold", togglable: true },\n\t        italic:                { type: "button", command: "PropertyChangeCommand", property: "italic",        value: true,     iconClass: "italic", togglable: true },\n\t        underline:             { type: "button", command: "PropertyChangeCommand", property: "underline",     value: true,     iconClass: "underline", togglable: true },\n\t        formatDecreaseDecimal: { type: "button", command: "AdjustDecimalsCommand",                            value: -1,       iconClass: "decimal-decrease" },\n\t        formatIncreaseDecimal: { type: "button", command: "AdjustDecimalsCommand",                            value: +1,       iconClass: "decimal-increase" },\n\t        textWrap:              { type: "button", command: "TextWrapCommand",       property: "wrap",          value: true,     iconClass: "text-wrap", togglable: true },\n\t        cut:                   { type: "button", command: "ToolbarCutCommand",                                                 iconClass: "cut" },\n\t        copy:                  { type: "button", command: "ToolbarCopyCommand",                                                iconClass: "copy" },\n\t        paste:                 { type: "button", command: "ToolbarPasteCommand",                                               iconClass: "paste" },\n\t        separator:             { type: "separator" },\n\t        alignment:             { type: "alignment",                           iconClass: "align-left" },\n\t        backgroundColor:       { type: "colorPicker", property: "background", iconClass: "paint" },\n\t        textColor:             { type: "colorPicker", property: "color",      iconClass: "foreground-color" },\n\t        fontFamily:            { type: "fontFamily",  property: "fontFamily", iconClass: "font-family" },\n\t        fontSize:              { type: "fontSize",    property: "fontSize",   iconClass: "font-size" },\n\t        format:                { type: "format",      property: "format",     iconClass: "custom-format" },\n\t        filter:                { type: "filter",      property: "hasFilter",  iconClass: "filter" },\n\t        merge:                 { type: "merge",                               iconClass: "cells-merge" },\n\t        freeze:                { type: "freeze",                              iconClass: "pane-freeze" },\n\t        borders:               { type: "borders",                             iconClass: "borders-all" },\n\t        formatCells:           { type: "dialog", dialogName: "formatCells", overflow: "never" },\n\t        hyperlink:             { type: "dialog", dialogName: "hyperlink", iconClass: "link-horizontal", overflow: "never", text: "" },\n\t        toggleGridlines:       { type: "button", command: "GridLinesChangeCommand", property: "gridLines", value: true, iconClass: "border-no", togglable: true },\n\t        insertComment:         { type: "dialog", dialogName: "insertComment", property: "comment", togglable: true, overflow: "never", iconClass: "comment", text: "" },\n\t        insertImage:           { type: "dialog", dialogName: "insertImage", overflow: "never", iconClass: "image", text: "" },\n\n\t        //insert tab\n\t        addColumnLeft:         { type: "button", command: "AddColumnCommand",    value: "left",  iconClass: "table-column-insert-left"  },\n\t        addColumnRight:        { type: "button", command: "AddColumnCommand",    value: "right", iconClass: "table-column-insert-right" },\n\t        addRowBelow:           { type: "button", command: "AddRowCommand",       value: "below", iconClass: "table-row-insert-below"    },\n\t        addRowAbove:           { type: "button", command: "AddRowCommand",       value: "above", iconClass: "table-row-insert-above"    },\n\t        deleteColumn:          { type: "button", command: "DeleteColumnCommand",                 iconClass: "table-column-delete"    },\n\t        deleteRow:             { type: "button", command: "DeleteRowCommand",                    iconClass: "table-row-delete"       },\n\n\t        //data tab\n\t        sort:                  { type: "sort", iconClass: "sort-desc" },\n\t        validation:            { type: "dialog", dialogName: "validation", iconClass: "exception", overflow: "never" }\n\t    };\n\n\t    var SpreadsheetToolBar = ToolBar.extend({\n\t        init: function(element, options) {\n\t            options.items = this._expandTools(options.tools || SpreadsheetToolBar.prototype.options.tools[options.toolbarName]);\n\n\t            ToolBar.fn.init.call(this, element, options);\n\t            var handleClick = this._click.bind(this);\n\n\t            this.element.addClass("k-spreadsheet-toolbar");\n\n\t            this._addSeparators(this.element);\n\t            var that = this;\n\t            this.element.on("keydown", function (e) {\n\t                var tool;\n\t                if (e.keyCode === 9) {\n\t                    tool = that._nextTool(e.shiftKey ? -1 : 1);\n\t                    if (tool) {\n\t                        document.activeElement.blur();\n\t                        if ($(tool).is(".k-upload-button")) {\n\t                            $(tool).addClass("k-state-focused");\n\t                        }\n\t                        if($(tool).find("input").length) {\n\t                            $(tool).find("input").focus();\n\t                        } else {\n\t                            tool.focus();\n\t                        }\n\t                        e.preventDefault();\n\t                    }\n\t                }\n\t            });\n\n\t            this.element.on("focusout", function () {\n\t                $(this).find(".k-toolbar-first-visible").removeClass("k-state-focused");\n\t            });\n\n\t            this.bind({\n\t                click: handleClick,\n\t                toggle: handleClick\n\t            });\n\t        },\n\t        _nextTool: function (direction) {\n\t            var that = this;\n\t            var tools = that.element.find(".k-widget, .k-button, .k-button-group > a");\n\t            var activeIndex = tools.index($(document.activeElement).closest(".k-widget, .k-button, .k-button-group > a"));\n\t            if (activeIndex > 0) {\n\t                return tools[activeIndex + direction];\n\t            }\n\t        },\n\t        _addSeparators: function(element) {\n\t            var groups = element.children(".k-widget, a.k-button, .k-button-group");\n\n\t            groups.before("<span class=\'k-separator\'></span>");\n\t        },\n\t        _expandTools: function(tools) {\n\t            function expandTool(toolName) {\n\t                // expand string to object, add missing tool properties\n\t                var options = $.isPlainObject(toolName) ? toolName : toolDefaults[toolName] || {};\n\t                var spriteCssClass = "k-icon k-i-" + options.iconClass;\n\t                var type = options.type;\n\t                var typeDefaults = {\n\t                    button: {\n\t                        showText: "overflow"\n\t                    },\n\t                    colorPicker: {\n\t                        toolIcon: spriteCssClass,\n\t                        spriteCssClass: spriteCssClass\n\t                    },\n\t                    borders: { spriteCssClass: spriteCssClass },\n\t                    alignment:  { spriteCssClass: spriteCssClass },\n\t                    merge:  { spriteCssClass: spriteCssClass },\n\t                    freeze:  { spriteCssClass: spriteCssClass }\n\t                };\n\n\t                var tool = kendo.deepExtend({\n\t                    name: options.name || toolName,\n\t                    text: MESSAGES[options.name || toolName],\n\t                    icon: options.iconClass,\n\t                    attributes: {\n\t                        title: MESSAGES[options.name || toolName],\n\t                        "aria-label":   MESSAGES[options.name || toolName]\n\t                    }\n\t                }, typeDefaults[type], options);\n\n\t                if (type == "splitButton") {\n\t                    tool.menuButtons = tool.menuButtons.map(expandTool);\n\t                }\n\n\t                tool.attributes["data-tool"] = toolName;\n\n\t                if (options.property) {\n\t                    tool.attributes["data-property"] = options.property;\n\t                }\n\n\t                return tool;\n\t            }\n\n\t            return tools.reduce(function(tools, tool) {\n\t                if ($.isArray(tool)) {\n\t                    tools.push({ type: "buttonGroup", buttons: tool.map(expandTool) });\n\t                } else {\n\t                    tools.push(expandTool.call(this, tool));\n\t                }\n\n\t                return tools;\n\t            }, []);\n\t        },\n\t        _click: function(e) {\n\t            var toolName = e.target.attr("data-tool");\n\t            var tool = toolDefaults[toolName] || {};\n\t            var commandType = tool.command;\n\n\t            if (!commandType) {\n\t                return;\n\t            }\n\n\t            var args = {\n\t                command: commandType,\n\t                options: {\n\t                    property: tool.property || null,\n\t                    value: tool.value || null\n\t                }\n\t            };\n\n\t            if (typeof args.options.value === "boolean") {\n\t                args.options.value = e.checked ? true : null;\n\t            }\n\n\t            this.action(args);\n\t        },\n\t        events: [\n\t            "click",\n\t            "toggle",\n\t            "open",\n\t            "close",\n\t            "overflowOpen",\n\t            "overflowClose",\n\n\t            "action",\n\t            "dialog"\n\t        ],\n\t        options: {\n\t            name: "SpreadsheetToolBar",\n\t            resizable: true,\n\t            tools: defaultTools\n\t        },\n\t        action: function(args) {\n\t            this.trigger("action", args);\n\t        },\n\t        dialog: function(args) {\n\t            this.trigger("dialog", args);\n\t        },\n\t        refresh: function(activeCell) {\n\t            var range = activeCell;\n\t            var tools = this._tools();\n\n\t            function setToggle(tool, value) {\n\t                var toolbar = tool.toolbar;\n\t                var overflow = tool.overflow;\n\t                var togglable = (toolbar && toolbar.options.togglable) ||\n\t                                 (overflow && overflow.options.togglable);\n\n\t                if (!togglable) {\n\t                    return;\n\t                }\n\n\t                var toggle = false;\n\n\t                if (typeof value === "boolean") {\n\t                    toggle = value;\n\t                } else if (typeof value === "string") {\n\t                    if (toolbar.options.hasOwnProperty("value")) {\n\t                        toggle = toolbar.options.value === value;\n\t                    } else {\n\t                        // if no value is specified in the tool\n\t                        // options, assume it should be ON if the\n\t                        // range value is not null, and OFF otherwise.\n\t                        toggle = value != null;\n\t                    }\n\t                }\n\n\t                toolbar.toggle(toggle);\n\n\t                if (overflow) {\n\t                    overflow.toggle(toggle);\n\t                }\n\t            }\n\n\t            function update(tool, value) {\n\t                var toolbar = tool.toolbar;\n\t                var overflow = tool.overflow;\n\n\t                if (toolbar && toolbar.update) {\n\t                    toolbar.update(value);\n\t                }\n\n\t                if (overflow && overflow.update) {\n\t                    overflow.update(value);\n\t                }\n\t            }\n\n\t            for (var i = 0; i < tools.length; i++) {\n\t                var property = tools[i].property;\n\t                var tool = tools[i].tool;\n\t                var value = kendo.isFunction(range[property]) ? range[property]() : range;\n\n\t                if (property == "gridLines") {\n\t                    // the law of leaky abstractions kicks in.  this\n\t                    // isn\'t really a property of the range, it\'s\n\t                    // per-sheet.\n\t                    value = range.sheet().showGridLines();\n\t                }\n\n\t                if (tool.type === "button") {\n\t                    setToggle(tool, value);\n\t                } else {\n\t                    update(tool, value);\n\t                }\n\t            }\n\t            this.resize();\n\t        },\n\t        _tools: function() {\n\t            return this.element.find("[data-property]").toArray().map(function(element) {\n\t                element = $(element);\n\t                return {\n\t                    property: element.attr("data-property"),\n\t                    tool: this._getItem(element)\n\t                };\n\t            }.bind(this));\n\t        },\n\t        destroy: function() {\n\t            // TODO: move to ToolBar.destroy to take care of these\n\t            this.element.find("[data-command],.k-button").each(function() {\n\t                var element = $(this);\n\t                var instance = element.data("instance");\n\t                if (instance && instance.destroy) {\n\t                    instance.destroy();\n\t                }\n\t            });\n\n\t            ToolBar.fn.destroy.call(this);\n\t        }\n\t    });\n\t    kendo.spreadsheet.ToolBar = SpreadsheetToolBar;\n\n\t    var DropDownTool = kendo.toolbar.Item.extend({\n\t        init: function(options, toolbar) {\n\t            var dropDownList = $("<select />")\n\t                .attr("title", options.attributes.title)\n\t                .attr("aria-label", options.attributes.title)\n\t                .kendoDropDownList({\n\t                    height: "auto"\n\t                }).data("kendoDropDownList");\n\n\t            this.dropDownList = dropDownList;\n\t            this.element = dropDownList.wrapper;\n\t            this.options = options;\n\t            this.toolbar = toolbar;\n\n\t            this.attributes();\n\t            this.addUidAttr();\n\t            this.addOverflowAttr();\n\n\t            dropDownList.bind("open", this._open.bind(this));\n\t            dropDownList.bind("change", this._change.bind(this));\n\n\t            this.element.width(options.width).attr({\n\t                "data-command": "PropertyChangeCommand",\n\t                "data-property": options.property\n\t            });\n\t        },\n\t        _open: function() {\n\t            var ddl = this.dropDownList;\n\t            var list = ddl.list;\n\t            var listWidth;\n\n\t            list.css({\n\t                whiteSpace: "nowrap",\n\t                width: "auto"\n\t            });\n\n\t            listWidth = list.width();\n\n\t            if (listWidth > 0) {\n\t                listWidth += 20;\n\t            } else {\n\t                listWidth = ddl._listWidth;\n\t            }\n\n\t            list.css("width", listWidth + kendo.support.scrollbar());\n\n\t            ddl._listWidth = listWidth;\n\t        },\n\t        _change: function(e) {\n\t            var that = this;\n\t            var instance = e.sender;\n\t            var value = instance.value();\n\t            var dataItem = instance.dataItem();\n\t            var popupName = dataItem ? dataItem.popup : undefined;\n\n\t            if (popupName) {\n\t                setTimeout(function () {\n\t                    that.toolbar.dialog({ name: popupName });\n\t                });\n\t            } else {\n\t                that.toolbar.action({\n\t                    command: "PropertyChangeCommand",\n\t                    options: {\n\t                        property: this.options.property,\n\t                        value: value == "null" ? null : value\n\t                    }\n\t                });\n\t            }\n\t        },\n\t        value: function(value) {\n\t            if (value !== undefined) {\n\t                this.dropDownList.value(value);\n\t            } else {\n\t                return this.dropDownList.value();\n\t            }\n\t        }\n\t    });\n\n\t    var PopupTool = kendo.toolbar.Item.extend({\n\t        init: function(options, toolbar) {\n\t            this.element = $("<a role=\'button\' href=\'#\' class=\'k-button k-button-icon\'>" +\n\t                                "<span class=\'" + options.spriteCssClass + "\'>" +\n\t                                "</span><span class=\'k-icon k-i-arrow-60-down\'></span>" +\n\t                            "</a>");\n\n\t            this.element\n\t                .on("click touchend", this.open.bind(this))\n\t                .attr("data-command", options.command);\n\n\t            this.options = options;\n\t            this.toolbar = toolbar;\n\n\t            this.attributes();\n\t            this.addUidAttr();\n\t            this.addOverflowAttr();\n\n\t            this._popup();\n\t        },\n\t        destroy: function() {\n\t            this.popup.destroy();\n\t        },\n\t        open: function(ev) {\n\t            ev.preventDefault();\n\t            this.popup.toggle();\n\t        },\n\t        _popup: function() {\n\t            var element = this.element;\n\n\t            this.popup = $("<div class=\'k-spreadsheet-popup\' />").appendTo(element).kendoPopup({\n\t                anchor: element\n\t            }).data("kendoPopup");\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("dialog", kendo.toolbar.ToolBarButton.extend({\n\t        init: function(options, toolbar) {\n\t            kendo.toolbar.ToolBarButton.fn.init.call(this, options, toolbar);\n\n\t            this._dialogName = options.dialogName;\n\n\t            this.element.bind("click touchend", this.open.bind(this))\n\t                        .data("instance", this);\n\t        },\n\t        open: function() {\n\t            this.toolbar.dialog({ name: this._dialogName });\n\t        }\n\t    }));\n\n\t    kendo.toolbar.registerComponent("exportAsDialog", kendo.toolbar.Item.extend({\n\t        init: function(options, toolbar) {\n\t            this._dialogName = options.dialogName;\n\n\t            this.toolbar = toolbar;\n\t            this._title = options.attributes.title;\n\t            this.element = $("<button type=\'button\' role=\'button\' class=\'k-button k-button-icon\'>" +\n\t                                 "<span class=\'k-icon k-i-download\'></span>" +\n\t                             "</button>")\n\t                             .attr("title", this._title)\n\t                             .attr("aria-label", this._title)\n\t                             .data("instance", this);\n\n\t            this.element.bind("click", this.open.bind(this))\n\t                        .data("instance", this);\n\t        },\n\t        open: function() {\n\t            this.toolbar.dialog({ name: this._dialogName });\n\t        }\n\t    }));\n\n\t    var OverflowDialogButton = kendo.toolbar.OverflowButton.extend({\n\t        init: function(options, toolbar) {\n\t            kendo.toolbar.OverflowButton.fn.init.call(this, options, toolbar);\n\n\t            this.element.on("click touchend", this._click.bind(this));\n\n\t            this.message = this.options.text;\n\n\t            var instance = this.element.data("button");\n\t            this.element.data(this.options.type, instance);\n\t        },\n\t        _click: $.noop\n\t    });\n\n\t    var ColorPicker = PopupTool.extend({\n\t        init: function(options, toolbar) {\n\t            PopupTool.fn.init.call(this, options, toolbar);\n\t            this.popup.element.addClass("k-spreadsheet-colorpicker");\n\n\t            this.colorChooser = new kendo.spreadsheet.ColorChooser(this.popup.element, {\n\t                change: this._colorChange.bind(this)\n\t            });\n\n\t            this.element.attr({\n\t                "data-property": options.property\n\t            });\n\n\t            this.element.data({\n\t                type: "colorPicker",\n\t                colorPicker: this,\n\t                instance: this\n\t            });\n\t        },\n\t        destroy: function() {\n\t            this.colorChooser.destroy();\n\t            PopupTool.fn.destroy.call(this);\n\t        },\n\t        update: function(value) {\n\t            this.value(value);\n\t        },\n\t        value: function(value) {\n\t            this.colorChooser.value(value);\n\t        },\n\t        _colorChange: function(e) {\n\t            this.toolbar.action({\n\t                command: "PropertyChangeCommand",\n\t                options: {\n\t                    property: this.options.property,\n\t                    value: e.sender.value()\n\t                }\n\t            });\n\t            this.popup.close();\n\t        }\n\t    });\n\n\t    var ColorPickerButton = OverflowDialogButton.extend({\n\t        init: function(options, toolbar) {\n\t            options.iconName = "text";\n\t            OverflowDialogButton.fn.init.call(this, options, toolbar);\n\t        },\n\t        _click: function() {\n\t            this.toolbar.dialog({\n\t                name: "colorPicker",\n\t                options: {\n\t                    title: this.options.property, property: this.options.property\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("colorPicker", ColorPicker, ColorPickerButton);\n\n\t    var FONT_SIZES = [8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];\n\t    var DEFAULT_FONT_SIZE = 12;\n\n\t    var FontSize = kendo.toolbar.Item.extend({\n\t        init: function(options, toolbar) {\n\t            var comboBox = $("<input />")\n\t                .attr("aria-label", options.attributes.title)\n\t                .attr("title", options.attributes.title)\n\t                .kendoComboBox({\n\t                    change: this._valueChange.bind(this),\n\t                    clearButton: false,\n\t                    dataSource: options.fontSizes || FONT_SIZES,\n\t                    value: DEFAULT_FONT_SIZE\n\t                }).data("kendoComboBox");\n\n\t            this.comboBox = comboBox;\n\t            this.element = comboBox.wrapper;\n\t            this.options = options;\n\t            this.toolbar = toolbar;\n\n\t            this.attributes();\n\t            this.addUidAttr();\n\t            this.addOverflowAttr();\n\n\t            this.element.width(options.width).attr({\n\t                "data-command": "PropertyChangeCommand",\n\t                "data-property": options.property\n\t            });\n\n\t            this.element.data({\n\t                type: "fontSize",\n\t                fontSize: this\n\t            });\n\t        },\n\n\t        _valueChange: function(e) {\n\t            this.toolbar.action({\n\t                command: "PropertyChangeCommand",\n\t                options: {\n\t                    property: this.options.property,\n\t                    value: kendo.parseInt(e.sender.value())\n\t                }\n\t            });\n\t        },\n\n\t        update: function(value) {\n\t            this.value(kendo.parseInt(value) || DEFAULT_FONT_SIZE);\n\t        },\n\n\t        value: function(value) {\n\t            if (value !== undefined) {\n\t                this.comboBox.value(value);\n\t            } else {\n\t                return this.comboBox.value();\n\t            }\n\t        }\n\t    });\n\n\t    var FontSizeButton = OverflowDialogButton.extend({\n\t        _click: function() {\n\t            this.toolbar.dialog({\n\t                name: "fontSize",\n\t                options: {\n\t                    sizes: FONT_SIZES,\n\t                    defaultSize: DEFAULT_FONT_SIZE\n\t                }\n\t            });\n\t        },\n\t        update: function(value) {\n\t            this._value = value || DEFAULT_FONT_SIZE;\n\t            this.element.find(".k-text").text(this.message + " (" + this._value + ") ...");\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("fontSize", FontSize, FontSizeButton);\n\n\t    var FONT_FAMILIES = ["Arial", "Courier New", "Georgia", "Times New Roman", "Trebuchet MS", "Verdana"];\n\t    var DEFAULT_FONT_FAMILY = "Arial";\n\n\t    var FontFamily = DropDownTool.extend({\n\t        init: function(options, toolbar) {\n\t            DropDownTool.fn.init.call(this, options, toolbar);\n\n\t            var ddl = this.dropDownList;\n\t            ddl.setDataSource(options.fontFamilies || FONT_FAMILIES);\n\t            ddl.value(DEFAULT_FONT_FAMILY);\n\n\t            this.element.data({\n\t                type: "fontFamily",\n\t                fontFamily: this\n\t            });\n\t        },\n\t        update: function(value) {\n\t            this.value(value || DEFAULT_FONT_FAMILY);\n\t        }\n\t    });\n\n\t    var FontFamilyButton = OverflowDialogButton.extend({\n\t        _click: function() {\n\t            this.toolbar.dialog({\n\t                name: "fontFamily",\n\t                options: {\n\t                    fonts: FONT_FAMILIES,\n\t                    defaultFont: DEFAULT_FONT_FAMILY\n\t                }\n\t            });\n\t        },\n\t        update: function(value) {\n\t            this._value = value || DEFAULT_FONT_FAMILY;\n\t            this.element.find(".k-text").text(this.message + " (" + this._value + ") ...");\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("fontFamily", FontFamily, FontFamilyButton);\n\n\t    var defaultFormats = kendo.spreadsheet.formats = {\n\t        automatic: null,\n\t        text: "@",\n\t        number: "#,0.00",\n\t        percent: "0.00%",\n\t        financial: \'_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)\',\n\t        currency: "$#,##0.00;[Red]$#,##0.00",\n\t        date: "m/d/yyyy",\n\t        time: "h:mm:ss AM/PM",\n\t        dateTime: "m/d/yyyy h:mm",\n\t        duration: "[h]:mm:ss"\n\t    };\n\n\t    var Format = DropDownTool.extend({\n\t        _revertTitle: function(e) {\n\t            e.sender.value("");\n\t            e.sender.wrapper.width("auto");\n\t        },\n\t        init: function(options, toolbar) {\n\t            DropDownTool.fn.init.call(this, options, toolbar);\n\n\t            var ddl = this.dropDownList;\n\t            var icon = "<span class=\'k-icon k-i-" + options.iconClass + "\' style=\'line-height: 1em; width: 1.35em;\'></span>";\n\t            ddl.bind("change", this._revertTitle.bind(this));\n\t            ddl.bind("dataBound", this._revertTitle.bind(this));\n\t            ddl.setOptions({\n\t                dataValueField: "format",\n\t                dataTextField: "name",\n\t                dataValuePrimitive: true,\n\t                valueTemplate: icon,\n\t                template:\n\t                    "# if (data.sample) { #" +\n\t                        "<span class=\'k-spreadsheet-sample\'>#: data.sample #</span>" +\n\t                    "# } #" +\n\t                    "#: data.name #"\n\t            });\n\t            ddl.text(icon);\n\t            ddl.setDataSource([\n\t                { format: defaultFormats.automatic, name: MESSAGES.formatTypes.automatic },\n\t                { format: defaultFormats.text, name: MESSAGES.formatTypes.text },\n\t                { format: defaultFormats.number, name: MESSAGES.formatTypes.number , sample: "1,499.99" },\n\t                { format: defaultFormats.percent, name: MESSAGES.formatTypes.percent , sample: "14.50%" },\n\t                { format: defaultFormats.financial, name: MESSAGES.formatTypes.financial , sample: "(1,000.12)" },\n\t                { format: defaultFormats.currency, name: MESSAGES.formatTypes.currency , sample: "$1,499.99" },\n\t                { format: defaultFormats.date, name: MESSAGES.formatTypes.date , sample: "4/21/2012" },\n\t                { format: defaultFormats.time, name: MESSAGES.formatTypes.time , sample: "5:49:00 PM" },\n\t                { format: defaultFormats.dateTime, name: MESSAGES.formatTypes.dateTime , sample: "4/21/2012 5:49:00" },\n\t                { format: defaultFormats.duration, name: MESSAGES.formatTypes.duration , sample: "168:05:00" },\n\t                { popup: "formatCells", name: MESSAGES.formatTypes.moreFormats }\n\t            ]);\n\n\t            this.element.data({\n\t                type: "format",\n\t                format: this\n\t            });\n\t        }\n\t    });\n\n\t    var FormatButton = OverflowDialogButton.extend({\n\t        _click: function() {\n\t            this.toolbar.dialog({ name: "formatCells" });\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("format", Format, FormatButton);\n\n\t    var BorderChangeTool = PopupTool.extend({\n\t        init: function(options, toolbar) {\n\t            PopupTool.fn.init.call(this, options, toolbar);\n\t            this._borderPalette();\n\n\t            this.element.data({\n\t                type: "borders",\n\t                instance: this\n\t            });\n\t        },\n\t        destroy: function() {\n\t            this.borderPalette.destroy();\n\t            PopupTool.fn.destroy.call(this);\n\t        },\n\t        _borderPalette: function() {\n\t            var element = $("<div />").appendTo(this.popup.element);\n\t            this.borderPalette = new kendo.spreadsheet.BorderPalette(element, {\n\t                change: this._action.bind(this)\n\t            });\n\t        },\n\t        _action: function(e) {\n\t            this.toolbar.action({\n\t                command: "BorderChangeCommand",\n\t                options: {\n\t                    border: e.type,\n\t                    style: { size: 1, color: e.color }\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    var BorderChangeButton = OverflowDialogButton.extend({\n\t        _click: function() {\n\t            this.toolbar.dialog({ name: "borders" });\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("borders", BorderChangeTool, BorderChangeButton);\n\n\t    var AlignmentTool = PopupTool.extend({\n\t        init: function(options, toolbar) {\n\t            PopupTool.fn.init.call(this, options, toolbar);\n\n\t            this.element.attr({ "data-property": "alignment" });\n\t            this._defineButtons();\n\t            this._commandPalette();\n\t            this.popup.element.on("click", ".k-button", function(e) {\n\t                this._action($(e.currentTarget));\n\t            }.bind(this));\n\n\t            this.element.data({\n\t                type: "alignment",\n\t                alignment: this,\n\t                instance: this\n\t            });\n\t        },\n\t        _defineButtons: function() {\n\t            this.buttons = [\n\t                { property: "textAlign",     value: "left",    iconClass: "align-left",   text: MESSAGES.alignmentButtons.justtifyLeft },\n\t                { property: "textAlign",     value: "center",  iconClass: "align-center", text: MESSAGES.alignmentButtons.justifyCenter },\n\t                { property: "textAlign",     value: "right",   iconClass: "align-right",  text: MESSAGES.alignmentButtons.justifyRight },\n\t                { property: "textAlign",     value: "justify", iconClass: "align-justify",   text: MESSAGES.alignmentButtons.justifyFull },\n\t                { property: "verticalAlign", value: "top",     iconClass: "align-top",      text: MESSAGES.alignmentButtons.alignTop },\n\t                { property: "verticalAlign", value: "center",  iconClass: "align-middle",   text: MESSAGES.alignmentButtons.alignMiddle },\n\t                { property: "verticalAlign", value: "bottom",  iconClass: "align-bottom",   text: MESSAGES.alignmentButtons.alignBottom }\n\t            ];\n\t        },\n\t        destroy: function() {\n\t            this.popup.element.off();\n\t            PopupTool.fn.destroy.call(this);\n\t        },\n\t        update: function(range) {\n\t            var textAlign = range.textAlign();\n\t            var verticalAlign = range.verticalAlign();\n\t            var element = this.popup.element;\n\n\t            element.find(".k-button").removeClass("k-state-active");\n\n\t            if (textAlign) {\n\t                element.find("[data-property=textAlign][data-value=" + textAlign + "]").addClass("k-state-active");\n\t            }\n\n\t            if (verticalAlign) {\n\t                element.find("[data-property=verticalAlign][data-value=" + verticalAlign + "]").addClass("k-state-active");\n\t            }\n\t        },\n\t        _commandPalette: function() {\n\t            var buttons = this.buttons;\n\t            var element = $("<div />").appendTo(this.popup.element);\n\t            buttons.forEach(function(options, index) {\n\t                var button = "<a role=\'button\' title=\'" + options.text + "\' data-property=\'" + options.property + "\' data-value=\'" + options.value + "\' class=\'k-button k-button-icon\'>" +\n\t                                "<span class=\'k-icon k-i-" + options.iconClass + "\'></span>" +\n\t                             "</a>";\n\t                if (index !== 0 && buttons[index - 1].property !== options.property) {\n\t                    element.append($("<span class=\'k-separator\' />"));\n\t                }\n\t                element.append(button);\n\t            });\n\t        },\n\t        _action: function(button) {\n\t            var property = button.attr("data-property");\n\t            var value = button.attr("data-value");\n\n\t            this.toolbar.action({\n\t                command: "PropertyChangeCommand",\n\t                options: {\n\t                    property: property,\n\t                    value: value\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    var AlignmentButton = OverflowDialogButton.extend({\n\t        _click: function() {\n\t            this.toolbar.dialog({ name: "alignment" });\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("alignment", AlignmentTool, AlignmentButton);\n\n\t    var MergeTool = PopupTool.extend({\n\t        init: function(options, toolbar) {\n\t            PopupTool.fn.init.call(this, options, toolbar);\n\n\t            this._defineButtons();\n\t            this._commandPalette();\n\t            this.popup.element.on("click", ".k-button", function(e) {\n\t                this._action($(e.currentTarget));\n\t            }.bind(this));\n\n\t            this.element.data({\n\t                type: "merge",\n\t                merge: this,\n\t                instance: this\n\t            });\n\t        },\n\t        _defineButtons: function() {\n\t            this.buttons = [\n\t                { value: "cells",        iconClass: "cells-merge",        text: MESSAGES.mergeButtons.mergeCells },\n\t                { value: "horizontally", iconClass: "cells-merge-horizontally", text: MESSAGES.mergeButtons.mergeHorizontally },\n\t                { value: "vertically",   iconClass: "cells-merge-vertically",   text: MESSAGES.mergeButtons.mergeVertically },\n\t                { value: "unmerge",      iconClass: "table-unmerge",      text: MESSAGES.mergeButtons.unmerge }\n\t            ];\n\t        },\n\t        destroy: function() {\n\t            this.popup.element.off();\n\t            PopupTool.fn.destroy.call(this);\n\t        },\n\t        _commandPalette: function() {\n\t            var element = $("<div />").appendTo(this.popup.element);\n\t            this.buttons.forEach(function(options) {\n\t                var button = "<a role=\'button\' title=\'" + options.text + "\' data-value=\'" + options.value + "\' class=\'k-button k-button-icontext\'>" +\n\t                                "<span class=\'k-icon k-i-" + options.iconClass + "\'></span>" + options.text +\n\t                             "</a>";\n\t                element.append(button);\n\t            });\n\t        },\n\t        _action: function(button) {\n\t            var value = button.attr("data-value");\n\n\t            this.toolbar.action({\n\t                command: "MergeCellCommand",\n\t                options: {\n\t                    value: value\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    var MergeButton = OverflowDialogButton.extend({\n\t        _click: function() {\n\t            this.toolbar.dialog({ name: "merge" });\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("merge", MergeTool, MergeButton);\n\n\t    var FreezeTool = PopupTool.extend({\n\t        init: function(options, toolbar) {\n\t            PopupTool.fn.init.call(this, options, toolbar);\n\n\t            this._defineButtons();\n\t            this._commandPalette();\n\t            this.popup.element.on("click", ".k-button", function(e) {\n\t                this._action($(e.currentTarget));\n\t            }.bind(this));\n\n\t            this.element.data({\n\t                type: "freeze",\n\t                freeze: this,\n\t                instance: this\n\t            });\n\t        },\n\t        _defineButtons: function() {\n\t            this.buttons = [\n\t                { value: "panes",    iconClass: "pane-freeze",  text: MESSAGES.freezeButtons.freezePanes },\n\t                { value: "rows",     iconClass: "row-freeze",    text: MESSAGES.freezeButtons.freezeRows },\n\t                { value: "columns",  iconClass: "column-freeze",    text: MESSAGES.freezeButtons.freezeColumns },\n\t                { value: "unfreeze", iconClass: "table-unmerge", text: MESSAGES.freezeButtons.unfreeze }\n\t            ];\n\t        },\n\t        destroy: function() {\n\t            this.popup.element.off();\n\t            PopupTool.fn.destroy.call(this);\n\t        },\n\t        _commandPalette: function() {\n\t            var element = $("<div />").appendTo(this.popup.element);\n\t            this.buttons.forEach(function(options) {\n\t                var button = "<a role=\'button\' title=\'" + options.text + "\' data-value=\'" + options.value + "\' class=\'k-button k-button-icontext\'>" +\n\t                                "<span class=\'k-icon k-i-" + options.iconClass + "\'></span>" + options.text +\n\t                             "</a>";\n\t                element.append(button);\n\t            });\n\t        },\n\t        _action: function(button) {\n\t            var value = button.attr("data-value");\n\n\t            this.toolbar.action({\n\t                command: "FreezePanesCommand",\n\t                options: {\n\t                    value: value\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    var FreezeButton = OverflowDialogButton.extend({\n\t        _click: function() {\n\t            this.toolbar.dialog({ name: "freeze" });\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("freeze", FreezeTool, FreezeButton);\n\n\t    var Sort = DropDownTool.extend({\n\t        _revertTitle: function(e) {\n\t            e.sender.value("");\n\t            e.sender.wrapper.width("auto");\n\t        },\n\t        init: function(options, toolbar) {\n\t            DropDownTool.fn.init.call(this, options, toolbar);\n\n\t            var ddl = this.dropDownList;\n\t            ddl.bind("change", this._revertTitle.bind(this));\n\t            ddl.bind("dataBound", this._revertTitle.bind(this));\n\t            ddl.setOptions({\n\t                valueTemplate: "<span class=\'k-icon k-i-" + options.iconClass + "\' style=\'line-height: 1em; width: 1.35em;\'></span>",\n\t                template: "<span class=\'k-icon k-i-#= iconClass #\' style=\'line-height: 1em; width: 1.35em;\'></span>#=text#",\n\t                dataTextField: "text",\n\t                dataValueField: "value"\n\t            });\n\t            ddl.setDataSource([\n\t                // { value: "asc", sheet: true, asc: true,  text: MESSAGES.sortButtons.sortSheetAsc,  iconClass: "sort-asc" },\n\t                // { value: "desc", sheet: true, asc: false, text: MESSAGES.sortButtons.sortSheetDesc,  , iconClass: "sort-desc" },\n\t                { value: "asc", sheet: false, text: MESSAGES.sortButtons.sortRangeAsc, iconClass: "sort-asc" },\n\t                { value: "desc", sheet: false, text: MESSAGES.sortButtons.sortRangeDesc, iconClass: "sort-desc" }\n\t            ]);\n\t            ddl.select(0);\n\n\t            this.element.data({\n\t                type: "sort",\n\t                sort: this\n\t            });\n\t        },\n\t        _change: function(e) {\n\t            var instance = e.sender;\n\t            var dataItem = instance.dataItem();\n\n\t            if (dataItem) {\n\t                this.toolbar.action({\n\t                    command: "SortCommand",\n\t                    options: {\n\t                        value: dataItem.value,\n\t                        sheet: dataItem.sheet\n\t                    }\n\t                });\n\t            }\n\t        },\n\t        value: $.noop\n\t    });\n\n\t    var SortButton = OverflowDialogButton.extend({\n\t        _click: function() {\n\t            this.toolbar.dialog({ name: "sort" });\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("sort", Sort, SortButton);\n\n\t    var Filter = kendo.toolbar.ToolBarButton.extend({\n\t        init: function(options, toolbar) {\n\t            options.showText = "overflow";\n\t            kendo.toolbar.ToolBarButton.fn.init.call(this, options, toolbar);\n\n\t            this.element.on("click", this._click.bind(this));\n\n\t            this.element.data({\n\t                type: "filter",\n\t                filter: this\n\t            });\n\t        },\n\t        _click: function() {\n\t            this.toolbar.action({ command: "FilterCommand" });\n\t        },\n\t        update: function(value) {\n\t            this.toggle(value);\n\t        }\n\t    });\n\n\t    var FilterButton = OverflowDialogButton.extend({\n\t        init: function(options, toolbar) {\n\t            OverflowDialogButton.fn.init.call(this, options, toolbar);\n\n\t            this.element.data({\n\t                type: "filter",\n\t                filter: this\n\t            });\n\t        },\n\t        _click: function() {\n\t            this.toolbar.action({ command: "FilterCommand" });\n\t        },\n\t        update: function(value) {\n\t            this.toggle(value);\n\t        }\n\t    });\n\n\t    kendo.toolbar.registerComponent("filter", Filter, FilterButton);\n\n\t    var Open = kendo.toolbar.Item.extend({\n\t        init: function(options, toolbar) {\n\t            this.toolbar = toolbar;\n\t            this.element = $("<div class=\'k-button k-upload-button k-button-icon\'>" +\n\t                                 "<span class=\'k-icon k-i-folder-open\'></span>" +\n\t                             "</div>").data("instance", this);\n\n\t            this._title = options.attributes.title;\n\t            this._reset();\n\t        },\n\t        _reset: function() {\n\t            this.element.find("input").remove();\n\n\t            $("<input type=\'file\' autocomplete=\'off\' accept=\'.xlsx\'/>")\n\t                .attr("title", this._title)\n\t                .attr("aria-label", this._title)\n\t                .one("change", this._change.bind(this))\n\t                .appendTo(this.element);\n\t        },\n\t        _change: function(e) {\n\t            this.toolbar.action({\n\t                command: "OpenCommand",\n\t                options: {\n\t                    file: e.target.files[0]\n\t                }\n\t            });\n\n\t            this._reset();\n\t        }\n\t    });\n\t    kendo.toolbar.registerComponent("open", Open);\n\n\t    kendo.spreadsheet.TabStrip = kendo.ui.TabStrip.extend({\n\t        init: function(element, options) {\n\t            kendo.ui.TabStrip.fn.init.call(this, element, options);\n\t            element.addClass("k-spreadsheet-tabstrip");\n\t            this._quickAccessButtons();\n\n\t            this.toolbars = {};\n\n\t            var tabs = options.dataSource;\n\n\t            this.contentElements.each(function(idx, element) {\n\t                this._toolbar($(element), tabs[idx].id, options.toolbarOptions[tabs[idx].id]);\n\t            }.bind(this));\n\n\t            this.one("activate", function() { //force resize of the tabstrip after TabStrip tab is opened\n\t                this.toolbars[this.options.dataSource[0].id].resize();\n\t            });\n\t        },\n\n\t        events: kendo.ui.TabStrip.fn.events.concat([ "action", "dialog" ]),\n\n\t        destroy: function() {\n\t            this.quickAccessToolBar.off("click");\n\t            kendo.ui.TabStrip.fn.destroy.call(this);\n\t            for (var name in this.toolbars) {\n\t                this.toolbars[name].destroy();\n\t            }\n\t        },\n\n\t        action: function(args) {\n\t            this.trigger("action", args);\n\t        },\n\n\t        dialog: function(args) {\n\t            this.trigger("dialog", args);\n\t        },\n\n\t        refreshTools: function(range) {\n\t            var toolbars = this.toolbars;\n\t            for (var name in toolbars) {\n\t                if (toolbars.hasOwnProperty(name)) {\n\t                    toolbars[name].refresh(range);\n\t                }\n\t            }\n\t        },\n\n\t        _quickAccessButtons: function() {\n\t            var buttons = [\n\t                { title: MESSAGES.quickAccess.undo, iconClass: "undo", action: "undo" },\n\t                { title: MESSAGES.quickAccess.redo, iconClass: "redo", action: "redo" }\n\t            ];\n\t            var buttonTemplate = kendo.template("<a role=\'button\' href=\'\\\\#\' title=\'#= title #\' data-action=\'#= action #\' class=\'k-button k-button-icon\' aria-label=\'#= title #\'><span class=\'k-icon k-i-#=iconClass#\'></span></a>");\n\n\t            this.quickAccessToolBar = $("<div />", {\n\t                "class": "k-spreadsheet-quick-access-toolbar",\n\t                "html": kendo.render(buttonTemplate, buttons)\n\t            }).insertBefore(this.wrapper);\n\n\t            this.quickAccessToolBar.on("click", ".k-button", function(e) {\n\t                e.preventDefault();\n\n\t                var action = $(e.currentTarget).attr("data-action");\n\t                this.action({ action: action });\n\t            }.bind(this));\n\n\t            this.quickAccessAdjust();\n\t        },\n\n\t        quickAccessAdjust: function() {\n\t            this.tabGroup.css("padding-left", kendo._outerWidth(this.quickAccessToolBar));\n\t        },\n\n\t        _toolbar: function(container, name, tools) {\n\t            var element;\n\t            var options;\n\n\t            if (this.toolbars[name]) {\n\t                this.toolbars[name].destroy();\n\t                container.children(".k-toolbar").remove();\n\t            }\n\n\t            if (tools) {\n\t                element = container.html("<div></div>").children("div");\n\n\t                options = {\n\t                    tools: typeof tools === "boolean" ? undefined : tools,\n\t                    toolbarName: name,\n\t                    action: this.action.bind(this),\n\t                    dialog: this.dialog.bind(this)\n\t                };\n\n\t                this.toolbars[name] = new kendo.spreadsheet.ToolBar(element, options);\n\t            }\n\t        }\n\n\t    });\n\n\t})(window.kendo);\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1584:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./borderpalette */ "./node_modules/@progress/kendo-ui/js/spreadsheet/borderpalette.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/toolbar.js?')},"./node_modules/@progress/kendo-ui/js/spreadsheet/validation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/validation.js ***!
  \**********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1585);\n\tmodule.exports = __webpack_require__(1585);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 1532:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./runtime */ "./node_modules/@progress/kendo-ui/js/spreadsheet/runtime.js");\n\n/***/ }),\n\n/***/ 1585:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1532) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\t    "use strict";\n\n\t    var $ = kendo.jQuery;\n\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    var spreadsheet = kendo.spreadsheet;\n\n\t    var exports = {};\n\t    spreadsheet.validation = exports;\n\t    var calc = spreadsheet.calc;\n\t    var Class = kendo.Class;\n\t    var TRANSPOSE_FORMAT = "_matrix({0})";\n\t    var DATE_FORMAT = \'DATEVALUE("{0}")\';\n\n\t    calc.runtime.defineFunction("_matrix", function(m){\n\t        if (typeof m == "string") {\n\t            // for constant list validation, Excel includes a string\n\t            // with comma-separated values — make a Matrix from it.\n\t            m = this.asMatrix([ m.split(/\\s*,\\s*/) ]);\n\t        }\n\t        return m;\n\t    }).args([\n\t        [ "m", [ "or", "matrix", "string" ] ]\n\t    ]);\n\n\t    function compileValidation(sheet, row, col, validation) {\n\t        var validationHandler;\n\t        var comparer;\n\t        var parsedFromDate;\n\t        var parsedToDate;\n\n\t        if (typeof validation === "string") {\n\t            validation = JSON.parse(validation);\n\t        }\n\n\t        if (validation.from) {\n\t            if (validation.dataType === "list" && !validation.fromIsListValue) {\n\t                validation.from = kendo.format(TRANSPOSE_FORMAT, validation.from);\n\t                validation.fromIsListValue = true;\n\t            }\n\n\t            if (validation.dataType === "date") {\n\t                parsedFromDate = calc.runtime.parseDate(validation.from);\n\t                if (parsedFromDate) {\n\t                    validation.from = kendo.format(DATE_FORMAT, validation.from);\n\t                    validation.fromIsDateValue = true;\n\t                }\n\t            }\n\n\t            validation.from = calc.compile(calc.parseFormula(sheet, row, col, validation.from));\n\t        }\n\n\t        if (validation.to) {\n\t            if (validation.dataType === "date") {\n\t                parsedToDate = calc.runtime.parseDate(validation.to);\n\t                if (parsedToDate) {\n\t                    validation.to = kendo.format(DATE_FORMAT, validation.to);\n\t                    validation.toIsDateValue = true;\n\t                }\n\t            }\n\n\t            validation.to = calc.compile(calc.parseFormula(sheet, row, col, validation.to));\n\t        }\n\n\t        if (validation.dataType == "custom") {\n\t            comparer = exports.validationComparers.custom;\n\t        } else if (validation.dataType == "list") {\n\t            comparer = exports.validationComparers.list;\n\t        } else {\n\t            comparer = exports.validationComparers[validation.comparerType];\n\t        }\n\n\t        if (!comparer) {\n\t            throw kendo.format("\'{0}\' comparer is not implemented.", validation.comparerType);\n\t        }\n\n\t        validationHandler = function (valueToCompare) { //add \'valueFormat\' arg when add isDate comparer\n\t            var toValue = this.to && (this.to_value || this.to_value === 0) ? this.to_value : undefined;\n\n\t            if (valueToCompare === null || valueToCompare === "") {\n\t                if (this.allowNulls) {\n\t                    this.value = true;\n\t                } else {\n\t                    this.value = false;\n\t                }\n\t            } else if (this.dataType == "custom") {\n\t                this.value = comparer(valueToCompare, this.from_value,  toValue);\n\t            } else if (this.dataType == "list") {\n\t                var data = this._getListData();\n\n\t                this.value = comparer(valueToCompare, data, toValue);\n\t            } else {\n\t                //TODO: TYPE CHECK IS REQUIRED ONLY FOR DATE TYPE WHEN SPECIAL COMPARER (ISDATE) IS USED\n\t                this.value = comparer(valueToCompare, this.from_value,  toValue);\n\t            }\n\n\t            return this.value;\n\t        };\n\n\t        return new kendo.spreadsheet.validation.Validation($.extend(validation, {\n\t            handler: validationHandler,\n\t            sheet: sheet,\n\t            row: row,\n\t            col: col\n\t        }));\n\t    }\n\n\t    var Validation = Class.extend({\n\t        init: function Validation(options){\n\t            this.handler = options.handler;\n\t            this.from = options.from;\n\t            this.to = options.to;\n\t            this.dataType = options.dataType; //date, time etc\n\t            this.comparerType =  options.comparerType; //greaterThan, EqaulTo etc\n\t            this.type = options.type ? options.type : "warning"; //info, warning, reject\n\t            this.allowNulls = options.allowNulls ? true : false;\n\t            this.fromIsDateValue = options.fromIsDateValue ? true : false;\n\t            this.toIsDateValue = options.toIsDateValue ? true : false;\n\t            this.showButton = options.showButton;\n\t            this.fromIsListValue = options.fromIsListValue ? true : false;\n\n\t            //TODO: address to be range / cell ref, and adjust it based on it\n\t            this.sheet = options.sheet;\n\t            this.row = options.row;\n\t            this.col = options.col;\n\n\t            if (options.tooltipMessageTemplate) {\n\t                this.tooltipMessageTemplate = options.tooltipMessageTemplate;\n\t            }\n\n\t            if (options.tooltipTitleTemplate) {\n\t                this.tooltipTitleTemplate = options.tooltipTitleTemplate;\n\t            }\n\n\t            if (options.messageTemplate) {\n\t                this.messageTemplate = options.messageTemplate;\n\t            }\n\n\t            if (options.titleTemplate) {\n\t                this.titleTemplate = options.titleTemplate;\n\t            }\n\t        },\n\n\t        _formatMessages: function(format) {\n\t            var from = this.from ? this.from_value : "";\n\t            var to = this.to ? this.to_value : "";\n\n\t            var fromFormula = this.from ? this.from.toString() : "";\n\t            var toFormula = this.to ? this.to.toString() : "";\n\t            var dataType = this.dataType;\n\t            var type = this.type;\n\t            var comparerType = this.comparerType;\n\n\t            return kendo.format(format, from, to, fromFormula, toFormula, dataType, type, comparerType);\n\t        },\n\n\t        _setMessages: function() {\n\t            this.title = "";\n\t            this.message = "";\n\n\t            if (this.tooltipTitleTemplate) {\n\t                this.tooltipTitle = this._formatMessages(this.tooltipTitleTemplate);\n\t            }\n\n\t            if (this.tooltipMessageTemplate) {\n\t                this.tooltipMessage = this._formatMessages(this.tooltipMessageTemplate);\n\t            }\n\n\t            if (this.titleTemplate) {\n\t                this.title = this._formatMessages(this.titleTemplate);\n\t            }\n\n\t            if (this.messageTemplate) {\n\t                this.message = this._formatMessages(this.messageTemplate);\n\t            }\n\t        },\n\n\t        _getListData: function() {\n\t            if (!this.from_value || !this.from_value.data) {\n\t                return [];\n\t            }\n\n\t            var cube = this.from_value.data;\n\t            var i;\n\t            var y;\n\t            var data = [];\n\n\t            for (i = 0; i < cube.length; i++ ) {\n\t                var array = cube[i];\n\n\t                if (array) {\n\t                    for (y = 0; y < array.length; y++ ) {\n\t                        data.push(array[y]);\n\t                    }\n\t                }\n\t            }\n\n\t            return data;\n\t        },\n\n\t        clone: function(sheet, row, col) {\n\t            var options = this._getOptions();\n\n\t            if (options.from) {\n\t                options.from = options.from.clone(sheet, row, col);\n\t            }\n\n\t            if (options.to) {\n\t                options.to = options.to.clone(sheet, row, col);\n\t            }\n\n\t            return new Validation($.extend(options,\n\t                { handler: this.handler },\n\t                { sheet: sheet, row: row, col: col }\n\t            ));\n\t        },\n\n\t        deepClone: function() {\n\t            var v = new Validation(this);\n\t            v.from = v.from.deepClone();\n\t            if (v.to) {\n\t                v.to = v.to.deepClone();\n\t            }\n\t            return v;\n\t        },\n\n\t        exec: function(ss, compareValue, compareFormat, callback) {\n\t            var self = this;\n\n\t            function getValue(val) {\n\t                if (val instanceof kendo.spreadsheet.Ref) {\n\t                    val = ss.getData(val);\n\t                    if (Array.isArray(val)) {\n\t                        val = val[0];\n\t                    }\n\t                }\n\t                return val;\n\t            }\n\n\t            var calculateFromCallBack = function(val) {\n\t                self.from_value = getValue(val);\n\t                self.value = self.handler.call(self, compareValue, compareFormat);\n\t                self._setMessages();\n\t                if (callback) {\n\t                    callback(self.value);\n\t                }\n\t            };\n\n\t            if (self.to) {\n\t                self.to.exec(ss, function(val) {\n\t                    self.to_value = getValue(val);\n\t                    self.from.exec(ss, calculateFromCallBack);\n\t                });\n\t            } else {\n\t                self.from.exec(ss, calculateFromCallBack);\n\t            }\n\t        },\n\n\t        reset: function() {\n\t            if (this.from) {\n\t                this.from.reset();\n\t            }\n\t            if (this.to) {\n\t                this.to.reset();\n\t            }\n\t            delete this.value;\n\t        },\n\n\t        adjust: function(affectedSheet, operation, start, delta) {\n\t            var prevFrom, prevTo, modified;\n\t            var formulaRow = this.row;\n\t            var formulaCol = this.col;\n\t            if (this.from) {\n\t                prevFrom = this.from.adjust(affectedSheet, operation, start, delta);\n\t            }\n\t            if (this.to) {\n\t                prevTo = this.to.adjust(affectedSheet, operation, start, delta);\n\t            }\n\t            if (this.sheet.toLowerCase() == affectedSheet.toLowerCase()) {\n\t                switch (operation) {\n\t                  case "row":\n\t                    if (formulaRow >= start) {\n\t                        modified = true;\n\t                        this.row += delta;\n\t                    }\n\t                    break;\n\t                  case "col":\n\t                    if (formulaCol >= start) {\n\t                        modified = true;\n\t                        this.col += delta;\n\t                    }\n\t                    break;\n\t                }\n\t            }\n\t            if (modified || prevFrom || prevTo) {\n\t                var v = new Validation(this);\n\t                v.from = prevFrom;\n\t                v.to = prevTo;\n\t                v.row = formulaRow;\n\t                v.col = formulaCol;\n\t                return v;\n\t            }\n\t        },\n\n\t        toJSON: function() {\n\t            var options = this._getOptions();\n\n\t            if (options.from) {\n\t                options.from = options.from.toString();\n\n\t                if (options.dataType === "list") {\n\t                    options.from = options.from.replace(/^_matrix\\((.*)\\)$/i, "$1");\n\t                    delete options.fromIsListValue;\n\t                }\n\n\t                if (options.dataType === "date") {\n\t                    if (this.fromIsDateValue) {\n\t                        options.from = options.from.replace(/^DATEVALUE\\("(.*)"\\)$/i, "$1");\n\t                        delete options.fromIsDateValue;\n\t                    }\n\t                }\n\t            }\n\n\t            if (options.to) {\n\t                options.to = options.to.toString();\n\n\t                if (options.dataType === "date") {\n\t                    if (this.toIsDateValue) {\n\t                        options.to = options.to.replace(/^DATEVALUE\\("(.*)"\\)$/i, "$1");\n\t                        delete options.toIsDateValue;\n\t                    }\n\t                }\n\t            }\n\n\t            return options;\n\t        },\n\n\t        _getOptions: function () {\n\t            return {\n\t                from: this.from,\n\t                to: this.to,\n\t                dataType: this.dataType,\n\t                type: this.type,\n\t                comparerType: this.comparerType,\n\t                row: this.row,\n\t                col: this.col,\n\t                sheet: this.sheet,\n\t                allowNulls: this.allowNulls,\n\t                fromIsListValue: this.fromIsListValue,\n\t                fromIsDateValue: this.fromIsDateValue,\n\t                toIsDateValue: this.toIsDateValue,\n\t                tooltipMessageTemplate: this.tooltipMessageTemplate,\n\t                tooltipTitleTemplate: this.tooltipTitleTemplate,\n\t                //TODO: export generated messages instead?\n\t                messageTemplate: this.messageTemplate,\n\t                titleTemplate: this.titleTemplate,\n\t                showButton: this.showButton\n\t            };\n\t        }\n\t    });\n\t    exports.compile = compileValidation;\n\t    exports.validationComparers = {\n\t        greaterThan: function (valueToCompare, from) {\n\t            return valueToCompare > from;\n\t        },\n\n\t        lessThan: function (valueToCompare, from) {\n\t            return valueToCompare < from;\n\t        },\n\n\t        between: function (valueToCompare, from, to) {\n\t            return valueToCompare >= from && valueToCompare <= to;\n\t        },\n\n\t        equalTo: function (valueToCompare, from) {\n\t            return valueToCompare == from;\n\t        },\n\n\t        notEqualTo: function (valueToCompare, from) {\n\t            return valueToCompare != from;\n\t        },\n\n\t        greaterThanOrEqualTo: function (valueToCompare, from) {\n\t            return valueToCompare >= from;\n\t        },\n\n\t        lessThanOrEqualTo: function (valueToCompare, from) {\n\t            return valueToCompare <= from;\n\t        },\n\n\t        notBetween: function (valueToCompare, from, to) {\n\t            return valueToCompare < from || valueToCompare > to;\n\t        },\n\n\t        custom: function (valueToCompare, from) {\n\t            return from;\n\t        },\n\n\t        list: function (valueToCompare, data) {\n\t            return data.indexOf(valueToCompare) > -1;\n\t        }\n\t    };\n\n\t    exports.Validation = Validation;\n\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/validation.js?')}}]);