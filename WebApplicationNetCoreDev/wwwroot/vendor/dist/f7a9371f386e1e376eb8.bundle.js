(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{"./node_modules/@progress/kendo-ui/js/chat/messageBox.js":
/*!***************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/chat/messageBox.js ***!
  \***************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(19);\n\tmodule.exports = __webpack_require__(19);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 19:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function($, undefined) {\n\n\t    var kendo = window.kendo;\n\t    var Widget = kendo.ui.Widget;\n\t    var extend = $.extend;\n\t    var proxy = $.proxy;\n\t    var DOT = ".";\n\t    var NS = ".kendoChat";\n\t    var keys = kendo.keys;\n\t    var SEND_ICON = \'<svg version="1.1" ixmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 16 16" xml:space="preserve"><path d="M0,14.3c-0.1,0.6,0.3,0.8,0.8,0.6l14.8-6.5c0.5-0.2,0.5-0.6,0-0.8L0.8,1.1C0.3,0.9-0.1,1.1,0,1.7l0.7,4.2C0.8,6.5,1.4,7,1.9,7.1l8.8,0.8c0.6,0.1,0.6,0.1,0,0.2L1.9,8.9C1.4,9,0.8,9.5,0.7,10.1L0,14.3z"/></svg>\';\n\t    var TOGGLE_ICON = \'<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve"><g>   <path d="M128,240c0-26.4-21.6-48-48-48s-48,21.6-48,48s21.6,48,48,48S128,266.4,128,240z"/>   <path d="M192,240c0,26.4,21.6,48,48,48c26.4,0,48-21.6,48-48s-21.6-48-48-48C213.6,192,192,213.6,192,240z"/>   <path d="M352,240c0,26.4,21.6,48,48,48c26.4,0,48-21.6,48-48s-21.6-48-48-48C373.6,192,352,213.6,352,240z"/></g></svg>\';\n\n\t    var messageBoxStyles = {\n\t        input: "k-input",\n\t        button: "k-button",\n\t        buttonFlat: "k-flat",\n\t        buttonIcon: "k-button-icon",\n\t        buttonSend: "k-button-send",\n\t        buttonToggle: "k-button-toggle",\n\t        iconAdd: "k-icon k-i-add",\n\t        hidden: "k-hidden"\n\t    };\n\n\t    var ChatMessageBox = Widget.extend({\n\t        init: function(element, options) {\n\t            Widget.fn.init.call(this, element, options);\n\n\t            this._wrapper();\n\n\t            this._attachEvents();\n\n\t            this._typing = false;\n\t        },\n\n\t        events: [\n\t        ],\n\n\t        options: {\n\t            messages: {\n\t                placeholder: "Type a message...",\n\t                toggleButton: "Toggle toolbar",\n\t                sendButton: "Send message"\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\n\t            if (this.input) {\n\t                this.input.off(NS);\n\t                this.input.remove();\n\t                this.input = null;\n\t            }\n\n\t            this.element.off(NS);\n\t            this.element.empty();\n\t        },\n\n\t        _wrapper: function() {\n\t            var styles = ChatMessageBox.styles;\n\t            var options = this.options;\n\t            var messages = options.messages;\n\t            var inputId = "inputId_" + kendo.guid();\n\n\t            $("<label>")\n\t                .addClass(styles.hidden)\n\t                .html(messages.placeholder)\n\t                .attr("for", inputId)\n\t                .appendTo(this.element);\n\n\t            this.input = $("<input type=\'text\'>")\n\t                .addClass(styles.input)\n\t                .attr("id", inputId)\n\t                .attr("placeholder", messages.placeholder)\n\t                .appendTo(this.element);\n\n\t            if (options.toolbar && options.toolbar.toggleable && options.toolbar.buttons && options.toolbar.buttons.length) {\n\t                $("<button>")\n\t                    .addClass(styles.button)\n\t                    .addClass(styles.buttonFlat)\n\t                    .addClass(styles.buttonIcon)\n\t                    .addClass(styles.buttonToggle)\n\t                    .attr("type", "button")\n\t                    .append($(TOGGLE_ICON))\n\t                    .appendTo(this.element)\n\t                    .attr("title", messages.toggleButton)\n\t                    .attr("aria-label", messages.toggleButton);\n\t            }\n\n\t            $("<button>")\n\t                .addClass(styles.button)\n\t                .addClass(styles.buttonFlat)\n\t                .addClass(styles.buttonIcon)\n\t                .addClass(styles.buttonSend)\n\t                .append($(SEND_ICON))\n\t                .appendTo(this.element)\n\t                .attr("title", messages.sendButton)\n\t                .attr("aria-label", messages.sendButton);\n\t        },\n\n\t        _attachEvents: function() {\n\t            var styles = ChatMessageBox.styles;\n\n\t            this.input\n\t                .on("keydown" + NS, proxy(this._keydown, this))\n\t                .on("input" + NS, proxy(this._input, this))\n\t                .on("focusout" + NS, proxy(this._inputFocusout, this));\n\n\t            this.element\n\t                .on("click" + NS, DOT + styles.buttonSend, proxy(this._buttonClick, this));\n\n\t            this.element\n\t                .on("click" + NS, DOT + styles.buttonToggle, proxy(this._toggleToolbar, this));\n\t        },\n\n\t        _input: function() {\n\t            var currentValue = this.input.val();\n\t            var start = currentValue.length > 0;\n\n\t            this._triggerTyping(start);\n\t        },\n\n\t        _keydown: function(e) {\n\t            var key = e.keyCode;\n\n\t            switch (key) {\n\t                case keys.ENTER:\n\t                    e.preventDefault();\n\n\t                    this._sendMessage();\n\t                    break;\n\t            }\n\t        },\n\n\t        _buttonClick: function(e) {\n\t            e.preventDefault();\n\n\t            this._sendMessage();\n\t        },\n\n\t        _sendMessage: function() {\n\t            var value = this.input.val();\n\n\t            if (!value.length) {\n\t                return;\n\t            }\n\n\t            this._triggerTyping(false);\n\n\t            var args = {\n\t                text: value\n\t            };\n\n\t            this.trigger("sendMessage", args);\n\n\t            this.input.val("");\n\t        },\n\n\t        _inputFocusout: function() {\n\t            this._triggerTyping(false);\n\t        },\n\n\t        _triggerTyping: function(start) {\n\t            if (start) {\n\t                if (!this._typing) {\n\t                    this.trigger("typingStart", {});\n\t                    this._typing = true;\n\t                }\n\t            } else {\n\t                if (this._typing) {\n\t                    this.trigger("typingEnd", {});\n\t                    this._typing = false;\n\t                }\n\t            }\n\t        },\n\n\t        _toggleToolbar: function (ev) {\n\t            this.trigger("toggleToolbar", { originalEvent: ev });\n\t        }\n\t    });\n\n\t    extend(true, ChatMessageBox, { styles: messageBoxStyles });\n\t    extend(kendo, {\n\t        chat: {\n\t            ChatMessageBox: ChatMessageBox\n\t        }\n\t    });\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/chat/messageBox.js?')},"./node_modules/@progress/kendo-ui/js/chat/toolbar.js":
/*!************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/chat/toolbar.js ***!
  \************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(21);\n\tmodule.exports = __webpack_require__(21);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 21:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function($, undefined) {\n\n\t    var kendo = window.kendo;\n\t    var Widget = kendo.ui.Widget;\n\t    var extend = $.extend;\n\t    var proxy = $.proxy;\n\t    var DOT = ".";\n\t    var NS = ".kendoChat";\n\n\t    var DATA_K_BUTTON_NAME = "kButtonName";\n\t    var SCROLL_LEFT_NAME = "chatToolbarScrollLeft";\n\t    var SCROLL_RIGHT_NAME = "chatToolbarScrollRight";\n\t    var VISIBLE = ":visible";\n\t    var DEFAULT_ANIMATION = {\n\t        effects: "expand:vertical",\n\t        duration: 200\n\t    };\n\t    var NO_ANIMATION = {\n\t        expand: {\n\t            show: true\n\t        },\n\t        collapse: {\n\t            hide: true\n\t        }\n\t    };\n\n\t    var toolbarStyles = {\n\t        button: "k-button",\n\t        buttonFlat: "k-flat",\n\t        buttonList: "k-button-list",\n\t        scrollButton: "k-scroll-button",\n\t        scrollButtonLeft: "k-scroll-button-left",\n\t        scrollButtonRight: "k-scroll-button-right",\n\t        scrollButtonLeftIcon: "k-icon k-i-arrow-chevron-left",\n\t        scrollButtonRightIcon: "k-icon k-i-arrow-chevron-right",\n\t        buttonIcon: "k-button-icon"\n\t    };\n\n\t    var ChatToolBar = Widget.extend({\n\t        init: function(element, options) {\n\t            options = extend({}, options, { name: "ChatToolbar" });\n\t            var toolbarOptions = options.toolbar;\n\t            var buttonsDefined = toolbarOptions.buttons && toolbarOptions.buttons.length;\n\n\t            Widget.fn.init.call(this, element, options);\n\n\t            if (buttonsDefined) {\n\t                this._createButtonList();\n\t            }\n\n\t            if (buttonsDefined && toolbarOptions.scrollable &&\n\t                    this.buttonsWidth() > this.element.width()) {\n\t                this._initScrolling();\n\t            }\n\n\t            this._setupAnimation();\n\n\t            if(buttonsDefined && toolbarOptions.toggleable) {\n\t                this.toggle(true);\n\t            }\n\n\t            this.element.on("click" + NS, proxy(this._onClick, this));\n\t        },\n\n\t        events: [\n\t            "click"\n\t        ],\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\n\t            this.element.off(NS);\n\t            this.element.empty();\n\t        },\n\n\t        _createButtonList: function () {\n\t            var that = this;\n\t            var styles = ChatToolBar.styles;\n\t            var buttons = that.options.toolbar.buttons;\n\t            var buttonList = $("<div class=\'" + styles.buttonList + "\'></div>");\n\n\t            for(var i = 0; i < buttons.length; i++) {\n\t                var button = that._createButton(buttons[i]);\n\t                buttonList.append(button);\n\t            }\n\n\t            buttonList.appendTo(this.element);\n\n\t            this.buttonList = buttonList;\n\t        },\n\n\t        _createButton: function (btnOptions) {\n\t            var styles = ChatToolBar.styles;\n\t            var buttonElm = $("<button>");\n\n\t            if (typeof btnOptions === "string") {\n\t                btnOptions = {\n\t                    name: btnOptions\n\t                };\n\t            }\n\n\t            buttonElm\n\t                .attr(btnOptions.attr || {})\n\t                .attr("title", btnOptions.text || btnOptions.name)\n\t                .attr("aria-label", btnOptions.text || btnOptions.name)\n\t                .attr("type", "button")\n\t                .addClass(btnOptions.name)\n\t                .data(DATA_K_BUTTON_NAME, btnOptions.name)\n\t                .addClass(styles.button);\n\n\t            if (btnOptions.iconClass) {\n\t                buttonElm.addClass(styles.buttonIcon);\n\t                buttonElm.prepend("<span class=\'" + btnOptions.iconClass + "\'></span>");\n\t            }\n\n\t            return buttonElm;\n\t        },\n\n\t        _onClick: function (ev) {\n\t            var styles = ChatToolBar.styles;\n\t            var target = $(ev.target).closest(DOT + styles.button);\n\n\t            if (target.is(DOT + styles.scrollButton) && !this._scrolling) {\n\t                this._scroll(target.data(DATA_K_BUTTON_NAME));\n\t            }\n\n\t            if(target.data(DATA_K_BUTTON_NAME)) {\n\t                this.trigger("click", {\n\t                    button: target[0],\n\t                    name: target.data(DATA_K_BUTTON_NAME),\n\t                    originalEvent: ev\n\t                });\n\t            }\n\t        },\n\n\t        _initScrolling: function () {\n\t            var styles = ChatToolBar.styles;\n\n\t            this.scrollButtonLeft = this._createButton({\n\t                name: SCROLL_LEFT_NAME,\n\t                iconClass: styles.scrollButtonLeftIcon,\n\t                attr: {\n\t                    "class": styles.scrollButton + " " + styles.scrollButtonLeft\n\t                }\n\t            });\n\n\t            this.scrollButtonRight = this._createButton({\n\t                name: SCROLL_RIGHT_NAME,\n\t                iconClass: styles.scrollButtonRightIcon,\n\t                attr: {\n\t                    "class": styles.scrollButton + " " + styles.scrollButtonRight\n\t                }\n\t            });\n\n\t            this.element.prepend(this.scrollButtonLeft);\n\t            this.element.append(this.scrollButtonRight);\n\t            this._refreshScrollButtons();\n\n\t            this.element.on("keydown" + NS, proxy(this._refreshScrollButtons, this));\n\t        },\n\n\t        _scroll: function (commandName) {\n\t            var that = this;\n\t            var buttonWidth = that.buttonWidth();\n\t            var maxScrollSize = this.maxScrollSize();\n\t            var scrollAmmount = commandName === SCROLL_LEFT_NAME ? buttonWidth * -1 : buttonWidth;\n\t            var currentScroll = this.currentScrollLeft();\n\t            var scrollValue = currentScroll + scrollAmmount;\n\t            scrollValue = Math.min(Math.max(scrollValue, 0), maxScrollSize);\n\n\t            if(commandName !== SCROLL_LEFT_NAME && commandName !== SCROLL_RIGHT_NAME) {\n\t                return;\n\t            }\n\n\t            kendo.scrollLeft(that.buttonList, scrollValue);\n\t            that._refreshScrollButtons(scrollValue);\n\t        },\n\n\t        _refreshScrollButtons: function (value) {\n\t            var maxScrollSize = this.maxScrollSize();\n\t            var currentScrollLeft = value === undefined || isNaN(parseInt(value, 10)) ? this.currentScrollLeft() : value;\n\n\t            if(!this.scrollButtonLeft && !this.scrollButtonRight) {\n\t                return;\n\t            }\n\n\t            this.scrollButtonLeft.toggle(currentScrollLeft !== 0);\n\t            this.scrollButtonRight.toggle(currentScrollLeft !== maxScrollSize);\n\t        },\n\n\t        _setupAnimation: function () {\n\t            var animation = this.options.toolbar.animation;\n\t            var defaultExpandAnimation = extend({}, DEFAULT_ANIMATION);\n\t            var defaultCollapseAnimation = extend({\n\t                reverse: true,\n\t                hide: true\n\t            }, DEFAULT_ANIMATION);\n\n\t            if (animation === false){\n\t                animation = extend(true, {}, NO_ANIMATION);\n\t            }  else {\n\t                animation = extend(true, {\n\t                    expand: defaultExpandAnimation,\n\t                    collapse: defaultCollapseAnimation\n\t                }, animation);\n\t            }\n\n\t            this.options.toolbar.animation = animation;\n\t        },\n\n\t        _animationComplete: function () {\n\t            this._refreshScrollButtons();\n\t        },\n\n\t        currentScrollLeft: function () {\n\t            return Math.round(kendo.scrollLeft(this.buttonList));\n\t        },\n\n\t        maxScrollSize: function () {\n\t            return Math.round(this.buttonList[0].scrollWidth - this.buttonList[0].clientWidth);\n\t        },\n\n\t        buttons: function () {\n\t            var styles = ChatToolBar.styles;\n\t            return this.buttonList ? this.buttonList.children(DOT + styles.button) : null;\n\t        },\n\n\t        buttonWidth: function () {\n\t            return Math.round(this.buttons().last().outerWidth(true));\n\t        },\n\n\t        buttonsWidth: function () {\n\t            var width = 0;\n\n\t            if(this.buttons()) {\n\t                width = this.buttonWidth() * this.buttons().length;\n\t            }\n\n\t            return width;\n\t        },\n\n\t        toggle: function (skipAnimation) {\n\t            var animation = this.options.toolbar.animation;\n\n\t            if (skipAnimation) {\n\t                animation = extend(true, {}, NO_ANIMATION);\n\t            }\n\n\t            animation.expand.complete = proxy(this._animationComplete, this);\n\t            animation.collapse.complete = proxy(this._animationComplete, this);\n\n\t            if(this.element.is(VISIBLE)) {\n\t                this.element.kendoStop().kendoAnimate(animation.collapse);\n\t            } else {\n\t                this.element.kendoStop().kendoAnimate(animation.expand);\n\t            }\n\n\t        }\n\t    });\n\n\t    extend(true, ChatToolBar, { styles: toolbarStyles });\n\t    extend(kendo.chat, {\n\t        ChatToolBar: ChatToolBar\n\t    });\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/chat/toolbar.js?')},"./node_modules/@progress/kendo-ui/js/chat/view.js":
/*!*********************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/chat/view.js ***!
  \*********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(22);\n\tmodule.exports = __webpack_require__(22);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 22:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20), __webpack_require__(23)  ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function($, undefined) {\n\n\t    var kendo = window.kendo;\n\t    var Widget = kendo.ui.Widget;\n\t    var extend = $.extend;\n\t    var proxy = $.proxy;\n\t    var DOT = ".";\n\t    var SPACE = " ";\n\t    var NS = ".kendoChat";\n\n\t    var MESSAGE_GROUP_TEMPLATE = kendo.template(\n\t        \'<div #:text# class="#=styles.messageGroup# #= url ? "" : styles.noAvatar #">\' +\n\t            \'<p class="#=styles.author#">#:text#</p>\' +\n\t            \'# if (url) { #\' +\n\t                \'<img src="#=url#" alt="#:text#" class="#=styles.avatar#">\' +\n\t            \'# } #\' +\n\t        \'</div>\');\n\n\t    var SELF_MESSAGE_GROUP_TEMPLATE = kendo.template(\n\t        \'<div me class="#=styles.messageGroup# #=styles.self# #= url ? "" : styles.noAvatar #">\' +\n\t            \'# if (url) { #\' +\n\t                \'<img src="#=url#" alt="#:text#" class="#=styles.avatar#">\' +\n\t            \'# } #\' +\n\t        \'</div>\');\n\n\t    var TEXT_MESSAGE_TEMPLATE = kendo.template(\n\t        \'<div class="#=styles.message#">\' +\n\t            \'<time class="#=styles.messageTime#">#= kendo.toString(kendo.parseDate(timestamp), "HH:mm:ss") #</time>\' +\n\t            \'<div class="#=styles.bubble#">#:text#</div>\' +\n\t        \'</div>\');\n\n\t    var TYPING_INDICATOR_TEMPLATE = kendo.template(\n\t        \'<div class="#=styles.messageListContent# #=styles.typingIndicatorBubble#">\' +\n\t            \'<p class="#=styles.author#">#:text#</p>\' +\n\t            \'<div class="#=styles.message#">\' +\n\t                \'<div class="#=styles.bubble#">\' +\n\t                    \'<div class="#=styles.typingIndicator#">\' +\n\t                        \'<span></span><span></span><span></span>\' +\n\t                    \'</div>\' +\n\t                \'</div>\' +\n\t            \'</div>\' +\n\t        \'</div>\');\n\n\t    var SUGGESTED_ACTIONS_TEMPLATE = kendo.template(\n\t        \'<div class="#=styles.suggestedActions#">\' +\n\t            \'# for (var i = 0; i < suggestedActions.length; i++) { #\' +\n\t                \'<span class="#=styles.suggestedAction#" data-value="#:suggestedActions[i].value#">#:suggestedActions[i].title#</span>\' +\n\t            \'# } #\' +\n\t        \'</div>\'\n\t        );\n\n\t    var HERO_CARD_TEMPLATE = kendo.template(\n\t        \'<div class="#=styles.card# #=styles.cardRich#">\' +\n\t            \'# if (typeof images !== "undefined" && images.length > 0) { #\' +\n\t                \'<img src="#:images[0].url#" alt="#:images[0].alt#" class="#=styles.cardImage#" />\' +\n\t            \'# } #\' +\n\t            \'<div class="#=styles.cardBody#">\' +\n\t                \'# if (typeof title !== "undefined") { #\' +\n\t                    \'<h5 class="#=styles.cardTitle#">#:title#</h5>\' +\n\t                \'# } #\' +\n\t                \'# if (typeof subtitle !== "undefined") { #\' +\n\t                    \'<h6 class="#=styles.cardSubtitle#">#:subtitle#</h6>\' +\n\t                \'# } #\' +\n\t                \'# if (typeof text !== "undefined") { #\' +\n\t                    \'<p>#:text#</p>\' +\n\t                \'# } #\' +\n\t            \'</div>\' +\n\t            \'# if (typeof buttons !== "undefined" && buttons.length > 0) { #\' +\n\t                \'<div class="#=styles.cardActions# #=styles.cardActionsVertical#">\' +\n\t                \'# for (var i = 0; i < buttons.length; i++) { #\' +\n\t                    \'<span class="#=styles.cardAction#"><span class="#=styles.button# #=styles.buttonPrimary#" data-value="#:buttons[i].value#">#:buttons[i].title#</span></span>\' +\n\t                \'# } #\' +\n\t                \'</div>\' +\n\t            \'# } #\' +\n\t        \'</div>\'\n\t        );\n\n\t    extend(kendo.chat, {\n\t        Templates: {},\n\t        Components: {}\n\t    });\n\n\t    kendo.chat.registerTemplate = function(templateName, template) {\n\t        kendo.chat.Templates[templateName] = kendo.template(template);\n\t    };\n\n\t    kendo.chat.getTemplate = function(templateName) {\n\t        return kendo.chat.Templates[templateName] || TEXT_MESSAGE_TEMPLATE;\n\t    };\n\n\t    kendo.chat.registerTemplate("text", TEXT_MESSAGE_TEMPLATE);\n\t    kendo.chat.registerTemplate("message", TEXT_MESSAGE_TEMPLATE);\n\t    kendo.chat.registerTemplate("typing", TYPING_INDICATOR_TEMPLATE);\n\t    kendo.chat.registerTemplate("suggestedAction", SUGGESTED_ACTIONS_TEMPLATE);\n\t    kendo.chat.registerTemplate("heroCard", HERO_CARD_TEMPLATE);\n\t    kendo.chat.registerTemplate("application/vnd.microsoft.card.hero", HERO_CARD_TEMPLATE);\n\n\t    kendo.chat.registerComponent = function(componentName, component) {\n\t        kendo.chat.Components[componentName] = component;\n\t    };\n\n\t    kendo.chat.getComponent = function(componentName) {\n\t        return kendo.chat.Components[componentName] || null;\n\t    };\n\n\t    var Component = kendo.chat.Component = kendo.Class.extend({\n\t        init: function(options, view) {\n\t            this.element = $(\'<div></div>\');\n\t            this.options = options;\n\t            this.view = view;\n\t        },\n\n\t        destroy: function() {\n\t            kendo.destroy(this.element);\n\t        }\n\t    });\n\n\t    var Calendar = Component.extend({\n\t        init: function(options, view) {\n\t            Component.fn.init.call(this, options, view);\n\n\t            this.element.kendoCalendar({\n\t                change: function() {\n\t                    view.trigger("suggestedAction", { text: kendo.toString(this.value(), \'d\'), type: "message" });\n\t                }\n\t            });\n\t        },\n\n\t        destroy: function() {\n\t        }\n\t    });\n\t    kendo.chat.registerComponent("calendar", Calendar);\n\n\t    var viewStyles = {\n\t        wrapper: "k-widget k-chat",\n\t        messageList: "k-avatars",\n\t        messageListContent: "k-message-list-content",\n\t        messageTime: "k-message-time",\n\t        messageGroup: "k-message-group",\n\t        message: "k-message",\n\t        only: "k-only",\n\t        first: "k-first",\n\t        middle: "k-middle",\n\t        last: "k-last",\n\t        author: "k-author",\n\t        avatar: "k-avatar",\n\t        noAvatar: "k-no-avatar",\n\t        self: "k-alt",\n\t        button: "k-button",\n\t        iconButton: "k-button-icon",\n\t        buttonPrimary: "k-flat k-primary",\n\t        scrollButtonIcon: "k-icon",\n\t        scrollButtonIconLeft: "k-i-arrow-chevron-left",\n\t        scrollButtonIconRight: "k-i-arrow-chevron-right",\n\t        typingIndicator: "k-typing-indicator",\n\t        typingIndicatorBubble: "k-typing-indicator-bubble",\n\t        bubble: "k-bubble",\n\t        suggestedActions: "k-quick-replies",\n\t        suggestedAction: "k-quick-reply",\n\t        cardWrapper: "k-card-container",\n\t        cardDeckScrollWrap: "k-card-deck-scrollwrap",\n\t        cardDeck: "k-card-deck",\n\t        cardList: "k-card-list",\n\t        card: "k-card",\n\t        cardRich: "k-card-type-rich",\n\t        cardBody: "k-card-body",\n\t        cardImage: "k-card-image",\n\t        cardTitle: "k-card-title",\n\t        cardSubtitle: "k-card-subtitle",\n\t        cardActions: "k-card-actions",\n\t        cardActionsVertical: "k-card-actions-vertical",\n\t        cardAction: "k-card-action",\n\t        selected: "k-state-selected"\n\t    };\n\n\t    var ChatView = kendo.chat.ChatView = Widget.extend({\n\t        init: function(element, options) {\n\t            Widget.fn.init.call(this, element, options);\n\n\t            this._list();\n\n\t            this._lastSender = null;\n\n\t            this.typingParticipants = [];\n\n\t            this._attachEvents();\n\n\t            this._scrollable();\n\t        },\n\n\t        events: [\n\t        ],\n\n\t        options: {\n\t            messages: {\n\t                isTyping: " is typing.",\n\t                areTyping: " are typing.",\n\t                and: " and "\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\n\t            if (this._scrollDraggable) {\n\t                this._scrollDraggable.destroy();\n\t            }\n\n\t            this.element.empty();\n\t            this.element.off(NS);\n\n\t            this.list = null;\n\t            this._lastSender = null;\n\t        },\n\n\t        _list: function() {\n\t            var viewStyles = ChatView.styles;\n\n\t            this.element\n\t                .addClass(viewStyles.messageList)\n\t                .attr("aria-live", "polite");\n\n\t            this.list = $("<div>")\n\t                .addClass(viewStyles.messageListContent)\n\t                .appendTo(this.element);\n\t        },\n\n\t        _attachEvents: function() {\n\t            var styles = ChatView.styles;\n\n\t            this.element\n\t                .on("click" + NS, proxy(this._listClick, this))\n\t                .on("click" + NS, DOT + styles.message, proxy(this._messageClick, this))\n\t                .on("click" + NS, DOT + styles.suggestedAction, proxy(this._suggestedActionClick, this))\n\t                .on("click" + NS, DOT + styles.cardAction + SPACE + DOT + styles.button, proxy(this._cardActionClick, this));\n\t        },\n\n\t        _scrollable: function() {\n\t            var viewStyles = ChatView.styles;\n\n\t            this.element\n\t                .on("click" + NS, DOT + viewStyles.cardDeckScrollWrap + SPACE + DOT + viewStyles.button, proxy(this._scrollButtonClick, this));\n\t        },\n\n\t        _scrollButtonClick: function(e) {\n\t            var viewStyles = ChatView.styles;\n\t            var button = $(e.currentTarget);\n\t            var scrollToLeft = button.find(DOT + viewStyles.scrollButtonIconLeft).length !== 0;\n\t            var scrollContainer = button.siblings(DOT + viewStyles.cardDeck);\n\t            var lastCard = scrollContainer.find(DOT + viewStyles.card).last();\n\t            var cardWidth = lastCard.outerWidth(true);\n\n\t            if (scrollToLeft) {\n\t                kendo.scrollLeft(scrollContainer, kendo.scrollLeft(scrollContainer) - cardWidth);\n\t            } else {\n\t                kendo.scrollLeft(scrollContainer, kendo.scrollLeft(scrollContainer) + cardWidth);\n\t            }\n\t        },\n\n\t        getTemplate: function(templateName) {\n\t            return kendo.chat.getTemplate(templateName);\n\t        },\n\n\t        getComponent: function(type) {\n\t           return kendo.chat.getComponent(type);\n\t        },\n\n\t        renderMessage: function(message, sender) {\n\t            if (!message.timestamp) {\n\t                message.timestamp = new Date();\n\t            }\n\n\t            if (!message.text) {\n\t                message.text = "";\n\t            }\n\n\t            var bubbleElement = this._renderTemplate(message.type, message);\n\n\t            this._renderBubble(message.type, bubbleElement, sender);\n\n\t            if (message.type == "typing") {\n\t                if (this.typingParticipants.length > 0) {\n\t                    this._removeTypingParticipant(sender);\n\t                }\n\t            } else {\n\t                this._lastSender = sender.id;\n\t            }\n\t        },\n\n\t        renderSuggestedActions: function(suggestedActions) {\n\t            this._removeSuggestedActions();\n\n\t            var element = this._renderTemplate("suggestedAction", { suggestedActions: suggestedActions });\n\n\t            this.list.append(element);\n\n\t            this._scrollToBottom();\n\t        },\n\n\t        renderAttachments: function(options) {\n\t            var wrapper = this._renderAttachmentWrapper(options.attachmentLayout);\n\t            var cardContainer = options.attachmentLayout === "carousel" ? wrapper.find(DOT + ChatView.styles.cardDeck) : wrapper;\n\t            var attachments = options.attachments;\n\n\t            if (!attachments.length) {\n\t                return;\n\t            }\n\n\t            for (var i = 0; i < attachments.length; i++) {\n\t                var cardElement = this._renderTemplate(attachments[i].contentType, attachments[i].content);\n\n\t                cardContainer.append(cardElement);\n\t            }\n\n\t            this._removeSuggestedActions();\n\t            this._removeTypingIndicator();\n\n\t            this.list.append(wrapper);\n\n\t            this._lastSender = null;\n\t        },\n\n\t        renderComponent: function(type) {\n\t            var componentType = this.getComponent(type);\n\t            var component = new componentType({}, this);\n\n\t            this.list.append(component.element);\n\n\t            this._scrollToBottom();\n\t        },\n\n\t        _renderAttachmentWrapper: function(layout) {\n\t            var viewStyles = ChatView.styles;\n\t            var wrapper = $("<div>");\n\n\t            if (layout === "carousel") {\n\t                wrapper.addClass(viewStyles.cardDeckScrollWrap);\n\n\t                var buttonLeft = this._renderScrollButton(viewStyles.scrollButtonIconLeft);\n\t                wrapper.append(buttonLeft);\n\n\t                wrapper.append($("<div>").addClass(viewStyles.cardDeck));\n\n\t                var buttonRight = this._renderScrollButton(viewStyles.scrollButtonIconRight);\n\t                wrapper.append(buttonRight);\n\t            } else {\n\t                wrapper.addClass(viewStyles.cardList);\n\t            }\n\n\t            return wrapper;\n\t        },\n\n\t        _renderScrollButton: function(directionClass) {\n\t            var viewStyles = ChatView.styles;\n\n\t            return $("<button>")\n\t                .addClass(viewStyles.button)\n\t                .addClass(viewStyles.iconButton)\n\t                .append($("<span>")\n\t                    .addClass(viewStyles.scrollButtonIcon)\n\t                    .addClass(directionClass)\n\t                );\n\t        },\n\n\t        _removeSuggestedActions: function() {\n\t            this.list.find(DOT + ChatView.styles.suggestedActions).remove();\n\t        },\n\n\t        _listClick: function(e) {\n\t            var styles = ChatView.styles;\n\t            var targetElement = $(e.target);\n\n\t            if (targetElement.hasClass(styles.message) || targetElement.parents(DOT + styles.message).length) {\n\t                return;\n\t            }\n\n\t            this._clearSelection();\n\t        },\n\n\t        _messageClick: function(e) {\n\t            this._clearSelection();\n\n\t            $(e.currentTarget).addClass(ChatView.styles.selected);\n\t        },\n\n\t        _suggestedActionClick: function(e) {\n\t            var text = $(e.target).data("value") || "";\n\n\t            this.trigger("actionClick", { text: text });\n\n\t            this._removeSuggestedActions();\n\t        },\n\n\t        _cardActionClick: function(e) {\n\t            var text = $(e.target).data("value") || "";\n\n\t            this.trigger("actionClick", { text: text });\n\t        },\n\n\t        _renderBubble: function(messageType, bubbleElement, sender) {\n\t            this._removeSuggestedActions();\n\t            this._removeTypingIndicator();\n\n\t            var group = this._getMessageGroup(sender, messageType);\n\n\t            this._appendToGroup(group, bubbleElement, messageType);\n\n\t            this._scrollToBottom();\n\t        },\n\n\t        _renderTemplate: function(type, options) {\n\t            var componentType = this.getComponent(type);\n\t            var element;\n\n\t            if (componentType) {\n\t                var component = new componentType(options, this);\n\n\t                element = component.element;\n\t            } else {\n\t                var template = this.getTemplate(type);\n\t                var templateOptions = extend(true, {}, options, { styles: ChatView.styles });\n\n\t                element = $(template(templateOptions));\n\t            }\n\n\t            return element;\n\t        },\n\n\t        _getMessageGroup: function(sender, messageType) {\n\t            var viewStyles = ChatView.styles;\n\t            var template = this._getMessageGroupTemplate(sender, messageType);\n\t            var appendTarget = messageType == "typing" ? this.element : this.list;\n\t            var group;\n\n\t            if (sender.id === this._lastSender && this._lastSender !== null && messageType !== "typing") {\n\t                group = this.list.find(DOT + viewStyles.messageGroup).last();\n\n\t                if (group.length) {\n\t                    return group;\n\t                }\n\t            }\n\n\t            return $(template({text: sender.name, url: sender.iconUrl, styles: viewStyles})).appendTo(appendTarget);\n\t        },\n\n\t        _getMessageGroupTemplate: function(sender, messageType) {\n\t            var isOwnMessage = sender.id === this.options.user.id;\n\t            var template = isOwnMessage ?\n\t                SELF_MESSAGE_GROUP_TEMPLATE :\n\t                MESSAGE_GROUP_TEMPLATE;\n\n\t            if(messageType == "typing") {\n\t                template = TYPING_INDICATOR_TEMPLATE;\n\t            }\n\n\t            return template;\n\t        },\n\n\t        _appendToGroup: function(group, messageElement, messageType) {\n\t            var viewStyles = ChatView.styles;\n\t            var children = group.find(DOT + viewStyles.message);\n\t            var childrenCount = children.length;\n\t            var indicator = this.element.find(DOT + viewStyles.typingIndicator);\n\n\t            if(indicator.length && messageType == "typing") {\n\t                return;\n\t            }\n\n\t            messageElement.addClass(childrenCount === 0 ? viewStyles.only : viewStyles.last);\n\n\t            children.filter(DOT + viewStyles.only)\n\t                .removeClass(viewStyles.only)\n\t                .addClass(viewStyles.first);\n\n\t            children.filter(DOT + viewStyles.last)\n\t                .removeClass(viewStyles.last)\n\t                .addClass(viewStyles.middle);\n\n\t            group.append(messageElement);\n\t        },\n\n\t        _renderTypingIndicator: function(sender) {\n\t            var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble),\n\t                indicatorList,\n\t                participants;\n\n\t            this._addTypingParticipant(sender);\n\n\t            if(indicator.length) {\n\t                participants = this._composeTypingParticipantsText(this.typingParticipants);\n\n\t                indicatorList = indicator.find(DOT + viewStyles.author).first();\n\t                indicatorList.text(participants);\n\n\t            } else {\n\t                $(TYPING_INDICATOR_TEMPLATE({\n\t                    text: sender.name + this.options.messages.isTyping,\n\t                    styles: viewStyles\n\t                })).appendTo(this.element);\n\t            }\n\n\t            this._scrollToBottom();\n\t        },\n\n\t        _addTypingParticipant: function(sender) {\n\t            var found = false;\n\t            for(var i = 0; i < this.typingParticipants.length; i += 1) {\n\t                if(this.typingParticipants[i].id == sender.id) {\n\t                    found = true;\n\t                    break;\n\t                }\n\t            }\n\t            if(!found) {\n\t                this.typingParticipants.push(sender);\n\t            }\n\t        },\n\n\t        _removeTypingParticipant: function(sender) {\n\t            var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble),\n\t                indicatorList,\n\t                participants;\n\n\t            if(indicator.length) {\n\t                for (var i = 0; i < this.typingParticipants.length; i += 1) {\n\t                    if (this.typingParticipants[i].id == sender.id) {\n\t                        this.typingParticipants.splice(i, 1);\n\t                    }\n\t                }\n\n\t                participants = this._composeTypingParticipantsText(this.typingParticipants);\n\n\t                if(participants === "") {\n\t                    indicator.remove();\n\t                } else {\n\t                    indicatorList = indicator.find(DOT + viewStyles.author).first();\n\t                    indicatorList.text(participants);\n\t                }\n\t            }\n\t        },\n\n\t        _composeTypingParticipantsText: function(participants) {\n\t            var messages = this.options.messages,\n\t                typingAction = participants.length == 1 ? messages.isTyping : messages.areTyping,\n\t                typingText = "";\n\n\t            if(participants.length === 0) {\n\t                return typingText;\n\t            }\n\n\t            typingText = this.typingParticipants.map(function(author) {\n\t                return author.name;\n\t            }).join(\', \').replace(/,(?!.*,)/gmi, messages.and.trimRight()) + typingAction;\n\n\t            return typingText;\n\t        },\n\n\t        _removeTypingIndicator: function() {\n\t            var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble);\n\n\t            if(indicator.length) {\n\t                this.typingParticipants = [];\n\t                indicator.remove();\n\t            }\n\t        },\n\n\t        _clearSelection: function() {\n\t            var selectedClass = ChatView.styles.selected;\n\n\t            this.element.find(DOT + selectedClass).removeClass(selectedClass);\n\t        },\n\n\t        _scrollToBottom: function() {\n\t            this.element.scrollTop(this.element.prop("scrollHeight"));\n\t        }\n\t    });\n\n\t    extend(true, ChatView, { styles: viewStyles });\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 23:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.draganddrop */ "./node_modules/@progress/kendo-ui/js/kendo.draganddrop.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/chat/view.js?')}}]);