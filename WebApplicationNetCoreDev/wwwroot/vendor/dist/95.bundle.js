(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{"./node_modules/@progress/kendo-ui/js/kendo.gantt.js":
/*!***********************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.gantt.js ***!
  \***********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1219);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 1027:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ "./node_modules/@progress/kendo-ui/js/kendo.data.js");\n\n/***/ }),\n\n/***/ 1054:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.popup */ "./node_modules/@progress/kendo-ui/js/kendo.popup.js");\n\n/***/ }),\n\n/***/ 1158:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.resizable */ "./node_modules/@progress/kendo-ui/js/kendo.resizable.js");\n\n/***/ }),\n\n/***/ 1159:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.window */ "./node_modules/@progress/kendo-ui/js/kendo.window.js");\n\n/***/ }),\n\n/***/ 1219:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1027), __webpack_require__(1054), __webpack_require__(1159), __webpack_require__(1158), __webpack_require__(1220), __webpack_require__(1221), __webpack_require__(1222), __webpack_require__(1223)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "gantt",\n\t    name: "Gantt",\n\t    category: "web",\n\t    description: "The Gantt component.",\n\t    depends: [ "data", "popup", "resizable", "window", "gantt.list", "gantt.timeline", "grid" ]\n\t};\n\n\t(function($, undefined) {\n\n\t    var kendo = window.kendo;\n\t    var keys = $.extend({F10: 121}, kendo.keys);\n\t    var supportsMedia = "matchMedia" in window;\n\t    var browser = kendo.support.browser;\n\t    var mobileOS = kendo.support.mobileOS;\n\t    var Observable = kendo.Observable;\n\t    var Widget = kendo.ui.Widget;\n\t    var DataSource = kendo.data.DataSource;\n\t    var ObservableObject = kendo.data.ObservableObject;\n\t    var ObservableArray = kendo.data.ObservableArray;\n\t    var Query = kendo.data.Query;\n\t    var isArray = $.isArray;\n\t    var inArray = $.inArray;\n\t    var isFunction = kendo.isFunction;\n\t    var proxy = $.proxy;\n\t    var extend = $.extend;\n\t    var isPlainObject = $.isPlainObject;\n\t    var map = $.map;\n\t    var outerWidth = kendo._outerWidth;\n\t    var outerHeight = kendo._outerHeight;\n\t    var defaultIndicatorWidth = 3;\n\t    var NS = ".kendoGantt";\n\t    var PERCENTAGE_FORMAT = "p0";\n\t    var TABINDEX = "tabIndex";\n\t    var CLICK = "click";\n\t    var WIDTH = "width";\n\t    var STRING = "string";\n\t    var DIRECTIONS = {\n\t        "down": {\n\t            origin: "bottom left",\n\t            position: "top left"\n\t        },\n\t        "up": {\n\t            origin: "top left",\n\t            position: "bottom left"\n\t        }\n\t    };\n\t    var ARIA_DESCENDANT = "aria-activedescendant";\n\t    var ARIA_LABEL = "aria-label";\n\t    var ACTIVE_CELL = "gantt_active_cell";\n\t    var ACTIVE_OPTION = "action-option-focused";\n\t    var DOT = ".";\n\t    var TASK_DELETE_CONFIRM = "Are you sure you want to delete this task?";\n\t    var DEPENDENCY_DELETE_CONFIRM = "Are you sure you want to delete this dependency?";\n\t    var TOGGLE_BUTTON_TEMPLATE = kendo.template(\'<button class="#=styles.buttonToggle#" type="button" \'+ ARIA_LABEL + \'="Toggle"><span class="#=styles.iconToggle#"></span></button>\');\n\t    var BUTTON_TEMPLATE = \'<button class="#=styles.button# #=className#" type="button" \'+\n\t            \'#if (action) {#\' +\n\t                \'data-action="#=action#"\' +\n\t            \'#}#\' +\n\t        \'><span class="#=iconClass#"></span><span>#=text#</span></button>\';\n\t    var COMMAND_BUTTON_TEMPLATE = \'<a class="#=className#" #=attr# href="\\\\#">#=text#</a>\';\n\t    var VIEWBUTTONTEMPLATE = kendo.template(\'<li class="#=styles.currentView# #=styles.viewButtonDefault#"><a href="\\\\#" class="#=styles.link#">&nbps;</a></li>\');\n\t    var HEADER_VIEWS_TEMPLATE = kendo.template(\'<ul class="#=styles.viewsWrapper#">\' +\n\t            \'#for(var view in views){#\' +\n\t                \'<li class="#=styles.viewButtonDefault# #=styles.viewButton#-#= view.toLowerCase() #" data-#=ns#name="#=view#"><a href="\\\\#" class="#=styles.link#">#=views[view].title#</a></li>\' +\n\t            \'#}#\' +\n\t        \'</ul>\');\n\t    var TASK_DROPDOWN_TEMPLATE = kendo.template(\'<div class="#=styles.popupWrapper#">\' +\n\t            \'<ul class="#=styles.popupList#" role="listbox">\' +\n\t                \'#for(var i = 0, l = actions.length; i < l; i++){#\' +\n\t                    \'<li class="#=styles.item#" data-action="#=actions[i].data#" role="option">#=actions[i].text#</span>\' +\n\t                \'#}#\' +\n\t            \'</ul>\' +\n\t        \'</div>\');\n\n\t    var DATERANGEEDITOR = function(container, options) {\n\t        var attr = { name: options.field, title: options.title };\n\t        var validationRules = options.model.fields[options.field].validation;\n\n\t        if (validationRules && isPlainObject(validationRules) && validationRules.message) {\n\t            attr[kendo.attr("dateCompare-msg")] = validationRules.message;\n\t        }\n\n\t        $(\'<input type="text" required \' +\n\t                kendo.attr("type") + \'="date" \' +\n\t                kendo.attr("role") + \'="datetimepicker" \' +\n\t                kendo.attr("bind") + \'="value:\' +\n\t                options.field +\'" \' +\n\t                kendo.attr("validate") + "=\'true\' />")\n\t            .attr(attr)\n\t            .appendTo(container);\n\n\t        $(\'<span \' + kendo.attr("for") + \'="\' + options.field + \'" class="k-invalid-msg"/>\')\n\t            .hide()\n\t            .appendTo(container);\n\t    };\n\n\t    var RESOURCESEDITOR = function(container, options) {\n\t        $(\'<a href="#" class="\' + options.styles.button + \'">\' + options.messages.assignButton + \'</a>\').click(options.click).appendTo(container);\n\t    };\n\n\t    var ganttStyles = {\n\t        wrapper: "k-widget k-gantt",\n\t        rowHeight: "k-gantt-rowheight",\n\t        listWrapper: "k-gantt-layout k-gantt-treelist",\n\t        list: "k-gantt-treelist",\n\t        timelineWrapper: "k-gantt-layout k-gantt-timeline",\n\t        timeline: "k-gantt-timeline",\n\t        splitBarWrapper: "k-splitbar k-state-default k-splitbar-horizontal k-splitbar-draggable-horizontal k-gantt-layout",\n\t        splitBar: "k-splitbar",\n\t        splitBarHover: "k-splitbar-horizontal-hover",\n\t        popupWrapper: "k-list-container",\n\t        popupList: "k-list k-reset",\n\t        resizeHandle: "k-resize-handle",\n\t        icon: "k-icon",\n\t        item: "k-item",\n\t        line: "k-gantt-line",\n\t        buttonDelete: "k-gantt-delete",\n\t        buttonCancel: "k-gantt-cancel",\n\t        buttonSave: "k-gantt-update",\n\t        buttonToggle: "k-gantt-toggle",\n\t        primary: "k-primary",\n\t        hovered: "k-state-hover",\n\t        selected: "k-state-selected",\n\t        focused: "k-state-focused",\n\t        gridHeader: "k-grid-header",\n\t        gridHeaderWrap: "k-grid-header-wrap",\n\t        gridContent: "k-grid-content",\n\t        tasks: "k-gantt-tasks",\n\t        popup: {\n\t            form: "k-popup-edit-form",\n\t            editForm: "k-gantt-edit-form",\n\t            formContainer: "k-edit-form-container",\n\t            resourcesFormContainer: "k-resources-form-container",\n\t            message: "k-popup-message",\n\t            buttonsContainer: "k-edit-buttons k-state-default",\n\t            button: "k-button",\n\t            editField: "k-edit-field",\n\t            editLabel: "k-edit-label",\n\t            resourcesField: "k-gantt-resources"\n\t        },\n\t        toolbar: {\n\t            headerWrapper: "k-floatwrap k-header k-gantt-toolbar",\n\t            footerWrapper: "k-floatwrap k-header k-gantt-toolbar",\n\t            toolbar: "k-gantt-toolbar",\n\t            expanded: "k-state-expanded",\n\t            views: "k-gantt-views",\n\t            viewsWrapper: "k-reset k-header k-gantt-views",\n\t            actions: "k-gantt-actions",\n\t            button: "k-button k-button-icontext",\n\t            buttonToggle: "k-button k-button-icon k-gantt-toggle",\n\t            iconPlus: "k-icon k-i-plus",\n\t            iconPdf: "k-icon k-i-file-pdf",\n\t            iconToggle: "k-icon k-i-layout-1-by-4",\n\t            viewButtonDefault: "k-state-default",\n\t            viewButton: "k-view",\n\t            currentView: "k-current-view",\n\t            link: "k-link",\n\t            pdfButton: "k-gantt-pdf",\n\t            appendButton: "k-gantt-create"\n\t        }\n\t    };\n\n\t    function selector(uid) {\n\t        return "[" + kendo.attr("uid") + (uid ? "=\'" + uid + "\']" : "]");\n\t    }\n\n\t    function trimOptions(options) {\n\t        delete options.name;\n\t        delete options.prefix;\n\n\t        delete options.remove;\n\t        delete options.edit;\n\t        delete options.add;\n\t        delete options.navigate;\n\n\t        return options;\n\t    }\n\n\t    function dateCompareValidator(input) {\n\t        if (input.filter("[name=end], [name=start]").length) {\n\t            var field = input.attr("name");\n\t            var picker = kendo.widgetInstance(input, kendo.ui);\n\t            var dates = {};\n\t            var container = input;\n\t            var editable;\n\t            var model;\n\n\t            while (container !== window && !editable) {\n\t                container = container.parent();\n\n\t                editable = container.data("kendoEditable");\n\t            }\n\n\t            model = editable ? editable.options.model : null;\n\n\t            if (!model) {\n\t                return true;\n\t            }\n\n\t            dates.start = model.start;\n\t            dates.end = model.end;\n\t            dates[field] = picker ? picker.value() : kendo.parseDate(input.val());\n\n\t            return dates.start <= dates.end;\n\t        }\n\n\t        return true;\n\t    }\n\n\t    function focusTable(table, direct) {\n\t        var wrapper = table.parents(\'[\' + kendo.attr("role") + \'="gantt"]\');\n\t        var scrollPositions = [];\n\t        var parents = scrollableParents(wrapper);\n\n\t        table.attr(TABINDEX, 0);\n\n\t        if (direct) {\n\t            parents.each(function(index, parent) {\n\t                scrollPositions[index] = $(parent).scrollTop();\n\t            });\n\t        }\n\n\t        try {\n\t            //The setActive method does not cause the document to scroll to the active object in the current page\n\t            table[0].setActive();\n\t        } catch (e) {\n\t            table[0].focus();\n\t        }\n\n\t        if (direct) {\n\t            parents.each(function(index, parent) {\n\t                $(parent).scrollTop(scrollPositions[index]);\n\t            });\n\t        }\n\t    }\n\n\t    function scrollableParents(element) {\n\t        return $(element).parentsUntil("body")\n\t                .filter(function(index, element) {\n\t                    var computedStyle = kendo.getComputedStyles(element, ["overflow"]);\n\t                    return computedStyle.overflow != "visible";\n\t                })\n\t                .add(window);\n\t    }\n\n\t    var defaultCommands;\n\n\t    var TaskDropDown = Observable.extend({\n\t        init: function(element, options) {\n\n\t            Observable.fn.init.call(this);\n\n\t            this.element = element;\n\t            this.options = extend(true, {}, this.options, options);\n\n\t            this._popup();\n\t        },\n\n\t        options: {\n\t            direction: "down",\n\t            navigatable: false\n\t        },\n\n\t        _current: function(method) {\n\t            var ganttStyles = Gantt.styles;\n\t            var current = this.list\n\t                .find(DOT + ganttStyles.focused);\n\t            var sibling = current[method]();\n\n\t            if (sibling.length) {\n\t                current\n\t                    .removeClass(ganttStyles.focused)\n\t                    .removeAttr("id");\n\t                sibling\n\t                    .addClass(ganttStyles.focused)\n\t                    .attr("id", ACTIVE_OPTION);\n\n\t                this.list.find("ul")\n\t                    .removeAttr(ARIA_DESCENDANT)\n\t                    .attr(ARIA_DESCENDANT, ACTIVE_OPTION);\n\t            }\n\t        },\n\n\t        _popup: function() {\n\t            var that = this;\n\t            var ganttStyles = Gantt.styles;\n\t            var itemSelector = "li" + DOT + ganttStyles.item;\n\t            var appendButtonSelector = DOT + ganttStyles.toolbar.appendButton;\n\t            var actions = this.options.messages.actions;\n\t            var navigatable = this.options.navigatable;\n\n\t            this.list = $(TASK_DROPDOWN_TEMPLATE({\n\t                styles: ganttStyles,\n\t                actions: [\n\t                    {\n\t                        data: "add",\n\t                        text: actions.addChild\n\t                    },\n\t                    {\n\t                        data: "insert-before",\n\t                        text: actions.insertBefore\n\t                    },\n\t                    {\n\t                        data: "insert-after",\n\t                        text: actions.insertAfter\n\t                    }\n\t                ]\n\t            }));\n\n\t            this.element.append(this.list);\n\n\t            this.popup = new kendo.ui.Popup(this.list,\n\t                extend({\n\t                    anchor: this.element.find(appendButtonSelector),\n\t                    open: function() {\n\t                        that._adjustListWidth();\n\t                    },\n\t                    animation: this.options.animation\n\t                }, DIRECTIONS[this.options.direction])\n\t            );\n\n\t            this.element\n\t                .on(CLICK + NS, appendButtonSelector, function(e) {\n\t                    var target = $(this);\n\t                    var action = target.attr(kendo.attr("action"));\n\n\t                    e.preventDefault();\n\n\t                    if (action) {\n\t                        that.trigger("command", { type: action });\n\t                    } else {\n\t                        that.popup.open();\n\n\t                        if (navigatable) {\n\t                            that.list\n\t                                .find("li:first")\n\t                                .addClass(ganttStyles.focused)\n\t                                .attr("id", ACTIVE_OPTION)\n\t                                .end()\n\t                                .find("ul")\n\t                                .attr({\n\t                                    TABINDEX: 0,\n\t                                    "aria-activedescendant": ACTIVE_OPTION\n\t                                })\n\t                                .focus();\n\t                        }\n\t                    }\n\t                });\n\n\t            this.list\n\t                .find(itemSelector)\n\t                .hover(function() {\n\t                    $(this).addClass(ganttStyles.hovered);\n\t                }, function() {\n\t                    $(this).removeClass(ganttStyles.hovered);\n\t                })\n\t                .end()\n\t                .on(CLICK + NS, itemSelector, function() {\n\t                    that.trigger("command", { type: $(this).attr(kendo.attr("action")) });\n\t                    that.popup.close();\n\t                });\n\n\t            if (navigatable) {\n\t                this.popup\n\t                    .bind("close", function() {\n\t                        that.list\n\t                            .find(itemSelector)\n\t                            .removeClass(ganttStyles.focused)\n\t                            .end()\n\t                            .find("ul")\n\t                            .attr(TABINDEX, 0);\n\n\t                        that.element\n\t                            .parents(\'[\' + kendo.attr("role") + \'="gantt"]\')\n\t                            .find(DOT + ganttStyles.gridContent + " > table:first")\n\t                            .focus();\n\t                    });\n\n\t                this.list\n\t                    .find("ul")\n\t                    .on("keydown" + NS, function(e) {\n\t                        var key = e.keyCode;\n\n\t                        switch (key) {\n\t                            case keys.UP:\n\t                                e.preventDefault();\n\t                                that._current("prev");\n\t                                break;\n\t                            case keys.DOWN:\n\t                                e.preventDefault();\n\t                                that._current("next");\n\t                                break;\n\t                            case keys.ENTER:\n\t                                that.list\n\t                                    .find(DOT + ganttStyles.focused)\n\t                                    .click();\n\t                                break;\n\t                            case keys.ESC:\n\t                                e.preventDefault();\n\t                                that.popup.close();\n\t                                break;\n\t                        }\n\t                    });\n\t            }\n\t        },\n\n\t        _adjustListWidth: function() {\n\t            var list = this.list;\n\t            var ganttStyles = Gantt.styles;\n\t            var width = list[0].style.width;\n\t            var wrapper = this.element.find(DOT + ganttStyles.toolbar.appendButton);\n\t            var listOuterWidth = outerWidth(list);\n\t            var computedStyle;\n\t            var computedWidth;\n\n\t            if (!list.data(WIDTH) && width) {\n\t                return;\n\t            }\n\n\t            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;\n\t            computedWidth = computedStyle ? parseFloat(computedStyle.width) : outerWidth(wrapper);\n\n\t            if (computedStyle && (browser.mozilla || browser.msie)) { // getComputedStyle returns different box in FF and IE.\n\t                computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);\n\t            }\n\n\t            if (list.css("box-sizing") !== "border-box") {\n\t                width = computedWidth - (outerWidth(list) - list.width());\n\t            } else {\n\t                width = computedWidth;\n\t            }\n\n\t            if (listOuterWidth > width) {\n\t                width = listOuterWidth;\n\t            }\n\n\t            list.css({\n\t                fontFamily: wrapper.css("font-family"),\n\t                width: width\n\t            })\n\t            .data(WIDTH, width);\n\t        },\n\n\t        destroy: function() {\n\t            clearTimeout(this._focusTimeout);\n\t            this.popup.destroy();\n\t            this.element.off(NS);\n\t            this.list.off(NS);\n\t            this.unbind();\n\t        }\n\t    });\n\n\t    var createDataSource = function(type, name) {\n\t        return function(options) {\n\t            options = isArray(options) ? { data: options } : options;\n\n\t            var dataSource = options || {};\n\t            var data = dataSource.data;\n\n\t            dataSource.data = data;\n\n\t            if (!(dataSource instanceof type) && dataSource instanceof DataSource) {\n\t                throw new Error("Incorrect DataSource type. Only " + name + " instances are supported");\n\t            }\n\n\t            return dataSource instanceof type ? dataSource : new type(dataSource);\n\t        };\n\t    };\n\n\t    var GanttDependency = kendo.data.Model.define({\n\t        id: "id",\n\t        fields: {\n\t            id: { type: "number" },\n\t            predecessorId: { type: "number" },\n\t            successorId: { type: "number" },\n\t            type: { type: "number" }\n\t        }\n\t    });\n\n\t    var GanttDependencyDataSource = DataSource.extend({\n\t        init: function(options) {\n\t            DataSource.fn.init.call(this, extend(true, {}, {\n\t                schema: {\n\t                    modelBase: GanttDependency,\n\t                    model: GanttDependency\n\t                }\n\t            }, options));\n\t        },\n\n\t        successors: function(id) {\n\t            return this._dependencies("predecessorId", id);\n\t        },\n\n\t        predecessors: function(id) {\n\t            return this._dependencies("successorId", id);\n\t        },\n\n\t        dependencies: function(id) {\n\t            var predecessors = this.predecessors(id);\n\t            var successors = this.successors(id);\n\n\t            predecessors.push.apply(predecessors, successors);\n\n\t            return predecessors;\n\t        },\n\n\t        _dependencies: function(field, id) {\n\t            var data = this.view();\n\t            var filter = {\n\t                field: field,\n\t                operator: "eq",\n\t                value: id\n\t            };\n\n\t            data = new Query(data).filter(filter).toArray();\n\n\t            return data;\n\t        }\n\t    });\n\n\t    GanttDependencyDataSource.create = createDataSource(GanttDependencyDataSource, "GanttDependencyDataSource");\n\n\t    var GanttTask = kendo.data.Model.define({\n\n\t        duration: function() {\n\t            var end = this.end;\n\t            var start = this.start;\n\n\t            return end - start;\n\t        },\n\n\t        isMilestone: function() {\n\t            return this.duration() === 0;\n\t        },\n\n\t        _offset: function(value) {\n\t            var field = ["start", "end"];\n\t            var newValue;\n\n\t            for (var i = 0; i < field.length; i++) {\n\t                newValue = new Date(this.get(field[i]).getTime() + value);\n\t                this.set(field[i], newValue);\n\t            }\n\t        },\n\n\t        id: "id",\n\t        fields: {\n\t            id: { type: "number" },\n\t            parentId: { type: "number", defaultValue: null, validation: { required: true } },\n\t            orderId: { type: "number", validation: { required: true } },\n\t            title: { type: "string", defaultValue: "New task" },\n\t            start: { type: "date", validation: { required: true } },\n\t            end: {\n\t                type: "date", validation: {\n\t                    required: true,\n\t                    dateCompare: dateCompareValidator,\n\t                    message: "End date should be after or equal to the start date"\n\t                }\n\t            },\n\t            percentComplete: { type: "number", validation: { required: true, min:0, max: 1, step: 0.01 } },\n\t            summary: { type: "boolean" },\n\t            expanded: { type: "boolean", defaultValue: true }\n\t        }\n\t    });\n\n\t    var GanttDataSource = DataSource.extend({\n\t        init: function(options) {\n\t            DataSource.fn.init.call(this, extend(true, {}, {\n\t                schema: {\n\t                    modelBase: GanttTask,\n\t                    model: GanttTask\n\t                }\n\t            }, options));\n\t        },\n\n\t        remove: function(task) {\n\t            var parentId = task.get("parentId");\n\t            var children = this.taskAllChildren(task);\n\n\t            this._removeItems(children);\n\n\t            task = DataSource.fn.remove.call(this, task);\n\n\t            this._childRemoved(parentId, task.get("orderId"));\n\n\t            return task;\n\t        },\n\n\t        add: function(task) {\n\t            if (!task) {\n\t                return;\n\t            }\n\n\t            task = this._toGanttTask(task);\n\n\t            return this.insert(this.taskSiblings(task).length, task);\n\t        },\n\n\t        insert: function(index, task) {\n\t            if (!task) {\n\t                return;\n\t            }\n\n\t            task = this._toGanttTask(task);\n\n\t            task.set("orderId", index);\n\n\t            task = DataSource.fn.insert.call(this, index, task);\n\n\t            this._reorderSiblings(task, this.taskSiblings(task).length - 1);\n\t            this._resolveSummaryFields(this.taskParent(task));\n\n\t            return task;\n\t        },\n\n\t        taskChildren: function(task) {\n\t            var data = this.view();\n\t            var filter = {\n\t                field: "parentId",\n\t                operator: "eq",\n\t                value: null\n\t            };\n\n\t            var order = (this._sort && this._sort.length) ? this._sort : {\n\t                field: "orderId",\n\t                dir: "asc"\n\t            };\n\t            var taskId;\n\n\t            if (!!task) {\n\t                taskId = task.get("id");\n\n\t                if (taskId === undefined || taskId === null || taskId === "") {\n\t                    return [];\n\t                }\n\n\t                filter.value = taskId;\n\t            }\n\n\t            data = new Query(data).filter(filter).sort(order).toArray();\n\n\t            return data;\n\t        },\n\n\t        taskAllChildren: function(task) {\n\t            var data = [];\n\t            var that = this;\n\t            var callback = function(task) {\n\t                var tasks = that.taskChildren(task);\n\n\t                data.push.apply(data, tasks);\n\t                map(tasks, callback);\n\t            };\n\n\t            if (!!task) {\n\t                callback(task);\n\t            } else {\n\t                data = this.view();\n\t            }\n\n\t            return data;\n\t        },\n\n\t        taskSiblings: function(task) {\n\t            if (!task) {\n\t                return null;\n\t            }\n\n\t            var parent = this.taskParent(task);\n\n\t            return this.taskChildren(parent);\n\t        },\n\n\t        taskParent: function(task) {\n\t            if (!task || task.get("parentId") === null) {\n\t                return null;\n\t            }\n\t            return this.get(task.parentId);\n\t        },\n\n\t        taskLevel: function(task) {\n\t            var level = 0;\n\t            var parent = this.taskParent(task);\n\n\t            while (parent !== null) {\n\t                level += 1;\n\t                parent = this.taskParent(parent);\n\t            }\n\n\t            return level;\n\t        },\n\n\t        taskTree: function(task) {\n\t            var data = [];\n\t            var current;\n\t            var tasks = this.taskChildren(task);\n\n\t            for (var i = 0, l = tasks.length; i < l; i++) {\n\t                current = tasks[i];\n\t                data.push(current);\n\n\t                if (current.get("expanded")) {\n\t                    var children = this.taskTree(current);\n\n\t                    data.push.apply(data, children);\n\t                }\n\t            }\n\n\t            return data;\n\t        },\n\n\t        update: function(task, taskInfo) {\n\t            var that = this;\n\t            var oldValue;\n\n\t            var offsetChildren = function(parentTask, offset) {\n\t                var children = that.taskAllChildren(parentTask);\n\n\t                for (var i = 0, l = children.length; i < l; i++) {\n\t                    children[i]._offset(offset);\n\t                }\n\t            };\n\n\t            var modelChangeHandler = function(e) {\n\t                var field = e.field;\n\t                var model = e.sender;\n\n\t                switch (field) {\n\t                    case "start":\n\t                        that._resolveSummaryStart(that.taskParent(model));\n\n\t                        offsetChildren(model, model.get(field).getTime() - oldValue.getTime());\n\t                        break;\n\t                    case "end":\n\t                        that._resolveSummaryEnd(that.taskParent(model));\n\t                        break;\n\t                    case "percentComplete":\n\t                        that._resolveSummaryPercentComplete(that.taskParent(model));\n\t                        break;\n\t                    case "orderId":\n\t                        that._reorderSiblings(model, oldValue);\n\t                        break;\n\t                }\n\t            };\n\n\t            if (taskInfo.parentId !== undefined) {\n\n\t                oldValue = task.get("parentId");\n\n\t                if (oldValue !== taskInfo.parentId) {\n\t                    task.set("parentId", taskInfo.parentId);\n\n\t                    that._childRemoved(oldValue, task.get("orderId"));\n\n\t                    task.set("orderId", that.taskSiblings(task).length - 1);\n\t                    that._resolveSummaryFields(that.taskParent(task));\n\t                }\n\n\t                delete taskInfo.parentId;\n\t            }\n\n\t            task.bind("change", modelChangeHandler);\n\n\t            for (var field in taskInfo) {\n\t                oldValue = task.get(field);\n\t                task.set(field, taskInfo[field]);\n\t            }\n\n\t            task.unbind("change", modelChangeHandler);\n\t        },\n\n\t        _resolveSummaryFields: function(summary) {\n\t            if (!summary) {\n\t                return;\n\t            }\n\n\t            this._updateSummary(summary);\n\n\t            if (!this.taskChildren(summary).length) {\n\t                return;\n\t            }\n\n\t            this._resolveSummaryStart(summary);\n\t            this._resolveSummaryEnd(summary);\n\t            this._resolveSummaryPercentComplete(summary);\n\t        },\n\n\t        _resolveSummaryStart: function(summary) {\n\t            var that = this;\n\t            var getSummaryStart = function(parentTask) {\n\t                var children = that.taskChildren(parentTask);\n\t                var min = children[0].start.getTime();\n\t                var currentMin;\n\n\t                for (var i = 1, l = children.length; i < l; i++) {\n\t                    currentMin = children[i].start.getTime();\n\t                    if (currentMin < min) {\n\t                        min = currentMin;\n\t                    }\n\t                }\n\n\t                return new Date(min);\n\t            };\n\n\t            this._updateSummaryRecursive(summary, "start", getSummaryStart);\n\t        },\n\n\t        _resolveSummaryEnd: function(summary) {\n\t            var that = this;\n\t            var getSummaryEnd = function(parentTask) {\n\t                var children = that.taskChildren(parentTask);\n\t                var max = children[0].end.getTime();\n\t                var currentMax;\n\n\t                for (var i = 1, l = children.length; i < l; i++) {\n\t                    currentMax = children[i].end.getTime();\n\t                    if (currentMax > max) {\n\t                        max = currentMax;\n\t                    }\n\t                }\n\n\t                return new Date(max);\n\t            };\n\n\t            this._updateSummaryRecursive(summary, "end", getSummaryEnd);\n\t        },\n\n\t        _resolveSummaryPercentComplete: function(summary) {\n\t            var that = this;\n\t            var getSummaryPercentComplete = function(parentTask) {\n\t                var children = that.taskChildren(parentTask);\n\t                var percentComplete = new Query(children).aggregate([{\n\t                    field: "percentComplete",\n\t                    aggregate: "average"\n\t                }]);\n\n\t                return percentComplete.percentComplete.average;\n\t            };\n\n\t            this._updateSummaryRecursive(summary, "percentComplete", getSummaryPercentComplete);\n\t        },\n\n\t        _updateSummaryRecursive: function(summary, field, callback) {\n\t            if (!summary) {\n\t                return;\n\t            }\n\n\t            var value = callback(summary);\n\n\t            summary.set(field, value);\n\n\t            var parent = this.taskParent(summary);\n\n\t            if (parent) {\n\t                this._updateSummaryRecursive(parent, field, callback);\n\t            }\n\t        },\n\n\t        _childRemoved: function(parentId, index) {\n\t            var parent = parentId === null ? null : this.get(parentId);\n\t            var children = this.taskChildren(parent);\n\n\t            for (var i = index, l = children.length; i < l; i++) {\n\t                children[i].set("orderId", i);\n\t            }\n\n\t            this._resolveSummaryFields(parent);\n\t        },\n\n\t        _reorderSiblings: function(task, oldOrderId) {\n\t            var orderId = task.get("orderId");\n\t            var direction = orderId > oldOrderId;\n\t            var startIndex = direction ? oldOrderId : orderId;\n\t            var endIndex = direction ? orderId : oldOrderId;\n\t            var newIndex = direction ? startIndex : startIndex + 1;\n\t            var siblings = this.taskSiblings(task);\n\n\t            if(!siblings.length){\n\t                return;\n\t            }\n\n\t            endIndex = Math.min(endIndex, siblings.length - 1);\n\n\t            for (var i = startIndex; i <= endIndex; i++) {\n\t                if (siblings[i] === task) {\n\t                    continue;\n\t                }\n\n\t                siblings[i].set("orderId", newIndex);\n\n\t                newIndex += 1;\n\t            }\n\t        },\n\n\t        _updateSummary: function(task) {\n\t            if (task !== null) {\n\t                var childCount = this.taskChildren(task).length;\n\n\t                task.set("summary", childCount > 0);\n\t            }\n\t        },\n\n\t        _toGanttTask: function(task) {\n\t            if (!(task instanceof GanttTask)) {\n\t                var taskInfo = task;\n\n\t                task = this._createNewModel();\n\t                task.accept(taskInfo);\n\t            }\n\n\t            return task;\n\t        }\n\t    });\n\n\t    GanttDataSource.create = createDataSource(GanttDataSource, "GanttDataSource");\n\n\t    extend(true, kendo.data, {\n\t        GanttDataSource: GanttDataSource,\n\t        GanttTask: GanttTask,\n\t        GanttDependencyDataSource: GanttDependencyDataSource,\n\t        GanttDependency: GanttDependency\n\t    });\n\n\t    var editors = {\n\t        desktop: {\n\t            dateRange: DATERANGEEDITOR,\n\t            resources: RESOURCESEDITOR\n\t        }\n\t    };\n\n\t    var Editor = kendo.Observable.extend({\n\t        init: function(element, options) {\n\t            kendo.Observable.fn.init.call(this);\n\n\t            this.element = element;\n\t            this.options = extend(true, {}, this.options, options);\n\t            this.createButton = this.options.createButton;\n\t        },\n\n\t        fields: function(editors, model) {\n\t            var that = this;\n\t            var options = this.options;\n\t            var messages = options.messages.editor;\n\t            var resources = options.resources;\n\t            var fields;\n\n\t            var click = function(e) {\n\t                e.preventDefault();\n\t                resources.editor(that.container.find(DOT + Gantt.styles.popup.resourcesField), model);\n\t            };\n\n\t            if (options.editable.template) {\n\t                fields = $.map(model.fields, function(value, key) {\n\t                            return { field: key };\n\t                        });\n\t            } else {\n\t                fields = [\n\t                    { field: "title", title: messages.title },\n\t                    { field: "start", title: messages.start, editor: editors.dateRange },\n\t                    { field: "end", title: messages.end, editor: editors.dateRange },\n\t                    { field: "percentComplete", title: messages.percentComplete, format: PERCENTAGE_FORMAT }\n\t                ];\n\n\t                if (model.get(resources.field)) {\n\t                    fields.push({ field: resources.field, title: messages.resources, messages: messages, editor: editors.resources, click: click, styles: Gantt.styles.popup });\n\t                }\n\t            }\n\n\t            return fields;\n\t        },\n\n\t        _buildEditTemplate: function(model, fields, editableFields) {\n\t            var resources = this.options.resources;\n\t            var template = this.options.editable.template;\n\t            var settings = extend({}, kendo.Template, this.options.templateSettings);\n\t            var paramName = settings.paramName;\n\t            var popupStyles = Gantt.styles.popup;\n\t            var html = "";\n\n\t            if (template) {\n\t                if (typeof template === STRING) {\n\t                    template = kendo.unescape(template);\n\t                }\n\n\t                html += (kendo.template(template, settings))(model);\n\t            } else {\n\t                for (var i = 0, length = fields.length; i < length; i++) {\n\t                    var field = fields[i];\n\n\t                    html += \'<div class="\' + popupStyles.editLabel + \'"><label for="\' + field.field + \'">\' + (field.title || field.field || "") + \'</label></div>\';\n\n\t                    if (field.field === resources.field) {\n\t                        html += \'<div class="\' + popupStyles.resourcesField + \'" style="display:none"></div>\';\n\t                    }\n\n\t                    if ((!model.editable || model.editable(field.field))) {\n\t                        editableFields.push(field);\n\t                        html += \'<div \' + kendo.attr("container-for") + \'="\' + field.field + \'" class="\' + popupStyles.editField + \'"></div>\';\n\t                    } else {\n\t                        var tmpl = "#:";\n\n\t                        if (field.field) {\n\t                            field = kendo.expr(field.field, paramName);\n\t                            tmpl += field + "==null?\'\':" + field;\n\t                        } else {\n\t                            tmpl += "\'\'";\n\t                        }\n\n\t                        tmpl += "#";\n\n\t                        tmpl = kendo.template(tmpl, settings);\n\n\t                        html += \'<div class="\' + popupStyles.editField + \'">\' + tmpl(model) + \'</div>\';\n\t                    }\n\t                }\n\t            }\n\n\t            return html;\n\t        }\n\t    });\n\n\t    var PopupEditor = Editor.extend({\n\t        destroy: function() {\n\t            this.close();\n\t            this.unbind();\n\t        },\n\n\t        editTask: function(task) {\n\t            this.editable = this._createPopupEditor(task);\n\t        },\n\n\t        close: function() {\n\t            var that = this;\n\n\t            var destroy = function() {\n\t                if (that.editable) {\n\t                    that.editable.destroy();\n\t                    that.editable = null;\n\t                    that.container = null;\n\t                }\n\n\t                if (that.popup) {\n\t                    that.popup.destroy();\n\t                    that.popup = null;\n\t                }\n\t            };\n\n\t            if (this.editable && this.container.is(":visible")) {\n\t                that.trigger("close", { window: that.container });\n\t                this.container.data("kendoWindow").bind("deactivate", destroy).close();\n\t            } else {\n\t                destroy();\n\t            }\n\t        },\n\n\t        showDialog: function(options) {\n\t            var buttons = options.buttons;\n\t            var popupStyles = Gantt.styles.popup;\n\n\t            var html = kendo.format(\'<div class="{0}"><div class="{1}"><p class="{2}">{3}</p><div class="{4}">\',\n\t                popupStyles.form, popupStyles.formContainer, popupStyles.message, options.text, popupStyles.buttonsContainer);\n\n\t            for (var i = 0, length = buttons.length; i < length; i++) {\n\t                html += this.createButton(buttons[i]);\n\t            }\n\n\t            html += \'</div></div></div>\';\n\n\t            var wrapper = this.element;\n\n\t            if (this.popup) {\n\t                this.popup.destroy();\n\t            }\n\n\t            var popup = this.popup = $(html).appendTo(wrapper)\n\t                .eq(0)\n\t                .on("click", DOT + popupStyles.button, function(e) {\n\t                    e.preventDefault();\n\n\t                    popup.close();\n\n\t                    var buttonIndex = $(e.currentTarget).index();\n\n\t                    buttons[buttonIndex].click();\n\t                })\n\t                .kendoWindow({\n\t                    modal: true,\n\t                    autoFocus: false,\n\t                    resizable: false,\n\t                    draggable: false,\n\t                    title: options.title,\n\t                    visible: false,\n\t                    deactivate: function() {\n\t                        this.destroy();\n\t                        wrapper.focus();\n\t                    }\n\t                })\n\t                .getKendoWindow();\n\n\t            popup.center().open();\n\n\t            popup.element.find(".k-primary").focus();\n\t        },\n\n\t        _createPopupEditor: function(task) {\n\t            var that = this;\n\t            var options = {};\n\t            var messages = this.options.messages;\n\t            var ganttStyles = Gantt.styles;\n\t            var popupStyles = ganttStyles.popup;\n\n\t            var html = kendo.format(\'<div {0}="{1}" class="{2} {3}"><div class="{4}">\',\n\t                kendo.attr("uid"), task.uid, popupStyles.form, popupStyles.editForm, popupStyles.formContainer);\n\n\t            var fields = this.fields(editors.desktop, task);\n\t            var editableFields = [];\n\n\t            html += this._buildEditTemplate(task, fields, editableFields);\n\n\t            html += \'<div class="\' + popupStyles.buttonsContainer + \'">\';\n\t            html += this.createButton({ name: "update", text: messages.save, className: Gantt.styles.primary });\n\t            html += this.createButton({ name: "cancel", text: messages.cancel });\n\t            if (that.options.editable.destroy !== false) {\n\t                html += this.createButton({ name: "delete", text: messages.destroy });\n\t            }\n\n\t            html += \'</div></div></div>\';\n\n\t            var container = this.container = $(html).appendTo(this.element)\n\t                .eq(0)\n\t                .kendoWindow(extend({\n\t                    modal: true,\n\t                    resizable: false,\n\t                    draggable: true,\n\t                    title: messages.editor.editorTitle,\n\t                    visible: false,\n\t                    close: function(e) {\n\t                        if (e.userTriggered) {\n\t                            if (that.trigger("cancel", { container: container, model: task })) {\n\t                                e.preventDefault();\n\t                            }\n\t                        }\n\t                    }\n\t                }, options));\n\n\t            var editableWidget = container\n\t                .kendoEditable({\n\t                    fields: editableFields,\n\t                    model: task,\n\t                    clearContainer: false,\n\t                    validateOnBlur: true,\n\t                    target: that.options.target\n\t                })\n\t                .data("kendoEditable");\n\n\t            kendo.cycleForm(container);\n\n\t            if (!this.trigger("edit", { container: container, model: task })) {\n\t                container.data("kendoWindow").center().open();\n\n\t                container.on(CLICK + NS, DOT + ganttStyles.buttonCancel, function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\n\t                    that.trigger("cancel", { container: container, model: task });\n\t                });\n\n\t                container.on(CLICK + NS, DOT + ganttStyles.buttonSave, function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\n\t                    var fields = that.fields(editors.desktop, task);\n\t                    var updateInfo = {};\n\t                    var field;\n\n\t                    for (var i = 0, length = fields.length; i < length; i++) {\n\t                        field = fields[i].field;\n\t                        updateInfo[field] = task.get(field);\n\t                    }\n\n\t                    that.trigger("save", { container: container, model: task, updateInfo: updateInfo });\n\t                });\n\n\t                container.on(CLICK + NS, DOT + ganttStyles.buttonDelete, function(e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\n\t                    that.trigger("remove", { container: container, model: task });\n\t                });\n\t            } else {\n\t                that.trigger("cancel", { container: container, model: task });\n\t            }\n\n\t            return editableWidget;\n\t        }\n\t    });\n\n\t    var ResourceEditor = Widget.extend({\n\t        init: function(element, options) {\n\t            Widget.fn.init.call(this, element, options);\n\n\t            this.wrapper = this.element;\n\t            this.model = this.options.model;\n\t            this.resourcesField = this.options.resourcesField;\n\t            this.createButton = this.options.createButton;\n\n\t            this._initContainer();\n\t            this._attachHandlers();\n\t        },\n\n\t        events: [\n\t            "save"\n\t        ],\n\n\t        open: function() {\n\t            this.window.center().open();\n\t        },\n\n\t        close: function() {\n\t            this.window.bind("deactivate", proxy(this.destroy, this)).close();\n\t        },\n\n\t        destroy: function() {\n\t            this._dettachHandlers();\n\n\t            this.grid.destroy();\n\t            this.grid = null;\n\n\t            this.window.destroy();\n\t            this.window = null;\n\n\t            Widget.fn.destroy.call(this);\n\n\t            kendo.destroy(this.wrapper);\n\n\t            this.element = this.wrapper = null;\n\t        },\n\n\t        _attachHandlers: function() {\n\t            var ganttStyles = Gantt.styles;\n\t            var grid = this.grid;\n\n\t            var closeHandler = this._cancelProxy = proxy(this._cancel, this);\n\t            this.container.on(CLICK + NS, DOT + ganttStyles.buttonCancel, this._cancelProxy);\n\n\t            this._saveProxy = proxy(this._save, this);\n\t            this.container.on(CLICK + NS, DOT + ganttStyles.buttonSave, this._saveProxy);\n\n\t            this.window.bind("close", function(e) {\n\t                if (e.userTriggered) {\n\t                    closeHandler(e);\n\t                }\n\t            });\n\n\t            grid.wrapper.on(CLICK + NS, "input[type=\'checkbox\']", function() {\n\t                var element = $(this);\n\t                var row = $(element).closest("tr");\n\t                var model = grid.dataSource.getByUid(row.attr(kendo.attr("uid")));\n\t                var value = $(element).is(":checked") ? 1 : "";\n\n\t                model.set("value", value);\n\t            });\n\t        },\n\n\t        _dettachHandlers: function() {\n\t            this._cancelProxy = null;\n\t            this._saveProxy = null;\n\t            this.container.off(NS);\n\t            this.grid.wrapper.off();\n\t        },\n\n\t        _cancel: function(e) {\n\t            e.preventDefault();\n\t            this.close();\n\t        },\n\n\t        _save: function(e) {\n\t            e.preventDefault();\n\n\t            this._updateModel();\n\n\t            if (!this.wrapper.is(DOT + Gantt.styles.popup.resourcesField)) {\n\t                this.trigger("save", { container: this.wrapper, model: this.model });\n\t            }\n\n\t            this.close();\n\t        },\n\n\t        _initContainer: function() {\n\t            var that = this;\n\t            var popupStyles = Gantt.styles.popup;\n\t            var dom = kendo.format(\'<div class="{0} {1}"><div class="{2} {3}"></div></div>"\',\n\t                popupStyles.form, popupStyles.editForm, popupStyles.formContainer, popupStyles.resourcesFormContainer);\n\n\t            dom = $(dom);\n\n\t            this.container = dom.find(DOT + popupStyles.resourcesFormContainer);\n\n\t            this.window = dom.kendoWindow({\n\t                modal: true,\n\t                resizable: false,\n\t                draggable: true,\n\t                visible: false,\n\t                title: this.options.messages.resourcesEditorTitle,\n\t                open: function() {\n\t                      that.grid.resize(true);\n\t                }\n\t            }).data("kendoWindow");\n\n\t            this._resourceGrid();\n\t            this._createButtons();\n\t        },\n\n\t        _resourceGrid: function() {\n\t            var that = this;\n\t            var messages = this.options.messages;\n\t            var element = $(\'<div id="resources-grid"/>\').appendTo(this.container);\n\n\t            this.grid = new kendo.ui.Grid(element, {\n\t                columns: [\n\t                    {\n\t                        field: "name",\n\t                        title: messages.resourcesHeader,\n\t                        template:\n\t                            "<label><input type=\'checkbox\' value=\'#=name#\'" +\n\t                                "# if (value > 0 && value !== null) {#" +\n\t                                       "checked=\'checked\'" +\n\t                                "# } #" +\n\t                            "/>#=name#</labe>"\n\t                    },\n\t                    {\n\t                        field: "value",\n\t                        title: messages.unitsHeader,\n\t                        template: function(dataItem) {\n\t                            var valueFormat = dataItem.format;\n\t                            var value = dataItem.value !== null ? dataItem.value : "";\n\n\t                            return valueFormat ? kendo.toString(value, valueFormat) : value;\n\t                        }\n\t                    }\n\t                ],\n\t                height: 280,\n\t                sortable: true,\n\t                editable: true,\n\t                filterable: true,\n\t                dataSource: {\n\t                    data: that.options.data,\n\t                    schema: {\n\t                        model: {\n\t                            id: "id",\n\t                            fields: {\n\t                                id: { from: "id" },\n\t                                name: { from: "name", type: "string", editable: false},\n\t                                value: { from: "value", type: "number", validation: this.options.unitsValidation },\n\t                                format: { from: "format", type: "string" }\n\t                            }\n\t                        }\n\t                    }\n\t                },\n\t                save: function(e) {\n\t                    var value = !!e.values.value;\n\t                    e.container.parent().find("input[type=\'checkbox\']").prop("checked", value);\n\t                }\n\t            });\n\t        },\n\n\t        _createButtons: function() {\n\t            var buttons = this.options.buttons;\n\t            var html = \'<div class="\' + Gantt.styles.popup.buttonsContainer + \'">\';\n\n\t            for (var i = 0, length = buttons.length; i < length; i++) {\n\t                html += this.createButton(buttons[i]);\n\t            }\n\n\t            html += "</div>";\n\n\t            this.container.append(html);\n\t        },\n\n\t        _updateModel: function() {\n\t            var resources = [];\n\t            var value;\n\t            var data = this.grid.dataSource.data();\n\n\t            for (var i = 0, length = data.length; i < length; i++) {\n\t                value = data[i].get("value");\n\t                if (value !== null && value > 0) {\n\t                    resources.push(data[i]);\n\t                }\n\t            }\n\n\t            this.model[this.resourcesField] = resources;\n\t        }\n\t    });\n\n\t    var Gantt = Widget.extend({\n\t        init: function(element, options, events) {\n\t            if (isArray(options)) {\n\t                options = { dataSource: options };\n\t            }\n\n\t            defaultCommands = {\n\t                append: {\n\t                    text: "Add Task",\n\t                    action: "add",\n\t                    className: Gantt.styles.toolbar.appendButton,\n\t                    iconClass: Gantt.styles.toolbar.iconPlus\n\t                },\n\t                pdf: {\n\t                    text: "Export to PDF",\n\t                    className: Gantt.styles.toolbar.pdfButton,\n\t                    iconClass: Gantt.styles.toolbar.iconPdf\n\t                }\n\t            };\n\n\t            Widget.fn.init.call(this, element, options);\n\n\t            if (events) {\n\t                this._events = events;\n\t            }\n\n\t            this._wrapper();\n\n\t            this._resources();\n\n\t            if (!this.options.views || !this.options.views.length) {\n\t                this.options.views = ["day", "week", "month"];\n\t            }\n\n\t            this._timeline();\n\n\t            this._toolbar();\n\n\t            this._footer();\n\n\t            this._adjustDimensions();\n\n\t            // Prevent extra refresh from setting the view\n\t            this._preventRefresh = true;\n\n\t            this.view(this.timeline._selectedViewName);\n\n\t            this._preventRefresh = false;\n\n\t            this._dataSource();\n\n\t            this._assignments();\n\n\t            this._dropDowns();\n\n\t            this._list();\n\n\t            this._dependencies();\n\n\t            this._resizable();\n\n\t            this._scrollable();\n\n\t            this._dataBind();\n\n\t            this._attachEvents();\n\n\t            this._createEditor();\n\n\t            kendo.notify(this);\n\t        },\n\n\t        events: [\n\t            "dataBinding",\n\t            "dataBound",\n\t            "add",\n\t            "edit",\n\t            "remove",\n\t            "cancel",\n\t            "save",\n\t            "change",\n\t            "navigate",\n\t            "moveStart",\n\t            "move",\n\t            "moveEnd",\n\t            "resizeStart",\n\t            "resize",\n\t            "resizeEnd",\n\t            "columnResize"\n\t        ],\n\n\t        options: {\n\t            name: "Gantt",\n\t            autoBind: true,\n\t            navigatable: false,\n\t            selectable: true,\n\t            editable: true,\n\t            resizable: false,\n\t            columnResizeHandleWidth: defaultIndicatorWidth,\n\t            columns: [],\n\t            views: [],\n\t            dataSource: {},\n\t            dependencies: {},\n\t            resources: {},\n\t            assignments: {},\n\t            taskTemplate: null,\n\t            messages: {\n\t                save: "Save",\n\t                cancel: "Cancel",\n\t                destroy: "Delete",\n\t                deleteTaskConfirmation: TASK_DELETE_CONFIRM,\n\t                deleteDependencyConfirmation: DEPENDENCY_DELETE_CONFIRM,\n\t                deleteTaskWindowTitle: "Delete task",\n\t                deleteDependencyWindowTitle: "Delete dependency",\n\t                views: {\n\t                    day: "Day",\n\t                    week: "Week",\n\t                    month: "Month",\n\t                    year: "Year",\n\t                    start: "Start",\n\t                    end: "End"\n\t                },\n\t                actions: {\n\t                    append: "Add Task",\n\t                    addChild: "Add Child",\n\t                    insertBefore: "Add Above",\n\t                    insertAfter: "Add Below",\n\t                    pdf: "Export to PDF"\n\t                },\n\t                editor: {\n\t                    editorTitle: "Task",\n\t                    resourcesEditorTitle: "Resources",\n\t                    title: "Title",\n\t                    start: "Start",\n\t                    end: "End",\n\t                    percentComplete: "Complete",\n\t                    resources: "Resources",\n\t                    assignButton: "Assign",\n\t                    resourcesHeader: "Resources",\n\t                    unitsHeader: "Units"\n\t                }\n\t            },\n\t            showWorkHours: true,\n\t            showWorkDays: true,\n\t            toolbar: null,\n\t            workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n\t            workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n\t            workWeekStart: 1,\n\t            workWeekEnd: 5,\n\t            hourSpan: 1,\n\t            snap: true,\n\t            height: 600,\n\t            listWidth: "30%",\n\t            rowHeight: null\n\t        },\n\n\t        select: function(value) {\n\t            var list = this.list;\n\n\t            if (!value) {\n\t                return list.select();\n\t            }\n\n\t            list.select(value);\n\n\t            this.list.element.find("table[role=treegrid]").focus();\n\t            return;\n\t        },\n\n\t        clearSelection: function() {\n\t            this.list.clearSelection();\n\t        },\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\n\t            if (this.dataSource) {\n\t                this.dataSource.unbind("change", this._refreshHandler);\n\t                this.dataSource.unbind("progress", this._progressHandler);\n\t                this.dataSource.unbind("error", this._errorHandler);\n\t            }\n\n\t            if (this.dependencies) {\n\t                this.dependencies.unbind("change", this._dependencyRefreshHandler);\n\t                this.dependencies.unbind("error", this._dependencyErrorHandler);\n\t            }\n\n\t            if (this.timeline) {\n\t                this.timeline.unbind();\n\t                this.timeline.destroy();\n\t            }\n\n\t            if (this.list) {\n\t                this.list.unbind();\n\t                this.list.destroy();\n\t            }\n\n\t            if (this.footerDropDown) {\n\t                this.footerDropDown.destroy();\n\t            }\n\n\t            if (this.headerDropDown) {\n\t                this.headerDropDown.destroy();\n\t            }\n\n\t            if (this._editor) {\n\t                this._editor.destroy();\n\t            }\n\n\t            if (this._resizeDraggable) {\n\t                this._resizeDraggable.destroy();\n\t            }\n\n\t            this.toolbar.off(NS);\n\n\t            if (supportsMedia) {\n\t                this._mediaQuery.removeListener(this._mediaQueryHandler);\n\t                this._mediaQuery = null;\n\t            }\n\n\t            $(window).off("resize" + NS, this._resizeHandler);\n\t            $(this.wrapper).off(NS);\n\n\t            this.toolbar = null;\n\t            this.footer = null;\n\t        },\n\n\t        setOptions: function(options) {\n\t            var newOptions = kendo.deepExtend({}, this.options, options);\n\n\t            var events = this._events;\n\n\t            if (!options.views) {\n\t                var selectedView = this.view().name;\n\n\t                newOptions.views = $.map(this.options.views, function(view) {\n\t                    var isSettings = isPlainObject(view);\n\t                    var name = isSettings ? ((typeof view.type !== "string") ? view.title : view.type) : view;\n\n\t                    if (selectedView === name) {\n\t                        if (isSettings) {\n\t                            view.selected = true;\n\t                        } else {\n\t                            view = { type: name, selected: true };\n\t                        }\n\t                    } else if (isSettings) {\n\t                        view.selected = false;\n\t                    }\n\n\t                    return view;\n\t                });\n\t            }\n\n\t            if (!options.dataSource) { newOptions.dataSource = this.dataSource; }\n\t            if (!options.dependencies) { newOptions.dependencies = this.dependencies; }\n\t            if (!options.resources) { newOptions.resources = this.resources; }\n\t            if (!options.assignments) { newOptions.assignments = this.assignments; }\n\n\t            this.destroy();\n\t            this.element.empty();\n\t            this.options = null;\n\n\t            this.init(this.element, newOptions, events);\n\n\t            Widget.fn._setEvents.call(this, newOptions);\n\t        },\n\n\t        _attachEvents: function() {\n\t            this._resizeHandler = proxy(this.resize, this, false);\n\t            $(window).on("resize" + NS, this._resizeHandler);\n\t        },\n\n\t        _wrapper: function() {\n\t            var ganttStyles = Gantt.styles;\n\t            var splitBarHandleClassName = [ganttStyles.icon, ganttStyles.resizeHandle].join(" ");\n\t            var options = this.options;\n\t            var height = options.height;\n\t            var width = options.width;\n\n\t            this.wrapper = this.element\n\t                            .addClass(ganttStyles.wrapper)\n\t                            .append("<div class=\'" + ganttStyles.listWrapper + "\'><div></div></div>")\n\t                            .append("<div class=\'" + ganttStyles.splitBarWrapper + "\'><div class=\'" + splitBarHandleClassName + "\'></div></div>")\n\t                            .append("<div class=\'" + ganttStyles.timelineWrapper + "\'><div></div></div>");\n\n\t            this.wrapper.find(DOT + ganttStyles.list).width(options.listWidth);\n\n\t            if (height) {\n\t                this.wrapper.height(height);\n\t            }\n\n\t            if (width) {\n\t                this.wrapper.width(width);\n\t            }\n\n\t            if (options.rowHeight) {\n\t                this.wrapper.addClass(ganttStyles.rowHeight);\n\t            }\n\t        },\n\n\t        _toolbar: function() {\n\t            var that = this;\n\t            var ganttStyles = Gantt.styles;\n\t            var viewsSelector = DOT + ganttStyles.toolbar.views + " > li";\n\t            var pdfSelector = DOT + ganttStyles.toolbar.pdfButton;\n\t            var toggleSelector = DOT + ganttStyles.buttonToggle;\n\t            var contentSelector = DOT + ganttStyles.gridContent;\n\t            var treelist = $(DOT + ganttStyles.list);\n\t            var timeline = $(DOT + ganttStyles.timeline);\n\t            var hoveredClassName = ganttStyles.hovered;\n\t            var actions = this.options.toolbar;\n\t            var actionsWrap = $("<div class=\'" + ganttStyles.toolbar.actions + "\'>");\n\t            var toolbar;\n\t            var views;\n\t            var toggleButton;\n\t            var handler = function(e) {\n\t                if (e.matches) {\n\t                    treelist.css({\n\t                        "display": "none",\n\t                        "max-width": 0\n\t                    });\n\t                } else {\n\t                    treelist.css({\n\t                        "display": "inline-block",\n\t                        "width": "30%",\n\t                        "max-width": "none"\n\t                    });\n\n\t                    timeline.css("display", "inline-block");\n\n\t                    that.refresh();\n\n\t                    timeline\n\t                        .find(contentSelector)\n\t                        .scrollTop(that.scrollTop);\n\t                }\n\n\t                that._resize();\n\t            };\n\n\t            if (!isFunction(actions)) {\n\t                actions = (typeof actions === STRING ? actions : this._actions(actions));\n\t                actions = proxy(kendo.template(actions), this);\n\t            }\n\n\t            toggleButton = $(TOGGLE_BUTTON_TEMPLATE({ styles: ganttStyles.toolbar }));\n\n\t            views = $(HEADER_VIEWS_TEMPLATE({\n\t                ns: kendo.ns,\n\t                views: this.timeline.views,\n\t                styles: ganttStyles.toolbar\n\t            }));\n\n\t            actionsWrap.append(actions({}));\n\n\t            toolbar = $("<div class=\'" + ganttStyles.toolbar.headerWrapper + "\'>")\n\t                .append(toggleButton)\n\t                .append(views)\n\t                .append(actionsWrap);\n\n\t            if (views.find("li").length > 1) {\n\t                views.prepend(VIEWBUTTONTEMPLATE({ styles: ganttStyles.toolbar }));\n\t            }\n\n\t            this.wrapper.prepend(toolbar);\n\t            this.toolbar = toolbar;\n\n\t            if (supportsMedia) {\n\t                this._mediaQueryHandler = proxy(handler, this);\n\t                this._mediaQuery = window.matchMedia("(max-width: 480px)");\n\t                this._mediaQuery.addListener(this._mediaQueryHandler);\n\t            }\n\n\t            toolbar\n\t                .on(CLICK + NS, viewsSelector, function(e) {\n\t                    e.preventDefault();\n\n\t                    var list = that.list;\n\t                    var name = $(this).attr(kendo.attr("name"));\n\t                    var currentView = views.find(DOT + ganttStyles.toolbar.currentView);\n\n\t                    if (currentView.is(":visible")) {\n\t                        currentView.parent().toggleClass(ganttStyles.toolbar.expanded);\n\t                    }\n\n\t                    if (list.editable && list.editable.trigger("validate")) {\n\t                        return;\n\t                    }\n\n\t                    if (!that.trigger("navigate", { view: name })) {\n\t                        that.view(name);\n\t                    }\n\n\t                    that.toolbar.find(DOT + ganttStyles.focused).removeClass(ganttStyles.focused);\n\t                })\n\t                .on("keydown" + NS, viewsSelector, function(e) {\n\t                    var views = $(DOT + ganttStyles.toolbar.views).children(":not(.k-current-view)");\n\t                    var focusedViewIndex = views.index((that._focusedView && that._focusedView[0]) || views.closest(DOT + ganttStyles.selected)[0]);\n\n\t                    if (e.keyCode === keys.RIGHT) {\n\t                        $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n\t                        that._focusedView = focusedViewIndex + 1 === views.length ? $(views[0]) : $(views[focusedViewIndex + 1]);\n\t                        that._focusedView.focus().addClass(ganttStyles.focused);\n\t                        e.preventDefault();\n\t                    } else if (e.keyCode === keys.LEFT) {\n\t                        $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n\t                        that._focusedView = focusedViewIndex === 0 ? $(views[views.length - 1]) : $(views[focusedViewIndex - 1]);\n\t                        that._focusedView.focus().addClass(ganttStyles.focused);\n\t                        e.preventDefault();\n\t                    } else if (e.keyCode === keys.DOWN && that.toolbar.find(DOT + ganttStyles.toolbar.currentView).parent().hasClass(ganttStyles.toolbar.expanded)) {\n\t                        $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n\t                        that._focusedView = focusedViewIndex + 1 === views.length ? $(views[0]) : $(views[focusedViewIndex + 1]);\n\t                        that._focusedView.focus().addClass(ganttStyles.focused);\n\t                        e.preventDefault();\n\t                    } else if (e.keyCode === keys.UP && that.toolbar.find(DOT + ganttStyles.toolbar.currentView).parent().hasClass(ganttStyles.toolbar.expanded)) {\n\t                        $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n\t                        that._focusedView = focusedViewIndex === 0 ? $(views[views.length - 1]) : $(views[focusedViewIndex - 1]);\n\t                        that._focusedView.focus().addClass(ganttStyles.focused);\n\t                        e.preventDefault();\n\t                    } else if ((e.keyCode === keys.ENTER || e.keyCode === keys.SPACEBAR) && that._focusedView) {\n\t                        that.view(that._focusedView.text().toLowerCase());\n\t                        e.preventDefault();\n\t                    } else if ((e.keyCode === keys.SPACEBAR || e.keyCode === keys.ENTER || (e.keyCode === keys.DOWN && e.altKey)) && that.toolbar.find(DOT + ganttStyles.toolbar.currentView + " > a").hasClass(ganttStyles.focused)) {\n\t                        that.toolbar.find(DOT + ganttStyles.toolbar.currentView).parent().toggleClass(ganttStyles.toolbar.expanded);\n\t                        e.preventDefault();\n\t                    } else if (e.keyCode === keys.ESC && that.toolbar.find(DOT + ganttStyles.toolbar.currentView).parent().hasClass(ganttStyles.toolbar.expanded)) {\n\t                        that.toolbar.find(DOT + ganttStyles.toolbar.currentView).parent().toggleClass(ganttStyles.toolbar.expanded).blur();\n\t                        that._focusedView = null;\n\t                        that.toolbar.find(DOT + ganttStyles.toolbar.currentView + " > a").addClass(ganttStyles.focused).focus();\n\t                        e.preventDefault();\n\t                    } else if (e.keyCode >= 49 && e.keyCode <= 57) {\n\t                        that.view(that.timeline._viewByIndex(e.keyCode - 49));\n\t                    }\n\t                })\n\t                .on(CLICK + NS, pdfSelector, function(e) {\n\t                    e.preventDefault();\n\n\t                    that.saveAsPDF();\n\t                })\n\t                .on(CLICK + NS, toggleSelector, function(e) {\n\t                    e.preventDefault();\n\n\t                    if (treelist.is(":visible")) {\n\t                        treelist.css({\n\t                            "display": "none",\n\t                            "width": "0"\n\t                        });\n\t                        timeline.css({\n\t                            "display": "inline-block",\n\t                            "width": "100%"\n\t                        });\n\n\t                        that.refresh();\n\n\t                        timeline\n\t                            .find(contentSelector)\n\t                            .scrollTop(that.scrollTop);\n\t                    } else {\n\t                        timeline.css({\n\t                            "display": "none",\n\t                            "width": 0\n\t                        });\n\t                        treelist\n\t                            .css({\n\t                                "display": "inline-block",\n\t                                "width": "100%",\n\t                                "max-width": "none"\n\t                            })\n\t                            .find(contentSelector)\n\t                            .scrollTop(that.scrollTop);\n\t                    }\n\n\t                    that._resize();\n\t                });\n\n\t            this.wrapper\n\t                .on("focusout" + NS, function(e) {\n\t                    if (!$(e.relatedTarget).closest(DOT + ganttStyles.toolbar.toolbar).length) {\n\t                        that.toolbar.find(DOT + ganttStyles.focused).removeClass(ganttStyles.focused);\n\t                    }\n\t                    if (!$(e.relatedTarget).closest(DOT + ganttStyles.toolbar.views).length) {\n\t                        that.toolbar.find(DOT + ganttStyles.toolbar.views).removeClass(ganttStyles.toolbar.expanded);\n\t                    }\n\t                })\n\t                .find(DOT + ganttStyles.toolbar.toolbar + " li")\n\t                .hover(function() {\n\t                    $(this).addClass(hoveredClassName);\n\t                }, function() {\n\t                    $(this).removeClass(hoveredClassName);\n\t                });\n\n\t        },\n\n\t        _actions: function() {\n\t            var options = this.options;\n\t            var editable = options.editable;\n\t            var actions = options.toolbar;\n\t            var html = "";\n\n\t            if (!isArray(actions)) {\n\t                if (editable && editable.create !== false) {\n\t                    actions = ["append"];\n\t                } else {\n\t                    return html;\n\t                }\n\t            }\n\n\t            for (var i = 0, length = actions.length; i < length; i++) {\n\t                html += this._createButton(actions[i]);\n\t            }\n\n\t            return html;\n\t        },\n\n\t        _footer: function() {\n\t            var editable = this.options.editable;\n\n\t            if (!editable || editable.create === false) {\n\t                return;\n\t            }\n\n\t            var ganttStyles = Gantt.styles.toolbar;\n\t            var messages = this.options.messages.actions;\n\t            var button = $(kendo.template(BUTTON_TEMPLATE)(extend(true, { styles: ganttStyles }, defaultCommands.append, { text: messages.append })));\n\t            var actionsWrap = $("<div class=\'" + ganttStyles.actions + "\'>").append(button);\n\t            var footer = $("<div class=\'" + ganttStyles.footerWrapper + "\'>").append(actionsWrap);\n\n\t            this.wrapper.append(footer);\n\t            this.footer = footer;\n\t        },\n\n\t        _createButton: function(command) {\n\t            var template = command.template || BUTTON_TEMPLATE;\n\t            var messages = this.options.messages.actions;\n\t            var commandName = typeof command === STRING ? command : command.name || command.text;\n\t            var className = defaultCommands[commandName] ? defaultCommands[commandName].className : "k-gantt-" + (commandName || "").replace(/\\s/g, "");\n\t            var options = {\n\t                iconClass: "",\n\t                action: "",\n\t                text: commandName,\n\t                className: className,\n\t                styles: Gantt.styles.toolbar\n\t            };\n\n\t            if (!commandName && !(isPlainObject(command) && command.template))  {\n\t                throw new Error("Custom commands should have name specified");\n\t            }\n\n\t            options = extend(true, options, defaultCommands[commandName], { text: messages[commandName] });\n\n\t            if (isPlainObject(command)) {\n\t                if (command.className && inArray(options.className, command.className.split(" ")) < 0) {\n\t                    command.className += " " + options.className;\n\t                }\n\n\t                options = extend(true, options, command);\n\t            }\n\n\t            return kendo.template(template)(options);\n\t        },\n\n\t        _adjustDimensions: function() {\n\t            var element = this.element;\n\t            var ganttStyles = Gantt.styles;\n\t            var listSelector = DOT + ganttStyles.list;\n\t            var timelineSelector = DOT + ganttStyles.timeline;\n\t            var splitBarSelector = DOT + ganttStyles.splitBar;\n\t            var toolbarHeight = outerHeight(this.toolbar);\n\t            var footerHeight = this.footer ? outerHeight(this.footer) : 0;\n\t            var totalHeight = element.height();\n\t            var totalWidth = element.width();\n\t            var splitBarWidth = outerWidth(element.find(splitBarSelector));\n\t            var treeListWidth = outerWidth(element.find(listSelector));\n\n\t            element\n\t                .children([listSelector, timelineSelector, splitBarSelector].join(","))\n\t                .height(totalHeight - (toolbarHeight + footerHeight))\n\t                .end()\n\t                .children(timelineSelector)\n\t                .width(totalWidth - (splitBarWidth + treeListWidth));\n\n\t            if (totalWidth < (treeListWidth + splitBarWidth)) {\n\t                element.find(listSelector).width(totalWidth - splitBarWidth);\n\t            }\n\t        },\n\n\t        _scrollTo: function(value) {\n\t            var view = this.timeline.view();\n\t            var list = this.list;\n\t            var attr = kendo.attr("uid");\n\t            var id = typeof value === "string" ? value :\n\t                value.closest("tr" + selector()).attr(attr);\n\t            var action;\n\t            var scrollTarget;\n\t            var scrollIntoView = function() {\n\t                if (scrollTarget.length !== 0) {\n\t                    action();\n\t                }\n\t            };\n\n\t            if (view.content.is(":visible")) {\n\t                scrollTarget = view.content.find(selector(id));\n\t                action = function() {\n\t                    view._scrollTo(scrollTarget);\n\t                };\n\t            } else {\n\t                scrollTarget = list.content.find(selector(id));\n\t                action = function() {\n\t                    scrollTarget.get(0).scrollIntoView();\n\t                };\n\t            }\n\n\t            scrollIntoView();\n\t        },\n\n\t        _dropDowns: function() {\n\t            var that = this;\n\t            var actionsSelector = DOT + Gantt.styles.toolbar.actions;\n\t            var actionMessages = this.options.messages.actions;\n\t            var timeline = this.timeline;\n\t            var editable = this.options.editable;\n\n\t            var handler = function(e) {\n\t                var type = e.type;\n\t                var orderId;\n\t                var dataSource = that.dataSource;\n\t                var task = dataSource._createNewModel();\n\t                var selected = that.dataItem(that.select());\n\t                var parent = dataSource.taskParent(selected);\n\t                var firstSlot = timeline.view()._timeSlots()[0];\n\t                var target = type === "add" ? selected : parent;\n\t                var editable = that.list.editable;\n\n\t                if (editable && editable.trigger("validate")) {\n\t                    return;\n\t                }\n\n\t                task.set("title", "New task");\n\n\t                if (target) {\n\t                    task.set("parentId", target.get("id"));\n\t                    task.set("start", target.get("start"));\n\t                    task.set("end", target.get("end"));\n\t                } else {\n\t                    task.set("start", firstSlot.start);\n\t                    task.set("end", firstSlot.end);\n\t                }\n\n\t                if (type !== "add") {\n\t                    orderId = selected.get("orderId");\n\t                    orderId = type === "insert-before" ? orderId : orderId + 1;\n\t                }\n\n\t                that._createTask(task, orderId);\n\t            };\n\n\t            if (!editable || editable.create === false) {\n\t                return;\n\t            }\n\n\t            this.footerDropDown = new TaskDropDown(this.footer.children(actionsSelector).eq(0), {\n\t                messages: {\n\t                    actions: actionMessages\n\t                },\n\t                direction: "up",\n\t                animation: {\n\t                    open: {\n\t                        effects: "slideIn:up"\n\t                    }\n\t                },\n\t                navigatable: that.options.navigatable\n\t            });\n\n\t            this.headerDropDown = new TaskDropDown(this.toolbar.children(actionsSelector).eq(0), {\n\t                messages: {\n\t                    actions: actionMessages\n\t                },\n\t                navigatable: that.options.navigatable\n\t            });\n\n\t            this.footerDropDown.bind("command", handler);\n\t            this.headerDropDown.bind("command", handler);\n\t        },\n\n\t        _list: function() {\n\t            var that = this;\n\t            var navigatable = that.options.navigatable;\n\t            var ganttStyles = Gantt.styles;\n\t            var listWrapper = this.wrapper.find(DOT + ganttStyles.list);\n\t            var element = listWrapper.find("> div");\n\t            var toggleButtons = this.wrapper.find(DOT + ganttStyles.toolbar.actions + " > button");\n\t            var options = {\n\t                columns: this.options.columns || [],\n\t                dataSource: this.dataSource,\n\t                selectable: this.options.selectable,\n\t                editable: this.options.editable,\n\t                resizable: this.options.resizable,\n\t                columnResizeHandleWidth: this.options.columnResizeHandleWidth,\n\t                listWidth: outerWidth(listWrapper),\n\t                resourcesField: this.resources.field,\n\t                rowHeight: this.options.rowHeight\n\t            };\n\t            var columns = options.columns;\n\t            var column;\n\t            var restoreFocus = function() {\n\t                if (navigatable) {\n\t                    that._current(that._cachedCurrent);\n\n\t                    focusTable(that.list.content.find("table"), true);\n\t                }\n\n\t                delete that._cachedCurrent;\n\t            };\n\n\t            for (var i = 0; i < columns.length; i++) {\n\t                column = columns[i];\n\n\t                if (column.field === this.resources.field && typeof column.editor !== "function") {\n\t                    column.editor = proxy(this._createResourceEditor, this);\n\t                }\n\t            }\n\n\t            this.list = new kendo.ui.GanttList(element, options);\n\n\t            this.list\n\t                .bind("render", function() {\n\t                    that._navigatable();\n\t                 }, true)\n\t                .bind("edit", function(e) {\n\t                    that._cachedCurrent = e.cell;\n\n\t                    if (that.trigger("edit", { task: e.model, container: e.cell })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("cancel", function(e) {\n\t                    if (that.trigger("cancel", { task: e.model, container: e.cell })) {\n\t                        e.preventDefault();\n\t                    }\n\t                    restoreFocus();\n\t                })\n\t                .bind("update", function(e) {\n\t                    that._updateTask(e.task, e.updateInfo);\n\t                    restoreFocus();\n\t                })\n\t                .bind("change", function() {\n\t                    that.trigger("change");\n\n\t                    var selection = that.list.select();\n\n\t                    if (selection.length) {\n\t                        toggleButtons.removeAttr("data-action", "add");\n\t                        that.timeline.select("[data-uid=\'" + selection.attr("data-uid") + "\']");\n\t                    } else {\n\t                        toggleButtons.attr("data-action", "add");\n\t                        that.timeline.clearSelection();\n\t                    }\n\t                })\n\t                .bind("columnResize", function(e) {\n\t                    that.trigger("columnResize", { column: e.column, oldWidth: e.oldWidth, newWidth: e.newWidth });\n\t                });\n\t        },\n\n\t        _timeline: function() {\n\t            var that = this;\n\t            var ganttStyles = Gantt.styles;\n\t            var options = trimOptions(extend(true, { resourcesField: this.resources.field }, this.options));\n\t            var element = this.wrapper.find(DOT + ganttStyles.timeline + " > div");\n\t            var currentViewSelector = DOT + ganttStyles.toolbar.currentView + " > " + DOT + ganttStyles.toolbar.link;\n\n\t            this.timeline = new kendo.ui.GanttTimeline(element, options);\n\n\t            this.timeline\n\t                .bind("navigate", function(e) {\n\t                    var viewName = e.view.replace(/\\./g, "\\\\.").toLowerCase();\n\n\t                    var text = that.toolbar\n\t                        .find(DOT + ganttStyles.toolbar.views +" > li")\n\t                        .removeClass(ganttStyles.selected)\n\t                        .end()\n\t                        .find(DOT + ganttStyles.toolbar.viewButton + "-" + viewName)\n\t                        .addClass(ganttStyles.selected)\n\t                        .find(DOT + ganttStyles.toolbar.link)\n\t                        .text();\n\n\t                    that.toolbar\n\t                        .find(currentViewSelector)\n\t                        .text(text);\n\n\t                    that.refresh();\n\t                })\n\t                .bind("moveStart", function(e) {\n\t                    var editable = that.list.editable;\n\n\t                    if (editable && editable.trigger("validate")) {\n\t                        e.preventDefault();\n\t                        return;\n\t                    }\n\n\t                    if (that.trigger("moveStart", { task: e.task })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("move", function(e) {\n\t                    var task = e.task;\n\t                    var start = e.start;\n\t                    var end = new Date(start.getTime() + task.duration());\n\n\t                    if (that.trigger("move", { task: task, start: start, end: end })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("moveEnd", function(e) {\n\t                    var task = e.task;\n\t                    var start = e.start;\n\t                    var end = new Date(start.getTime() + task.duration());\n\n\t                    if (!that.trigger("moveEnd", { task: task, start: start, end: end })) {\n\t                        that._updateTask(that.dataSource.getByUid(task.uid), {\n\t                            start: start,\n\t                            end: end\n\t                        });\n\t                    }\n\t                })\n\t                .bind("resizeStart", function(e) {\n\t                    var editable = that.list.editable;\n\n\t                    if (editable && editable.trigger("validate")) {\n\t                        e.preventDefault();\n\t                        return;\n\t                    }\n\n\t                    if (that.trigger("resizeStart", { task: e.task })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("resize", function(e) {\n\t                    if (that.trigger("resize", { task: e.task, start: e.start, end: e.end })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("resizeEnd", function(e) {\n\t                    var task = e.task;\n\t                    var updateInfo = {};\n\n\t                    if (e.resizeStart) {\n\t                        updateInfo.start = e.start;\n\t                    } else {\n\t                        updateInfo.end = e.end;\n\t                    }\n\n\t                    if (!that.trigger("resizeEnd", { task: task, start: e.start, end: e.end })) {\n\t                        that._updateTask(that.dataSource.getByUid(task.uid), updateInfo);\n\t                    }\n\t                })\n\t                .bind("percentResizeStart", function(e) {\n\t                    var editable = that.list.editable;\n\n\t                    if (editable && editable.trigger("validate")) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("percentResizeEnd", function(e) {\n\t                    that._updateTask(that.dataSource.getByUid(e.task.uid), { percentComplete: e.percentComplete });\n\t                })\n\t                .bind("dependencyDragStart", function(e) {\n\t                    var editable = that.list.editable;\n\n\t                    if (editable && editable.trigger("validate")) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("dependencyDragEnd", function(e) {\n\t                    var dependency = that.dependencies._createNewModel({\n\t                        type: e.type,\n\t                        predecessorId: e.predecessor.id,\n\t                        successorId: e.successor.id\n\t                    });\n\n\t                    that._createDependency(dependency);\n\t                })\n\t                .bind("select", function(e) {\n\t                    var editable = that.list.editable;\n\n\t                    if (editable) {\n\t                        editable.trigger("validate");\n\t                    }\n\n\t                    that.select("[data-uid=\'" + e.uid + "\']");\n\t                })\n\t                .bind("editTask", function(e) {\n\t                    var editable = that.list.editable;\n\n\t                    if (editable && editable.trigger("validate")) {\n\t                        return;\n\t                    }\n\n\t                    that.editTask(e.uid);\n\t                })\n\t                .bind("clear", function() {\n\t                    that.clearSelection();\n\t                })\n\t                .bind("removeTask", function(e) {\n\t                    var editable = that.list.editable;\n\n\t                    if (editable && editable.trigger("validate")) {\n\t                        return;\n\t                    }\n\n\t                    that.removeTask(that.dataSource.getByUid(e.uid));\n\t                })\n\t                .bind("removeDependency", function(e) {\n\t                    var editable = that.list.editable;\n\n\t                    if (editable && editable.trigger("validate")) {\n\t                        return;\n\t                    }\n\n\t                    that.removeDependency(that.dependencies.getByUid(e.uid));\n\t                });\n\t        },\n\n\t        _dataSource: function() {\n\t            var options = this.options;\n\t            var dataSource = options.dataSource;\n\n\t            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n\t            if (this.dataSource && this._refreshHandler) {\n\t                this.dataSource\n\t                    .unbind("change", this._refreshHandler)\n\t                    .unbind("progress", this._progressHandler)\n\t                    .unbind("error", this._errorHandler);\n\t            } else {\n\t                this._refreshHandler = proxy(this.refresh, this);\n\t                this._progressHandler = proxy(this._requestStart, this);\n\t                this._errorHandler = proxy(this._error, this);\n\t            }\n\n\t            this.dataSource = kendo.data.GanttDataSource.create(dataSource)\n\t                .bind("change", this._refreshHandler)\n\t                .bind("progress", this._progressHandler)\n\t                .bind("error", this._errorHandler);\n\t        },\n\n\t        _dependencies: function() {\n\t            var dependencies = this.options.dependencies || {};\n\t            var dataSource = isArray(dependencies) ? { data: dependencies } : dependencies;\n\n\t            if (this.dependencies && this._dependencyRefreshHandler) {\n\t                this.dependencies\n\t                    .unbind("change", this._dependencyRefreshHandler)\n\t                    .unbind("error", this._dependencyErrorHandler);\n\t            } else {\n\t                this._dependencyRefreshHandler = proxy(this.refreshDependencies, this);\n\t                this._dependencyErrorHandler = proxy(this._error, this);\n\t            }\n\n\t            this.dependencies = kendo.data.GanttDependencyDataSource.create(dataSource)\n\t                .bind("change", this._dependencyRefreshHandler)\n\t                .bind("error", this._dependencyErrorHandler);\n\t        },\n\n\t        _resources: function() {\n\t            var resources = this.options.resources;\n\t            var dataSource = resources.dataSource || {};\n\n\t            this.resources = {\n\t                field: "resources",\n\t                dataTextField: "name",\n\t                dataColorField: "color",\n\t                dataFormatField: "format"\n\t            };\n\n\t            extend(this.resources, resources);\n\n\t            this.resources.dataSource = kendo.data.DataSource.create(dataSource);\n\t        },\n\n\t        _assignments: function() {\n\t            var assignments = this.options.assignments;\n\t            var dataSource = assignments.dataSource || { };\n\n\t            if (this.assignments) {\n\t                this.assignments.dataSource\n\t                    .unbind("change", this._assignmentsRefreshHandler);\n\t            } else {\n\t                this._assignmentsRefreshHandler = proxy(this.refresh, this);\n\t            }\n\n\t            this.assignments = {\n\t                dataTaskIdField: "taskId",\n\t                dataResourceIdField: "resourceId",\n\t                dataValueField: "value"\n\t            };\n\n\t            extend(this.assignments, assignments);\n\n\t            this.assignments.dataSource = kendo.data.DataSource.create(dataSource);\n\n\t            this.assignments.dataSource.\n\t                bind("change", this._assignmentsRefreshHandler);\n\t        },\n\n\t        _createEditor: function() {\n\t            var that = this;\n\n\t            var editor = this._editor = new PopupEditor(this.wrapper, extend({}, this.options, {\n\t                target: this,\n\t                resources: {\n\t                    field: this.resources.field,\n\t                    editor: proxy(this._createResourceEditor, this)\n\t                },\n\t                createButton: proxy(this._createPopupButton, this)\n\t            }));\n\n\t            editor\n\t                .bind("cancel", function(e) {\n\t                    var task = that.dataSource.getByUid(e.model.uid);\n\n\t                    if (that.trigger("cancel", { container: e.container, task: task })) {\n\t                        e.preventDefault();\n\t                        return;\n\t                    }\n\n\t                    that.cancelTask();\n\t                })\n\t                .bind("edit", function(e) {\n\t                    var task = that.dataSource.getByUid(e.model.uid);\n\n\t                    if (that.trigger("edit", { container: e.container, task: task })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("save", function(e) {\n\t                    var task = that.dataSource.getByUid(e.model.uid);\n\n\t                    that.saveTask(task, e.updateInfo);\n\t                })\n\t                .bind("remove", function(e) {\n\t                    that.removeTask(e.model.uid);\n\t                })\n\t                .bind("close", that._onDialogClose);\n\t        },\n\n\t        _onDialogClose: function() {},\n\n\t        _createResourceEditor: function(container, options) {\n\t            var that = this;\n\t            var model = options instanceof ObservableObject ? options : options.model;\n\t            var id = model.get("id");\n\t            var messages = this.options.messages;\n\t            var resourcesField = this.resources.field;\n\t            var unitsValidation = { step: 0.01 };\n\t            var assignmentsModel = this.assignments.dataSource.options.schema.model;\n\n\t            if (assignmentsModel && assignmentsModel.fields.Units && assignmentsModel.fields.Units.validation) {\n\t                extend(true, unitsValidation, assignmentsModel.fields.Units.validation);\n\t            }\n\n\t            var editor = this._resourceEditor = new ResourceEditor(container, {\n\t                resourcesField: resourcesField,\n\t                unitsValidation: unitsValidation,\n\t                data: this._wrapResourceData(id),\n\t                model: model,\n\t                messages: extend({}, messages.editor),\n\t                buttons: [\n\t                    { name: "update", text: messages.save, className: Gantt.styles.primary },\n\t                    { name: "cancel", text: messages.cancel }\n\t                ],\n\t                createButton: proxy(this._createPopupButton, this),\n\t                save: function(e) {\n\t                    that._updateAssignments(e.model.get("id"), e.model.get(resourcesField));\n\t                }\n\t            });\n\n\t            editor.open();\n\t        },\n\n\t        _createPopupButton: function(command) {\n\t            var commandName = command.name || command.text;\n\t            var options = {\n\t                className: Gantt.styles.popup.button + " k-gantt-" + (commandName || "").replace(/\\s/g, ""),\n\t                text: commandName,\n\t                attr: ""\n\t            };\n\n\t            if (!commandName && !(isPlainObject(command) && command.template))  {\n\t                throw new Error("Custom commands should have name specified");\n\t            }\n\n\t            if (isPlainObject(command)) {\n\t                if (command.className) {\n\t                    command.className += " " + options.className;\n\t                }\n\n\t                options = extend(true, options, command);\n\t            }\n\n\t            return kendo.template(COMMAND_BUTTON_TEMPLATE)(options);\n\t        },\n\n\t        view: function(type) {\n\t            return this.timeline.view(type);\n\t        },\n\n\t        range: function (range) {\n\t            var dataSource = this.dataSource;\n\t            var view = this.view();\n\t            var timeline = this.timeline;\n\n\t            if (range) {\n\t                view.options.range = {\n\t                    start: range.start,\n\t                    end: range.end\n\t                };\n\n\t                timeline._render(dataSource.taskTree());\n\t                timeline._renderDependencies(this.dependencies.view());\n\t            }\n\n\t            return {\n\t                start: view.start,\n\t                end: view.end\n\t            };\n\t        },\n\n\t        date: function (date) {\n\t            var view = this.view();\n\n\t            if (date) {\n\t                view.options.date = date;\n\t                view._scrollToDate(date);\n\t            }\n\n\t            return view.options.date;\n\t        },\n\n\t        dataItem: function(value) {\n\t            if (!value) {\n\t                return null;\n\t            }\n\n\t            var list = this.list;\n\t            var element = list.content.find(value);\n\n\t            return list._modelFromElement(element);\n\t        },\n\n\t        setDataSource: function(dataSource) {\n\t            this.options.dataSource = dataSource;\n\n\t            this._dataSource();\n\n\t            this.list._setDataSource(this.dataSource);\n\n\t            if (this.options.autoBind) {\n\t                dataSource.fetch();\n\t            }\n\t        },\n\n\t        setDependenciesDataSource: function(dependencies) {\n\t            this.options.dependencies = dependencies;\n\n\t            this._dependencies();\n\n\t            if (this.options.autoBind) {\n\t                dependencies.fetch();\n\t            }\n\t        },\n\n\t        items: function() {\n\t            return this.wrapper.children(".k-task");\n\t        },\n\n\t        _updateAssignments: function(id, resources) {\n\t            var dataSource = this.assignments.dataSource;\n\t            var taskId = this.assignments.dataTaskIdField;\n\t            var resourceId = this.assignments.dataResourceIdField;\n\t            var hasMatch = false;\n\t            var assignments = new Query(dataSource.view())\n\t                .filter({\n\t                    field: taskId,\n\t                    operator: "eq",\n\t                    value: id\n\t                }).toArray();\n\t            var assignment;\n\t            var resource;\n\t            var value;\n\n\t            while (assignments.length) {\n\t                assignment = assignments[0];\n\n\t                for (var i = 0, length = resources.length; i < length; i++) {\n\t                    resource = resources[i];\n\n\t                    if (assignment.get(resourceId) === resource.get("id")) {\n\t                        value = resources[i].get("value");\n\t                        this._updateAssignment(assignment, value);\n\t                        resources.splice(i, 1);\n\t                        hasMatch = true;\n\t                        break;\n\t                    }\n\t                }\n\n\t                if (!hasMatch) {\n\t                    this._removeAssignment(assignment);\n\t                }\n\n\t                hasMatch = false;\n\n\t                assignments.shift();\n\t            }\n\n\t            for (var j = 0, newLength = resources.length; j < newLength; j++) {\n\t                resource = resources[j];\n\t                this._createAssignment(resource, id);\n\t            }\n\n\t            dataSource.sync();\n\t        },\n\n\t        cancelTask: function() {\n\t            var editor = this._editor;\n\t            var container = editor.container;\n\n\t            if (container) {\n\t                editor.close();\n\t            }\n\t        },\n\n\t        editTask: function(uid) {\n\t            var task = typeof uid === "string" ? this.dataSource.getByUid(uid) : uid;\n\n\t            if (!task) {\n\t                return;\n\t            }\n\n\t            var taskCopy = this.dataSource._createNewModel(task.toJSON());\n\t            taskCopy.uid = task.uid;\n\n\t            this.cancelTask();\n\n\t            this._editTask(taskCopy);\n\t        },\n\n\t        _editTask: function(task) {\n\t            this._editor.editTask(task);\n\t        },\n\n\t        saveTask: function(task, updateInfo) {\n\t            var editor = this._editor;\n\t            var container = editor.container;\n\t            var editable = editor.editable;\n\n\t            if (container && editable && editable.end()) {\n\t                this._updateTask(task, updateInfo);\n\t            }\n\t        },\n\n\t        _updateTask: function(task, updateInfo) {\n\t            var resourcesField = this.resources.field;\n\n\t            if (!this.trigger("save", { task: task, values: updateInfo })) {\n\t                this._preventRefresh = true;\n\n\t                this.dataSource.update(task, updateInfo);\n\n\t                if (updateInfo[resourcesField]) {\n\t                    this._updateAssignments(task.get("id"), updateInfo[resourcesField]);\n\t                }\n\n\t                this._syncDataSource();\n\t            }\n\t        },\n\n\t        _updateAssignment: function(assignment, value) {\n\t            var resourceValueField = this.assignments.dataValueField;\n\n\t            assignment.set(resourceValueField, value);\n\t        },\n\n\t        removeTask: function(uid) {\n\t            var that = this;\n\t            var task = typeof uid === "string" ? this.dataSource.getByUid(uid) : uid;\n\n\t            if (!task) {\n\t                return;\n\t            }\n\n\t            this._taskConfirm(function(cancel) {\n\t                if (!cancel) {\n\t                    that._removeTask(task);\n\t                }\n\t            }, task);\n\t        },\n\n\t        _createTask: function(task, index) {\n\t            if (!this.trigger("add", {\n\t                task: task,\n\t                dependency: null\n\t            })) {\n\t                var dataSource = this.dataSource;\n\n\t                this._preventRefresh = true;\n\n\t                if (index === undefined) {\n\t                    dataSource.add(task);\n\t                } else {\n\t                    dataSource.insert(index, task);\n\t                }\n\n\t                this._scrollToUid = task.uid;\n\t                this._syncDataSource();\n\t            }\n\t        },\n\n\t        _createDependency: function(dependency) {\n\t            if (!this.trigger("add", {\n\t                task: null,\n\t                dependency: dependency\n\t            })) {\n\t                this._preventDependencyRefresh = true;\n\n\t                this.dependencies.add(dependency);\n\n\t                this._preventDependencyRefresh = false;\n\n\t                this.dependencies.sync();\n\t            }\n\t        },\n\n\t        _createAssignment: function(resource, id) {\n\t            var assignments = this.assignments;\n\t            var dataSource = assignments.dataSource;\n\t            var taskId = assignments.dataTaskIdField;\n\t            var resourceId = assignments.dataResourceIdField;\n\t            var resourceValue = assignments.dataValueField;\n\t            var assignment = dataSource._createNewModel();\n\n\t            assignment[taskId] = id;\n\t            assignment[resourceId] = resource.get("id");\n\t            assignment[resourceValue] = resource.get("value");\n\n\t            dataSource.add(assignment);\n\t        },\n\n\t        removeDependency: function(uid) {\n\t            var that = this;\n\t            var dependency = typeof uid === "string" ? this.dependencies.getByUid(uid) : uid;\n\n\t            if (!dependency) {\n\t                return;\n\t            }\n\n\t            this._dependencyConfirm(function(cancel) {\n\t                if (!cancel) {\n\t                    that._removeDependency(dependency);\n\t                }\n\t            }, dependency);\n\t        },\n\n\t        _removeTaskDependencies: function(task, dependencies) {\n\t            this._preventDependencyRefresh = true;\n\n\t            for (var i = 0, length = dependencies.length; i < length; i++) {\n\t                this.dependencies.remove(dependencies[i]);\n\t            }\n\n\t            this._preventDependencyRefresh = false;\n\n\t            this.dependencies.sync();\n\t        },\n\n\t        _removeTaskAssignments: function(task) {\n\t            var dataSource = this.assignments.dataSource;\n\t            var assignments = dataSource.view();\n\t            var filter = {\n\t                field: this.assignments.dataTaskIdField,\n\t                operator: "eq",\n\t                value: task.get("id")\n\t            };\n\n\t            assignments = new Query(assignments).filter(filter).toArray();\n\n\t            this._preventRefresh = true;\n\n\t            for (var i = 0, length = assignments.length; i < length; i++) {\n\t                dataSource.remove(assignments[i]);\n\t            }\n\n\t            this._preventRefresh = false;\n\n\t            dataSource.sync();\n\t        },\n\n\t        _removeTask: function(task) {\n\t            var dependencies = this.dependencies.dependencies(task.id);\n\n\t            if (!this.trigger("remove", {\n\t                task: task,\n\t                dependencies: dependencies\n\t            })) {\n\t                this._removeTaskDependencies(task, dependencies);\n\t                this._removeTaskAssignments(task);\n\n\t                this._preventRefresh = true;\n\n\t                if (this.dataSource.remove(task)) {\n\t                    this._syncDataSource();\n\t                }\n\n\t                this._preventRefresh = false;\n\t            }\n\t        },\n\n\t        _removeDependency: function(dependency) {\n\t            if (!this.trigger("remove", {\n\t                task: null,\n\t                dependencies: [dependency]\n\t            })) {\n\t                if (this.dependencies.remove(dependency)) {\n\t                    this.dependencies.sync();\n\t                }\n\t            }\n\t        },\n\n\t        _removeAssignment: function(assignment) {\n\t            this.assignments.dataSource.remove(assignment);\n\t        },\n\n\t        _taskConfirm: function(callback, task) {\n\t            var messages = this.options.messages;\n\n\t            this._confirm(callback, {\n\t                model: task,\n\t                text: messages.deleteTaskConfirmation,\n\t                title: messages.deleteTaskWindowTitle\n\t            });\n\t        },\n\n\t        _dependencyConfirm: function(callback, dependency) {\n\t            var messages = this.options.messages;\n\n\t            this._confirm(callback, {\n\t                model: dependency,\n\t                text: messages.deleteDependencyConfirmation,\n\t                title: messages.deleteDependencyWindowTitle\n\t            });\n\t        },\n\n\t        _confirm: function(callback, options) {\n\t            var editable = this.options.editable;\n\t            var messages;\n\t            var buttons;\n\n\t            if (editable === true || editable.confirmation !== false) {\n\t                messages = this.options.messages;\n\t                buttons = [\n\t                    { name: "delete", text: messages.destroy, className: Gantt.styles.primary, click: function() { callback(); } },\n\t                    { name: "cancel", text: messages.cancel, click: function() { callback(true); } }\n\t                ];\n\n\t                this.showDialog(extend(true, {}, options, { buttons: buttons }));\n\t            } else {\n\t                callback();\n\t            }\n\t        },\n\n\t        showDialog: function(options) {\n\t            this._editor.showDialog(options);\n\t        },\n\n\t        refresh: function() {\n\t            if (this._preventRefresh || this.list.editable) {\n\t                return;\n\t            }\n\n\t            this._progress(false);\n\n\t            var dataSource = this.dataSource;\n\t            var taskTree = dataSource.taskTree();\n\t            var scrollToUid = this._scrollToUid;\n\t            var current;\n\t            var cachedUid;\n\t            var cachedIndex = -1;\n\n\t            if (this.current) {\n\t                cachedUid = this.current.closest("tr").attr(kendo.attr("uid"));\n\t                cachedIndex = this.current.index();\n\t            }\n\n\t            if (this.trigger("dataBinding")) {\n\t                return;\n\t            }\n\n\t            if (this.resources.dataSource.data().length !== 0) {\n\t                this._assignResources(taskTree);\n\t            }\n\n\t            if (this._editor) {\n\t                this._editor.close();\n\t            }\n\n\t            this.clearSelection();\n\t            this.list._render(taskTree);\n\t            this.timeline._render(taskTree);\n\t            this.timeline._renderDependencies(this.dependencies.view());\n\n\t            if (scrollToUid) {\n\t                this._scrollTo(scrollToUid);\n\t                this.select(selector(scrollToUid));\n\t            }\n\n\t            if ((scrollToUid || cachedUid) && cachedIndex >= 0) {\n\t                current = this.list.content\n\t                    .find("tr" + selector((scrollToUid || cachedUid)) + " > td:eq(" + cachedIndex + ")");\n\n\t                this._current(current);\n\t            }\n\n\t            this._scrollToUid = null;\n\n\t            this.trigger("dataBound");\n\t        },\n\n\t        refreshDependencies: function() {\n\t            if (this._preventDependencyRefresh) {\n\t                return;\n\t            }\n\n\t            if (this.trigger("dataBinding")) {\n\t                return;\n\t            }\n\n\t            this.timeline._renderDependencies(this.dependencies.view());\n\n\t            this.trigger("dataBound");\n\t        },\n\n\t        _assignResources: function(taskTree) {\n\t            var resources = this.resources;\n\t            var assignments = this.assignments;\n\t            var groupAssigments = function() {\n\t                var data = assignments.dataSource.view();\n\t                var group = {\n\t                    field: assignments.dataTaskIdField\n\t                };\n\n\t                data = new Query(data).group(group).toArray();\n\n\t                return data;\n\t            };\n\t            var assigments = groupAssigments();\n\t            var applyTaskResource = function(task, action) {\n\t                var taskId = task.get("id");\n\n\t                kendo.setter(resources.field)(task, new ObservableArray([]));\n\n\t                for (var i = 0, length = assigments.length; i < length; i++) {\n\t                    if (assigments[i].value === taskId) {\n\t                        action(task, assigments[i].items);\n\t                    }\n\t                }\n\t            };\n\t            var wrapTask = function(task, items) {\n\t                for (var j = 0, length = items.length; j < length; j++) {\n\t                    var item = items[j];\n\t                    var resource = resources.dataSource.get(item.get(assignments.dataResourceIdField));\n\t                    var resourceValue = item.get(assignments.dataValueField);\n\t                    var resourcedId = item.get(assignments.dataResourceIdField);\n\t                    var valueFormat = resource.get(resources.dataFormatField) || PERCENTAGE_FORMAT;\n\t                    var formatedValue = kendo.toString(resourceValue, valueFormat);\n\n\t                    task[resources.field].push(new ObservableObject({\n\t                        id: resourcedId,\n\t                        name: resource.get(resources.dataTextField),\n\t                        color: resource.get(resources.dataColorField),\n\t                        value: resourceValue,\n\t                        formatedValue: formatedValue\n\t                    }));\n\t                }\n\t            };\n\n\t            for (var i = 0, length = taskTree.length; i < length; i++) {\n\t                applyTaskResource(taskTree[i], wrapTask);\n\t            }\n\t        },\n\n\t        _wrapResourceData: function(id) {\n\t            var that = this;\n\t            var result = [];\n\t            var resource;\n\t            var resources = this.resources.dataSource.view();\n\t            var assignments = this.assignments.dataSource.view();\n\t            var taskAssignments = new Query(assignments).filter({\n\t                field: that.assignments.dataTaskIdField,\n\t                operator: "eq",\n\t                value: id\n\t            }).toArray();\n\t            var valuePerResource = function(id) {\n\t                var resourceValue = null;\n\n\t                new Query(taskAssignments).filter({\n\t                    field: that.assignments.dataResourceIdField,\n\t                    operator: "eq",\n\t                    value: id\n\t                }).select(function(assignment) {\n\t                    resourceValue += assignment.get(that.assignments.dataValueField);\n\t                });\n\n\t                return resourceValue;\n\t            };\n\n\t            for (var i = 0, length = resources.length; i < length; i++) {\n\t                resource = resources[i];\n\t                result.push({\n\t                    id: resource.get("id"),\n\t                    name: resource.get(that.resources.dataTextField),\n\t                    format: resource.get(that.resources.dataFormatField) || PERCENTAGE_FORMAT,\n\t                    value: valuePerResource(resource.id)\n\t                });\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _syncDataSource: function() {\n\t            this._preventRefresh = false;\n\t            this._requestStart();\n\t            this.dataSource.sync();\n\t        },\n\n\t        _requestStart: function() {\n\t            this._progress(true);\n\t        },\n\n\t        _error: function() {\n\t            this._progress(false);\n\t        },\n\n\t        _progress: function(toggle) {\n\t            kendo.ui.progress(this.element, toggle);\n\t        },\n\n\t        _resizable: function() {\n\t            var that = this;\n\t            var wrapper = this.wrapper;\n\t            var ganttStyles = Gantt.styles;\n\t            var contentSelector = DOT + ganttStyles.gridContent;\n\t            var treeListWrapper = wrapper.find(DOT + ganttStyles.list);\n\t            var timelineWrapper = wrapper.find(DOT + ganttStyles.timeline);\n\t            var treeListWidth;\n\t            var timelineWidth;\n\t            var timelineScroll;\n\n\t            this._resizeDraggable = wrapper\n\t                .find(DOT + ganttStyles.splitBar)\n\t                .height(treeListWrapper.height())\n\t                .hover(function () {\n\t                    $(this).addClass(ganttStyles.splitBarHover);\n\t                }, function () {\n\t                    $(this).removeClass(ganttStyles.splitBarHover);\n\t                })\n\t                .end()\n\t                .kendoResizable({\n\t                    orientation: "horizontal",\n\t                    handle: DOT + ganttStyles.splitBar,\n\t                    "start": function () {\n\t                        treeListWidth = treeListWrapper.width();\n\t                        timelineWidth = timelineWrapper.width();\n\t                        timelineScroll = timelineWrapper.find(contentSelector).scrollLeft();\n\t                    },\n\t                    "resize": function(e) {\n\t                        var delta = e.x.initialDelta;\n\n\t                        if (kendo.support.isRtl(wrapper)) {\n\t                            delta *= -1;\n\t                        }\n\n\t                        if (treeListWidth + delta < 0 || timelineWidth - delta < 0) {\n\t                            return;\n\t                        }\n\n\t                        treeListWrapper.width(treeListWidth + delta);\n\t                        timelineWrapper.width(timelineWidth - delta);\n\t                        timelineWrapper.find(contentSelector).scrollLeft(timelineScroll + delta);\n\n\t                        that.timeline.view()._renderCurrentTime();\n\t                    }\n\t                }).data("kendoResizable");\n\t        },\n\n\t        _scrollable: function() {\n\t            var that = this;\n\t            var ganttStyles = Gantt.styles;\n\t            var contentSelector = DOT + ganttStyles.gridContent;\n\t            var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n\t            var timelineHeader = this.timeline.element.find(headerSelector);\n\t            var timelineContent = this.timeline.element.find(contentSelector);\n\t            var treeListHeader = this.list.element.find(headerSelector);\n\t            var treeListContent = this.list.element.find(contentSelector);\n\n\t            if (mobileOS) {\n\t                treeListContent.css("overflow-y", "auto");\n\t            }\n\n\t            timelineContent.on("scroll", function() {\n\t                that.scrollTop = this.scrollTop;\n\t                timelineHeader.scrollLeft(this.scrollLeft);\n\t                treeListContent.scrollTop(this.scrollTop);\n\t            });\n\n\t            treeListContent\n\t                .on("scroll", function() {\n\t                    treeListHeader.scrollLeft(this.scrollLeft);\n\t                })\n\t                .on("DOMMouseScroll" + NS + " mousewheel" + NS, function(e) {\n\t                    var scrollTop = timelineContent.scrollTop();\n\t                    var delta = kendo.wheelDeltaY(e);\n\n\t                    if (delta) {\n\t                        e.preventDefault();\n\t                        //In Firefox DOMMouseScroll event cannot be canceled\n\t                        $(e.currentTarget).one("wheel" + NS, false);\n\n\t                        timelineContent.scrollTop(scrollTop + (-delta));\n\t                    }\n\t                });\n\t        },\n\n\t        _navigatable: function() {\n\t            var that = this;\n\t            var navigatable = this.options.navigatable;\n\t            var editable = this.options.editable;\n\t            var headerTable = this.list.header.find("table");\n\t            var contentTable = this.list.content.find("table");\n\t            var ganttStyles = Gantt.styles;\n\t            var isRtl = kendo.support.isRtl(this.wrapper);\n\t            var timelineContent = this.timeline.element.find(DOT + ganttStyles.gridContent);\n\t            var tables = headerTable.add(contentTable);\n\t            var attr = selector();\n\t            var cellIndex;\n\t            var expandState = {\n\t                collapse: false,\n\t                expand: true\n\t            };\n\n\t            var scroll = function(reverse) {\n\t                var width = that.timeline.view()._timeSlots()[0].offsetWidth;\n\t                timelineContent.scrollLeft(timelineContent.scrollLeft() + (reverse ? -width : width));\n\t            };\n\n\t            var scrollVertical = function(reverse) {\n\t                var height = that.timeline.view()._rowHeight;\n\t                timelineContent.scrollTop(timelineContent.scrollTop() + (reverse ? -height : height));\n\t            };\n\n\t            var moveVertical = function(method) {\n\t                var parent = that.current.parent("tr" + selector());\n\t                var index = that.current.index();\n\t                var subling = parent[method]();\n\n\t                if (that.select().length !== 0) {\n\t                    that.clearSelection();\n\t                }\n\n\t                if (subling.length !== 0) {\n\t                    that._current(subling.children("td:eq(" + index + ")"));\n\t                    that._scrollTo(that.current);\n\t                } else {\n\t                    if (that.current.is("td") && method == "prev") {\n\t                        focusTable(headerTable);\n\t                    } else if (that.current.is("th") && method == "next") {\n\t                        focusTable(contentTable);\n\t                    }\n\t                }\n\t            };\n\t            var moveHorizontal = function(method) {\n\t                var subling = that.current[method]();\n\n\t                if (subling.length !== 0) {\n\t                    that._current(subling);\n\t                    cellIndex = that.current.index();\n\t                }\n\t            };\n\t            var toggleExpandedState = function(value) {\n\t                var model = that.dataItem(that.current);\n\n\t                if (model.summary && model.expanded !== value) {\n\t                    model.set("expanded", value);\n\t                }\n\t            };\n\t            var deleteAction = function() {\n\t                var editable = that.options.editable;\n\n\t                if (!editable || editable.destroy === false || that.list.editable) {\n\t                    return;\n\t                }\n\n\t                var selectedTask = that.select();\n\t                var uid = kendo.attr("uid");\n\n\t                if (selectedTask.length) {\n\t                    that.removeTask(selectedTask.attr(uid));\n\t                }\n\t            };\n\n\t            $(this.wrapper)\n\t                .on("mousedown" + NS, "tr" + attr + ", div" + attr + ":not(" + DOT + ganttStyles.line + ")", function(e) {\n\t                    var currentTarget = $(e.currentTarget);\n\t                    var isInput = $(e.target).is(":button,a,:input,a>.k-icon,textarea,span.k-icon,span.k-link,.k-input,.k-multiselect-wrap");\n\t                    var current;\n\n\t                    if (e.ctrlKey) {\n\t                        return;\n\t                    }\n\n\t                    if (navigatable) {\n\t                        if (currentTarget.is("tr")) {\n\t                            current = $(e.target).closest("td");\n\t                        } else {\n\t                            current = that.list\n\t                                .content.find("tr" + selector(currentTarget.attr(kendo.attr("uid"))) + " > td:first");\n\t                        }\n\n\t                        that._current(current);\n\t                    }\n\n\t                    if ((navigatable || editable) && !isInput) {\n\t                        that._focusTimeout = setTimeout(function() {\n\t                            focusTable(that.list.content.find("table"), true);\n\t                        }, 2);\n\t                    }\n\t                })\n\n\t                .on("keydown" + NS, function (e) {\n\t                    var key = e.keyCode;\n\t                    var that = this;\n\t                    var focusableItems = $(that._getToolbarItems());\n\t                    var idx = focusableItems.index(that.toolbar.find(DOT + ganttStyles.focused)[0]);\n\t                    if (idx === -1 && $(e.target).closest(DOT + ganttStyles.toolbar.views).length) {\n\t                        idx = focusableItems.index(that.toolbar.find(".k-gantt-views > .k-state-selected:visible > a, .k-current-view:visible > a")[0]);\n\t                    }\n\t                    var itemToFocus = e.shiftKey ? focusableItems[idx -  1] : focusableItems[idx +  1];\n\n\t                    if (key === keys.F10) {\n\t                        that.toolbar.find(".k-button:visible:first").addClass(ganttStyles.focused).focus();\n\t                        e.preventDefault();\n\t                    } else if (key == keys.TAB && $(e.target).closest(DOT + ganttStyles.toolbar.toolbar).length) {\n\t                        that.toolbar.find(DOT + ganttStyles.focused).removeClass(ganttStyles.focused).blur();\n\t                        if (itemToFocus) {\n\t                            $(itemToFocus).addClass(ganttStyles.focused).focus();\n\t                            e.preventDefault();\n\t                            return;\n\t                        }\n\t                        if (this.list.element.is(":visible")) {\n\t                            this.list.element.find("table[role=treegrid]").focus();\n\t                        } else {\n\t                            this.element.find(DOT + ganttStyles.tasks)[0].focus();\n\t                        }\n\t                        e.preventDefault();\n\t                    }\n\n\t                }.bind(this));\n\n\t            if (navigatable !== true) {\n\t                contentTable\n\t                    .on("keydown" + NS, function(e) {\n\t                        if (e.keyCode == keys.DELETE) {\n\t                            deleteAction();\n\t                        }\n\t                    });\n\n\t                return;\n\t            }\n\n\t            tables\n\t                .on("focus" + NS, function() {\n\t                    var selector = this === contentTable.get(0) ? "td" : "th";\n\t                    var selection = that.select();\n\t                    var current = that.current || $((selection.length ? selection : this))\n\t                        .find(selector + ":eq(" + (cellIndex || 0) + ")");\n\n\t                    that._current(current);\n\t                    $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n\t                    $(that.toolbar.find(DOT + ganttStyles.toolbar.currentView)).parent().removeClass(ganttStyles.toolbar.expanded);\n\t                })\n\t                .on("blur" + NS, function() {\n\t                    that._current();\n\n\t                    if (this == headerTable) {\n\t                        $(this).attr(TABINDEX, -1);\n\t                    }\n\t                })\n\t                .on("keydown" + NS, function(e) {\n\t                    var key = e.keyCode;\n\t                    var isCell;\n\n\t                    if (!that.current) {\n\t                        return;\n\t                    }\n\n\t                    isCell = that.current.is("td");\n\n\t                    switch (key) {\n\t                        case keys.RIGHT:\n\t                            e.preventDefault();\n\t                            if (e.altKey) {\n\t                                scroll();\n\t                            } else if (e.ctrlKey) {\n\t                                toggleExpandedState(isRtl ? expandState.collapse : expandState.expand);\n\t                            } else {\n\t                                moveHorizontal(isRtl ? "prev" : "next");\n\t                            }\n\t                            break;\n\t                        case keys.LEFT:\n\t                            e.preventDefault();\n\t                            if (e.altKey) {\n\t                                scroll(true);\n\t                            } else if (e.ctrlKey) {\n\t                                toggleExpandedState(isRtl ? expandState.expand : expandState.collapse);\n\t                            } else {\n\t                                moveHorizontal(isRtl ? "next" : "prev");\n\t                            }\n\t                            break;\n\t                        case keys.UP:\n\t                            e.preventDefault();\n\t                            if (e.altKey) {\n\t                                scrollVertical(true);\n\t                            } else {\n\t                                moveVertical("prev");\n\t                            }\n\t                            break;\n\t                        case keys.DOWN:\n\t                            e.preventDefault();\n\t                            if (e.altKey) {\n\t                                scrollVertical();\n\t                            } else {\n\t                                moveVertical("next");\n\t                            }\n\t                            break;\n\t                        case keys.SPACEBAR:\n\t                            e.preventDefault();\n\t                            if (isCell) {\n\t                                that.select(that.current.closest("tr"));\n\t                            }\n\t                            break;\n\t                        case keys.ENTER:\n\t                            e.preventDefault();\n\t                            if (isCell) {\n\t                                if (that.options.editable && that.options.editable.update !== false) {\n\t                                    that._cachedCurrent = that.current;\n\t                                    that.list._startEditHandler(that.current);\n\t                                    $(this).one("keyup", function(e) {\n\t                                        /* Stop the event propagation so that the list widget won\'t close its editor immediately */\n\t                                        e.stopPropagation();\n\t                                    });\n\t                                }\n\t                            } else {\n\t                                /* Sort */\n\t                                that.current\n\t                                    .children("a.k-link")\n\t                                    .click();\n\t                            }\n\t                            break;\n\t                        case keys.ESC:\n\t                            // e.stopPropagation();\n\t                            break;\n\t                        case keys.DELETE:\n\t                            if (isCell) {\n\t                                deleteAction();\n\t                            }\n\t                            break;\n\t                        default:\n\t                            if (key >= 49 && key <= 57 && e.target.tagName.toLowerCase() !== "input") {\n\t                               that.view(that.timeline._viewByIndex(key - 49));\n\t                            }\n\t                            break;\n\t                    }\n\t                });\n\t        },\n\n\t        _getToolbarItems: function () {\n\t            return this.toolbar.find(".k-gantt-toggle:visible").toArray().concat(\n\t                        this.toolbar.find(".k-gantt-actions > .k-button:visible").toArray(),\n\t                        this.toolbar.find(".k-gantt-views > .k-state-selected:visible > a, .k-current-view:visible > a").toArray()\n\t                    );\n\t        },\n\n\t        _current: function(element) {\n\t            var ganttStyles = Gantt.styles;\n\t            var activeElement;\n\n\t            if (this.current && this.current.length) {\n\t                this.current\n\t                    .removeClass(ganttStyles.focused)\n\t                    .removeAttr("id");\n\t            }\n\n\t            if (element && element.length) {\n\t                this.current = element\n\t                    .addClass(ganttStyles.focused)\n\t                    .attr("id", ACTIVE_CELL);\n\n\t                activeElement = $(kendo._activeElement());\n\n\t                if (activeElement.is("table") && this.wrapper.find(activeElement).length > 0) {\n\t                    activeElement\n\t                        .removeAttr(ARIA_DESCENDANT)\n\t                        .attr(ARIA_DESCENDANT, ACTIVE_CELL);\n\t                }\n\t            } else {\n\t                this.current = null;\n\t            }\n\t        },\n\n\t        _dataBind: function() {\n\t            var that = this;\n\n\t            if (that.options.autoBind) {\n\t                this._preventRefresh = true;\n\t                this._preventDependencyRefresh = true;\n\n\t                var promises = $.map([\n\t                    this.dataSource,\n\t                    this.dependencies,\n\t                    this.resources.dataSource,\n\t                    this.assignments.dataSource\n\t                ],\n\t                function(dataSource) {\n\t                    return dataSource.fetch();\n\t                });\n\n\t                $.when.apply(null, promises)\n\t                    .done(function() {\n\t                        that._preventRefresh = false;\n\t                        that._preventDependencyRefresh = false;\n\t                        that.refresh();\n\t                    });\n\t            }\n\t        },\n\n\t        _resize: function() {\n\t            this._adjustDimensions();\n\t            this.timeline.view()._adjustHeight();\n\t            this.timeline.view()._renderCurrentTime();\n\t            this.list._adjustHeight();\n\t        }\n\t    });\n\n\t    if (kendo.PDFMixin) {\n\t        kendo.PDFMixin.extend(Gantt.fn);\n\n\t        Gantt.fn._drawPDF = function() {\n\t            var ganttStyles = Gantt.styles;\n\t            var listClass = "." + ganttStyles.list;\n\t            var listWidth = this.wrapper.find(listClass).width();\n\n\t            var content = this.wrapper.clone();\n\t            content.find(listClass).css("width", listWidth);\n\n\t            return this._drawPDFShadow({\n\t                content: content\n\t            }, {\n\t                avoidLinks: this.options.pdf.avoidLinks\n\t            });\n\t        };\n\t    }\n\n\t    kendo.ui.plugin(Gantt);\n\n\t    extend(true, Gantt, { styles: ganttStyles });\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1220:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.gantt.list */ "./node_modules/@progress/kendo-ui/js/kendo.gantt.list.js");\n\n/***/ }),\n\n/***/ 1221:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.gantt.timeline */ "./node_modules/@progress/kendo-ui/js/kendo.gantt.timeline.js");\n\n/***/ }),\n\n/***/ 1222:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.grid */ "./node_modules/@progress/kendo-ui/js/kendo.grid.js");\n\n/***/ }),\n\n/***/ 1223:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.pdf */ "./node_modules/@progress/kendo-ui/js/kendo.pdf.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.gantt.js?')}}]);