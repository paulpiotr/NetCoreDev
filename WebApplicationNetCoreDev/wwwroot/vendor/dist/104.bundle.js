(window.webpackJsonp = window.webpackJsonp || []).push([
  [104], {
    "./node_modules/@progress/kendo-ui/js/kendo.scheduler.recurrence.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.scheduler.recurrence.js ***!
  \**************************************************************************/
/*! no static exports found */function(module, exports, __webpack_require__) {
      eval(
        'module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1334);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1022:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.dropdownlist */ "./node_modules/@progress/kendo-ui/js/kendo.dropdownlist.js");\n\n/***/ }),\n\n/***/ 1138:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.datepicker */ "./node_modules/@progress/kendo-ui/js/kendo.datepicker.js");\n\n/***/ }),\n\n/***/ 1155:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.numerictextbox */ "./node_modules/@progress/kendo-ui/js/kendo.numerictextbox.js");\n\n/***/ }),\n\n/***/ 1334:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1022), __webpack_require__(1138), __webpack_require__(1155) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "scheduler.recurrence",\n\t    name: "Recurrence",\n\t    category: "web",\n\t    depends: [ "dropdownlist", "datepicker", "numerictextbox" ],\n\t    hidden: true\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        timezone = kendo.timezone,\n\t        Class = kendo.Class,\n\t        ui = kendo.ui,\n\t        Widget = ui.Widget,\n\t        DropDownList = ui.DropDownList,\n\t        kendoDate = kendo.date,\n\t        setTime = kendoDate.setTime,\n\t        setDayOfWeek = kendoDate.setDayOfWeek,\n\t        adjustDST = kendoDate.adjustDST,\n\t        firstDayOfMonth = kendoDate.firstDayOfMonth,\n\t        getMilliseconds = kendoDate.getMilliseconds,\n\t        DAYS_IN_LEAPYEAR = [0,31,60,91,121,152,182,213,244,274,305,335,366],\n\t        DAYS_IN_YEAR = [0,31,59,90,120,151,181,212,243,273,304,334,365],\n\t        MONTHS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\t        WEEK_DAYS = {\n\t            0: "SU",\n\t            1: "MO",\n\t            2: "TU",\n\t            3: "WE",\n\t            4: "TH",\n\t            5: "FR",\n\t            6: "SA"\n\t        },\n\t        WEEK_DAYS_IDX = {\n\t            "SU": 0,\n\t            "MO": 1,\n\t            "TU": 2,\n\t            "WE": 3,\n\t            "TH": 4,\n\t            "FR": 5,\n\t            "SA": 6\n\t        },\n\t        DATE_FORMATS = [\n\t            "yyyy-MM-ddTHH:mm:ss.fffzzz",\n\t            "yyyy-MM-ddTHH:mm:sszzz",\n\t            "yyyy-MM-ddTHH:mm:ss",\n\t            "yyyy-MM-ddTHH:mm",\n\t            "yyyy-MM-ddTHH",\n\t            "yyyy-MM-dd",\n\t            "yyyyMMddTHHmmssfffzzz",\n\t            "yyyyMMddTHHmmsszzz",\n\t            "yyyyMMddTHHmmss",\n\t            "yyyyMMddTHHmm",\n\t            "yyyyMMddTHH",\n\t            "yyyyMMdd"\n\t        ],\n\t        RULE_NAMES = ["months", "weeks", "yearDays", "monthDays", "weekDays", "hours", "minutes", "seconds"],\n\t        RULE_NAMES_LENGTH = RULE_NAMES.length,\n\t        RECURRENCE_DATE_FORMAT = "yyyyMMddTHHmmssZ",\n\t        limitation = {\n\t            months: function(date, end, rule) {\n\t                var monthRules = rule.months,\n\t                    months = ruleValues(monthRules, date.getMonth() + 1),\n\t                    changed = false;\n\n\t                if (months !== null) {\n\t                    if (months.length) {\n\t                        date.setMonth(months[0] - 1, 1);\n\t                    } else {\n\t                        date.setFullYear(date.getFullYear() + 1, monthRules[0] - 1, 1);\n\t                    }\n\n\t                    changed = true;\n\t                }\n\n\t                return changed;\n\t            },\n\n\t            monthDays: function(date, end, rule) {\n\t                var monthLength, month, days,\n\t                    changed = false,\n\t                    hours = date.getHours(),\n\t                    normalize = function(monthDay) {\n\t                        if (monthDay < 0) {\n\t                            monthDay = monthLength + monthDay + 1;\n\t                        }\n\t                        return monthDay;\n\t                    };\n\n\t                while (date <= end) {\n\t                    month = date.getMonth();\n\t                    monthLength = getMonthLength(date);\n\t                    days = ruleValues(rule.monthDays, date.getDate(), normalize);\n\n\t                    if (days === null) {\n\t                        return changed;\n\t                    }\n\n\t                    changed = true;\n\n\t                    if (days.length) {\n\t                        date.setMonth(month, days.sort(numberSortPredicate)[0]);\n\t                        adjustDST(date, hours);\n\n\t                        if (month === date.getMonth()) {\n\t                            break;\n\t                        }\n\t                    } else {\n\t                        date.setMonth(month + 1, 1);\n\t                    }\n\t                }\n\n\t                return changed;\n\t            },\n\n\t            yearDays: function(date, end, rule) {\n\t                var year, yearDays,\n\t                    changed = false,\n\t                    hours = date.getHours(),\n\t                    normalize = function(yearDay) {\n\t                        if (yearDay < 0) {\n\t                            yearDay = year + yearDay;\n\t                        }\n\t                        return yearDay;\n\t                    };\n\n\t                while (date < end) {\n\t                    year = leapYear(date) ? 366 : 365;\n\t                    yearDays = ruleValues(rule.yearDays, dayInYear(date), normalize);\n\n\t                    if (yearDays === null) {\n\t                        return changed;\n\t                    }\n\n\t                    changed = true;\n\t                    year = date.getFullYear();\n\n\t                    if (yearDays.length) {\n\t                        date.setFullYear(year, 0, yearDays.sort(numberSortPredicate)[0]);\n\t                        adjustDST(date, hours);\n\t                        break;\n\t                    } else {\n\t                        date.setFullYear(year + 1, 0, 1);\n\t                    }\n\t                }\n\n\t                return changed;\n\t            },\n\n\t            weeks: function(date, end, rule) {\n\t                var weekStart = rule.weekStart,\n\t                    year, weeks, day,\n\t                    changed = false,\n\t                    hours = date.getHours(),\n\t                    normalize = function(week) {\n\t                        if (week < 0) {\n\t                            week = 53 + week;\n\t                        }\n\t                        return week;\n\t                    };\n\n\t                while (date < end) {\n\t                    weeks = ruleValues(rule.weeks, weekInYear(date, weekStart), normalize);\n\n\t                    if (weeks === null) {\n\t                        return changed;\n\t                    }\n\n\t                    changed = true;\n\t                    year = date.getFullYear();\n\n\t                    if (weeks.length) {\n\t                        day = (weeks.sort(numberSortPredicate)[0] * 7) - 1;\n\n\t                        date.setFullYear(year, 0, day);\n\t                        setDayOfWeek(date, weekStart, -1);\n\n\t                        adjustDST(date, hours);\n\t                        break;\n\t                    } else {\n\t                        date.setFullYear(year + 1, 0, 1);\n\t                    }\n\t                }\n\n\t                return changed;\n\t            },\n\n\t            weekDays: function(date, end, rule) {\n\t                var offsetDate = new Date(date.getTime() + rule.offsets.start);\n\t                var normalizeDay = offsetDate.getDay() - date.getDay();\n\t                var weekDays = rule.weekDays;\n\t                var weekStart = rule.weekStart;\n\t                var weekDayRules = ruleWeekValues(weekDays, offsetDate, weekStart);\n\t                var hours = date.getHours();\n\t                var traverseRuleForNextMont = function(rule) {\n\t                    var nextMonthFirstDay = new Date(date.getFullYear(), date.getMonth() + 1, 1);\n\t                    var ruleDay = normalizeDayIndex(rule.day, weekStart);\n\n\t                    if(nextMonthFirstDay.getDay() <= ruleDay) {\n\t                        if(!weekDayRule || normalizeDayIndex(weekDayRule.day, weekStart) > ruleDay) {\n\t                            weekDayRule = rule;\n\t                        }\n\t                    }\n\t                };\n\t                var weekDayRule, day;\n\n\n\t                if (weekDayRules === null) {\n\t                    return false;\n\t                }\n\n\t                weekDayRule = weekDayRules[0];\n\n\t                if (!weekDayRule) {\n\t                    if(rule.freq === "monthly" && !rule.positions || rule.position > 0) {\n\t                        weekDays.forEach(traverseRuleForNextMont);\n\t                    }\n\t                    if (!weekDayRule) {\n\t                        weekDayRule = weekDays[0];\n\t                    }\n\t                    setDayOfWeek(date, weekStart);\n\t                }\n\n\t                day = weekDayRule.day;\n\t                day -= normalizeDay;\n\n\t                if (weekDayRule.offset) {\n\t                    while (date <= end && !isInWeek(date, weekDayRule, weekStart)) {\n\t                        if (weekInMonth(date, weekStart) === numberOfWeeks(date, weekStart)) {\n\t                            date.setMonth(date.getMonth() + 1, 1);\n\t                            adjustDST(date, hours);\n\t                        } else {\n\t                            date.setDate(date.getDate() + 7);\n\t                            adjustDST(date, hours);\n\n\t                            setDayOfWeek(date, weekStart, -1);\n\t                        }\n\t                    }\n\t                }\n\n\t                if (date.getDay() !== day) {\n\t                    setDayOfWeek(date, day);\n\t                }\n\n\t                return true;\n\t            },\n\n\t            hours: function(date, end, rule) {\n\t                var hourRules = rule.hours,\n\t                    startTime = rule._startTime,\n\t                    startHours = startTime.getHours(),\n\t                    hours = ruleValues(hourRules, startHours),\n\t                    changed = false;\n\n\t                if (hours !== null) {\n\t                    changed = true;\n\n\t                    date.setHours(startHours);\n\t                    adjustDST(date, startHours);\n\n\t                    if (hours.length) {\n\t                        hours = hours[0];\n\t                        date.setHours(hours);\n\t                    } else {\n\t                        hours = date.getHours();\n\t                        date.setDate(date.getDate() + 1);\n\t                        adjustDST(date, hours);\n\n\t                        hours = hourRules[0];\n\t                        date.setHours(hours);\n\t                        adjustDST(date, hours);\n\t                    }\n\n\t                    if (rule.minutes) {\n\t                        date.setMinutes(0);\n\t                    }\n\n\t                    startTime.setHours(hours, date.getMinutes());\n\t                }\n\n\t                return changed;\n\t            },\n\n\t            minutes: function(date, end, rule) {\n\t                var minuteRules = rule.minutes,\n\t                    currentMinutes = date.getMinutes(),\n\t                    minutes = ruleValues(minuteRules, currentMinutes),\n\t                    hours = rule._startTime.getHours(),\n\t                    changed = false;\n\n\t                if (minutes !== null) {\n\t                    changed = true;\n\n\t                    if (minutes.length) {\n\t                        minutes = minutes[0];\n\t                    } else {\n\t                        hours += 1;\n\t                        minutes = minuteRules[0];\n\t                    }\n\n\t                    if (rule.seconds) {\n\t                        date.setSeconds(0);\n\t                    }\n\n\t                    date.setHours(hours, minutes);\n\n\t                    hours = hours % 24;\n\t                    adjustDST(date, hours);\n\t                    rule._startTime.setHours(hours, minutes, date.getSeconds());\n\t                }\n\n\t                return changed;\n\t            },\n\n\t            seconds: function(date, end, rule) {\n\t                var secondRules = rule.seconds,\n\t                    hours = rule._startTime.getHours(),\n\t                    seconds = ruleValues(secondRules, date.getSeconds()),\n\t                    minutes = date.getMinutes(),\n\t                    changed = false;\n\n\t                if (seconds !== null) {\n\t                    changed = true;\n\n\t                    if (seconds.length) {\n\t                        date.setSeconds(seconds[0]);\n\t                    } else {\n\t                        minutes += 1;\n\t                        date.setMinutes(minutes, secondRules[0]);\n\n\t                        if (minutes > 59) {\n\t                            minutes = minutes % 60;\n\t                            hours = (hours + 1) % 24;\n\t                        }\n\t                    }\n\n\t                    rule._startTime.setHours(hours, minutes, date.getSeconds());\n\t                }\n\n\t                return changed;\n\t            }\n\t        },\n\t        BaseFrequency = Class.extend({\n\t            next: function(date, rule) {\n\t                var startTime = rule._startTime,\n\t                    day = startTime.getDate(),\n\t                    minutes, seconds;\n\n\t                if (rule.seconds) {\n\t                    seconds = date.getSeconds() + 1;\n\n\t                    date.setSeconds(seconds);\n\t                    startTime.setSeconds(seconds);\n\t                    startTime.setDate(day);\n\n\t                } else if (rule.minutes) {\n\t                    minutes = date.getMinutes() + 1;\n\n\t                    date.setMinutes(minutes);\n\t                    startTime.setMinutes(minutes);\n\t                    startTime.setDate(day);\n\t                } else {\n\t                    return false;\n\t                }\n\n\t                return true;\n\t            },\n\n\t            normalize: function(options) {\n\t                var rule = options.rule;\n\n\t                if (options.idx === 4 && rule.hours) {\n\t                    rule._startTime.setHours(0);\n\t                    this._hour(options.date, rule);\n\t                }\n\t            },\n\n\t            limit: function(date, end, rule) {\n\t                var interval = rule.interval,\n\t                    ruleName, firstRule,\n\t                    modified,\n\t                    idx, day;\n\n\t                while (date <= end) {\n\t                    modified = firstRule = undefined;\n\t                    day = date.getDate();\n\n\t                    for (idx = 0; idx < RULE_NAMES_LENGTH; idx++) {\n\t                        ruleName = RULE_NAMES[idx];\n\n\t                        if (rule[ruleName]) {\n\t                            modified = limitation[ruleName](date, end, rule);\n\t                            if (firstRule !== undefined && modified) {\n\t                                break;\n\t                            } else {\n\t                                firstRule = modified;\n\t                            }\n\t                        }\n\n\t                        if (modified) {\n\t                            this.normalize({ date: date, rule: rule, day: day, idx: idx });\n\t                        }\n\t                    }\n\n\t                    if ((interval === 1 || !this.interval(rule, date)) && idx === RULE_NAMES_LENGTH) {\n\t                        break;\n\t                    }\n\t                }\n\t            },\n\n\t            interval: function (rule, current) {\n\t                var start = new Date(rule._startPeriod);\n\t                var date = new Date(current);\n\t                var hours = current.getHours();\n\t                var weekStart = rule.weekStart;\n\t                var interval = rule.interval;\n\t                var frequency = rule.freq;\n\t                var modified = false;\n\t                var excess = 0;\n\t                var month = 0;\n\t                var day = 1;\n\t                var diff;\n\n\t                var startTimeHours;\n\n\t                if (frequency === "hourly") {\n\t                    diff = date.getTimezoneOffset() - start.getTimezoneOffset();\n\t                    startTimeHours = rule._startTime.getHours();\n\n\t                    date = date.getTime();\n\t                    if (hours !== startTimeHours) {\n\t                        date += (startTimeHours - hours) * kendoDate.MS_PER_HOUR;\n\t                    }\n\t                    date -= start;\n\n\t                    if (diff) {\n\t                        date -= diff * kendoDate.MS_PER_MINUTE;\n\t                    }\n\n\t                    diff = Math.floor(date / kendoDate.MS_PER_HOUR);\n\t                    excess = intervalExcess(diff, interval);\n\n\t                    if (excess !== 0) {\n\t                        this._hour(current, rule, excess);\n\t                        modified = true;\n\t                    }\n\t                } else if (frequency === "daily") {\n\t                    kendoDate.setTime(date, -start, true);\n\n\t                    diff = Math.round(date / kendoDate.MS_PER_DAY);\n\t                    excess = intervalExcess(diff, interval);\n\n\t                    if (excess !== 0) {\n\t                        this._date(current, rule, excess);\n\t                        modified = true;\n\t                    }\n\n\t                } else if (frequency === "weekly") {\n\t                    excess = this._getNumberOfWeeksBetweenDates(start, current);\n\n\t                    var normalizedCurrentIndex = normalizeDayIndex(current.getDay(), weekStart);\n\t                    var normalizedStartIndex = normalizeDayIndex(start.getDay(), weekStart);\n\n\t                    if (normalizedCurrentIndex < normalizedStartIndex) {\n\t                        excess += 1;\n\t                    }\n\n\t                    excess = intervalExcess(excess, interval);\n\t                    if (excess !== 0) {\n\t                        kendoDate.setDayOfWeek(current, rule.weekStart, -1);\n\n\t                        current.setDate(current.getDate() + (excess * 7));\n\t                        adjustDST(current, hours);\n\n\t                        modified = true;\n\t                    }\n\t                } else if (frequency === "monthly") {\n\t                    diff = current.getFullYear() - start.getFullYear();\n\t                    diff = current.getMonth() - start.getMonth() + (diff * 12);\n\n\t                    excess = intervalExcess(diff, interval);\n\n\t                    if (excess !== 0) {\n\t                        day = rule._hasRuleValue ? 1 : current.getDate();\n\n\t                        current.setFullYear(current.getFullYear(), current.getMonth() + excess, day);\n\t                        adjustDST(current, hours);\n\n\t                        modified = true;\n\t                    }\n\t                } else if (frequency === "yearly") {\n\t                    diff = current.getFullYear() - start.getFullYear();\n\t                    excess = intervalExcess(diff, interval);\n\n\t                    if (!rule.months) {\n\t                        month = current.getMonth();\n\t                    }\n\n\t                    if (!rule.yearDays && !rule.monthDays && !rule.weekDays) {\n\t                        day = current.getDate();\n\t                    }\n\n\t                    if (excess !== 0) {\n\t                        current.setFullYear(current.getFullYear() + excess, month, day);\n\t                        adjustDST(current, hours);\n\n\t                        modified = true;\n\t                    }\n\t                }\n\n\t                return modified;\n\t            },\n\n\t            _getNumberOfWeeksBetweenDates: function(first, second){\n\t                 var weeks = (second - first) / 604800000;\n\t                 var exactWeeks = Math.floor(weeks);\n\n\t                //this is happening when weeks pass DST change\n\t                if (weeks - exactWeeks > 0.99) {\n\t                    exactWeeks = Math.round(weeks);\n\t                }\n\t                return exactWeeks;\n\t            },\n\n\t            _hour: function(date, rule, interval) {\n\t                var startTime = rule._startTime,\n\t                    hours = startTime.getHours();\n\n\t                if (interval) {\n\t                    hours += interval;\n\t                }\n\n\t                date.setHours(hours);\n\n\t                hours = hours % 24;\n\t                startTime.setHours(hours);\n\t                adjustDST(date, hours);\n\t            },\n\n\t            _date: function(date, rule, interval) {\n\t                var hours = date.getHours();\n\n\t                date.setDate(date.getDate() + interval);\n\t                if (!adjustDST(date, hours)) {\n\t                    this._hour(date, rule);\n\t                }\n\t            }\n\t        }),\n\t        HourlyFrequency = BaseFrequency.extend({\n\t            next: function(date, rule) {\n\t                if (!BaseFrequency.fn.next(date, rule)) {\n\t                    this._hour(date, rule, 1);\n\t                }\n\t            },\n\n\t            normalize: function(options) {\n\t                var rule = options.rule;\n\n\t                if (options.idx === 4) {\n\t                    rule._startTime.setHours(0);\n\t                    this._hour(options.date, rule);\n\t                }\n\t            }\n\t        }),\n\t        DailyFrequency = BaseFrequency.extend({\n\t            next: function(date, rule) {\n\t                if (!BaseFrequency.fn.next(date, rule)) {\n\t                    this[rule.hours ? "_hour" : "_date"](date, rule, 1);\n\t                }\n\t            }\n\t        }),\n\t        WeeklyFrequency = DailyFrequency.extend({\n\t            setup: function(rule, eventStartDate) {\n\t                if (!rule.weekDays) {\n\t                    rule.weekDays = [{\n\t                        day: eventStartDate.getDay(),\n\t                        offset: 0\n\t                    }];\n\t                }\n\t            }\n\t        }),\n\t        MonthlyFrequency = BaseFrequency.extend({\n\t            next: function(date, rule) {\n\t                var day, hours;\n\t                if (!BaseFrequency.fn.next(date, rule)) {\n\t                    if (rule.hours) {\n\t                        this._hour(date, rule, 1);\n\t                    } else if (rule.monthDays || rule.weekDays || rule.yearDays || rule.weeks) {\n\t                        this._date(date, rule, 1);\n\t                    } else {\n\t                        day = date.getDate();\n\t                        hours = date.getHours();\n\n\t                        date.setMonth(date.getMonth() + 1);\n\t                        adjustDST(date, hours);\n\n\t                        while(date.getDate() !== day) {\n\t                            date.setDate(day);\n\t                            adjustDST(date, hours);\n\t                        }\n\n\t                        this._hour(date, rule);\n\t                    }\n\t                }\n\t            },\n\t            normalize: function(options) {\n\t                var rule = options.rule,\n\t                    date = options.date,\n\t                    hours = date.getHours();\n\n\t                if (options.idx === 0 && !rule.monthDays && !rule.weekDays) {\n\t                    date.setDate(options.day);\n\t                    adjustDST(date, hours);\n\t                } else {\n\t                    BaseFrequency.fn.normalize(options);\n\t                }\n\t            },\n\t            setup: function(rule, eventStartDate, date) {\n\t                if (!rule.monthDays && !rule.weekDays) {\n\t                    date.setDate(eventStartDate.getDate());\n\t                }\n\t            }\n\t        }),\n\t        YearlyFrequency = MonthlyFrequency.extend({\n\t            next: function(date, rule) {\n\t                var day,\n\t                    hours = date.getHours();\n\n\t                if (!BaseFrequency.fn.next(date, rule)) {\n\t                    if (rule.hours) {\n\t                        this._hour(date, rule, 1);\n\t                    } else if (rule.monthDays || rule.weekDays || rule.yearDays || rule.weeks) {\n\t                        this._date(date, rule, 1);\n\t                    } else if (rule.months) {\n\t                        day = date.getDate();\n\n\t                        date.setMonth(date.getMonth() + 1);\n\t                        adjustDST(date, hours);\n\n\t                        while(date.getDate() !== day) {\n\t                            date.setDate(day);\n\t                            adjustDST(date, hours);\n\t                        }\n\n\t                        this._hour(date, rule);\n\t                    } else {\n\t                        date.setFullYear(date.getFullYear() + 1);\n\t                        adjustDST(date, hours);\n\n\t                        this._hour(date, rule);\n\t                    }\n\t                }\n\t            },\n\t            setup: function() {}\n\t        }),\n\t        frequencies = {\n\t            "hourly" : new HourlyFrequency(),\n\t            "daily" : new DailyFrequency(),\n\t            "weekly" : new WeeklyFrequency(),\n\t            "monthly" : new MonthlyFrequency(),\n\t            "yearly" : new YearlyFrequency()\n\t        },\n\t        CLICK = "click",\n\t        CHANGE = "change";\n\n\t    function intervalExcess(diff, interval) {\n\t        var excess;\n\t        if (diff !== 0 && diff < interval) {\n\t            excess = interval - diff;\n\t        } else {\n\t            excess = diff % interval;\n\t            if (excess) {\n\t                excess = interval - excess;\n\t            }\n\t        }\n\n\t        return excess;\n\t    }\n\n\t    function dayInYear(date) {\n\t        var month = date.getMonth();\n\t        var days = leapYear(date) ? DAYS_IN_LEAPYEAR[month] : DAYS_IN_YEAR[month];\n\n\t        return days + date.getDate();\n\t    }\n\n\t    function weekInYear(date, weekStart){\n\t        var year, days;\n\n\t        date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\t        adjustDST(date, 0);\n\n\t        year = date.getFullYear();\n\n\t        if (weekStart !== undefined) {\n\t            setDayOfWeek(date, weekStart, -1);\n\t            date.setDate(date.getDate() + 4);\n\t        } else {\n\t            date.setDate(date.getDate() + (4 - (date.getDay() || 7)));\n\t        }\n\n\t        adjustDST(date, 0);\n\t        days = Math.floor((date.getTime() - new Date(year, 0, 1, -6)) / 86400000);\n\n\t        return 1 + Math.floor(days / 7);\n\t    }\n\n\t    function weekInMonth(date, weekStart) {\n\t        var firstWeekDay = firstDayOfMonth(date).getDay();\n\t        var firstWeekLength = 7 - (firstWeekDay + 7 - (weekStart || 7)) || 7;\n\n\t        if (firstWeekLength < 0) {\n\t            firstWeekLength += 7;\n\t        }\n\n\t        return Math.ceil((date.getDate() - firstWeekLength) / 7) + 1;\n\t    }\n\n\t    function normalizeDayIndex(weekDay, weekStart) {\n\t        return weekDay + (weekDay < weekStart ? 7 : 0);\n\t    }\n\n\t    function normalizeOffset(date, rule, weekStart) {\n\t        var offset = rule.offset;\n\n\t        if (!offset) {\n\t            return weekInMonth(date, weekStart);\n\t        }\n\n\t        var lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\t        var weeksInMonth = weekInMonth(lastDate, weekStart);\n\n\t        var day = normalizeDayIndex(rule.day, weekStart);\n\n\t        var skipFirst = day < normalizeDayIndex(new Date(date.getFullYear(), date.getMonth(), 1).getDay(), weekStart);\n\t        var skipLast = day > normalizeDayIndex(lastDate.getDay(), weekStart);\n\n\t        if (offset < 0) {\n\t            offset = weeksInMonth + (offset + 1 - (skipLast ? 1 : 0));\n\t        } else if (skipFirst) {\n\t            offset += 1;\n\t        }\n\n\t        weeksInMonth -= (skipLast ? 1 : 0);\n\n\t        if (offset < (skipFirst ? 1 : 0) || offset > weeksInMonth) {\n\t            return null;\n\t        }\n\n\t        return offset;\n\t    }\n\n\t    function numberOfWeeks(date, weekStart) {\n\t        return weekInMonth(new Date(date.getFullYear(), date.getMonth() + 1, 0), weekStart);\n\t    }\n\n\t    function isInWeek(date, rule, weekStart) {\n\t        return weekInMonth(date, weekStart) === normalizeOffset(date, rule, weekStart);\n\t    }\n\n\t    function ruleWeekValues(weekDays, date, weekStart) {\n\t        var currentDay = normalizeDayIndex(date.getDay(), weekStart);\n\t        var length = weekDays.length;\n\t        var ruleWeekOffset;\n\t        var weekDay, day;\n\t        var weekNumber;\n\t        var result = [];\n\t        var idx = 0;\n\n\t        for (;idx < length; idx++) {\n\t            weekDay = weekDays[idx];\n\n\t            weekNumber = weekInMonth(date, weekStart);\n\t            ruleWeekOffset = normalizeOffset(date, weekDay, weekStart);\n\n\t            if (ruleWeekOffset === null) {\n\t                continue;\n\t            }\n\n\t            if (weekNumber < ruleWeekOffset) {\n\t                result.push(weekDay);\n\t            } else if (weekNumber === ruleWeekOffset) {\n\t                day = normalizeDayIndex(weekDay.day, weekStart);\n\n\t                if (currentDay < day) {\n\t                    result.push(weekDay);\n\t                } else if (currentDay === day) {\n\t                    return null;\n\t                }\n\t            }\n\t        }\n\n\t        return result;\n\t    }\n\n\t    function ruleValues(rules, value, normalize) {\n\t        var idx = 0,\n\t            length = rules.length,\n\t            availableRules = [],\n\t            ruleValue;\n\n\t        for (; idx < length; idx++) {\n\t            ruleValue = rules[idx];\n\n\t            if (normalize) {\n\t                ruleValue = normalize(ruleValue);\n\t            }\n\n\t            if (value === ruleValue) {\n\t                return null;\n\t            }  else if (value < ruleValue) {\n\t                availableRules.push(ruleValue);\n\t            }\n\t        }\n\n\t        return availableRules;\n\t    }\n\n\t    function parseArray(list, range) {\n\t        var idx = 0,\n\t            length = list.length,\n\t            value;\n\n\t        for (; idx < length; idx++) {\n\t            value = parseInt(list[idx], 10);\n\t            if (isNaN(value) || value < range.start || value > range.end || (value === 0 && range.start < 0)) {\n\t                return null;\n\t            }\n\n\t            list[idx] = value;\n\t        }\n\n\t        return list.sort(numberSortPredicate);\n\t    }\n\n\t    function parseWeekDayList(list) {\n\t        var idx = 0, length = list.length,\n\t            value, valueLength, day;\n\n\t        for (; idx < length; idx++) {\n\t            value = list[idx];\n\t            valueLength = value.length;\n\t            day = value.substring(valueLength - 2).toUpperCase();\n\n\t            day = WEEK_DAYS_IDX[day];\n\t            if (day === undefined) {\n\t                return null;\n\t            }\n\n\t            list[idx] = {\n\t                offset: parseInt(value.substring(0, valueLength - 2), 10) || 0,\n\t                day: day\n\t            };\n\t        }\n\t        return list;\n\t    }\n\n\t    function serializeWeekDayList(list) {\n\t        var idx = 0, length = list.length,\n\t            value, valueString, result = [];\n\n\t        for (; idx < length; idx++) {\n\t            value = list[idx];\n\t            if (typeof value === "string") {\n\t                valueString = value;\n\t            } else {\n\t                valueString = "" + WEEK_DAYS[value.day];\n\n\t                if (value.offset) {\n\t                    valueString = value.offset + valueString;\n\t                }\n\t            }\n\n\t            result.push(valueString);\n\t        }\n\t        return result.toString();\n\t    }\n\n\t    function getMonthLength(date) {\n\t        var month = date.getMonth();\n\n\t        if (month === 1) {\n\t            if (new Date(date.getFullYear(), 1, 29).getMonth() === 1) {\n\t                return 29;\n\t            }\n\t            return 28;\n\t        }\n\t        return MONTHS[month];\n\t    }\n\n\t    function leapYear(year) {\n\t        year = year.getFullYear();\n\t        return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n\t    }\n\n\t    function numberSortPredicate(a, b) {\n\t        return a - b;\n\t    }\n\n\t    function parseExceptions(exceptions, zone) {\n\t        var idx = 0, length, date,\n\t            dates = [];\n\n\t        if (exceptions) {\n\t            exceptions = exceptions.split(exceptions.indexOf(";") !== -1 ? ";" : ",");\n\t            length = exceptions.length;\n\n\t            for (; idx < length; idx++) {\n\t                date = parseUTCDate(exceptions[idx], zone);\n\n\t                if (date) {\n\t                    dates.push(date);\n\t                }\n\t            }\n\t        }\n\n\t        return dates;\n\t    }\n\n\t    function isException(exceptions, date, zone) {\n\t        var dates = $.isArray(exceptions) ? exceptions : parseExceptions(exceptions, zone),\n\t            dateTime = date.getTime() - date.getMilliseconds(),\n\t            idx = 0, length = dates.length;\n\n\t        for (; idx < length; idx++) {\n\t            if (dates[idx].getTime() === dateTime) {\n\t                return true;\n\t            }\n\t        }\n\n\t        return false;\n\t    }\n\n\t    function toExceptionString(dates, zone) {\n\t        var idx = 0;\n\t        var length;\n\t        var date;\n\t        var result = [].concat(dates);\n\n\t        for (length = result.length; idx < length; idx++) {\n\t            date = result[idx];\n\t            date = kendo.timezone.convert(date, zone || date.getTimezoneOffset(), "Etc/UTC");\n\t            result[idx] = kendo.toString(date, RECURRENCE_DATE_FORMAT);\n\t        }\n\n\t        return result.join(",");\n\t    }\n\n\t    function startPeriodByFreq(start, rule) {\n\t        var date = new Date(start);\n\n\t        switch (rule.freq) {\n\t            case "yearly":\n\t                date.setFullYear(date.getFullYear(), 0, 1);\n\t                break;\n\n\t            case "monthly":\n\t                date.setFullYear(date.getFullYear(), date.getMonth(), 1);\n\t                break;\n\n\t            case "weekly":\n\t                setDayOfWeek(date, rule.weekStart, -1);\n\t                break;\n\n\t            default:\n\t                break;\n\t        }\n\n\t        if (rule.hours) {\n\t            date.setHours(0);\n\t        }\n\n\t        if (rule.minutes) {\n\t            date.setMinutes(0);\n\t        }\n\n\t        if (rule.seconds) {\n\t            date.setSeconds(0);\n\t        }\n\n\t        return date;\n\t    }\n\n\t    function endPeriodByFreq(start, rule) {\n\t        var date = new Date(start);\n\n\t        switch (rule.freq) {\n\t            case "yearly":\n\t                date.setFullYear(date.getFullYear(), 11, 31);\n\t                break;\n\n\t            case "monthly":\n\t                date.setFullYear(date.getFullYear(), date.getMonth() + 1, 0);\n\t                break;\n\n\t            case "weekly":\n\t                setDayOfWeek(date, rule.weekStart, -1);\n\t                date.setDate(date.getDate() + 6);\n\t                break;\n\n\t            default:\n\t                break;\n\t        }\n\n\t        if (rule.hours) {\n\t            date.setHours(23);\n\t        }\n\n\t        if (rule.minutes) {\n\t            date.setMinutes(59);\n\t        }\n\n\t        if (rule.seconds) {\n\t            date.setSeconds(59);\n\t        }\n\n\t        return date;\n\t    }\n\n\t    function eventsByPosition(periodEvents, start, positions) {\n\t        var periodEventsLength = periodEvents.length;\n\t        var events = [];\n\t        var position;\n\t        var event;\n\n\t        for (var idx = 0, length = positions.length; idx < length; idx++) {\n\t            position = positions[idx];\n\n\t            if (position < 0) {\n\t                position = periodEventsLength + position;\n\t            } else {\n\t                position -= 1; //convert to zero based index\n\t            }\n\n\t            event = periodEvents[position];\n\n\t            if (event && event.start >= start) {\n\t                events.push(event);\n\t            }\n\t        }\n\n\t        return events;\n\t    }\n\n\t    function removeExceptionDates(periodEvents, exceptionDates, zone) {\n\t        var events = [];\n\t        var event;\n\n\t        for (var idx = 0; idx < periodEvents.length; idx++) {\n\t            event = periodEvents[idx];\n\t            if (!isException(exceptionDates, event.start, zone)) {\n\t                events.push(event);\n\t            }\n\t        }\n\n\t        return events;\n\t    }\n\n\t    function expand(event, start, end, zone) {\n\t        var rule,\n\t            startTime, endTime, endDate,\n\t            hours, minutes, seconds,\n\t            durationMS, startPeriod, inPeriod,\n\t            ruleStart, ruleEnd,\n\t            useEventStart, freqName,\n\t            exceptionDates,\n\t            eventStartTime,\n\t            eventStartMS,\n\t            eventStart,\n\t            count, freq,\n\t            positions,\n\t            currentIdx,\n\t            periodEvents,\n\t            events = [],\n\t            shiftedStart,\n\t            shiftedEnd,\n\t            shiftedStartTime,\n\t            shifterEndTime;\n\n\t        rule = parseRule(event.recurrenceRule, zone, { // offsets argument\n\t            start: (getZoneOffset(event.start, zone) - getZoneOffset(event.start, event.startTimezone)) * kendo.date.MS_PER_MINUTE,\n\t            end: (getZoneOffset(event.end, zone) - getZoneOffset(event.end, event.endTimezone)) * kendo.date.MS_PER_MINUTE\n\t        });\n\n\t        if (!rule) {\n\t            return [event];\n\t        }\n\n\t        positions = rule.positions;\n\t        currentIdx = positions ? 0 : 1;\n\n\t        ruleStart = rule.start;\n\t        ruleEnd = rule.end;\n\n\t        if (ruleStart || ruleEnd) {\n\t            event = event.clone({\n\t                start: ruleStart ? new Date(ruleStart.value[0]) : undefined,\n\t                end: ruleEnd ? new Date(ruleEnd.value[0]) : undefined\n\t            });\n\t        }\n\n\t        eventStart = event.start;\n\t        eventStartMS = eventStart.getTime();\n\t        eventStartTime = getMilliseconds(eventStart);\n\n\t        exceptionDates = parseExceptions(event.recurrenceException, zone);\n\n\t        if (!exceptionDates[0] && rule.exdates) {\n\t            exceptionDates = rule.exdates.value;\n\t            event.set("recurrenceException", toExceptionString(exceptionDates, zone));\n\t        }\n\n\t        startPeriod = start = new Date(start);\n\t        end = new Date(end);\n\n\t        freqName = rule.freq;\n\t        freq = frequencies[freqName];\n\t        count = rule.count;\n\n\t        if (rule.until && rule.until < end) {\n\t            end = new Date(rule.until);\n\t        }\n\n\t        useEventStart = freqName === "yearly" || freqName === "monthly" || freqName === "weekly";\n\n\t        if (start < eventStartMS || count || rule.interval > 1 || useEventStart ||\n\t             ((freqName === "daily" || freqName === "hourly") && !rule.seconds)) {\n\t                    start = new Date(eventStartMS);\n\t        } else {\n\t            hours = start.getHours();\n\t            minutes = start.getMinutes();\n\t            seconds = start.getSeconds();\n\n\t            if (!rule.hours) {\n\t                hours = eventStart.getHours();\n\t            }\n\n\t            if (!rule.minutes) {\n\t                minutes = eventStart.getMinutes();\n\t            }\n\n\t            if (!rule.seconds) {\n\t                seconds = eventStart.getSeconds();\n\t            }\n\n\t            start.setHours(hours, minutes, seconds, eventStart.getMilliseconds());\n\t        }\n\n\t        rule._startPeriod = new Date(start);\n\n\t        if (positions) {\n\t            start = startPeriodByFreq(start, rule);\n\t            end = endPeriodByFreq(end, rule);\n\n\t            var diff = getMilliseconds(end) - getMilliseconds(start);\n\t            if (diff < 0) {\n\t                hours = start.getHours();\n\t                end.setHours(hours, start.getMinutes(), start.getSeconds(), start.getMilliseconds());\n\t                kendoDate.adjustDST(end, hours);\n\t            }\n\n\t            rule._startPeriod = new Date(start);\n\t            rule._endPeriod = endPeriodByFreq(start, rule);\n\t        }\n\n\t        durationMS = event.duration();\n\t        var allDayCompensation = event.isAllDay ? 86400000 : 0;\n\t        rule._startTime = startTime = kendoDate.toInvariantTime(start);\n\n\t        if (freq.setup) {\n\t            freq.setup(rule, eventStart, start);\n\t        }\n\n\t        freq.limit(start, end, rule);\n\n\t        while (start <= end) {\n\t            endDate = new Date(start);\n\t            setTime(endDate, durationMS);\n\t            var inPeriodCheckEndDate = new Date(start);\n\t            setTime(inPeriodCheckEndDate, durationMS + allDayCompensation);\n\n\t            inPeriod = start >= startPeriod || inPeriodCheckEndDate > startPeriod;\n\n\t            if (inPeriod && !isException(exceptionDates, start, zone) || positions) {\n\t                startTime = kendoDate.toUtcTime(kendoDate.getDate(start)) + getMilliseconds(rule._startTime);\n\t                endTime = startTime + durationMS;\n\n\t                if (eventStartMS !== start.getTime() || eventStartTime !== getMilliseconds(rule._startTime)) {\n\t                    var startZone = event.startTimezone || event.endTimezone;\n\t                    var endZone = event.endTimezone || event.startTimezone;\n\n\t                    if(!event.isAllDay){\n\t                        if((zone && startZone) || (!zone && !startZone)){\n\t                            var startOffsetDiff = getZoneOffset(start, zone) - getZoneOffset(event.start, zone);\n\t                            var endOffsetDiff = getZoneOffset(endDate, zone) - getZoneOffset(event.end, zone);\n\t                            var startTZOffsetDiff = getZoneOffset(start, startZone) - getZoneOffset(event.start, startZone);\n\t                            var endTZOffsetDiff = getZoneOffset(endDate, endZone) - getZoneOffset(event.end, endZone);\n\n\t                            if(startOffsetDiff !== startTZOffsetDiff){\n\t                                var offsetTicksStart = (startOffsetDiff - startTZOffsetDiff) * 60000;\n\t                                shiftedStart = new Date(start.getTime() - offsetTicksStart);\n\t                                shiftedStartTime = startTime - offsetTicksStart;\n\t                            }\n\n\t                            if(endOffsetDiff !== endTZOffsetDiff){\n\t                                var offsetTicksEnd = (endOffsetDiff - endTZOffsetDiff) * 60000;\n\t                                shiftedEnd = new Date(endDate.getTime() - offsetTicksEnd);\n\t                                shifterEndTime = endTime - offsetTicksEnd;\n\t                            }\n\t                        }\n\t                    }\n\n\n\t                    events.push(event.toOccurrence({\n\t                        start: shiftedStart || new Date(start),\n\t                        end: shiftedEnd || endDate,\n\t                        _startTime: shiftedStartTime || startTime,\n\t                        _endTime: shifterEndTime || endTime\n\t                    }));\n\n\t                    shiftedStart = shiftedEnd = shiftedStartTime = shifterEndTime = null;\n\t                } else {\n\t                    event._startTime = startTime;\n\t                    event._endTime = endTime;\n\t                    events.push(event);\n\t                }\n\t            }\n\n\t            if (positions) {\n\t                freq.next(start, rule);\n\t                freq.limit(start, end, rule);\n\n\t                if (start > rule._endPeriod) {\n\t                    periodEvents = eventsByPosition(events.slice(currentIdx), eventStart, positions);\n\t                    periodEvents = removeExceptionDates(periodEvents, exceptionDates, zone);\n\t                    events = events.slice(0, currentIdx).concat(periodEvents);\n\n\t                    rule._endPeriod = endPeriodByFreq(start, rule);\n\n\t                    currentIdx = events.length;\n\t                }\n\n\t                if (count && count === currentIdx) {\n\t                    break;\n\t                }\n\n\t            } else {\n\t                if (count && count === currentIdx) {\n\t                    break;\n\t                }\n\n\t                currentIdx += 1;\n\n\t                var isMissingDSTHour = isDSTMissingHour(start);\n\t                freq.next(start, rule);\n\n\t                if(isMissingDSTHour && rule.freq!=="hourly" && kendoDate.toInvariantTime(event.start).getTime() !== kendoDate.toInvariantTime(start).getTime()){\n\t                    rule._startTime = startTime = new Date(start.getTime() - 3600000);\n\t                }\n\n\t                freq.limit(start, end, rule);\n\t            }\n\t        }\n\n\t        return events;\n\t    }\n\n\t    function isDSTMissingHour(date){\n\t        var dateOffset = date.getTimezoneOffset();\n\t        var dateMinusHour = new Date(date.getTime() - 3600000);\n\t        var dateMinusHourOffset = dateMinusHour.getTimezoneOffset();\n\n\t        return dateOffset < dateMinusHourOffset;\n\t    }\n\n\t    function getZoneOffset(date, zone) {\n\t        return zone ? kendo.timezone.offset(date, zone): date.getTimezoneOffset();\n\t    }\n\n\t    function parseUTCDate(value, zone) {\n\t        value = kendo.parseDate(value, DATE_FORMATS); //Parse UTC to local time\n\n\t        if (value && zone) {\n\t            value = timezone.apply(value, zone);\n\t        }\n\n\t        return value;\n\t    }\n\n\t    function parseDateRule(dateRule, zone) {\n\t        var pairs = dateRule.split(";");\n\t        var pair;\n\t        var property;\n\t        var value;\n\t        var tzid;\n\t        var valueIdx, valueLength;\n\n\t        for (var idx = 0, length = pairs.length; idx < length; idx++) {\n\t            pair = pairs[idx].split(":");\n\t            property = pair[0];\n\t            value = pair[1];\n\n\t            if (property.indexOf("TZID") !== -1) {\n\t                tzid = property.substring(property.indexOf("TZID")).split("=")[1];\n\t            }\n\n\t            if (value) {\n\t                value = value.split(",");\n\n\t                for (valueIdx = 0, valueLength = value.length; valueIdx < valueLength; valueIdx++) {\n\t                    value[valueIdx] = parseUTCDate(value[valueIdx], tzid || zone);\n\t                }\n\t            }\n\t        }\n\n\t        if (value) {\n\t            return {\n\t                value: value,\n\t                tzid: tzid\n\t            };\n\t        }\n\t    }\n\n\t    function parseRule(recur, zone, offsets) {\n\t        var instance = {};\n\t        var splits, value;\n\t        var idx = 0, length;\n\t        var ruleValue = false;\n\t        var rule, part, parts;\n\t        var property, weekStart, weekDays;\n\t        var predicate = function(a, b) {\n\t            var day1 = a.day,\n\t                day2 = b.day;\n\n\t            if (day1 < weekStart) {\n\t               day1 += 7;\n\t            }\n\n\t            if (day2 < weekStart) {\n\t                day2 += 7;\n\t            }\n\n\t            return day1 - day2;\n\t        };\n\n\t        if (!recur) {\n\t            return null;\n\t        }\n\n\t        parts = recur.split("\\n");\n\n\t        if (!parts[1] && (recur.indexOf("DTSTART") !== -1 || recur.indexOf("DTEND") !== -1 || recur.indexOf("EXDATE") !== -1)) {\n\t            parts = recur.split(" ");\n\t        }\n\n\t        for (idx = 0, length = parts.length; idx < length; idx++) {\n\t            part = kendo.trim(parts[idx]);\n\n\t            if (part.indexOf("DTSTART") !== -1) {\n\t                instance.start = parseDateRule(part, zone);\n\t            } else if (part.indexOf("DTEND") !== -1) {\n\t                instance.end = parseDateRule(part, zone);\n\t            } else if (part.indexOf("EXDATE") !== -1) {\n\t                instance.exdates = parseDateRule(part, zone);\n\t            } else if (part.indexOf("RRULE") !== -1) {\n\t                rule = part.substring(6);\n\t            } else if (kendo.trim(part)) {\n\t                rule = part;\n\t            }\n\t        }\n\n\t        rule = rule.split(";");\n\n\t        for (idx = 0, length = rule.length; idx < length; idx++) {\n\t            property = rule[idx];\n\t            splits = property.split("=");\n\t            value = kendo.trim(splits[1]).split(",");\n\n\t            switch (kendo.trim(splits[0]).toUpperCase()) {\n\t                case "FREQ":\n\t                    instance.freq = value[0].toLowerCase();\n\t                    break;\n\t                case "UNTIL":\n\t                    instance.until = parseUTCDate(value[0], zone);\n\t                    break;\n\t                case "COUNT":\n\t                    instance.count = parseInt(value[0], 10);\n\t                    break;\n\t                case "INTERVAL":\n\t                    instance.interval = parseInt(value[0], 10);\n\t                    break;\n\t                case "BYSECOND":\n\t                    instance.seconds = parseArray(value, { start: 0, end: 60 });\n\t                    ruleValue = true;\n\t                    break;\n\t                case "BYMINUTE":\n\t                    instance.minutes = parseArray(value, { start: 0, end: 59 });\n\t                    ruleValue = true;\n\t                    break;\n\t                case "BYHOUR":\n\t                    instance.hours = parseArray(value, { start: 0, end: 23 });\n\t                    ruleValue = true;\n\t                    break;\n\t                case "BYMONTHDAY":\n\t                    instance.monthDays = parseArray(value, { start: -31, end: 31 });\n\t                    ruleValue = true;\n\t                    break;\n\t                case "BYYEARDAY":\n\t                    instance.yearDays = parseArray(value, { start: -366, end: 366 });\n\t                    ruleValue = true;\n\t                    break;\n\t                case "BYMONTH":\n\t                    instance.months = parseArray(value, { start: 1, end: 12 });\n\t                    ruleValue = true;\n\t                    break;\n\t                case "BYDAY":\n\t                    instance.weekDays = weekDays = parseWeekDayList(value);\n\t                    ruleValue = true;\n\t                    break;\n\t                case "BYWEEKNO":\n\t                    instance.weeks = parseArray(value, { start: -53, end: 53 });\n\t                    ruleValue = true;\n\t                    break;\n\t                case "BYSETPOS":\n\t                    instance.positions = parseArray(value, { start: -366, end: 366 });\n\t                    break;\n\t                case "WKST":\n\t                    instance.weekStart = weekStart = WEEK_DAYS_IDX[value[0]];\n\t                    break;\n\t            }\n\t        }\n\n\t        if (instance.freq === undefined || (instance.count !== undefined && instance.until)) {\n\t            return null;\n\t        }\n\n\t        if (!instance.interval) {\n\t            instance.interval = 1;\n\t        }\n\n\t        if (weekStart === undefined) {\n\t            instance.weekStart = weekStart = kendo.culture().calendar.firstDay;\n\t        }\n\n\t        if (weekDays) {\n\t            instance.weekDays = weekDays.sort(predicate);\n\t        }\n\n\t        if (instance.positions && !ruleValue) {\n\t            instance.positions = null;\n\t        }\n\n\t        instance._hasRuleValue = ruleValue;\n\t        instance.offsets = offsets;\n\n\t        return instance;\n\t    }\n\n\t    function serializeDateRule(dateRule, zone) {\n\t        var value = dateRule.value;\n\t        var tzid = dateRule.tzid || "";\n\t        var length = value.length;\n\t        var idx = 0;\n\t        var val;\n\n\t        for (; idx < length; idx++) {\n\t            val = value[idx];\n\t            val = timezone.convert(val, tzid || zone || val.getTimezoneOffset(), "Etc/UTC");\n\t            value[idx] = kendo.toString(val, "yyyyMMddTHHmmssZ");\n\t        }\n\n\t        if (tzid) {\n\t            tzid = ";TZID=" + tzid;\n\t        }\n\n\t        return tzid + ":" + value.join(",") + " ";\n\t    }\n\n\t    function serialize(rule, zone) {\n\t        var weekStart = rule.weekStart;\n\t        var ruleString = "FREQ=" + rule.freq.toUpperCase();\n\t        var exdates = rule.exdates || "";\n\t        var start = rule.start || "";\n\t        var end = rule.end || "";\n\t        var until = rule.until;\n\n\t        if (rule.interval > 1) {\n\t            ruleString += ";INTERVAL=" + rule.interval;\n\t        }\n\n\t        if (rule.count) {\n\t            ruleString += ";COUNT=" + rule.count;\n\t        }\n\n\t        if (until) {\n\t            until = timezone.convert(until, zone || until.getTimezoneOffset(), "Etc/UTC");\n\n\t            ruleString += ";UNTIL=" + kendo.toString(until, "yyyyMMddTHHmmssZ");\n\t        }\n\n\t        if (rule.months) {\n\t            ruleString += ";BYMONTH=" + rule.months;\n\t        }\n\n\t        if (rule.weeks) {\n\t            ruleString += ";BYWEEKNO=" + rule.weeks;\n\t        }\n\n\t        if (rule.yearDays) {\n\t            ruleString += ";BYYEARDAY=" + rule.yearDays;\n\t        }\n\n\t        if (rule.monthDays) {\n\t            ruleString += ";BYMONTHDAY=" + rule.monthDays;\n\t        }\n\n\t        if (rule.weekDays) {\n\t            ruleString += ";BYDAY=" + serializeWeekDayList(rule.weekDays);\n\t        }\n\n\t        if (rule.hours) {\n\t            ruleString += ";BYHOUR=" + rule.hours;\n\t        }\n\n\t        if (rule.minutes) {\n\t            ruleString += ";BYMINUTE=" + rule.minutes;\n\t        }\n\n\t        if (rule.seconds) {\n\t            ruleString += ";BYSECOND=" + rule.seconds;\n\t        }\n\n\t        if (rule.positions) {\n\t            ruleString += ";BYSETPOS=" + rule.positions;\n\t        }\n\n\t        if (weekStart !== undefined) {\n\t            ruleString += ";WKST=" + WEEK_DAYS[weekStart];\n\t        }\n\n\t        if (start) {\n\t            start = "DTSTART" + serializeDateRule(start, zone);\n\t        }\n\n\t        if (end) {\n\t            end = "DTEND" + serializeDateRule(end, zone);\n\t        }\n\n\t        if (exdates) {\n\t            exdates = "EXDATE" + serializeDateRule(exdates, zone);\n\t        }\n\n\t        if (start || end || exdates) {\n\t            ruleString = start + end + exdates + "RRULE:" + ruleString;\n\t        }\n\n\t        return ruleString;\n\t    }\n\n\t    kendo.recurrence = {\n\t        rule: {\n\t            parse: parseRule,\n\t            serialize: serialize\n\t        },\n\t        expand: expand,\n\t        dayInYear: dayInYear,\n\t        weekInYear: weekInYear,\n\t        weekInMonth: weekInMonth,\n\t        numberOfWeeks: numberOfWeeks,\n\t        isException: isException,\n\t        toExceptionString: toExceptionString\n\t    };\n\n\t    var weekDayCheckBoxes = function(firstDay, repeatOn) {\n\t        var shortNames = kendo.culture().calendar.days.namesShort,\n\t            names = kendo.culture().calendar.days.names,\n\t            length = shortNames.length,\n\t            result = "",\n\t            idx = 0,\n\t            values = [];\n\n\t        for (; idx < length; idx++) {\n\t            values.push(idx);\n\t        }\n\n\t        shortNames = shortNames.slice(firstDay).concat(shortNames.slice(0, firstDay));\n\t        names = names.slice(firstDay).concat(names.slice(0, firstDay));\n\t        values = values.slice(firstDay).concat(values.slice(0, firstDay));\n\n\t        for (idx = 0; idx < length; idx++) {\n\t            result += \'<label class="k-check"><input aria-label="\' + repeatOn + \' \' + names[idx] + \'" class="k-recur-weekday-checkbox" type="checkbox" value="\' + values[idx] + \'" /> \' + shortNames[idx] + "</label>";\n\t        }\n\n\t        return result;\n\t    };\n\n\t    var mobileWeekDayCheckBoxes = function(firstDay) {\n\t        var shortNames = kendo.culture().calendar.days.names,\n\t            length = shortNames.length,\n\t            result = "",\n\t            idx = 0,\n\t            values = [];\n\n\t        for (; idx < length; idx++) {\n\t            values.push(idx);\n\t        }\n\n\t        shortNames = shortNames.slice(firstDay).concat(shortNames.slice(0, firstDay));\n\t        values = values.slice(firstDay).concat(values.slice(0, firstDay));\n\n\t        for (idx = 0; idx < length; idx++) {\n\t            result += \'<li class="k-item k-listgroup-item">\';\n\t            result += \'<label class="k-label k-listgroup-form-row">\';\n\t            result += \'<span class="k-item-title k-listgroup-form-field-label">\' + shortNames[idx] + \'</span>\';\n\t            result += \'<span class="k-listgroup-form-field-wrapper">\';\n\t            result += \'<input class="k-recur-weekday-checkbox k-check" type="checkbox" value="\' + values[idx] + \'" />\';\n\t            result += \'</span>\';\n\t            result += \'</label>\';\n\t            result += \'</li>\';\n\t        }\n\n\t        return result;\n\t    };\n\n\t    var RECURRENCE_VIEW_TEMPLATE = kendo.template(\n\t       \'# if (frequency !== "never") { #\' +\n\t           \'<div class="k-edit-label"><label>#:messages.repeatEvery#</label></div>\' +\n\t           \'<div class="k-edit-field"><input class="k-recur-interval" title="#:messages.repeatEvery# #:messages.interval#"/>#:messages.interval#</div>\' +\n\t       \'# } #\' +\n\t       \'# if (frequency === "weekly") { #\' +\n\t           \'<div class="k-edit-label"><label>#:messages.repeatOn#</label></div>\' +\n\t           \'<div class="k-edit-field">#=weekDayCheckBoxes(firstWeekDay,messages.repeatOn)#</div>\' +\n\t       \'# } else if (frequency === "monthly") { #\' +\n\t           \'<div class="k-edit-label"><label>#:messages.repeatOn#</label></div>\' +\n\t           \'<div class="k-edit-field">\' +\n\t               \'<ul class="k-reset">\' +\n\t                   \'<li>\' +\n\t                       \'<input class="k-recur-month-radio" type="radio" name="month" value="monthday" title="#:messages.repeatOn# #:messages.date#" /><label>#:messages.date#:</label>\' +\n\t                       \'<input class="k-recur-monthday" title="#:messages.date#" />\' +\n\t                   \'</li>\' +\n\t                   \'<li>\' +\n\t                        \'<input class="k-recur-month-radio" type="radio" name="month" value="weekday" title="#:messages.repeatOn# #:messages.day#" />\' +\n\t                        \'<input class="k-recur-weekday-offset" title="#:messages.repeatOn#" /><input class="k-recur-weekday" title="#:messages.day#" />\' +\n\t                   \'</li>\' +\n\t               \'</ul>\' +\n\t           \'</div>\' +\n\t       \'# } else if (frequency === "yearly") { #\' +\n\t           \'<div class="k-edit-label"><label>#:messages.repeatOn#</label></div>\' +\n\t           \'<div class="k-edit-field">\' +\n\t               \'<ul class="k-reset">\' +\n\t                   \'<li>\' +\n\t                       \'<input class="k-recur-year-radio" type="radio" name="year" value="monthday" title="#:messages.repeatOn# #:messages.month#" />\' +\n\t                       \'<input class="k-recur-month" title="#:messages.month#" /><input class="k-recur-monthday" title="#:messages.date#" />\' +\n\t                   \'</li>\' +\n\t                   \'<li>\' +\n\t                       \'<input class="k-recur-year-radio" type="radio" name="year" value="weekday" title="#:messages.repeatOn# #:messages.day#" />\' +\n\t                       \'<input class="k-recur-weekday-offset" title="#:messages.repeatOn#" /><input class="k-recur-weekday" title="#:messages.day#"  />#:messages.of#<input class="k-recur-month" title="#:messages.of + messages.month#"/>\' +\n\t                   \'</li>\' +\n\t               \'</ul>\' +\n\t           \'</div>\' +\n\t       \'# } #\' +\n\t       \'# if (frequency !== "never") { #\' +\n\t           \'<div class="k-edit-label"><label>#:end.label#</label></div>\' +\n\t           \'<div class="k-edit-field">\' +\n\t               \'<ul class="k-reset">\' +\n\t                   \'<li>\' +\n\t                       \'<input class="k-recur-end-never" type="radio" name="end" value="never" title="#:end.label# #:end.never#" /><label>#:end.never#</label>\' +\n\t                   \'</li>\' +\n\t                   \'<li>\' +\n\t                       \'<input class="k-recur-end-count" type="radio" name="end" value="count" title="#:end.label# #:end.after#" /><label>#:end.after#</label>\' +\n\t                       \'<input class="k-recur-count" title="#:end.occurrence#" />#:end.occurrence#\' +\n\t                   \'</li>\' +\n\t                   \'<li>\' +\n\t                       \'<input class="k-recur-end-until" type="radio" name="end" value="until" title="#:end.label# #:end.on#" /><label>#:end.on#</label>\' +\n\t                       \'<input class="k-recur-until" title="#:end.on#" name="recur-until" />\' +\n\t                   \'</li>\' +\n\t               \'</ul>\' +\n\t           \'</div>\' +\n\t       \'# } #\'\n\t    );\n\n\t    var DAY_RULE = [\n\t        { day: 0, offset: 0 },\n\t        { day: 1, offset: 0 },\n\t        { day: 2, offset: 0 },\n\t        { day: 3, offset: 0 },\n\t        { day: 4, offset: 0 },\n\t        { day: 5, offset: 0 },\n\t        { day: 6, offset: 0 }\n\t    ];\n\n\t    var WEEKDAY_RULE = [\n\t        { day: 1, offset: 0 },\n\t        { day: 2, offset: 0 },\n\t        { day: 3, offset: 0 },\n\t        { day: 4, offset: 0 },\n\t        { day: 5, offset: 0 }\n\t    ];\n\n\t    var WEEKEND_RULE = [\n\t        { day: 0, offset: 0 },\n\t        { day: 6, offset: 0 }\n\t    ];\n\n\t    var BaseRecurrenceEditor = Widget.extend({\n\t        init: function(element, options) {\n\t            var start;\n\t            var that = this;\n\t            var frequencies = options && options.frequencies;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that.wrapper = that.element;\n\n\t            options = that.options;\n\t            options.start = start = options.start || kendoDate.today();\n\n\t            if (frequencies) {\n\t                options.frequencies = frequencies;\n\t            }\n\n\t            if (typeof start === "string") {\n\t                options.start = kendo.parseDate(start, "yyyyMMddTHHmmss");\n\t            }\n\n\t            if (options.firstWeekDay === null) {\n\t                options.firstWeekDay = kendo.culture().calendar.firstDay;\n\t            }\n\n\t            that._namespace = "." + options.name;\n\t        },\n\n\t        options: {\n\t            value: "",\n\t            start: "",\n\t            timezone: "",\n\t            spinners: true,\n\t            firstWeekDay: null,\n\t            frequencies: [\n\t                "never",\n\t                "daily",\n\t                "weekly",\n\t                "monthly",\n\t                "yearly"\n\t            ],\n\t            mobile: false,\n\t            messages: {\n\t                recurrenceEditorTitle:"Recurrence editor",\n\t                frequencies: {\n\t                    never: "Never",\n\t                    hourly: "Hourly",\n\t                    daily: "Daily",\n\t                    weekly: "Weekly",\n\t                    monthly: "Monthly",\n\t                    yearly: "Yearly"\n\t                },\n\t                hourly: {\n\t                    repeatEvery: "Repeat every: ",\n\t                    interval: " hour(s)"\n\t                },\n\t                daily: {\n\t                    repeatEvery: "Repeat every: ",\n\t                    interval: " day(s)"\n\t                },\n\t                weekly: {\n\t                    interval: " week(s)",\n\t                    repeatEvery: "Repeat every: ",\n\t                    repeatOn: "Repeat on: "\n\t                },\n\t                monthly: {\n\t                    repeatEvery: "Repeat every: ",\n\t                    repeatOn: "Repeat on: ",\n\t                    interval: " month(s)",\n\t                    day: "Day ",\n\t                    date: "Date"\n\t                },\n\t                yearly: {\n\t                    repeatEvery: "Repeat every: ",\n\t                    repeatOn: "Repeat on: ",\n\t                    interval: " year(s)",\n\t                    of: " of ",\n\t                    month: "month",\n\t                    day: "day",\n\t                    date: "Date"\n\t                },\n\t                end: {\n\t                    label: "End:",\n\t                    mobileLabel: "Ends",\n\t                    never: "Never",\n\t                    after: "After ",\n\t                    occurrence: " occurrence(s)",\n\t                    on: "On "\n\t                },\n\t                offsetPositions: {\n\t                    first: "first",\n\t                    second: "second",\n\t                    third: "third",\n\t                    fourth: "fourth",\n\t                    last: "last"\n\t                },\n\t                weekdays: {\n\t                    day: "day",\n\t                    weekday: "weekday",\n\t                    weekend: "weekend day"\n\t                }\n\t            }\n\t        },\n\n\t        events: ["change"],\n\n\t        _initInterval: function() {\n\t            var that = this;\n\t            var rule = that._value;\n\n\t            that._container\n\t                .find(".k-recur-interval")\n\t                .kendoNumericTextBox({\n\t                    spinners: that.options.spinners,\n\t                    value: rule.interval || 1,\n\t                    decimals: 0,\n\t                    format: "#",\n\t                    min: 1,\n\t                    change: function() {\n\t                        rule.interval = this.value();\n\t                        that._trigger();\n\t                    }\n\t                });\n\t        },\n\n\t        _weekDayRule: function(clear) {\n\t            var that = this;\n\t            var weekday = (that._weekDay.element || that._weekDay).val();\n\t            var offset = Number((that._weekDayOffset.element || that._weekDayOffset).val());\n\t            var weekDays = null;\n\t            var positions = null;\n\n\t            if (!clear) {\n\t                if (weekday === "day") {\n\t                    weekDays = DAY_RULE;\n\t                    positions = offset;\n\t                } else if (weekday === "weekday") {\n\t                    weekDays = WEEKDAY_RULE;\n\t                    positions = offset;\n\t                } else if (weekday === "weekend") {\n\t                    weekDays = WEEKEND_RULE;\n\t                    positions = offset;\n\t                } else {\n\t                    weekDays = [{\n\t                        offset: offset,\n\t                        day: Number(weekday)\n\t                    }];\n\t                }\n\t            }\n\n\t            that._value.weekDays = weekDays;\n\t            that._value.positions = positions;\n\t        },\n\n\t        _weekDayView: function() {\n\t            var that = this;\n\t            var weekDays = that._value.weekDays;\n\t            var positions = that._value.positions;\n\t            var weekDayOffsetWidget = that._weekDayOffset;\n\t            var weekDayOffset;\n\t            var weekDayValue;\n\t            var length;\n\t            var method;\n\n\t            if (weekDays) {\n\t                length = weekDays.length;\n\n\t                if (positions) {\n\t                    if (length === 7) {\n\t                        weekDayValue = "day";\n\t                        weekDayOffset = positions;\n\t                    } else if (length === 5) {\n\t                        weekDayValue = "weekday";\n\t                        weekDayOffset = positions;\n\t                    } else if (length === 2) {\n\t                        weekDayValue = "weekend";\n\t                        weekDayOffset = positions;\n\t                    }\n\t                }\n\n\t                if (!weekDayValue) {\n\t                    weekDays = weekDays[0];\n\t                    weekDayValue = weekDays.day;\n\t                    weekDayOffset = weekDays.offset || "";\n\t                }\n\n\t                method = weekDayOffsetWidget.value ? "value" : "val";\n\n\t                weekDayOffsetWidget[method](weekDayOffset);\n\t                that._weekDay[method](weekDayValue);\n\t            }\n\t        },\n\n\t        _initWeekDay: function() {\n\t            var that = this, data;\n\n\t            var weekdayMessage = that.options.messages.weekdays;\n\t            var offsetMessage = that.options.messages.offsetPositions;\n\n\t            var weekDayInput = that._container.find(".k-recur-weekday");\n\n\t            var change = function() {\n\t                that._weekDayRule();\n\t                that._trigger();\n\t            };\n\n\t            if (weekDayInput[0]) {\n\t                that._weekDayOffset = new DropDownList(that._container.find(".k-recur-weekday-offset"), {\n\t                    change: change,\n\t                    dataTextField: "text",\n\t                    dataValueField: "value",\n\t                    dataSource: [\n\t                        { text: offsetMessage.first, value: "1" },\n\t                        { text: offsetMessage.second, value: "2" },\n\t                        { text: offsetMessage.third, value: "3" },\n\t                        { text: offsetMessage.fourth, value: "4" },\n\t                        { text: offsetMessage.last, value: "-1" }\n\t                    ]\n\t                });\n\n\t                data = [\n\t                    { text: weekdayMessage.day, value: "day" },\n\t                    { text: weekdayMessage.weekday, value: "weekday" },\n\t                    { text: weekdayMessage.weekend, value: "weekend" }\n\t                ];\n\n\t                that._weekDay = new DropDownList(weekDayInput, {\n\t                    value: that.options.start.getDay(),\n\t                    change: change,\n\t                    dataTextField: "text",\n\t                    dataValueField: "value",\n\t                    dataSource: data.concat($.map(kendo.culture().calendar.days.names, function(dayName, idx) {\n\t                        return {\n\t                            text: dayName,\n\t                            value: idx\n\t                        };\n\t                    }))\n\t                });\n\n\t                that._weekDayView();\n\t            }\n\t        },\n\n\t        _initWeekDays: function() {\n\t            var that = this;\n\t            var rule = that._value;\n\t            var weekDays = that._container.find(".k-recur-weekday-checkbox");\n\n\t            if (weekDays[0]) {\n\t                weekDays.on(CLICK + that._namespace, function() {\n\t                    rule.weekDays = $.map(weekDays.filter(":checked"), function(checkbox) {\n\t                        return {\n\t                            day: Number(checkbox.value),\n\t                            offset: 0\n\t                        };\n\t                    });\n\n\t                    if (!that.options.mobile) {\n\t                        that._trigger();\n\t                    }\n\t                });\n\n\t                if (rule.weekDays) {\n\t                    var idx, weekDay;\n\t                    var i = 0, l = weekDays.length;\n\t                    var length = rule.weekDays.length;\n\n\t                    for (; i < l; i++) {\n\t                        weekDay = weekDays[i];\n\t                        for (idx = 0; idx < length; idx ++) {\n\t                            if (weekDay.value == rule.weekDays[idx].day) {\n\t                                weekDay.checked = true;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _initMonthDay: function() {\n\t            var that = this;\n\t            var rule = that._value;\n\t            var monthDayInput = that._container.find(".k-recur-monthday");\n\n\t            if (monthDayInput[0]) {\n\t                that._monthDay = new kendo.ui.NumericTextBox(monthDayInput, {\n\t                    spinners: that.options.spinners,\n\t                    min: 1,\n\t                    max: 31,\n\t                    decimals: 0,\n\t                    format: "#",\n\t                    value: rule.monthDays ? rule.monthDays[0] : that.options.start.getDate(),\n\t                    change: function() {\n\t                        var value = this.value();\n\n\t                        rule.monthDays = value ? [value] : value;\n\t                        that._trigger();\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        _initCount: function() {\n\t            var that = this,\n\t                input = that._container.find(".k-recur-count"),\n\t                rule = that._value;\n\n\t            that._count = input.kendoNumericTextBox({\n\t                spinners: that.options.spinners,\n\t                value: rule.count || 1,\n\t                decimals: 0,\n\t                format: "#",\n\t                min: 1,\n\t                change: function() {\n\t                    rule.count = this.value();\n\t                    that._trigger();\n\t                }\n\t            }).data("kendoNumericTextBox");\n\t        },\n\n\t        _initUntil: function() {\n\t            var that = this,\n\t                input = that._container.find(".k-recur-until"),\n\t                start = that.options.start,\n\t                rule = that._value,\n\t                until = rule.until,\n\t                min = until && until < start ? until : start,\n\t                startInput = that.wrapper.closest(".k-scheduler-edit-form").find("[name=start]:visible"),\n\t                validDateValidationMessage = kendo.format(kendo.ui.Validator.prototype.options.messages.date, that.options.messages.end.on),\n\t                dateCompareValidationMessage = kendo.ui.Validator.prototype.options.messages.dateCompare,\n\t                initialValue = new Date(start.getFullYear(), start.getMonth(), start.getDate(), 23, 59, 59);\n\n\t            input.attr("data-validDate-msg", validDateValidationMessage);\n\t            input.attr("data-untilDateCompare-msg", dateCompareValidationMessage);\n\n\t            if(startInput.length === 0) {\n\t                startInput = that.wrapper.closest(".k-scheduler-edit-form").find("[name=start]");\n\t            }\n\n\t            if(startInput.length > 0 && startInput.val()) {\n\t                min = new Date(startInput.val());\n\n\t                if(initialValue < min) {\n\t                    initialValue = min;\n\t                }\n\t            }\n\n\t            that._until = input.kendoDatePicker({\n\t                min: min,\n\t                value: until || initialValue,\n\t                change: function() {\n\t                    var date  = this.value();\n\t                    if(date) {\n\t                        rule.until =  new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);\n\t                    }\n\t                    that._trigger();\n\t                }\n\t            }).data("kendoDatePicker");\n\n\t            if(startInput) {\n\t                startInput.on("change", function() {\n\t                    that._until.setOptions({\n\t                        min: startInput.val()\n\t                    });\n\t                });\n\t            }\n\t        },\n\n\t        _trigger: function() {\n\t            if (!this.options.mobile) {\n\t                this.trigger("change");\n\t            }\n\t        }\n\t    });\n\n\t    var RecurrenceEditor = BaseRecurrenceEditor.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            BaseRecurrenceEditor.fn.init.call(that, element, options);\n\n\t            that._initFrequency();\n\n\t            that._initContainer();\n\n\t            that.value(that.options.value);\n\t        },\n\n\t        options: {\n\t            name: "RecurrenceEditor"\n\t        },\n\n\t        events: [ "change" ],\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that._frequency.destroy();\n\t            that._container.find("input[type=radio],input[type=checkbox]").off(CLICK + that._namespace);\n\n\t            kendo.destroy(that._container);\n\n\t            BaseRecurrenceEditor.fn.destroy.call(that);\n\t        },\n\n\t        value: function(value) {\n\t            var that = this;\n\t            var timezone = that.options.timezone;\n\t            var freq;\n\n\t            if (value === undefined) {\n\t                if (!that._value.freq) {\n\t                    return "";\n\t                }\n\n\t                return serialize(that._value, timezone);\n\t            }\n\n\t            that._value = parseRule(value, timezone) || {};\n\n\t            freq = that._value.freq;\n\n\t            if (freq) {\n\t                that._frequency.value(freq);\n\t            } else {\n\t                that._frequency.select(0);\n\t            }\n\n\t            that._initView(that._frequency.value());\n\t        },\n\n\t        _initContainer: function() {\n\t            var element = this.element,\n\t                container = $(\'<div class="k-recur-view" />\'),\n\t                editContainer = element.parent(".k-edit-field");\n\n\t            if (editContainer[0]) {\n\t                container.insertAfter(editContainer);\n\t            } else {\n\t                element.append(container);\n\t            }\n\n\t            this._container = container;\n\t        },\n\n\t        _initFrequency: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                frequencies = options.frequencies,\n\t                messages = options.messages.frequencies,\n\t                ddl = $(\'<input />\').attr({title: options.messages.recurrenceEditorTitle}),\n\t                frequency;\n\n\t            frequencies = $.map(frequencies, function(frequency) {\n\t                return {\n\t                    text: messages[frequency],\n\t                    value: frequency\n\t                };\n\t            });\n\n\t            frequency = frequencies[0];\n\t            if (frequency && frequency.value === "never") {\n\t                frequency.value = "";\n\t            }\n\n\t            that.element.append(ddl);\n\t            that._frequency = new DropDownList(ddl, {\n\t                dataTextField: "text",\n\t                dataValueField: "value",\n\t                dataSource: frequencies,\n\t                change: function() {\n\t                    that._value = {};\n\t                    that._initView(that._frequency.value());\n\t                    that.trigger("change");\n\t                }\n\t            });\n\t        },\n\n\t        _initView: function(frequency) {\n\t            var that = this;\n\t            var rule = that._value;\n\t            var options = that.options;\n\n\t            var data = {\n\t                 frequency: frequency || "never",\n\t                 weekDayCheckBoxes: weekDayCheckBoxes,\n\t                 firstWeekDay: options.firstWeekDay,\n\t                 messages: options.messages[frequency],\n\t                 end: options.messages.end\n\t            };\n\n\t            kendo.destroy(that._container);\n\t            that._container.html(RECURRENCE_VIEW_TEMPLATE(data));\n\n\t            if (!frequency) {\n\t                that._value = {};\n\t                return;\n\t            }\n\n\t            rule.freq = frequency;\n\n\t            if (frequency === "weekly" && !rule.weekDays) {\n\t                rule.weekDays = [{\n\t                    day: options.start.getDay(),\n\t                    offset: 0\n\t                }];\n\t            }\n\n\t            that._initInterval();\n\t            that._initWeekDays();\n\t            that._initMonthDay();\n\t            that._initWeekDay();\n\t            that._initMonth();\n\t            that._initCount();\n\t            that._initUntil();\n\n\t            that._period();\n\t            that._end();\n\t        },\n\n\t        _initMonth: function() {\n\t            var that = this;\n\t            var rule = that._value;\n\t            var month = rule.months || [that.options.start.getMonth() + 1];\n\t            var monthInputs = that._container.find(".k-recur-month");\n\t            var options;\n\n\t            if (monthInputs[0]) {\n\t                options = {\n\t                    change:  function() {\n\t                        rule.months = [Number(this.value())];\n\t                        that.trigger("change");\n\t                    },\n\t                    dataTextField: "text",\n\t                    dataValueField: "value",\n\t                    dataSource: $.map(kendo.culture().calendar.months.names, function(monthName, idx) {\n\t                        return {\n\t                            text: monthName,\n\t                            value: idx + 1\n\t                        };\n\t                    })\n\t                };\n\n\t                that._month1 = new DropDownList(monthInputs[0], options);\n\t                that._month2 = new DropDownList(monthInputs[1], options);\n\n\t                if (month) {\n\t                    month = month[0];\n\t                    that._month1.value(month);\n\t                    that._month2.value(month);\n\t                }\n\t            }\n\n\t        },\n\n\t        _end: function() {\n\t            var that = this;\n\t            var rule = that._value;\n\t            var container = that._container;\n\t            var namespace = that._namespace;\n\t            var click = function(e) {\n\t                that._toggleEnd(e.currentTarget.value);\n\t                that.trigger("change");\n\t            };\n\t            var endRule;\n\n\t            that._buttonNever = container.find(".k-recur-end-never").on(CLICK + namespace, click);\n\t            that._buttonCount = container.find(".k-recur-end-count").on(CLICK + namespace, click);\n\t            that._buttonUntil = container.find(".k-recur-end-until").on(CLICK + namespace, click);\n\n\t            if (rule.count) {\n\t                endRule = "count";\n\t            } else if (rule.until) {\n\t                endRule = "until";\n\t            }\n\n\t            that._toggleEnd(endRule);\n\t        },\n\n\t        _period: function() {\n\t            var that = this;\n\t            var rule = that._value;\n\t            var monthly = rule.freq === "monthly";\n\n\t            var toggleRule = monthly ? that._toggleMonthDay : that._toggleYear;\n\n\t            var selector = ".k-recur-" + (monthly ? "month" : "year") + "-radio";\n\t            var radioButtons = that._container.find(selector);\n\n\t            if (!monthly && rule.freq !== "yearly") {\n\t                return;\n\t            }\n\n\t            radioButtons.on(CLICK + that._namespace, function(e) {\n\t                toggleRule.call(that, e.currentTarget.value);\n\t                that.trigger("change");\n\t            });\n\n\t            that._buttonMonthDay = radioButtons.eq(0);\n\t            that._buttonWeekDay = radioButtons.eq(1);\n\n\t            toggleRule.call(that, rule.weekDays ? "weekday" : "monthday");\n\t        },\n\n\t        _toggleEnd: function(endRule) {\n\t            var that = this;\n\t            var count, until;\n\t            var enableCount, enableUntil;\n\n\t            if (endRule === "count") {\n\t                that._buttonCount.prop("checked", true);\n\n\t                enableCount = true;\n\t                enableUntil = false;\n\n\t                count = that._count.value();\n\t                until = null;\n\t            } else if (endRule === "until") {\n\t                that._buttonUntil.prop("checked", true);\n\n\t                enableCount = false;\n\t                enableUntil = true;\n\n\t                count = null;\n\t                until = that._until.value();\n\t            } else {\n\t                that._buttonNever.prop("checked", true);\n\n\t                enableCount = enableUntil = false;\n\t                count = until = null;\n\t            }\n\n\t            if(that._count){\n\t                that._count.enable(enableCount);\n\t            }\n\n\t            if(that._until){\n\t                that._until.enable(enableUntil);\n\t            }\n\n\t            that._value.count = count;\n\t            that._value.until = until;\n\t        },\n\n\t        _toggleMonthDay: function(monthRule) {\n\t            var that = this;\n\t            var enableMonthDay = false;\n\t            var enableWeekDay = true;\n\t            var clear = false;\n\t            var monthDays;\n\n\t            if (monthRule === "monthday") {\n\t                that._buttonMonthDay.prop("checked", true);\n\n\t                monthDays = [that._monthDay.value()];\n\n\t                enableMonthDay = true;\n\t                enableWeekDay = false;\n\t                clear = true;\n\t            } else {\n\t                that._buttonWeekDay.prop("checked", true);\n\t                monthDays = null;\n\t            }\n\n\t            that._weekDay.enable(enableWeekDay);\n\t            that._weekDayOffset.enable(enableWeekDay);\n\t            that._monthDay.enable(enableMonthDay);\n\n\t            that._value.monthDays = monthDays;\n\n\t            that._weekDayRule(clear);\n\t        },\n\n\t        _toggleYear: function(yearRule) {\n\t            var that = this;\n\t            var enableMonth1 = false;\n\t            var enableMonth2 = true;\n\t            var month;\n\n\t            if (yearRule === "monthday") {\n\t                enableMonth1 = true;\n\t                enableMonth2 = false;\n\n\t                month = that._month1.value();\n\t            } else {\n\t                month = that._month2.value();\n\t            }\n\n\t            that._month1.enable(enableMonth1);\n\t            that._month2.enable(enableMonth2);\n\n\t            that._value.months = [month];\n\t            that._toggleMonthDay(yearRule);\n\t        }\n\t    });\n\n\t    ui.plugin(RecurrenceEditor);\n\n\n\t    var RECURRENCE_HEADER_TEMPLATE = kendo.template(\n\t        \'<div data-role="content">\' +\n\t            \'<ul class="k-listgroup k-listgroup-flush">\' +\n\t                \'<li class="k-item k-listgroup-item">\' +\n\t                    \'<label class="k-label k-listgroup-form-row">\' +\n\t                        \'<span class="k-item-title k-listgroup-form-field-label">#:headerTitle#</span>\' +\n\t                        \'<div class="k-recur-pattern k-listgroup-form-field-wrapper"></div>\' +\n\t                    \'</label>\' +\n\t                \'</li>\' +\n\t                \'<li class="k-item k-listgroup-item k-recur-view"></li>\' +\n\t            \'</ul>\' +\n\t        \'</div>\'\n\t    );\n\n\t    var RECURRENCE_REPEAT_PATTERN_TEMPLATE = kendo.template(\n\t        \'# if (frequency !== "never") { #\' +\n\t            \'<label class="k-label k-listgroup-form-row">\' +\n\t                \'<span class="k-item-title k-listgroup-form-field-label">#:messages.repeatEvery#</span>\' +\n\t                \'<div class="k-recur-editor-wrap k-listgroup-form-field-wrapper">\' +\n\t                    \'<input class="k-recur-interval" type="number" pattern="\\\\\\\\d*"/>\' +\n\t                    \'# if (messages.interval.length) { #\' +\n\t                        \'<span class="k-recur-editor-text">#:messages.interval#</span>\' +\n\t                    \'# } #\' +\n\t                \'</div>\' +\n\t            \'</label>\' +\n\t        \'# } #\' +\n\t        \'# if (frequency === "weekly") { #\' +\n\t            \'<ul class="k-recur-items-wrap k-listgroup k-listgroup-flush">\' +\n\t                \'<li class="k-item k-listgroup-item k-no-click">\' +\n\t                    \'<label class="k-label k-listgroup-form-row">\' +\n\t                        \'<span class="k-item-title k-listgroup-form-field-label">#:messages.repeatOn#</span>\' +\n\t                    \'</label>\' +\n\t                \'</li>\' +\n\t                \'#=weekDayCheckBoxes(firstWeekDay)#\' +\n\t            \'</ul>\' +\n\t        \'# } else if (frequency === "monthly") { #\' +\n\t            \'<ul class="k-recur-items-wrap k-listgroup k-listgroup-flush">\' +\n\t                \'<li class="k-item k-listgroup-item">\' +\n\t                    \'<label class="k-label k-listgroup-form-row">\' +\n\t                        \'<span class="k-item-title k-listgroup-form-field-label">#:messages.repeatBy#</span>\' +\n\t                        \'<div class="k-repeat-rule k-listgroup-form-field-wrapper"></div>\' +\n\t                    \'</label>\' +\n\t                \'</li>\' +\n\t                \'<li class="k-monthday-view k-item k-listgroup-item" style="display:none">\' +\n\t                    \'<label class="k-label k-listgroup-form-row">\' +\n\t                        \'<span class="k-item-title k-listgroup-form-field-label">#:messages.day#</span>\' +\n\t                        \'<div class="k-listgroup-form-field-wrapper"><input class="k-recur-monthday" type="number" title="#:messages.day#" pattern="\\\\\\\\d*"/></div>\' +\n\t                    \'</label>\' +\n\t                \'</li>\' +\n\t                \'<li class="k-weekday-view k-item k-listgroup-item" style="display:none">\' +\n\t                    \'<label class="k-label k-listgroup-form-row">\' +\n\t                        \'<span class="k-item-title k-listgroup-form-field-label">#:messages.every#</span>\' +\n\t                        \'<div class="k-listgroup-form-field-wrapper"><select class="k-recur-weekday-offset" title="#:messages.every#"></select></div>\' +\n\t                    \'</label>\' +\n\t                \'</li>\' +\n\t                \'<li class="k-weekday-view k-item k-listgroup-item" style="display:none">\' +\n\t                    \'<label class="k-label k-listgroup-form-row">\' +\n\t                        \'<span class="k-item-title k-listgroup-form-field-label">#:messages.day#</span>\' +\n\t                        \'<div class="k-listgroup-form-field-wrapper"><select class="k-recur-weekday" title="#:messages.day#"></select></div>\' +\n\t                    \'</label>\' +\n\t                \'</li>\' +\n\t            \'</ul>\' +\n\t        \'# } else if (frequency === "yearly") { #\' +\n\t            \'<ul class="k-recur-items-wrap k-listgroup k-listgroup-flush">\' +\n\t                \'<li class="k-item k-listgroup-item">\' +\n\t                    \'<label class="k-label k-listgroup-form-row">\' +\n\t                        \'<span class="k-item-title k-listgroup-form-field-label">#:messages.repeatBy#</span>\' +\n\t                        \'<div class="k-repeat-rule k-listgroup-form-field-wrapper"></div>\' +\n\t                    \'</label>\' +\n\t                \'</li>\' +\n\t                \'<li class="k-monthday-view k-item k-listgroup-item" style="display:none">\' +\n\t                    \'<label class="k-label k-listgroup-form-row">\' +\n\t                        \'<span class="k-item-title k-listgroup-form-field-label">#:messages.day#</span>\' +\n\t                        \'<div class="k-listgroup-form-field-wrapper"><input class="k-recur-monthday" type="number" title="#:messages.day#" pattern="\\\\\\\\d*"/></div>\' +\n\t                    \'</label>\' +\n\t                \'</li>\' +\n\t                \'<li class="k-weekday-view k-item k-listgroup-item" style="display:none">\' +\n\t                    \'<label class="k-label k-listgroup-form-row">\' +\n\t                        \'<span class="k-item-title k-listgroup-form-field-label">#:messages.every#</span>\' +\n\t                        \'<div class="k-listgroup-form-field-wrapper"><select class="k-recur-weekday-offset" title="#:messages.every#"></select></div>\' +\n\t                    \'</label>\' +\n\t                \'</li>\' +\n\t                \'<li class="k-weekday-view k-item k-listgroup-item" style="display:none">\' +\n\t                    \'<label class="k-label k-listgroup-form-row">\' +\n\t                        \'<span class="k-item-title k-listgroup-form-field-label">#:messages.day#</span>\' +\n\t                        \'<div class="k-listgroup-form-field-wrapper"><select class="k-recur-weekday" title="#:messages.day#"></select></div>\' +\n\t                    \'</label>\' +\n\t                \'</li>\' +\n\t                \'<li class="k-item k-item k-listgroup-item">\' +\n\t                    \'<label class="k-label k-listgroup-form-row">\' +\n\t                        \'<span class="k-item-title k-listgroup-form-field-label">#:messages.month#</span>\' +\n\t                        \'<div class="k-listgroup-form-field-wrapper"><select class="k-recur-month" title="#:messages.month#"></select></div>\' +\n\t                    \'</label>\' +\n\t                \'</li>\' +\n\t           \'</ul>\' +\n\t        \'# } #\'\n\t    );\n\n\t    var RECURRENCE_END_PATTERN_TEMPLATE = kendo.template(\n\t        \'# if (endPattern === "count") { #\' +\n\t            \'<label class="k-label k-listgroup-form-row">\' +\n\t                \'<span class="k-item-title k-listgroup-form-field-label">#:messages.after#</span>\' +\n\t                \'<div class="k-listgroup-form-field-wrapper"><input class="k-recur-count" type="number" pattern="\\\\\\\\d*" /></div>\' +\n\t            \'</label>\' +\n\t        \'# } else if (endPattern === "until") { #\' +\n\t            \'<label class="k-label k-listgroup-form-row">\' +\n\t                \'<span class="k-item-title k-listgroup-form-field-label">#:messages.on#</span>\' +\n\t                \'<div class="k-listgroup-form-field-wrapper"><input type="date" class="k-recur-until" name="recur-until"/></div>\' +\n\t            \'</label>\' +\n\t        \'# } #\'\n\t    );\n\n\t    var RECURRENCE_GROUP_BUTTON_TEMPLATE = kendo.template(\n\t        \'<select class="k-scheduler-select">\' +\n\t            \'#for (var i = 0, length = dataSource.length; i < length; i++) {#\' +\n\t                \'<option value="#=dataSource[i].value#" #= value === dataSource[i].value  ? \\"selected\\" : \\"\\" #>#:dataSource[i].text#</option>\' +\n\t            \'#}#\'  +\n\t        \'</select>\'\n\t    );\n\n\t    var MobileRecurrenceEditor = BaseRecurrenceEditor.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            BaseRecurrenceEditor.fn.init.call(that, element, options);\n\n\t            options = that.options;\n\n\t            that._optionTemplate = kendo.template(\'<option value="#:value#">#:text#</option>\');\n\n\t            that.value(options.value);\n\n\t            that._pane = options.pane || that.wrapper.closest("[data-role=pane]").data("kendoPane");\n\n\t            that._initRepeatButton();\n\n\t            that._initParentRepeatEnd();\n\n\t            that._defaultValue = that._value;\n\t        },\n\n\t        options: {\n\t            name: "MobileRecurrenceEditor",\n\t            animations: {\n\t                left: "slide",\n\t                right: "slide:right"\n\t            },\n\t            mobile: true,\n\t            messages: {\n\t                cancel: "Cancel",\n\t                update: "Save",\n\t                endTitle: "Repeat ends",\n\t                repeatTitle: "Repeat pattern",\n\t                headerTitle: "Repeat event",\n\t                end: {\n\t                    patterns: {\n\t                        never: "Never",\n\t                        after: "After...",\n\t                        on: "On..."\n\t                    },\n\t                    never: "Never",\n\t                    after: "End repeat after",\n\t                    on: "End repeat on"\n\t                },\n\t                daily: {\n\t                    interval: ""\n\t                },\n\t                hourly: {\n\t                    interval: ""\n\t                },\n\t                weekly: {\n\t                    interval: ""\n\t                },\n\t                monthly: {\n\t                    interval: "",\n\t                    repeatBy: "Repeat by: ",\n\t                    dayOfMonth: "Day of the month",\n\t                    dayOfWeek: "Day of the week",\n\t                    repeatEvery: "Repeat every",\n\t                    every: "Every",\n\t                    day: "Day "\n\t                },\n\t                yearly: {\n\t                    interval: "",\n\t                    repeatBy: "Repeat by: ",\n\t                    dayOfMonth: "Day of the month",\n\t                    dayOfWeek: "Day of the week",\n\t                    repeatEvery: "Repeat every: ",\n\t                    every: "Every",\n\t                    month: "Month",\n\t                    day: "Day"\n\t                }\n\t            }\n\t        },\n\n\t        events: [ "change" ],\n\n\t        value: function(value) {\n\t            var that = this;\n\t            var timezone = that.options.timezone;\n\n\t            if (value === undefined) {\n\t                if (!that._value.freq) {\n\t                    return "";\n\t                }\n\n\t                return serialize(that._value, timezone);\n\t            }\n\n\t            that._value = parseRule(value, timezone) || {};\n\t        },\n\n\t        destroy: function() {\n\t            this._destroyView();\n\n\t            kendo.destroy(this._endFields);\n\n\t            this.element.off(CLICK + this._namespace);\n\n\t            BaseRecurrenceEditor.fn.destroy.call(this);\n\t        },\n\n\t        _initInterval: function() {\n\t            var that = this;\n\t            var rule = that._value;\n\n\t            that._container.find(".k-recur-interval")\n\t                .val(that._value.interval || 1)\n\t                .on(CHANGE + that._namespace, function(e){\n\t                    rule.interval = e.target.value;\n\t                    that._trigger();\n\t                });\n\t        },\n\n\t        _initRepeatButton: function() {\n\t            var that = this;\n\t            var freq = that.options.messages.frequencies[this._value.freq || "never"];\n\n\t            that._chevronButton = $(\'<span class="k-icon k-i-arrow-chevron-right"></span>\');\n\t            that._repeatValue = $(\'<span class="">\' + freq + \'</span>\');\n\n\t            that.element.append(that._repeatValue).append(that._chevronButton);\n\n\t            that.element.parents("li.k-item").on(CLICK + that._namespace, function(e) {\n\t                e.preventDefault();\n\t                that._createView("repeat");\n\t                that._pane.navigate(that._view, that.options.animations.left);\n\t            });\n\t        },\n\n\t        _endLiItem: function () {\n\t            var that = this;\n\t            return \'<li class="k-item k-listgroup-item"><label class="k-label k-listgroup-form-row"><span class="k-item-title k-listgroup-form-field-label">\' + that.options.messages.end.mobileLabel + \'</span></label></li>\';\n\t        },\n\n\t        _initParentRepeatEnd: function() {\n\t            var that = this;\n\n\t            var endLabelField = $(that._endLiItem()).insertAfter(that.element.parents("li.k-item"));\n\n\t            var endEditField = $(\'<div class="k-scheduler-recur-end-wrap k-listgroup-form-field-wrapper"><span class="k-scheduler-recur-end"></span></div>\')\n\t                .appendTo(endLabelField.find(".k-label"));\n\n\t            endLabelField.on(CLICK + that._namespace, function(e) {\n\t                e.preventDefault();\n\t                that._navigateToView("repeat");\n\t            });\n\n\t            that._endParentLabelField = endLabelField.toggle(!!that._value.freq);\n\t            that._endParentEndButton = endEditField.find(".k-scheduler-recur-end").text(that._endText());\n\t        },\n\n\t        _initRepeatEnd: function() {\n\t            var that = this;\n\n\t            var endLabelField = $(that._endLiItem()).insertAfter(that._container);\n\n\t            var endEditField = $(\'<div class="k-scheduler-recur-end-wrap k-listgroup-form-field-wrapper"><span class="k-scheduler-recur-end"></span><span class="k-icon k-i-arrow-chevron-right"></span></div>\')\n\t                .appendTo(endLabelField.find(".k-label"));\n\n\t            endLabelField.on(CLICK + that._namespace, function(e) {\n\t                e.preventDefault();\n\t                that._navigateToView("end");\n\t            });\n\n\t            that._endLabelField = endLabelField.toggleClass("k-state-disabled", !that._value.freq);\n\t            that._endButton = endEditField.find(".k-scheduler-recur-end").text(that._endText());\n\t        },\n\n\t        _navigateToView: function (viewName) {\n\t            var that = this;\n\t            that._createView(viewName);\n\t            that._pane.navigate(that._view, that.options.animations.left);\n\t        },\n\n\t        _endText: function() {\n\t            var rule = this._value;\n\t            var messages = this.options.messages.end;\n\n\t            var text = messages.never;\n\n\t            if (rule.count) {\n\t                text = kendo.format("{0} {1}", messages.after, rule.count);\n\t            } else if (rule.until) {\n\t                text = kendo.format("{0} {1:d}", messages.on, rule.until);\n\t            }\n\n\t            return text;\n\t        },\n\n\t        _initFrequency: function() {\n\t            var that = this;\n\t            var frequencyMessages = that.options.messages.frequencies;\n\n\t            var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({\n\t                dataSource: $.map(this.options.frequencies, function(frequency) {\n\t                    return {\n\t                        text: frequencyMessages[frequency],\n\t                        value: frequency !== "never" ? frequency : ""\n\t                    };\n\t                }),\n\t                value: that._value.freq || "",\n\t                ns: kendo.ns\n\t            });\n\n\t            that._view.element\n\t                .find(".k-recur-pattern")\n\t                .append(html);\n\n\t            that._view.element.find(".k-scheduler-select")\n\t                .on(CHANGE + that._namespace, function(e) {\n\t                    var value = e.target.value;\n\t                    that._value = { freq: value };\n\t                    that._defaultValue = $.extend({}, that._value);\n\t                    that._initRepeatView(true);\n\t                    that._endButton.text(that._endText());\n\t                    that._endParentEndButton.text(that._endText());\n\t                });\n\t        },\n\n\t        _initEndNavigation: function() {\n\t            var that = this;\n\t            var endMessages = that.options.messages.end.patterns;\n\t            var rule = that._value;\n\t            var value = "";\n\n\t            if (rule.count) {\n\t                value = "count";\n\t            } else if (rule.until) {\n\t                value = "until";\n\t            }\n\n\t            var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({\n\t                dataSource: [\n\t                    { text: endMessages.never, value: "" },\n\t                    { text: endMessages.after, value: "count" },\n\t                    { text: endMessages.on, value: "until" }\n\t                ],\n\t                value: value,\n\t                ns: kendo.ns\n\t            });\n\n\t            that._view.element\n\t                .find(".k-recur-pattern")\n\t                .append(html);\n\n\t            that._view.element.find(".k-scheduler-select")\n\t                .on(CHANGE + that._namespace, function(e) {\n\t                    var value = e.target.value;\n\t                    var count = null;\n\t                    var until = null;\n\n\t                    that._initEndView(value);\n\n\t                    if (that._count.length) {\n\t                        count = that._count.val();\n\t                        until = null;\n\t                    } else if (that._until.length) {\n\t                        count = null;\n\t                        until = that._until.val ? kendo.parseDate(that._until.val(), "yyyy-MM-dd") : that._until.value();\n\t                    }\n\n\t                    rule.count = count;\n\t                    rule.until = until;\n\t                });\n\t        },\n\n\t        _createView: function(viewType) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var messages = options.messages;\n\t            var headerTitle = messages[viewType === "repeat" ? "repeatTitle" : "endTitle"];\n\n\t            var html = \'<div data-role="view" class="k-popup-edit-form k-scheduler-edit-form" id="recurrence">\' +\n\t                       \'<div data-role="header" class="k-header">\' +\n\t                           \'<a href="#" class="k-header-cancel k-scheduler-cancel k-link" title="\' + messages.cancel + \'"\'+\n\t                           \'aria-label="\' + messages.cancel + \'"><span class="k-icon k-i-arrow-chevron-left"></span></a>\' +\n\t                               messages.headerTitle +\n\t                           \'<a href="#" class="k-header-done k-scheduler-update k-link" title="\' + messages.update + \'" \' +\n\t                           \'aria-label="\' + messages.update + \'"><span class="k-icon k-i-check"></span></a>\' +\n\t                       \'</div>\';\n\n\t            var returnViewId = that._pane.view().id;\n\n\t            that._view = that._pane.append(html + RECURRENCE_HEADER_TEMPLATE({ headerTitle: headerTitle }));\n\n\t            that._view.element.on(CLICK + that._namespace, "a.k-scheduler-cancel, a.k-scheduler-update", function(e) {\n\t                e.preventDefault();\n\t                e.stopPropagation();\n\n\t                if ($(this).hasClass("k-scheduler-update")) {\n\t                    that.trigger("change");\n\t                    that._defaultValue = $.extend({}, that._value);\n\t                } else {\n\t                    that._value = that._defaultValue;\n\t                }\n\n\t                var frequency = that._value.freq;\n\n\t                that._endParentEndButton.text(that._endText());\n\t                that._endParentLabelField.toggle(!!frequency && frequency !== "never");\n\t                that._endButton.text(that._endText());\n\n\t                that._repeatValue.text(messages.frequencies[frequency || "never"]);\n\n\t                that._pane.one("viewShow", function() {\n\t                    that._destroyView();\n\t                });\n\n\t                that._pane.navigate(returnViewId, that.options.animations.right);\n\t            });\n\n\t            that._container = that._view.element.find(".k-recur-view");\n\n\t            if (viewType === "repeat") {\n\t                that._initFrequency();\n\t                that._initRepeatView(true);\n\t                that._initRepeatEnd();\n\t            } else {\n\t                that._initEndNavigation();\n\t                that._initEndView();\n\t            }\n\t        },\n\n\t        _destroyView: function() {\n\t            if (this._view) {\n\n\t                this._view.destroy();\n\t                this._view.element.remove();\n\t                this._container = null;\n\t            }\n\n\n\t            this._view = null;\n\t        },\n\n\t        _initRepeatView: function(isMobile) {\n\t            var that = this;\n\t            var frequency = that._value.freq || "never";\n\n\t            var data = {\n\t                 frequency: frequency,\n\t                 weekDayCheckBoxes: isMobile ? mobileWeekDayCheckBoxes : weekDayCheckBoxes,\n\t                 firstWeekDay: that.options.firstWeekDay,\n\t                 messages: that.options.messages[frequency]\n\t            };\n\n\t            var html = RECURRENCE_REPEAT_PATTERN_TEMPLATE(data);\n\n\t            var container = that._container = that._container || this._pane.view().content.find("li.k-recur-view");\n\t            var rule = that._value;\n\n\t            if(that._endLabelField){\n\t                that._endLabelField.toggleClass("k-state-disabled", frequency === "never");\n\t            }\n\n\t            kendo.destroy(container);\n\t            container.html(html);\n\n\t            if (!html) {\n\t                that._value = {};\n\t                container.hide();\n\t                return;\n\t            } else {\n\t                container.show();\n\t            }\n\n\t            if (frequency === "weekly" && !rule.weekDays) {\n\t                 rule.weekDays = [{\n\t                    day: that.options.start.getDay(),\n\t                    offset: 0\n\t                 }];\n\t            }\n\n\t            that._initInterval();\n\t            that._initMonthDay();\n\t            that._initWeekDays();\n\t            that._initWeekDay();\n\t            that._initMonth();\n\n\t            that._period();\n\t        },\n\n\t        _initMonthDay: function () {\n\t            var that = this;\n\t            var rule = that._value;\n\t            var monthDayInput = that._monthDay = that._container.find(".k-recur-monthday");\n\n\t            monthDayInput.attr({\n\t                min: 1,\n\t                max: 31\n\t            })\n\t            .val(rule.monthDays ? rule.monthDays[0] : that.options.start.getDate())\n\t            .on(CHANGE + that._namespace, function(e){\n\t                rule.count = e.target.value;\n\t                that._trigger();\n\t            });\n\t        },\n\n\t        _initCount: function(){\n\t            var that = this,\n\t                input = that._count = that._container.find(".k-recur-count"),\n\t                rule = that._value;\n\n\t            input.val(rule.count || 1)\n\t                .on(CHANGE + that._namespace, function(ev){\n\t                    rule.count = ev.target.value;\n\t                    that._trigger();\n\t                });\n\t        },\n\n\t        _initEndView: function (endPattern) {\n\t            var that = this;\n\t            var rule = that._value;\n\n\t            if (endPattern === undefined) {\n\t                if (rule.count) {\n\t                    endPattern = "count";\n\t                } else if (rule.until) {\n\t                    endPattern = "until";\n\t                }\n\t            }\n\n\t            var data = {\n\t                 endPattern: endPattern,\n\t                 messages: that.options.messages.end\n\t            };\n\n\t            kendo.destroy(that._container);\n\t            that._container.html(RECURRENCE_END_PATTERN_TEMPLATE(data));\n\n\t            that._initCount();\n\t            that._initUntil();\n\t        },\n\n\t        _initWeekDay: function() {\n\t            var that = this, data;\n\n\t            var weekdayMessage = that.options.messages.weekdays;\n\t            var offsetMessage = that.options.messages.offsetPositions;\n\n\t            var weekDaySelect = that._container.find(".k-recur-weekday");\n\n\t            var change = function() {\n\t                that._weekDayRule();\n\t                that.trigger("change");\n\t            };\n\n\t            if (weekDaySelect[0]) {\n\t                that._weekDayOffset = that._container.find(".k-recur-weekday-offset")\n\t                                          .html(that._options([\n\t                                            { text: offsetMessage.first, value: "1" },\n\t                                            { text: offsetMessage.second, value: "2" },\n\t                                            { text: offsetMessage.third, value: "3" },\n\t                                            { text: offsetMessage.fourth, value: "4" },\n\t                                            { text: offsetMessage.last, value: "-1" }\n\t                                          ]))\n\t                                          .change(change);\n\n\t                data = [\n\t                    { text: weekdayMessage.day, value: "day" },\n\t                    { text: weekdayMessage.weekday, value: "weekday" },\n\t                    { text: weekdayMessage.weekend, value: "weekend" }\n\t                ];\n\n\t                data = data.concat($.map(kendo.culture().calendar.days.names, function(dayName, idx) {\n\t                    return {\n\t                        text: dayName,\n\t                        value: idx\n\t                    };\n\t                }));\n\n\t                that._weekDay = weekDaySelect.html(that._options(data))\n\t                                             .change(change)\n\t                                             .val(that.options.start.getDay());\n\n\t                that._weekDayView();\n\t            }\n\t        },\n\n\t        _initMonth: function() {\n\t            var that = this;\n\t            var rule = that._value;\n\t            var start = that.options.start;\n\t            var month = rule.months || [start.getMonth() + 1];\n\t            var monthSelect = that._container.find(".k-recur-month");\n\t            var monthNames = kendo.culture().calendar.months.names;\n\n\t            if (monthSelect[0]) {\n\t                var data = $.map(monthNames, function(monthName, idx) {\n\t                    return {\n\t                        text: monthName,\n\t                        value: idx + 1\n\t                    };\n\t                });\n\n\t                monthSelect.html(that._options(data))\n\t                           .change(function() {\n\t                               rule.months = [Number(this.value)];\n\t                           });\n\n\t                that._monthSelect = monthSelect;\n\n\t                if (month) {\n\t                    monthSelect.val(month[0]);\n\t                }\n\t            }\n\n\t        },\n\n\t        _period: function() {\n\t            var that = this;\n\t            var rule = that._value;\n\t            var container = that._container;\n\t            var messages = that.options.messages[rule.freq];\n\t            var repeatRuleGroupButton = container.find(".k-repeat-rule");\n\t            var weekDayView = container.find(".k-weekday-view");\n\t            var monthDayView = container.find(".k-monthday-view");\n\n\t            if (repeatRuleGroupButton[0]) {\n\t                var currentValue = rule.weekDays ? "weekday" : "monthday";\n\n\t                var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({\n\t                    value : currentValue,\n\t                    dataSource: [\n\t                        { text: messages.dayOfMonth, value: "monthday" },\n\t                        { text: messages.dayOfWeek, value: "weekday" }\n\t                    ],\n\t                    ns: kendo.ns\n\t                });\n\n\t                var init = function(val) {\n\t                    var weekDayName = that._weekDay.val();\n\t                    var weekDayOffset = that._weekDayOffset.val();\n\t                    var monthDay = that._monthDay.val();\n\t                    var month = that._monthSelect ? that._monthSelect.val() : null;\n\n\t                    if (val === "monthday") {\n\t                        rule.weekDays = null;\n\t                        rule.monthDays = monthDay ? [monthDay] : monthDay;\n\t                        rule.months = month ? [Number(month)] : month;\n\n\t                        weekDayView.hide();\n\t                        monthDayView.show();\n\t                    } else {\n\t                        rule.monthDays = null;\n\t                        rule.months = month ? [Number(month)] : month;\n\n\t                        rule.weekDays = [{\n\t                            offset: Number(weekDayOffset),\n\t                            day: Number(weekDayName)\n\t                        }];\n\n\t                        weekDayView.show();\n\t                        monthDayView.hide();\n\t                    }\n\t                };\n\n\t                repeatRuleGroupButton\n\t                    .append(html);\n\n\t                repeatRuleGroupButton.find(".k-scheduler-select")\n\t                    .on(CHANGE + that._namespace, function(e) {\n\t                        init(e.target.value);\n\t                    });\n\n\t                init(currentValue);\n\t            }\n\t        },\n\n\t        _initUntil: function() {\n\t            var that = this;\n\t            var input = that._container.find(".k-recur-until");\n\t            var start = that.options.start;\n\t            var rule = that._value;\n\t            var until = rule.until;\n\t            var min = until && until < start ? until : start;\n\t            var validDateValidationMessage = kendo.format(kendo.ui.Validator.prototype.options.messages.date, that.options.messages.end.on);\n\t            var dateCompareValidationMessage = kendo.ui.Validator.prototype.options.messages.dateCompare;\n\n\t            input.attr("data-validDate-msg", validDateValidationMessage);\n\t            input.attr("data-untilDateCompare-msg", dateCompareValidationMessage);\n\n\t            if (kendo.support.input.date) {\n\t                that._until = input.attr("min", kendo.toString(min, "yyyy-MM-dd"))\n\t                                   .val(kendo.toString(until || start, "yyyy-MM-dd"))\n\t                                   .on("change", function() {\n\t                                        var date  = kendo.parseDate(this.value, "yyyy-MM-dd");\n\t                                        if(date) {\n\t                                            rule.until =  date;\n\t                                        }\n\t                                        that._trigger();\n\t                                   });\n\t            } else {\n\t                that._until = input.kendoDatePicker({\n\t                    min: min,\n\t                    value: until || start,\n\t                    change: function() {\n\t                        var date  = this.value();\n\t                        if(date) {\n\t                            rule.until =  date;\n\t                        }\n\t                        that._trigger();\n\t                    }\n\t                }).data("kendoDatePicker");\n\t            }\n\t        },\n\n\t        _options: function(data, optionLabel) {\n\t            var idx = 0;\n\t            var html = "";\n\t            var length = data.length;\n\t            var template = this._optionTemplate;\n\n\t            if (optionLabel) {\n\t                html += template({ value: "", text: optionLabel });\n\t            }\n\n\t            for (; idx < length; idx++) {\n\t                html += template(data[idx]);\n\t            }\n\n\t            return html;\n\t        }\n\t    });\n\n\t    ui.plugin(MobileRecurrenceEditor);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.scheduler.recurrence.js?')
    }
  }
]);
