(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{"./node_modules/@progress/kendo-ui/js/spreadsheet/view.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/view.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1586);\n\tmodule.exports = __webpack_require__(1586);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1003:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.menu */ "./node_modules/@progress/kendo-ui/js/kendo.menu.js");\n\n/***/ }),\n\n/***/ 1566:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../util/main */ "./node_modules/@progress/kendo-ui/js/util/main.js");\n\n/***/ }),\n\n/***/ 1586:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20), __webpack_require__(1003), __webpack_require__(1587), __webpack_require__(1566) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function(kendo) {\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    var $ = kendo.jQuery;\n\t    var CellRef = kendo.spreadsheet.CellRef;\n\t    var DOT = ".";\n\t    var RESIZE_HANDLE_WIDTH = 7;\n\t    var EDIT_BUTTON_WIDTH = 20;\n\t    var ERROR = "Error";\n\t    var viewClassNames = {\n\t        view: "k-spreadsheet-view",\n\t        fixedContainer: "k-spreadsheet-fixed-container",\n\t        editContainer: "k-spreadsheet-edit-container",\n\t        scroller: "k-spreadsheet-scroller",\n\t        viewSize: "k-spreadsheet-view-size",\n\t        clipboard: "k-spreadsheet-clipboard",\n\t        cellEditor: "k-spreadsheet-cell-editor",\n\t        barEditor: "k-spreadsheet-editor",\n\t        topCorner: "k-spreadsheet-top-corner",\n\t        filterHeadersWrapper: "k-filter-wrapper",\n\t        filterRange: "k-filter-range",\n\t        filterButton: "k-spreadsheet-filter",\n\t        filterButtonActive: "k-state-active",\n\t        horizontalResize: "k-horizontal-resize",\n\t        verticalResize: "k-vertical-resize",\n\t        icon: "k-icon",\n\t        iconFilterDefault: "k-i-arrow-60-down",\n\t        sheetsBar: "k-spreadsheet-sheets-bar",\n\t        sheetsBarActive: "k-spreadsheet-sheets-bar-active",\n\t        sheetsBarInactive: "k-spreadsheet-sheets-bar-inactive",\n\t        cellContextMenu: "k-spreadsheet-cell-context-menu",\n\t        rowHeaderContextMenu: "k-spreadsheet-row-header-context-menu",\n\t        colHeaderContextMenu: "k-spreadsheet-col-header-context-menu",\n\t        drawingContextMenu: "k-spreadsheet-drawing-context-menu"\n\t    };\n\n\t    kendo.spreadsheet.messages.view = {\n\t        nameBox: "Name Box",\n\t        errors: {\n\t            openUnsupported: "Unsupported format. Please select an .xlsx file.",\n\t            shiftingNonblankCells: "Cannot insert cells due to data loss possibility. Select another insert location or delete the data from the end of your worksheet.",\n\t            insertColumnWhenRowIsSelected: "Cannot insert column when all columns are selected.",\n\t            insertRowWhenColumnIsSelected: "Cannot insert row when all rows are selected.",\n\t            filterRangeContainingMerges: "Cannot create a filter within a range containing merges",\n\t            sortRangeContainingMerges: "Cannot sort a range containing merges",\n\t            cantSortMultipleSelection: "Cannot sort multiple selection",\n\t            cantSortNullRef: "Cannot sort empty selection",\n\t            cantSortMixedCells: "Cannot sort range containing cells of mixed shapes",\n\t            validationError: "The value that you entered violates the validation rules set on the cell.",\n\t            cannotModifyDisabled: "Cannot modify disabled cells.",\n\t            insertRowBelowLastRow: "Cannot insert row below the last row.",\n\t            insertColAfterLastCol: "Cannot insert column to the right of the last column."\n\t        },\n\t        tabs: {\n\t            home: "Home",\n\t            insert: "Insert",\n\t            data: "Data"\n\t        }\n\t    };\n\n\t    kendo.spreadsheet.messages.menus = {\n\t        "cut"          : "Cut",\n\t        "copy"         : "Copy",\n\t        "paste"        : "Paste",\n\t        "merge"        : "Merge",\n\t        "unmerge"      : "Unmerge",\n\t        "delete"       : "Delete",\n\t        "hide"         : "Hide",\n\t        "unhide"       : "Unhide",\n\t        "bringToFront" : "Bring to front",\n\t        "sendToBack"   : "Send to back"\n\t    };\n\n\t    function selectElementContents(el) {\n\t        var sel = window.getSelection();\n\t        sel.removeAllRanges();\n\n\t        var range = document.createRange();\n\t        range.selectNodeContents(el);\n\n\t        sel.addRange(range);\n\t    }\n\n\t    function cellBefore(table, row) {\n\t        var cells = table.trs[row].children;\n\t        return cells[cells.length - 2];\n\t    }\n\n\t    function cellAbove(table, row) {\n\t        var prevRow = table.trs[row-1];\n\t        var index = table.trs[row].children.length-1;\n\n\t        if (prevRow && index >= 0) {\n\t            return prevRow.children[index];\n\t        }\n\t    }\n\n\t    function cellBorder(value) {\n\t        return (value.size || 1) + "px solid " + (value.color || "#000");\n\t    }\n\n\t    function asURL(link) {\n\t        if (!/:\\/\\//.test(link)) {\n\t            link = "http://" + link;\n\t        }\n\t        return link;\n\t    }\n\n\t    function drawCell(collection, cell, cls, showGrid) {\n\t        function maybeLink(el) {\n\t            var link = cell.link;\n\t            if (!link) {\n\t                if (typeof cell.value == "object") {\n\t                    link = cell.value.link;\n\t                }\n\t            }\n\t            if (link) {\n\t                var style = {\n\t                    textDecoration: "none"\n\t                };\n\t                if (cell.color) {\n\t                    style.color = cell.color;\n\t                }\n\t                if (cell.underline) {\n\t                    style.textDecoration = "underline";\n\t                }\n\t                return kendo.dom.element("a", {\n\t                    href   : asURL(link),\n\t                    style  : style,\n\t                    target : "_blank" // XXX: customizable?\n\t                }, el ? [ el ] : []);\n\t            }\n\t            return el;\n\t        }\n\n\t        var shouldDraw = (cell.value != null || (cell.validation != null && !cell.validation.value) || // jshint ignore:line\n\t                          cell.background || cell.merged || cell.comment);\n\t        if (!cls && !shouldDraw) {\n\t            return;\n\t        }\n\n\t        var style = {};\n\t        var background = cell.background;\n\t        if (background) {\n\t            var defaultBorder = background;\n\t            if (showGrid) {\n\t                // darken\n\t                defaultBorder = kendo.parseColor(defaultBorder).toHSV();\n\t                defaultBorder.v *= 0.9;\n\t                defaultBorder = defaultBorder.toCssRgba();\n\t            }\n\t            defaultBorder = cellBorder({ color: defaultBorder });\n\t            style.outline = defaultBorder;\n\t        }\n\n\t        if (background) {\n\t            style.backgroundColor = background;\n\t        }\n\n\t        if (cell.color) {\n\t            style.color = cell.color;\n\t        }\n\n\t        if (cell.fontFamily) {\n\t            style.fontFamily = cell.fontFamily;\n\t        }\n\n\t        if (cell.underline) {\n\t            style.textDecoration = "underline";\n\t        }\n\n\t        if (cell.italic) {\n\t            style.fontStyle = "italic";\n\t        }\n\n\t        if (cell.textAlign) {\n\t            style.textAlign = cell.textAlign;\n\t        }\n\n\t        if (cell.bold) {\n\t            style.fontWeight = "bold";\n\t        }\n\n\t        if (cell.fontSize) {\n\t            style.fontSize = cell.fontSize + "px";\n\t        }\n\n\t        if (cell.wrap === true) {\n\t            style.whiteSpace = "pre-wrap";\n\t            style.overflowWrap = "break-word";\n\t            style.wordWrap = "break-word";\n\t        } else {\n\t            style.whiteSpace = "pre";\n\t            style.overflowWrap = "normal";\n\t            style.wordWrap = "normal";\n\t        }\n\n\t        style.left = (cell.left + 1) + "px";\n\t        style.top = (cell.top + 1) + "px";\n\t        style.width = (cell.width - 1) + "px";\n\t        style.height = (cell.height - 1) + "px";\n\n\t        var data = cell.value, type = typeof data, format = cell.format;\n\t        if (!format && type == "number" && data != Math.floor(data)) {\n\t            format = "0.##############";\n\t        }\n\t        if (format && data != null) { // jshint ignore:line\n\t            data = kendo.spreadsheet.formatting.format(data, format);\n\t            if (data.__dataType) {\n\t                type = data.__dataType;\n\t            }\n\t        } else if (data !== null && data !== undefined) {\n\t            data = kendo.dom.text(data);\n\t        }\n\n\t        if (!style.textAlign) {\n\t            switch (type) {\n\t              case "number":\n\t              case "date":\n\t              case "percent":\n\t              case "currency":\n\t                style.textAlign = "right";\n\t                break;\n\t              case "boolean":\n\t                style.textAlign = "center";\n\t                break;\n\t            }\n\t        }\n\n\t        // defined in print.js\n\t        kendo.spreadsheet.draw.applyIndent(cell, style);\n\n\t        var classNames = [ paneClassNames.cell ];\n\n\t        if (cls) {\n\t            classNames.push(cls);\n\t        }\n\t        if (cell.enable === false) {\n\t            classNames.push("k-state-disabled");\n\t        }\n\t        if (cell.merged) {\n\t            classNames.push("k-spreadsheet-merged-cell");\n\t        }\n\t        if (cell.comment) {\n\t            classNames.push("k-spreadsheet-has-comment");\n\t        }\n\n\t        var verticalAlign = cell.verticalAlign || "bottom";\n\n\t        if (verticalAlign && data) {\n\t            data = kendo.dom.element("div", { className: "k-vertical-align-" + verticalAlign }, [ maybeLink(data) ]);\n\t        } else {\n\t            data = maybeLink(data);\n\t        }\n\n\t        var children = data ? [ data ] : [];\n\t        var properties = {\n\t            style: style\n\t        };\n\t        var validation = cell.validation;\n\t        if (validation && !validation.value) {\n\t            children.push(kendo.dom.element("span", { className: "k-dirty" }));\n\t            classNames.push("k-dirty-cell");\n\n\t            properties.title = validation.message;\n\t        }\n\t        properties.className = classNames.join(" ");\n\n\t        var div = kendo.dom.element("div", properties, children);\n\t        collection.push(div);\n\t        return div;\n\t    }\n\n\t    function addCell(table, row, cell) {\n\t        var style = {};\n\n\t        if (cell.background) {\n\t            style.backgroundColor = cell.background;\n\t        }\n\n\t        if (cell.color) {\n\t            style.color = cell.color;\n\t        }\n\n\t        if (cell.fontFamily) {\n\t            style.fontFamily = cell.fontFamily;\n\t        }\n\n\t        if (cell.underline) {\n\t            style.textDecoration = "underline";\n\t        }\n\n\t        if (cell.italic) {\n\t            style.fontStyle = "italic";\n\t        }\n\n\t        if (cell.textAlign) {\n\t            style.textAlign = cell.textAlign;\n\t        }\n\n\t        if (cell.verticalAlign) {\n\t            style.verticalAlign = (cell.verticalAlign === "center") ? "middle" : cell.verticalAlign;\n\t        }\n\n\t        if (cell.bold) {\n\t            style.fontWeight = "bold";\n\t        }\n\n\t        if (cell.fontSize) {\n\t            style.fontSize = cell.fontSize + "px";\n\t        }\n\n\t        if (cell.wrap === true) {\n\t            style.whiteSpace = "pre-wrap";\n\t        }\n\n\t        if (cell.borderRight) {\n\t            style.borderRight = cellBorder(cell.borderRight);\n\t        } else if (cell.background) {\n\t            style.borderRightColor = cell.background;\n\t        }\n\n\t        if (cell.borderBottom) {\n\t            style.borderBottom = cellBorder(cell.borderBottom);\n\t        } else if (cell.background) {\n\t            style.borderBottomColor = cell.background;\n\t        }\n\n\t        var data = cell.value, type = typeof data, format = cell.format;\n\t        if (!format && type == "number" && data != Math.floor(data)) {\n\t            format = "0.##############";\n\t        }\n\t        if (format && data != null) { // jshint ignore:line\n\t            data = kendo.spreadsheet.formatting.format(data, format);\n\t            if (data.__dataType) {\n\t                type = data.__dataType;\n\t            }\n\t        }\n\n\t        if (!style.textAlign) {\n\t            switch (type) {\n\t              case "number":\n\t              case "date":\n\t              case "percent":\n\t              case "currency":\n\t                style.textAlign = "right";\n\t                break;\n\t              case "boolean":\n\t                style.textAlign = "center";\n\t                break;\n\t            }\n\t        }\n\n\t        var className = null;\n\n\t        if (cell.enable === false) {\n\t            className = "k-state-disabled";\n\t        }\n\n\t        var td = table.addCell(row, data, style, className, cell.validation);\n\n\t        var border, sibling;\n\n\t        if (cell.borderLeft) {\n\t            sibling = cellBefore(table, row);\n\t            border = cellBorder(cell.borderLeft);\n\t            if (sibling && border) {\n\t                sibling.attr.style.borderRight = border;\n\t            }\n\t        } else if (cell.background) {\n\t            style.borderLeftColor = cell.background;\n\t        }\n\n\t        if (cell.borderTop) {\n\t            sibling = cellAbove(table, row);\n\t            border = cellBorder(cell.borderTop);\n\t            if (sibling && border) {\n\t                sibling.attr.style.borderBottom = border;\n\t            }\n\t        } else if (cell.background) {\n\t            style.borderTopColor = cell.background;\n\t        }\n\n\t        return td;\n\t    }\n\n\t    var HtmlTable = kendo.Class.extend({\n\t        init: function() {\n\t            this.cols = [];\n\t            this.trs = [];\n\t            this._height = 0;\n\t            this._width = 0;\n\t        },\n\n\t        addColumn: function(width) {\n\t            this._width += width;\n\n\t            var col = kendo.dom.element("col", { style: { width: width + "px" } });\n\n\t            col.visible = width > 0;\n\n\t            this.cols.push(col);\n\t        },\n\n\t        addRow: function(height) {\n\t            var attr = null;\n\n\t            attr = { style: { height: height + "px" } };\n\n\t            this._height += height;\n\n\t            var tr = kendo.dom.element("tr", attr);\n\n\t            tr.visible = height > 0;\n\n\t            this.trs.push(tr);\n\t        },\n\n\t        addCell: function(rowIndex, text, style, className, validation) {\n\t            if (text === null || text === undefined) {\n\t                text = "";\n\t            }\n\t            if (!(text instanceof kendo.dom.Node)) {\n\t                text = kendo.dom.text(text);\n\t            }\n\n\t            var children = [ text ];\n\t            var properties = { style: style };\n\n\t            if (validation && !validation.value) {\n\t                children.push(kendo.dom.element("span", { className: "k-dirty" }));\n\n\t                className = (className || "") + (className ? " " : "") + "k-dirty-cell";\n\t                properties.title = validation.message;\n\t            }\n\n\t            if (className) {\n\t                properties.className = className;\n\t            }\n\t            var td = kendo.dom.element("td", properties, children);\n\n\t            this.trs[rowIndex].children.push(td);\n\t            return td;\n\t        },\n\n\t        toDomTree: function(x, y, className) {\n\t            this.trs = this.trs.filter(function(tr) {\n\t                return tr.visible;\n\t            });\n\n\t            var offset = 0;\n\t            this.cols = this.cols.filter(function(col, ci) {\n\t                if (!col.visible) {\n\t                    this.trs.forEach(function(tr) {\n\t                        tr.children.splice(ci - offset, 1);\n\t                    });\n\t                    offset++;\n\t                }\n\n\t                return col.visible;\n\t            }, this);\n\n\t            return kendo.dom.element("table", {\n\t                style: { left: x + "px", top: y + "px", height: this._height + "px", width: this._width + "px" },\n\t                className: className,\n\t                role: "presentation"\n\t            },[\n\t                kendo.dom.element("colgroup", null, this.cols),\n\t                kendo.dom.element("tbody", null, this.trs)\n\t            ]);\n\t        }\n\t    });\n\n\t    var CELL_CONTEXT_MENU = \'<ul class="#=classNames.cellContextMenu#">\' +\n\t        \'<li data-action=cut>#: messages.cut #</li>\' +\n\t        \'<li data-action=copy>#: messages.copy #</li>\' +\n\t        \'<li data-action=paste>#: messages.paste #</li>\' +\n\t        \'<li class="k-separator"></li>\' +\n\t        \'<li data-action=merge>#: messages.merge #</li>\' +\n\t        \'<li data-action=unmerge>#: messages.unmerge #</li>\' +\n\t    \'</ul>\';\n\n\t    var ROW_HEADER_CONTEXT_MENU = \'<ul class="#=classNames.rowHeaderContextMenu#">\' +\n\t        \'<li data-action=cut>#: messages.cut #</li>\' +\n\t        \'<li data-action=copy>#: messages.copy #</li>\' +\n\t        \'<li data-action=paste>#: messages.paste #</li>\' +\n\t        \'<li class="k-separator"></li>\' +\n\t        \'<li data-action="delete-row">#: messages.delete #</li>\'+\n\t        \'<li data-action="hide-row">#: messages.hide #</li>\'+\n\t        \'<li data-action="unhide-row">#: messages.unhide #</li>\'+\n\t    \'</ul>\';\n\n\t    var COL_HEADER_CONTEXT_MENU = \'<ul class="#=classNames.colHeaderContextMenu#">\' +\n\t        \'<li data-action=cut>#: messages.cut #</li>\' +\n\t        \'<li data-action=copy>#: messages.copy #</li>\' +\n\t        \'<li data-action=paste>#: messages.paste #</li>\' +\n\t        \'<li class="k-separator"></li>\' +\n\t        \'<li data-action="delete-column">#: messages.delete #</li>\'+\n\t        \'<li data-action="hide-column">#: messages.hide #</li>\'+\n\t        \'<li data-action="unhide-column">#: messages.unhide #</li>\'+\n\t    \'</ul>\';\n\n\t    var DRAWING_CONTEXT_MENU = \'<ul class="#=classNames.drawingContextMenu#">\' +\n\t        // \'<li data-action=cut>#: messages.cut #</li>\' +\n\t        // \'<li data-action=copy>#: messages.copy #</li>\' +\n\t        // \'<li data-action=paste>#: messages.paste #</li>\' +\n\t        // \'<li class="k-separator"></li>\' +\n\t        \'<li data-action="bring-to-front">#: messages.bringToFront #</li>\' +\n\t        \'<li data-action="send-to-back">#: messages.sendToBack #</li>\' +\n\t        \'<li class="k-separator"></li>\' +\n\t        \'<li data-action="delete-drawing">#: messages.delete #</li>\' +\n\t    \'</ul>\';\n\n\t    kendo.spreadsheet.ContextMenu = kendo.ui.ContextMenu;\n\n\t    var VIEW_CONTENTS = kendo.template(\'<div class="#=classNames.view#"><div class="#=classNames.fixedContainer#"></div><div class="#=classNames.scroller#"><div class="#=classNames.viewSize#"></div></div>\' +\n\t        \'<div tabindex="0" class="#=classNames.clipboard#" contenteditable=true></div><div class="#=classNames.cellEditor#"></div></div><div class="#=classNames.sheetsBar#"></div>\' +\n\t        CELL_CONTEXT_MENU + ROW_HEADER_CONTEXT_MENU + COL_HEADER_CONTEXT_MENU + DRAWING_CONTEXT_MENU\n\t    );\n\n\t    function within(value, min, max) {\n\t        return value >= min && value <= max;\n\t    }\n\n\t    var View = kendo.Class.extend({\n\t        init: function(element, options) {\n\t            var classNames = View.classNames;\n\n\t            this.element = element;\n\n\t            this.options = $.extend(true, {\n\t                messages: kendo.spreadsheet.messages.view\n\t            }, this.options, options);\n\n\t            this._chrome();\n\n\t            this._dialogs = [];\n\n\t            element.append(VIEW_CONTENTS({\n\t                classNames: classNames,\n\t                messages: kendo.spreadsheet.messages.menus\n\t            }));\n\n\t            this._formulaInput();\n\n\t            this.wrapper =      element.find(DOT + classNames.view);\n\t            this.container =    element.find(DOT + classNames.fixedContainer)[0];\n\t            this.scroller =     element.find(DOT + classNames.scroller)[0];\n\t            this.clipboard =    element.find(DOT + classNames.clipboard);\n\n\t            this.viewSize = $(this.scroller.firstChild);\n\n\t            this.tree = new kendo.dom.Tree(this.container);\n\t            this.clipboardContents = new kendo.dom.Tree(this.clipboard[0]);\n\n\t            this.editor = new kendo.spreadsheet.SheetEditor(this);\n\n\t            this._sheetsbar();\n\n\t            var contextMenuConfig = {\n\t                target: element,\n\t                animation: false,\n\t                showOn: "never" // this is just an invalid event name to prevent the show\n\t            };\n\n\t            this.cellContextMenu = new kendo.spreadsheet.ContextMenu(element.find(DOT + classNames.cellContextMenu), contextMenuConfig);\n\n\t            this.colHeaderContextMenu = new kendo.spreadsheet.ContextMenu(element.find(DOT + classNames.colHeaderContextMenu), contextMenuConfig);\n\n\t            this.rowHeaderContextMenu = new kendo.spreadsheet.ContextMenu(element.find(DOT + classNames.rowHeaderContextMenu), contextMenuConfig);\n\n\t            this.drawingContextMenu = new kendo.spreadsheet.ContextMenu(element.find(DOT + classNames.drawingContextMenu), contextMenuConfig);\n\t        },\n\n\t        enableClipboard: function(enable) {\n\t            this.isClipboardDeactivated = !enable;\n\n\t            if (enable) {\n\t                this.clipboard.attr("contenteditable", enable);\n\t            } else {\n\t                this.clipboard.removeAttr("contenteditable");\n\t            }\n\t        },\n\n\t        _resize: function() {\n\t            var actionBar = $(this.formulaBar.element).parents(".k-spreadsheet-action-bar");\n\t            var outerHeight = kendo._outerHeight;\n\t            var tabstripHeight = this.tabstrip ? outerHeight(this.tabstrip.element) : 0;\n\t            var formulaBarHeight = actionBar ? outerHeight(actionBar) : 0;\n\t            var sheetsBarHeight = this.sheetsbar ? outerHeight(this.sheetsbar.element) : 0;\n\n\t            this.wrapper.height(\n\t                this.element.height() -\n\t                    (tabstripHeight + formulaBarHeight + sheetsBarHeight)\n\t            );\n\n\t            if (this.tabstrip) {\n\t                this.tabstrip.quickAccessAdjust();\n\t            }\n\t        },\n\n\t        _chrome: function() {\n\t            var wrapper = $("<div class=\'k-spreadsheet-action-bar\' />").prependTo(this.element);\n\n\t            var nameEditor = $("<div class=\'k-spreadsheet-name-editor\' />").appendTo(wrapper);\n\t            this.nameEditor = new kendo.spreadsheet.NameEditor(nameEditor, this.options);\n\n\t            var formulaBar = $("<div />").appendTo(wrapper);\n\t            this.formulaBar = new kendo.spreadsheet.FormulaBar(formulaBar);\n\n\t            if (this.options.toolbar) {\n\t                this._tabstrip();\n\t            }\n\t        },\n\n\t        _formulaInput: function() {\n\t            var editor = this.element.find(DOT + View.classNames.cellEditor);\n\n\t            this.formulaInput = new kendo.spreadsheet.FormulaInput(editor, {\n\t                autoScale: true\n\t            });\n\t        },\n\n\t        _sheetsbar: function() {\n\t            if (this.options.sheetsbar) {\n\t                var options = $.extend(true, {\n\t                    openDialog: this.openDialog.bind(this)\n\t                }, this.options.sheetsbar);\n\n\t                this.sheetsbar = new kendo.spreadsheet.SheetsBar(this.element.find(DOT + View.classNames.sheetsBar), options);\n\t            }\n\t        },\n\n\t        _tabstrip: function() {\n\t            var messages = this.options.messages.tabs;\n\t            var options = $.extend(true, { home: true, insert: true, data: true }, this.options.toolbar);\n\t            var tabs = [];\n\n\t            if (this.tabstrip) {\n\t                this.tabstrip.destroy();\n\t                this.element.children(".k-tabstrip").remove();\n\t            }\n\n\t            for (var name in options) {\n\t                if (options[name] === true || options[name] instanceof Array) {\n\t                    tabs.push({ id: name, text: messages[name], content: "" });\n\t                }\n\t            }\n\n\t            this.tabstrip = new kendo.spreadsheet.TabStrip($("<div />").prependTo(this.element), {\n\t                animation: false,\n\t                dataTextField: "text",\n\t                dataContentField: "content",\n\t                dataSource: tabs,\n\t                toolbarOptions: options,\n\t                view: this\n\t            });\n\n\t            this.tabstrip.select(0);\n\t        },\n\n\t        _executeCommand: function(e) {\n\t            this._sheet.trigger("commandRequest", e);\n\t        },\n\n\t        workbook: function(workbook) {\n\t            this._workbook = workbook;\n\t            workbook._view = this;\n\t            this.nameEditor._workbook = workbook;\n\t        },\n\n\t        sheet: function(sheet) {\n\t            this._sheet = sheet;\n\t        },\n\n\t        activeCellRectangle: function() {\n\t            return this.cellRectangle(this._sheet._viewActiveCell());\n\t        },\n\n\t        _rectangle: function(pane, ref) {\n\t            return pane._grid.boundingRectangle(ref.toRangeRef());\n\t        },\n\n\t        isColumnResizer: function(x, pane, col) {\n\t            // relative to content\n\t            x -= this._sheet._grid._headerWidth;\n\n\t            // add scroll if pane is not frozen\n\t            if (!pane._grid.columns.frozen) {\n\t                x += this.scroller.scrollLeft;\n\t            }\n\n\t            col = this._sheet._grid._columns.locate(0, col, function(w){\n\t                return Math.abs(x - w) <= RESIZE_HANDLE_WIDTH/2;\n\t            });\n\n\t            return col !== null && !this._sheet.isHiddenColumn(col) ? col : null;\n\t        },\n\n\t        isRowResizer: function(y, pane, row) {\n\t            // relative to content\n\t            y -= this._sheet._grid._headerHeight;\n\n\t            // add scroll if pane is not frozen\n\t            if (!pane._grid.rows.frozen) {\n\t                y += this.scroller.scrollTop;\n\t            }\n\n\t            row = this._sheet._grid._rows.locate(0, row, function(h){\n\t                return Math.abs(y - h) <= RESIZE_HANDLE_WIDTH/2;\n\t            });\n\n\t            return row !== null && !this._sheet.isHiddenRow(row) ? row : null;\n\t        },\n\n\t        isFilterIcon: function(x, y, pane, ref) {\n\t            var self = this;\n\t            var theGrid = pane._grid;\n\t            var scrollTop = theGrid.rows.frozen ? 0 : self.scroller.scrollTop;\n\t            var scrollLeft = theGrid.columns.frozen ? 0 : self.scroller.scrollLeft;\n\n\t            x -= self._sheet._grid._headerWidth - scrollLeft;\n\t            y -= self._sheet._grid._headerHeight - scrollTop;\n\n\t            return kendo.util.withExit(function(exit){\n\t                self._sheet.forEachFilterHeader(ref, function(ref) {\n\t                    var rect = self._rectangle(pane, ref);\n\t                    if (pane.filterIconRect(rect).intersects(x, y)) {\n\t                        exit(true);\n\t                    }\n\t                });\n\t            });\n\t        },\n\n\t        isAutoFill: function(x, y, pane) {\n\t            var selection = this._sheet.select();\n\n\t            if (selection.size > 1) {\n\t                return false;\n\t            }\n\n\t            x -= this._sheet._grid._headerWidth;\n\t            y -= this._sheet._grid._headerHeight;\n\n\t            if (!pane._grid.columns.frozen) {\n\t                x += this.scroller.scrollLeft;\n\t            }\n\n\t            if (!pane._grid.rows.frozen) {\n\t                y += this.scroller.scrollTop;\n\t            }\n\n\t            var rectangle = this._rectangle(pane, selection);\n\n\t            return Math.abs(rectangle.right - x) < 8 && Math.abs(rectangle.bottom - y) < 8;\n\t        },\n\n\t        isEditButton: function(x, y, pane) {\n\t            var ed = this._sheet.activeCellCustomEditor();\n\t            if (ed) {\n\t                var r = this.activeCellRectangle();\n\t                // XXX: hard-coded button width (20)\n\n\t                if (y >= r.top && y <= r.bottom) {\n\t                    return pane._editorInLastColumn ? x < r.left && x >= r.left - EDIT_BUTTON_WIDTH\n\t                        : x > r.right && x <= r.right + EDIT_BUTTON_WIDTH;\n\t                }\n\t            }\n\t        },\n\n\t        drawingAt: function(x, y, pane) {\n\t            x -= this._sheet._grid._headerWidth;\n\t            y -= this._sheet._grid._headerHeight;\n\n\t            if (!pane._grid.columns.frozen) {\n\t                x += this.scroller.scrollLeft;\n\t            }\n\n\t            if (!pane._grid.rows.frozen) {\n\t                y += this.scroller.scrollTop;\n\t            }\n\n\t            var sheet = this._sheet;\n\t            var drawings = this._sheet._drawings;\n\t            for (var i = drawings.length; --i >= 0;) {\n\t                var d = drawings[i];\n\t                var box = sheet.drawingBoundingBox(d);\n\t                if (box.intersects(x, y)) {\n\t                    return {\n\t                        drawing: d,\n\n\t                        // also include how far is the drawing\'s\n\t                        // top-left from the mouse position, as it\'s\n\t                        // not easy to compute some place else.\n\t                        drx: box.left - x,\n\t                        dry: box.top - y\n\t                    };\n\t                }\n\t            }\n\t        },\n\n\t        objectAt: function(x, y, noDrawing) {\n\t            var grid = this._sheet._grid;\n\t            var object, pane;\n\n\t            if (x < 0 || y < 0 || x > this.scroller.clientWidth || y > this.scroller.clientHeight) {\n\t                object = { type: "outside" };\n\t            } else if (x < grid._headerWidth && y < grid._headerHeight) {\n\t                object = { type: "topcorner" };\n\t            } else {\n\t                pane = this.paneAt(x, y);\n\n\t                if (!pane) {\n\t                    object = { type: "outside" };\n\t                } else {\n\t                    if (!noDrawing) {\n\t                        var drawing = this.drawingAt(x, y, pane);\n\t                        if (drawing) {\n\t                            return {\n\t                                type: "drawing",\n\t                                drawing: drawing.drawing,\n\t                                drx: drawing.drx,\n\t                                dry: drawing.dry,\n\t                                pane: pane,\n\t                                startX: x,\n\t                                startY: y\n\t                            };\n\t                        }\n\t                    }\n\n\t                    var row = pane._grid.rows.indexVisible(y, this.scroller.scrollTop);\n\t                    var column = pane._grid.columns.indexVisible(x, this.scroller.scrollLeft);\n\n\t                    var type = "cell";\n\t                    var ref = new CellRef(row, column);\n\t                    var selecting = this._sheet.selectionInProgress();\n\n\t                    if (this.isAutoFill(x, y, pane)) {\n\t                        type = "autofill";\n\t                    } else if (this.isFilterIcon(x, y, pane, ref)) {\n\t                        type = "filtericon";\n\t                    } else if (!selecting && x < grid._headerWidth) {\n\t                        type = "rowheader";\n\t                        if ((row = this.isRowResizer(y, pane, row)) !== null) {\n\t                            ref = new CellRef(row, -Infinity);\n\t                            type = "rowresizehandle";\n\t                        }\n\t                    } else if (!selecting && y < grid._headerHeight) {\n\t                        type = "columnheader";\n\t                        if ((column = this.isColumnResizer(x, pane, column)) !== null) {\n\t                            ref = new CellRef(-Infinity, column);\n\t                            type = "columnresizehandle";\n\t                        }\n\t                    } else if (this.isEditButton(x, y, pane)) {\n\t                        type = "editor";\n\t                    }\n\n\t                    object = { type: type, ref: ref };\n\t                }\n\t            }\n\n\t            object.pane = pane;\n\t            object.x = x;\n\t            object.y = y;\n\t            return object;\n\t        },\n\n\t        paneAt: function(x, y) {\n\t            return this.panes.filter(function paneLocationWithin(pane) {\n\t                var grid = pane._grid;\n\t                return within(y, grid.top, grid.bottom) && within(x, grid.left, grid.right);\n\t            })[0];\n\t        },\n\n\t        containingPane: function(cell) {\n\t            return this.panes.filter(function(pane) {\n\t                if (pane._grid.contains(cell)) {\n\t                    return true;\n\t                }\n\t                return false;\n\t            })[0];\n\t        },\n\n\t        cellRectangle: function(cell) {\n\t            var theGrid = this.containingPane(cell)._grid;\n\t            var rectangle = this._sheet._grid.rectangle(cell);\n\n\t            return rectangle.offset(\n\t                theGrid.headerWidth - (theGrid.columns.frozen ? 0 : this.scroller.scrollLeft),\n\t                theGrid.headerHeight - (theGrid.rows.frozen ? 0 : this.scroller.scrollTop)\n\t            );\n\t        },\n\n\t        refresh: function(reason) {\n\t            var sheet = this._sheet;\n\n\t            if (this.tabstrip) {\n\t                this.tabstrip.refreshTools(sheet.range(sheet.activeCell()));\n\t            }\n\n\t            if (reason.sheetSelection && this.sheetsbar) {\n\t                this.sheetsbar.renderSheets(this._workbook.sheets(), this._workbook.sheetIndex(this._sheet));\n\t            }\n\n\t            this._resize();\n\n\t            //TODO: refresh sheets list on sheetSelection\n\t            this.viewSize[0].style.height = sheet._grid.totalHeight() + "px";\n\t            this.viewSize[0].style.width = sheet._grid.totalWidth() + "px";\n\n\t            if (reason.layout) {\n\t                var frozenColumns = sheet.frozenColumns();\n\t                var frozenRows = sheet.frozenRows();\n\n\t                // main or bottom or right pane\n\t                this.panes = [ this._pane(frozenRows, frozenColumns) ];\n\n\t                // left pane\n\t                if (frozenColumns > 0) {\n\t                    this.panes.push(this._pane(frozenRows, 0, null, frozenColumns));\n\t                }\n\n\t                // top pane\n\t                if (frozenRows > 0) {\n\t                    this.panes.push(this._pane(0, frozenColumns, frozenRows, null));\n\t                }\n\n\t                // left-top "fixed" pane\n\t                if (frozenRows > 0 && frozenColumns > 0) {\n\t                    this.panes.push(this._pane(0, 0, frozenRows, frozenColumns));\n\t                }\n\t            }\n\n\t            if (reason.filter) {\n\t                this._destroyFilterMenu();\n\t            }\n\n\t            if (reason.activeCell) {\n\t                this._focus = sheet.activeCell().toRangeRef();\n\t            }\n\t        },\n\n\t        createFilterMenu: function(column) {\n\t            if (this._filterMenu && this._filterMenu.options.column == column) {\n\t                return this._filterMenu;\n\t            }\n\n\t            this._destroyFilterMenu();\n\n\t            var sheet = this._sheet;\n\t            var ref = sheet.filter().ref;\n\t            var range = new kendo.spreadsheet.Range(ref, sheet);\n\t            var element = $("<div />").appendTo(this.element);\n\t            var options = { column: column, range: range };\n\t            var filterMenu = new kendo.spreadsheet.FilterMenu(element, options);\n\n\t            this._filterMenu = filterMenu;\n\n\t            return filterMenu;\n\t        },\n\n\t        selectClipboardContents: function() {\n\t            if (!this.isClipboardDeactivated) {\n\t                this.clipboard.focus();\n\t                selectElementContents(this.clipboard[0]);\n\t            }\n\t        },\n\n\t        scrollIntoView: function(cell) {\n\t            var willScroll = false;\n\t            var theGrid = this.containingPane(cell)._grid;\n\n\t            var boundaries = theGrid.scrollBoundaries(cell);\n\n\t            var scroller = this.scroller;\n\t            var scrollTop = theGrid.rows.frozen ? 0 : scroller.scrollTop;\n\t            var scrollLeft = theGrid.columns.frozen ? 0 : scroller.scrollLeft;\n\n\t            if (boundaries.top < scrollTop) {\n\t                willScroll = true;\n\t                scroller.scrollTop = boundaries.scrollTop;\n\t            }\n\n\t            if (boundaries.bottom > scrollTop) {\n\t                willScroll = true;\n\t                scroller.scrollTop = boundaries.scrollBottom;\n\t            }\n\n\t            if (boundaries.left < scrollLeft) {\n\t                willScroll = true;\n\t                scroller.scrollLeft = boundaries.scrollLeft;\n\t            }\n\n\t            if (boundaries.right > scrollLeft) {\n\t                willScroll = true;\n\t                scroller.scrollLeft = boundaries.scrollRight;\n\t            }\n\n\t            return willScroll;\n\t        },\n\n\t        _destroyDialog: function() {\n\t            this._dialogs.pop();\n\t        },\n\n\t        openCustomEditor: function() {\n\t            var self = this;\n\t            var cell = self._sheet.activeCell().first();\n\t            var editor = self._sheet.activeCellCustomEditor();\n\t            var range = self._sheet.range(cell);\n\t            editor.edit({\n\t                range      : range,\n\t                rect       : self.activeCellRectangle(),\n\t                view       : this,\n\t                validation : this._sheet.validation(cell),\n\t                callback   : function(value, parse){\n\t                    self._executeCommand({\n\t                        command: "EditCommand",\n\t                        options: {\n\t                            operatingRange: range,\n\t                            property: parse ? "input" : "value",\n\t                            value: value\n\t                        }\n\t                    });\n\t                }\n\t            });\n\t        },\n\n\t        openDialog: function(name, options) {\n\t            var sheet = this._sheet;\n\t            return sheet.withCultureDecimals(function(){\n\t                var dialog = kendo.spreadsheet.dialogs.create(name, options);\n\n\t                if (dialog) {\n\t                    dialog.bind("action", this._executeCommand.bind(this));\n\t                    dialog.bind("deactivate", this._destroyDialog.bind(this));\n\t                    this._dialogs.push(dialog);\n\n\t                    var ref = sheet.activeCell();\n\t                    var range = new kendo.spreadsheet.Range(ref, sheet);\n\n\t                    dialog.open(range);\n\t                    return dialog;\n\t                }\n\t            }.bind(this));\n\t        },\n\n\t        showError: function(options, reopenEditor) {\n\t            var currentDialogs = this._dialogs;\n\t            var errorMessages = this.options.messages.errors;\n\t            var hasOpenedError = false;\n\n\t            if (currentDialogs.length > 0) {\n\t                currentDialogs.forEach(function(dialog) {\n\t                    if (dialog.options && dialog.options.title === ERROR) {\n\t                        hasOpenedError = true;\n\t                    }\n\t                });\n\t            }\n\t            if (hasOpenedError) {\n\t                return;\n\t            }\n\n\t            var focusButton = function(e) {\n\t                var cont = e.sender.dialog().element;\n\t                cont.find(".k-button:first").focus();\n\t                cont.find(".k-button, input").on("keydown", function(ev){\n\t                    if (ev.keyCode == kendo.keys.ESC) {\n\t                        e.sender.close();\n\t                    }\n\t                });\n\t            };\n\n\t            var onClose = function(e) {\n\t                var dlg = e.sender;\n\t                this.selectClipboardContents();\n\t                if (dlg._retry && reopenEditor) {\n\t                    reopenEditor();\n\t                }\n\t            }.bind(this);\n\n\t            if (kendo.spreadsheet.dialogs.registered(options.type)) {\n\t                var dialogOptions = {\n\t                    close: onClose\n\t                };\n\n\t                if (options.type === "validationError") {\n\t                    dialogOptions = $.extend(dialogOptions, {\n\t                        title: options.title || "Error",\n\t                        text: options.body ? options.body : errorMessages[options.type],\n\t                        activate: focusButton\n\t                    });\n\t                }\n\n\t                this.openDialog(options.type, dialogOptions);\n\t            } else {\n\t                this.openDialog("message", {\n\t                    title : options.title || "Error",\n\t                    text  : options.body ? options.body : errorMessages[options.type],\n\t                    activate: focusButton,\n\t                    close: onClose\n\t                });\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            this._dialogs.forEach(function(dialog) {\n\t                dialog.destroy();\n\t            });\n\n\t            this.cellContextMenu.destroy();\n\t            this.rowHeaderContextMenu.destroy();\n\t            this.colHeaderContextMenu.destroy();\n\t            this.drawingContextMenu.destroy();\n\n\t            this.cellContextMenu = this.rowHeaderContextMenu =\n\t                                   this.colHeaderContextMenu =\n\t                                   this.drawingContextMenu = null;\n\n\t            if (this.tabstrip) {\n\t                this.tabstrip.destroy();\n\t                this.tabstrip = null;\n\t            }\n\n\t            this._destroyFilterMenu();\n\t        },\n\n\t        _destroyFilterMenu: function() {\n\t            if (this._filterMenu) {\n\t                this._filterMenu.destroy();\n\t                this._filterMenu = undefined;\n\t                this._filterMenuColumn = undefined;\n\t            }\n\t        },\n\n\t        render: function(reason) {\n\t            if (!this.element.is(":visible")) {\n\t                return;\n\t            }\n\t            var sheet = this._sheet;\n\t            var focus = sheet.focus();\n\n\t            if (focus && this.scrollIntoView(focus)) {\n\t                return;\n\t            }\n\n\t            var resizeDirection =\n\t                !sheet.resizingInProgress() ? "none" :\n\t                sheet.resizeHandlePosition().col === -Infinity ? "column" :\n\t                "row";\n\n\t            this.wrapper\n\t                .toggleClass(viewClassNames.editContainer, this.editor.isActive())\n\t                .toggleClass(viewClassNames.horizontalResize, resizeDirection == "row")\n\t                .toggleClass(viewClassNames.verticalResize, resizeDirection == "column");\n\n\t            var grid = sheet._grid;\n\t            var scroller = this.scroller;\n\t            var result = this.panes.map(function(pane) {\n\t                return pane.render(scroller);\n\t            });\n\n\t            var topCorner = kendo.dom.element("div", {\n\t                style: { width: grid._headerWidth + "px", height: grid._headerHeight + "px" },\n\t                className: View.classNames.topCorner\n\t            });\n\n\t            result.push(topCorner);\n\n\t            if (sheet.resizeHandlePosition() && sheet.resizeHintPosition()) {\n\t                result.push(this.renderResizeHint());\n\t            }\n\n\t            this.tree.render(result);\n\n\t            var scrollbar = kendo.support.scrollbar();\n\n\t            $(this.container).css({\n\t                width: this.wrapper[0].clientWidth - scrollbar,\n\t                height: this.wrapper[0].clientHeight - scrollbar\n\t            });\n\n\t            if (this.editor.isActive()) {\n\t                this.editor.toggleTooltip(this.activeCellRectangle());\n\t            } else if (!(reason.resize ||\n\t                         reason.scroll ||\n\t                         reason.comment ||\n\t                         sheet.selectionInProgress() ||\n\t                         sheet.resizingInProgress() ||\n\t                         sheet.draggingInProgress() ||\n\t                         sheet.isInEditMode())) {\n\t                this.renderClipboardContents();\n\t            }\n\t        },\n\n\t        // this renders the big blue line during resizing\n\t        renderResizeHint: function() {\n\t            var sheet = this._sheet;\n\t            var ref = sheet.resizeHandlePosition();\n\n\t            var horizontal = ref.col !== -Infinity;\n\n\t            var style;\n\t            if (horizontal) {\n\t                style = {\n\t                    height: this.scroller.clientHeight + "px",\n\t                    width: RESIZE_HANDLE_WIDTH + "px",\n\t                    left: sheet.resizeHintPosition().x + "px",\n\t                    top: "0px"\n\t                };\n\t            } else {\n\t                style = {\n\t                    height: RESIZE_HANDLE_WIDTH + "px",\n\t                    width: this.scroller.clientWidth + "px",\n\t                    top: sheet.resizeHintPosition().y + "px",\n\t                    left: "0px"\n\t                };\n\t            }\n\n\t            var classNames = Pane.classNames;\n\n\t            return kendo.dom.element("div", {\n\t                className: classNames.resizeHint + (!horizontal ? " " + classNames.resizeHintVertical : ""),\n\t                style: style\n\t            },[\n\t                kendo.dom.element("div", { className: classNames.resizeHintHandle }),\n\t                kendo.dom.element("div", { className: classNames.resizeHintMarker })\n\t            ]);\n\t        },\n\n\t        renderClipboardContents: function() {\n\t            var sheet = this._sheet;\n\t            var grid = sheet._grid;\n\n\t            // if (sheet._activeDrawing && sheet._activeDrawing.image) {\n\t            //     var url = this._workbook.imageUrl(sheet._activeDrawing.image);\n\t            //     var img = kendo.dom.element("img", {\n\t            //         src: url,\n\t            //         style: {\n\t            //             width: sheet._activeDrawing.width + "px",\n\t            //             height: sheet._activeDrawing.height + "px"\n\t            //         }\n\t            //     });\n\t            //     this.clipboardContents.render([ img ]);\n\t            //     this.selectClipboardContents();\n\t            //     return;\n\t            // }\n\n\t            var selection = grid.normalize(sheet.select().toRangeRef());\n\t            var status = this._workbook.clipboard().canCopy();\n\t            if(status.canCopy === false && status.multiSelection) {\n\t                this.clipboardContents.render([]);\n\t                this.selectClipboardContents();\n\t                return;\n\t            }\n\n\t            selection = sheet.trim(selection);\n\n\t            var table = new HtmlTable();\n\n\t            var selectionView = grid.rangeDimensions(selection);\n\n\t            selectionView.rows.forEach(function(height) {\n\t                table.addRow(height);\n\t            });\n\n\t            selectionView.columns.forEach(function(width) {\n\t                table.addColumn(width);\n\t            });\n\n\t            var tmp = sheet._getMergedCells(selection);\n\t            var primaryMergedCells = tmp.primary;\n\t            var secondaryMergedCells = tmp.secondary;\n\n\t            sheet.forEach(selection, function(row, col, cell) {\n\t                var location = new CellRef(row, col).print();\n\n\t                if (!secondaryMergedCells[location]) {\n\t                    var td = addCell(table, row - selection.topLeft.row, cell);\n\n\t                    var mergedCell = primaryMergedCells[location];\n\n\t                    if (mergedCell) {\n\t                        td.attr.colspan = mergedCell.width();\n\t                        td.attr.rowspan = mergedCell.height();\n\t                    }\n\t                }\n\t            });\n\t            this.clipboardContents.render([ table.toDomTree(0, 0, "kendo-clipboard-" + this._workbook.clipboard()._uid) ]);\n\n\t            this.selectClipboardContents();\n\t        },\n\n\t        _pane: function(row, column, rowCount, columnCount) {\n\t            var pane = new Pane(this._sheet, this._sheet._grid.pane({ row: row, column: column, rowCount: rowCount, columnCount: columnCount }));\n\t            pane.refresh(this.scroller.clientWidth, this.scroller.clientHeight);\n\t            return pane;\n\t        },\n\n\t        forceScrollerStackingOrder: function(value) {\n\t            $(this.scroller).css("z-index", value);\n\t        }\n\t    });\n\n\t    var paneClassNames = {\n\t        cell: "k-spreadsheet-cell",\n\t        vaxis: "k-spreadsheet-vaxis",\n\t        haxis: "k-spreadsheet-haxis",\n\t        vborder: "k-spreadsheet-vborder",\n\t        hborder: "k-spreadsheet-hborder",\n\t        rowHeader: "k-spreadsheet-row-header",\n\t        columnHeader: "k-spreadsheet-column-header",\n\t        pane: "k-spreadsheet-pane",\n\t        data: "k-spreadsheet-data",\n\t        mergedCell: "k-spreadsheet-merged-cell",\n\t        mergedCellsWrapper: "k-merged-cells-wrapper",\n\t        activeCell: "k-spreadsheet-active-cell",\n\t        selection: "k-spreadsheet-selection",\n\t        selectionWrapper: "k-selection-wrapper",\n\t        autoFillWrapper: "k-auto-fill-wrapper",\n\t        single: "k-single",\n\t        top: "k-top",\n\t        right: "k-right",\n\t        bottom: "k-bottom",\n\t        left: "k-left",\n\t        resizeHandle: "k-resize-handle",\n\t        columnResizeHandle: "k-column-resize-handle",\n\t        rowResizeHandle: "k-row-resize-handle",\n\t        resizeHint: "k-resize-hint",\n\t        resizeHintHandle: "k-resize-hint-handle",\n\t        resizeHintMarker: "k-resize-hint-marker",\n\t        resizeHintVertical: "k-resize-hint-vertical",\n\t        selectionHighlight: "k-spreadsheet-selection-highlight",\n\t        series: [\n\t            "k-series-a",\n\t            "k-series-b",\n\t            "k-series-c",\n\t            "k-series-d",\n\t            "k-series-e",\n\t            "k-series-f"\n\t        ]\n\t    };\n\n\t    var Pane = kendo.Class.extend({\n\t        init: function(sheet, grid) {\n\t            this._sheet = sheet;\n\t            this._grid = grid;\n\t        },\n\n\t        refresh: function(width, height) {\n\t            this._grid.refresh(width, height);\n\t        },\n\n\t        isVisible: function(scrollLeft, scrollTop, ref) {\n\t            return this._grid.view(scrollLeft, scrollTop).ref.intersects(ref);\n\t        },\n\n\t        render: function(scroller) {\n\t            var scrollLeft = scroller.scrollLeft;\n\t            var scrollTop = scroller.scrollTop;\n\n\t            if (scrollTop < 0) {\n\t                scrollTop = 0;\n\t            }\n\n\t            if (scrollLeft < 0) {\n\t                scrollLeft = 0;\n\t            }\n\n\t            var classNames = Pane.classNames;\n\t            var sheet = this._sheet;\n\t            var grid = this._grid;\n\t            var view = grid.view(scrollLeft, scrollTop);\n\t            this._currentView = view;\n\t            this._currentRect = this._rectangle(view.ref);\n\t            this._selectedHeaders = sheet.selectedHeaders();\n\n\t            var children = [];\n\n\t            children.push(this.renderData());\n\n\t            if (!sheet._activeDrawing) {\n\t                children.push(this.renderSelection(scroller));\n\t            }\n\n\t            children.push(this.renderAutoFill());\n\n\t            children.push(this.renderEditorSelection());\n\n\t            children.push(this.renderFilterHeaders());\n\n\t            if (grid.hasRowHeader) {\n\t                var rowHeader = kendo.dom.element("div", {\n\t                    className: classNames.rowHeader,\n\t                    style: {\n\t                        width: grid.headerWidth + "px",\n\t                        top: view.rowOffset + "px"\n\t                    }\n\t                });\n\t                children.push(rowHeader);\n\t                sheet.forEach(view.ref.leftColumn(), function(row){\n\t                    if (!sheet.isHiddenRow(row)) {\n\t                        var text = row + 1, height = sheet.rowHeight(row);\n\t                        rowHeader.children.push(kendo.dom.element("div", {\n\t                            className: this.headerClassName(row, "row"),\n\t                            style: {\n\t                                width: grid.headerWidth + "px",\n\t                                height: height + "px"\n\t                            }\n\t                        }, [ kendo.dom.element("div", {\n\t                            className: "k-vertical-align-center"\n\t                        }, [ kendo.dom.text(text+"") ])]));\n\t                    }\n\t                }.bind(this));\n\t            }\n\n\t            if (grid.hasColumnHeader) {\n\t                var columnHeader = kendo.dom.element("div", {\n\t                    className: classNames.columnHeader,\n\t                    style: {\n\t                        top: "0px",\n\t                        left: view.columnOffset + "px",\n\t                        width: this._currentRect.width + "px",\n\t                        height: grid.headerHeight + "px"\n\t                    }\n\t                });\n\t                children.push(columnHeader);\n\t                var left = 0;\n\t                sheet.forEach(view.ref.topRow(), function(row, col){\n\t                    if (!sheet.isHiddenColumn(col)) {\n\t                        var text = kendo.spreadsheet.Ref.display(null, Infinity, col),\n\t                            width = sheet.columnWidth(col);\n\t                        columnHeader.children.push(kendo.dom.element("div", {\n\t                            className: this.headerClassName(col, "col"),\n\t                            style: {\n\t                                position: "absolute",\n\t                                left: left + "px",\n\t                                width: width + "px",\n\t                                height: grid.headerHeight + "px"\n\t                            }\n\t                        }, [ kendo.dom.element("div", {\n\t                            className: "k-vertical-align-center"\n\t                        }, [ kendo.dom.text(text+"") ])]));\n\t                        left += width;\n\t                    }\n\t                }.bind(this));\n\t            }\n\n\t            if (sheet.resizeHandlePosition() && (grid.hasColumnHeader || grid.hasRowHeader)) {\n\t                if (!sheet.resizeHintPosition()) {\n\t                    this.renderResizeHandle(children);\n\t                }\n\t            }\n\n\t            var paneClasses = [classNames.pane];\n\n\t            if (grid.hasColumnHeader) {\n\t                paneClasses.push(classNames.top);\n\t            }\n\n\t            if (grid.hasRowHeader) {\n\t                paneClasses.push(classNames.left);\n\t            }\n\n\t            return kendo.dom.element("div", {\n\t                style: grid.style,\n\t                className: paneClasses.join(" ")\n\t            }, children);\n\t        },\n\n\t        headerClassName: function(index, type) {\n\t            var selectedHeaders = this._selectedHeaders;\n\n\t            var itemSelection;\n\t            var allHeaders;\n\n\t            if (type === "row") {\n\t                itemSelection = selectedHeaders.rows[index];\n\t                allHeaders = selectedHeaders.allRows;\n\t            } else {\n\t                itemSelection = selectedHeaders.cols[index];\n\t                allHeaders = selectedHeaders.allCols;\n\t            }\n\n\t            var className = itemSelection || (selectedHeaders.all ? "full" : (allHeaders ? "partial" : "none"));\n\n\t            if (className) {\n\t                className = "k-selection-" + className;\n\t            }\n\n\t            return className;\n\t        },\n\n\t        renderData: function() {\n\t            var sheet = this._sheet;\n\t            var view = this._currentView;\n\t            var cont = kendo.dom.element("div", {\n\t                className: Pane.classNames.data,\n\t                style: {\n\t                    position: "relative",\n\t                    left: view.columnOffset + "px",\n\t                    top: view.rowOffset + "px"\n\t                }\n\t            });\n\t            var rect = this._currentRect;\n\t            var layout = kendo.spreadsheet.draw.doLayout(sheet, view.ref, { forScreen: true }), prev;\n\t            var showGridLines = sheet._showGridLines;\n\t            if (showGridLines) {\n\t                // draw axis first\n\t                prev = null;\n\t                layout.xCoords.forEach(function(x){\n\t                    if (x !== prev) {\n\t                        prev = x;\n\t                        cont.children.push(kendo.dom.element("div", {\n\t                            className: paneClassNames.vaxis,\n\t                            style: {\n\t                                left: x + "px",\n\t                                height: rect.height + "px",\n\t                                borderColor: sheet.gridLinesColor()\n\t                            }\n\t                        }));\n\t                    }\n\t                });\n\t                prev = null;\n\t                layout.yCoords.forEach(function(y){\n\t                    if (y !== prev) {\n\t                        prev = y;\n\t                        cont.children.push(kendo.dom.element("div", {\n\t                            className: paneClassNames.haxis,\n\t                            style: {\n\t                                top: y + "px",\n\t                                width: rect.width + "px",\n\t                                borderColor: sheet.gridLinesColor()\n\t                            }\n\t                        }));\n\t                    }\n\t                });\n\t            }\n\t            var borders = kendo.spreadsheet.draw.Borders();\n\t            var activeCellRange = sheet.activeCell().toRangeRef();\n\t            var activeCell = activeCellRange.topLeft;\n\n\t            layout.cells.forEach(function(cell){\n\t                var cls = null;\n\t                var absRow = cell.row + view.ref.topLeft.row;\n\t                var absCol = cell.col + view.ref.topLeft.col;\n\t                if (sheet._activeDrawing) {\n\t                    var ref = sheet._activeDrawing.topLeftCell;\n\t                    if (ref && ref.row == absRow && ref.col == absCol) {\n\t                        cls = "k-spreadsheet-drawing-anchor-cell";\n\t                    }\n\t                } else if (absRow == activeCell.row && absCol == activeCell.col) {\n\t                    // active cell.  normally we enter here only once.\n\t                    cls = [\n\t                        Pane.classNames.activeCell\n\t                    ].concat(this._activeFormulaColor(),\n\t                             this._directionClasses(activeCellRange));\n\t                    if (sheet.singleCellSelection()) {\n\t                        cls.push(Pane.classNames.single);\n\t                    }\n\t                    cls = cls.join(" ");\n\t                }\n\t                borders.add(cell);\n\t                drawCell(cont.children, cell, cls, showGridLines);\n\t                if (cell.comment && sheet._commentRef &&\n\t                    absRow == sheet._commentRef.row && absCol == sheet._commentRef.col) {\n\t                    var ttOffset = 4;\n\t                    var div = kendo.dom.element("div", {\n\t                        className: "k-tooltip k-spreadsheet-cell-comment",\n\t                        style: {\n\t                            left: cell.right + ttOffset + "px",\n\t                            top: cell.top + "px"\n\t                        }\n\t                    }, [ kendo.dom.text(cell.comment) ]);\n\t                    cont.children.push(div);\n\t                }\n\t            }, this);\n\t            borders.vert.forEach(function(a){\n\t                a.forEach(function(b){\n\t                    if (!b.rendered) {\n\t                        b.rendered = true;\n\t                        var style = {\n\t                            left        : b.x + "px",\n\t                            top         : b.top + "px",\n\t                            height      : (b.bottom - b.top + 1) + "px",\n\t                            borderWidth : b.size + "px",\n\t                            borderColor : b.color\n\t                        };\n\t                        if (b.size != 1) {\n\t                            style.transform = "translateX(-" + (b.size-1)/2 + "px)";\n\t                        }\n\t                        cont.children.push(kendo.dom.element("div", {\n\t                            className: paneClassNames.vborder,\n\t                            style: style\n\t                        }));\n\t                    }\n\t                });\n\t            });\n\t            borders.horiz.forEach(function(a){\n\t                a.forEach(function(b){\n\t                    if (!b.rendered) {\n\t                        b.rendered = true;\n\t                        var style = {\n\t                            top         : b.y + "px",\n\t                            left        : b.left + "px",\n\t                            width       : (b.right - b.left) + "px",\n\t                            borderWidth : b.size + "px",\n\t                            borderColor : b.color\n\t                        };\n\t                        if (b.size != 1) {\n\t                            style.transform = "translateY(-" + (b.size-1)/2 + "px)";\n\t                        }\n\t                        cont.children.push(kendo.dom.element("div", {\n\t                            className: paneClassNames.hborder,\n\t                            style: style\n\t                        }));\n\t                    }\n\t                });\n\t            });\n\t            this.renderDrawings(layout, cont.children);\n\t            return cont;\n\t        },\n\n\t        renderDrawings: function(layout, container) {\n\t            var sheet = this._sheet;\n\t            var workbook = sheet._workbook;\n\t            layout.drawings.forEach(function(d){\n\t                var drawing = d.drawing;\n\t                var box = d.box;\n\t                var div = box.toDiv("k-spreadsheet-drawing");\n\t                if (drawing.image) {\n\t                    div.children.push(kendo.dom.element("div", {\n\t                        className: "k-spreadsheet-drawing-image",\n\t                        style: {\n\t                            backgroundImage: "url(\'" + workbook.imageUrl(drawing.image) + "\')",\n\t                            opacity: drawing.opacity\n\t                        }\n\t                    }));\n\t                }\n\t                if (drawing === sheet._activeDrawing) {\n\t                    div.attr.className += " k-spreadsheet-active-drawing";\n\t                    drawingResizeHandles(div.children);\n\t                }\n\t                container.push(div);\n\t            });\n\t        },\n\n\t        renderResizeHandle: function(container) {\n\t            var sheet = this._sheet;\n\t            var ref = sheet.resizeHandlePosition();\n\t            var rectangle = this._rectangle(ref);\n\t            var classNames = [ Pane.classNames.resizeHandle ];\n\n\t            var style;\n\t            if (ref.col !== -Infinity) {\n\t                if (this._grid.rows._start > 0) {\n\t                    return;\n\t                }\n\t                style = {\n\t                    height: this._grid.headerHeight + "px",\n\t                    width: RESIZE_HANDLE_WIDTH + "px",\n\t                    left: rectangle.right - RESIZE_HANDLE_WIDTH/2  + "px",\n\t                    top: "0px"\n\t                };\n\t                classNames.push(viewClassNames.horizontalResize);\n\t            } else {\n\t                if (this._grid.columns._start > 0) {\n\t                    return;\n\t                }\n\t                style = {\n\t                    height: RESIZE_HANDLE_WIDTH + "px",\n\t                    width:  this._grid.headerWidth + "px",\n\t                    top: rectangle.bottom - RESIZE_HANDLE_WIDTH/2  + "px",\n\t                    left: "0px"\n\t                };\n\t                classNames.push(viewClassNames.verticalResize);\n\t            }\n\n\t            container.push(kendo.dom.element("div", {\n\t                className: classNames.join(" "),\n\t                style: style\n\t            }));\n\t        },\n\n\t        filterIconRect: function(rect) {\n\t            var BUTTON_SIZE = 16;\n\t            var BUTTON_OFFSET = 3;\n\n\t            return new kendo.spreadsheet.Rectangle(\n\t                rect.right - BUTTON_SIZE - BUTTON_OFFSET,\n\t                rect.top + BUTTON_OFFSET,\n\t                BUTTON_SIZE,\n\t                BUTTON_SIZE\n\t            );\n\t        },\n\n\t        renderFilterHeaders: function() {\n\t            var sheet = this._sheet;\n\t            var children = [];\n\t            var classNames = View.classNames;\n\t            var filter = sheet.filter();\n\n\t            function icon(className) {\n\t                return kendo.dom.element("span", {\n\t                    className: classNames.icon + " " + className\n\t                });\n\t            }\n\n\t            function filterButton(classNames, position, index) {\n\t                var style = {\n\t                    left: position.left + "px",\n\t                    top: position.top + "px"\n\t                };\n\t                var filtered = filter && filter.columns.some(function(c) {\n\t                    return c.index === index;\n\t                });\n\t                var classes = classNames.filterButton;\n\n\t                if (filtered) {\n\t                    classes += " " + classNames.filterButtonActive;\n\t                }\n\n\t                var button = kendo.dom.element(\n\t                    "span",\n\t                    { className: classes, style: style },\n\t                    [ icon(classNames.iconFilterDefault) ]\n\t                );\n\n\t                return button;\n\t            }\n\n\t            if (filter) {\n\t                this._addDiv(children, filter.ref, classNames.filterRange);\n\t            }\n\n\t            sheet.forEachFilterHeader(this._currentView.ref, function(ref) {\n\t                var rect = this._rectangle(ref);\n\t                var position = this.filterIconRect(rect);\n\t                var column = this._sheet.filterColumn(ref);\n\t                var button = filterButton(classNames, position, column);\n\n\t                children.push(button);\n\t            }.bind(this));\n\n\t            return kendo.dom.element("div", {\n\t                className: classNames.filterHeadersWrapper\n\t            }, children);\n\n\t        },\n\n\t        renderEditorSelection: function() {\n\t            var classNames = Pane.classNames;\n\t            var sheet = this._sheet;\n\t            var selections = [];\n\n\t            sheet._formulaSelections.forEach(function(range) {\n\t                var ref = range.ref;\n\n\t                if (ref === kendo.spreadsheet.NULLREF) {\n\t                    return;\n\t                }\n\n\t                this._addDiv(selections, ref, classNames.selectionHighlight + " " + range.colorClass);\n\t            }.bind(this));\n\n\t            return kendo.dom.element("div", { className: classNames.selectionWrapper }, selections);\n\n\t        },\n\n\t        renderSelection: function(scroller) {\n\t            var classNames = Pane.classNames;\n\t            var selections = [];\n\t            var selectionClasses = [classNames.selection];\n\t            var sheet = this._sheet;\n\t            var activeCell = sheet.activeCell().toRangeRef();\n\t            var selection = sheet.select();\n\n\t            selectionClasses = selectionClasses.concat(this._activeFormulaColor());\n\n\t            if (selection.size() === 1) {\n\t                selectionClasses.push("k-single-selection");\n\t            }\n\n\t            if (this._sheet.autoFillPunch()) {\n\t                selectionClasses.push("k-dim-auto-fill-handle");\n\t            }\n\n\t            selection.forEach(function(ref) {\n\t                if (ref !== kendo.spreadsheet.NULLREF) {\n\t                    this._addDiv(selections, ref, selectionClasses.join(" "));\n\t                }\n\t            }.bind(this));\n\n\t            this._renderCustomEditorButton(selections, activeCell, scroller);\n\n\t            return kendo.dom.element("div", { className: classNames.selectionWrapper }, selections);\n\t        },\n\n\t        renderAutoFill: function() {\n\t            var autoFillRectangle = [];\n\n\t            if (this._sheet.autoFillInProgress()) {\n\t                var autoFillRef = this._sheet.autoFillRef();\n\t                var punch = this._sheet.autoFillPunch();\n\t                var direction = this._sheet._autoFillDirection;\n\n\t                this._addDiv(autoFillRectangle, autoFillRef, "k-auto-fill");\n\n\t                if (punch) { // collapsing, add overlay\n\t                    this._addDiv(autoFillRectangle, punch, "k-auto-fill-punch");\n\t                } else if (direction !== undefined) { // expanding - add hint\n\t                    var ref, cssClass;\n\n\t                    switch(direction) {\n\t                        case 0:\n\t                            ref = autoFillRef.bottomRight;\n\t                            cssClass = "k-auto-fill-br-hint";\n\t                            break;\n\t                        case 1:\n\t                            ref = autoFillRef.bottomRight;\n\t                            cssClass = "k-auto-fill-br-hint";\n\t                            break;\n\t                        case 2:\n\t                            ref = new CellRef(autoFillRef.topLeft.row, autoFillRef.bottomRight.col);\n\t                            cssClass = "k-auto-fill-tr-hint";\n\t                            break;\n\t                        case 3:\n\t                            ref = new CellRef(autoFillRef.bottomRight.row, autoFillRef.topLeft.col);\n\t                            cssClass = "k-auto-fill-bl-hint";\n\t                            break;\n\t                    }\n\n\t                    var rectangle = this._addDiv(autoFillRectangle, ref, cssClass);\n\t                    if (rectangle) {\n\t                        var hint = kendo.dom.element("span", { className: "k-tooltip" }, [ kendo.dom.text(this._sheet._autoFillHint) ]);\n\t                        rectangle.children.push(hint);\n\t                    }\n\t                }\n\t            }\n\n\t            return kendo.dom.element("div", { className: Pane.classNames.autoFillWrapper }, autoFillRectangle);\n\t        },\n\n\t        _addDiv: function(collection, ref, className) {\n\t            var view = this._currentView, div;\n\n\t            if (view.ref.intersects(ref)) {\n\t                div = this._rectangle(ref).resize(1, 1).toDiv(className);\n\t                collection.push(div);\n\t            }\n\t            return div;\n\t        },\n\n\t        _renderCustomEditorButton: function(collection, ref, scroller) {\n\t            var self = this;\n\t            var sheet = self._sheet;\n\t            var view = self._currentView;\n\t            var columnCount = self._grid.columns._axis._count;\n\t            var ed = sheet.activeCellCustomEditor();\n\n\t            if (ed && view.ref.intersects(ref)) {\n\t                var rectangle = self._rectangle(ref);\n\t                sheet.forEach(ref.collapse(), function(row, col, cell) {\n\t                    cell.left = rectangle.left;\n\t                    cell.top = rectangle.top;\n\t                    cell.width = rectangle.width;\n\t                    cell.height = rectangle.height;\n\n\t                    var btnClass = "k-button k-spreadsheet-editor-button";\n\t                    var isLastColumn = col == columnCount - 1 || self._buttonOutOfVisiblePane(row, col, scroller);\n\t                    if (isLastColumn) {\n\t                        btnClass += " k-spreadsheet-last-column";\n\t                    }\n\t                    self._editorInLastColumn = isLastColumn;\n\t                    var btn = kendo.dom.element("div", {\n\t                        className: btnClass,\n\t                        style: {\n\t                            left   : (cell.left + (isLastColumn ? 0 : cell.width)) + "px",\n\t                            top    : cell.top + "px",\n\t                            height : cell.height + "px"\n\t                        }\n\t                    });\n\t                    if (ed.icon) {\n\t                        btn.children.push(kendo.dom.element("span", {\n\t                            className: "k-icon " + ed.icon\n\t                        }));\n\t                    }\n\t                    collection.push(btn);\n\t                });\n\t            }\n\t        },\n\n\t        _activeFormulaColor: function() {\n\t            var activeFormulaSelection;\n\t            var colorClasses = [];\n\n\t            if (this._sheet.isInEditMode()) {\n\t                activeFormulaSelection = this._sheet._formulaSelections.filter(function(sel) { return sel.active && sel.type == "ref"; })[0];\n\n\t                if (activeFormulaSelection) {\n\t                    colorClasses.push(activeFormulaSelection.colorClass);\n\t                }\n\t            }\n\n\t            return colorClasses;\n\t        },\n\n\t        _directionClasses: function(cell) {\n\t            var cellClasses = [];\n\t            var classNames = Pane.classNames;\n\t            var view = this._currentView.ref;\n\n\t            if (!cell.move(0, -1).intersects(view)) {\n\t                cellClasses.push(classNames.left);\n\t            }\n\n\t            if (!cell.move(-1, 0).intersects(view)) {\n\t                cellClasses.push(classNames.top);\n\t            }\n\n\t            if (!cell.move(0, 1).intersects(view)) {\n\t                cellClasses.push(classNames.right);\n\t            }\n\n\t            if (!cell.move(1, 0).intersects(view)) {\n\t                cellClasses.push(classNames.bottom);\n\t            }\n\n\t            return cellClasses;\n\t        },\n\n\t        _rectangle: function(ref) {\n\t            return this._grid.boundingRectangle(ref.toRangeRef()).offset(-this._currentView.mergedCellLeft, -this._currentView.mergedCellTop);\n\t        },\n\n\t        _buttonOutOfVisiblePane: function(row, col, scroller) {\n\t            var self = this;\n\t            var theGrid = self._grid;\n\t            var sheet = self._sheet;\n\t            var ref = sheet.range(row, col)._ref;\n\t            var boundaries = theGrid.scrollBoundaries(ref);\n\t            var scrollLeft = theGrid.columns.frozen ? 0 : scroller.scrollLeft;\n\n\t            if (boundaries.right + EDIT_BUTTON_WIDTH > scrollLeft || col + 1 === sheet.frozenColumns()) {\n\t                return true;\n\t            }\n\t        }\n\t    });\n\n\t    function drawingResizeHandles(container) {\n\t        [ "N", "NE", "E", "SE", "S", "SW", "W", "NW" ].forEach(function(direction) {\n\t            container.push(kendo.dom.element("div", {\n\t                "className": "k-spreadsheet-drawing-handle " + direction,\n\t                "data-direction": direction\n\t            }));\n\t        });\n\t    }\n\n\t    kendo.spreadsheet.View = View;\n\t    kendo.spreadsheet.Pane = Pane;\n\t    kendo.spreadsheet.drawCell = drawCell;\n\n\t    $.extend(true, View, { classNames: viewClassNames });\n\t    $.extend(true, Pane, { classNames: paneClassNames });\n\n\t})(window.kendo);\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1587:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./sheetsbar */ "./node_modules/@progress/kendo-ui/js/spreadsheet/sheetsbar.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/view.js?')},"./node_modules/@progress/kendo-ui/js/spreadsheet/workbook.js":
/*!********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/workbook.js ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1588);\n\tmodule.exports = __webpack_require__(1588);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1532:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./runtime */ "./node_modules/@progress/kendo-ui/js/spreadsheet/runtime.js");\n\n/***/ }),\n\n/***/ 1560:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./references */ "./node_modules/@progress/kendo-ui/js/spreadsheet/references.js");\n\n/***/ }),\n\n/***/ 1588:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20), __webpack_require__(1532), __webpack_require__(1560), __webpack_require__(1589) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function(kendo) {\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    // jshint latedef: nofunc\n\t    // jshint eqnull: true, laxbreak: true\n\n\t    var $ = kendo.jQuery;\n\t    var Formula = kendo.spreadsheet.calc.runtime.Formula;\n\t    var Ref = kendo.spreadsheet.Ref;\n\t    var CalcError = kendo.spreadsheet.CalcError;\n\n\t    kendo.spreadsheet.messages.workbook = {\n\t        defaultSheetName: "Sheet"\n\t    };\n\n\t    function loadBinary(url, callback) {\n\t        var xhr = new XMLHttpRequest();\n\t        xhr.onload = function() {\n\t            callback(xhr.response, xhr.getResponseHeader("Content-Type"));\n\t        };\n\t        xhr.onerror = function() {\n\t            callback(null);\n\t        };\n\t        xhr.open("GET", url);\n\t        xhr.responseType = "arraybuffer";\n\t        xhr.send();\n\t    }\n\n\t    var Workbook = kendo.Observable.extend({\n\t        options: {},\n\n\t        init: function(options, view) {\n\t            kendo.Observable.fn.init.call(this);\n\n\t            this.options = options;\n\n\t            this._view = view;\n\t            this._sheets = [];\n\t            this._images = {};\n\t            this._imgID = 0;\n\n\t            this._sheetsSearchCache = {};\n\n\t            this._sheet = this.insertSheet({\n\t                rows: this.options.rows,\n\t                columns: this.options.columns,\n\t                rowHeight: this.options.rowHeight,\n\t                columnWidth: this.options.columnWidth,\n\t                headerHeight: this.options.headerHeight,\n\t                headerWidth: this.options.headerWidth,\n\t                dataSource: this.options.dataSource\n\t            });\n\n\t            this.undoRedoStack = new kendo.util.UndoRedoStack();\n\t            this.undoRedoStack.bind(["undo", "redo"], this._onUndoRedo.bind(this));\n\n\t            this._context = new kendo.spreadsheet.FormulaContext(this);\n\t            this._validationContext = new kendo.spreadsheet.ValidationFormulaContext(this);\n\t            this._names = Object.create(null);\n\n\t            this.fromJSON(this.options);\n\t        },\n\n\t        clipboard: function() {\n\t            if(!this._clipboard) {\n\t                 this._clipboard = new kendo.spreadsheet.Clipboard(this);\n\t            }\n\t            return this._clipboard;\n\t        },\n\n\t        destroy: function() {\n\t            this.unbind();\n\n\t            if (this._clipboard) {\n\t                this._clipboard.destroy();\n\t            }\n\t        },\n\n\t        events: [\n\t            "cut",\n\t            "copy",\n\t            "paste",\n\t            "changing",\n\t            "change",\n\t            "excelImport",\n\t            "excelExport",\n\t            "insertSheet",\n\t            "removeSheet",\n\t            "selectSheet",\n\t            "renameSheet",\n\t            "insertRow",\n\t            "insertColumn",\n\t            "deleteRow",\n\t            "deleteColumn",\n\t            "hideRow",\n\t            "hideColumn",\n\t            "unhideRow",\n\t            "unhideColumn",\n\t            "select",\n\t            "changeFormat",\n\t            "dataBinding",\n\t            "dataBound"\n\t        ],\n\n\t        _sheetChanging: function(e) {\n\t            if (this.trigger("changing", e)) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _sheetChange: function(e) {\n\t            this.trigger("change", e);\n\t        },\n\n\t        _sheetInsertRow: function(e) {\n\t            if (this.trigger("insertRow", {\n\t                sheet: e.sender,\n\t                index: e.index\n\t            })) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _sheetInsertColumn: function(e) {\n\t            if (this.trigger("insertColumn", {\n\t                sheet: e.sender,\n\t                index: e.index\n\t            })) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _sheetDeleteRow: function(e) {\n\t            if (this.trigger("deleteRow", {\n\t                sheet: e.sender,\n\t                index: e.index\n\t            })) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _sheetDeleteColumn: function(e) {\n\t            if (this.trigger("deleteColumn", {\n\t                sheet: e.sender,\n\t                index: e.index\n\t            })) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _sheetHideRow: function(e) {\n\t            if (this.trigger("hideRow", {\n\t                sheet: e.sender,\n\t                index: e.index\n\t            })) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _sheetHideColumn: function(e) {\n\t            if (this.trigger("hideColumn", {\n\t                sheet: e.sender,\n\t                index: e.index\n\t            })) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _sheetUnhideRow: function(e) {\n\t            if (this.trigger("unhideRow", {\n\t                sheet: e.sender,\n\t                index: e.index\n\t            })) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _sheetUnhideColumn: function(e) {\n\t            if (this.trigger("unhideColumn", {\n\t                sheet: e.sender,\n\t                index: e.index\n\t            })) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _sheetSelect: function(e) {\n\t            this.trigger("select", e);\n\t        },\n\n\t        _sheetDataBinding: function(e) {\n\t            if (this.trigger("dataBinding", {\n\t                sheet: e.sender\n\t            })) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _sheetDataBound: function(e) {\n\t            this.trigger("dataBound", {\n\t                sheet: e.sender\n\t            });\n\t        },\n\n\t        _sheetCommandRequest: function(e) {\n\t            this.trigger("commandRequest", e);\n\t        },\n\n\t        _inputForRef: function(ref) {\n\t            var self = this;\n\t            return self._sheet.withCultureDecimals(function(){\n\t                return new kendo.spreadsheet.Range(ref, self._sheet).input();\n\t            });\n\t        },\n\n\t        _onUndoRedo: function(e) {\n\t            e.command.range().select();\n\t        },\n\n\t        execute: function(options) {\n\t            var commandOptions = $.extend({ workbook: this }, options.options);\n\t            var command = new kendo.spreadsheet[options.command](commandOptions);\n\t            var sheet = this.activeSheet();\n\n\t            if (commandOptions.origin) {\n\t                command.origin(commandOptions.origin);\n\t            }\n\n\t            if (commandOptions.operatingRange) {\n\t                command.range(commandOptions.operatingRange);\n\t            } else {\n\t                command.range(sheet.selection());\n\t            }\n\n\t            var result = command.exec();\n\n\t            if (!result || result.reason !== "error") {\n\t                if (!command.cannotUndo) {\n\t                    this.undoRedoStack.push(command);\n\t                }\n\t            }\n\n\t            // when the undo/redo stack is truncated (by e.g. adding a\n\t            // non-redo command after undoing) it\'s possible to\n\t            // discard images from the dropped commands.\n\t            this.cleanupImages();\n\n\t            return result;\n\t        },\n\n\t        resetFormulas: function() {\n\t            this._sheets.forEach(function(sheet){\n\t                sheet.resetFormulas();\n\t            });\n\t        },\n\n\t        resetValidations: function() {\n\t            this._sheets.forEach(function(sheet){\n\t                sheet.resetValidations();\n\t            });\n\t        },\n\n\t        refresh: function(reason) {\n\t            if (reason.recalc) {\n\t                this.resetFormulas();\n\t                this.resetValidations();\n\t                this._sheet.recalc(this._context);\n\t                this._sheet.revalidate(this._validationContext);\n\t            }\n\t        },\n\n\t        activeSheet: function(sheet) {\n\t            if (sheet === undefined) {\n\t                return this._sheet;\n\t            }\n\n\t            if (!this.sheetByName(sheet.name())) {\n\t                return;\n\t            }\n\n\t            this._sheet = sheet;\n\n\t            //TODO: better way to get all reasons?\n\t            sheet.triggerChange(kendo.spreadsheet.ALL_REASONS);\n\t        },\n\n\t        moveSheetToIndex: function(sheet, toIndex) {\n\t            var fromIndex = this.sheetIndex(sheet);\n\t            var sheets = this._sheets;\n\n\t            if (fromIndex === -1) {\n\t                return;\n\t            }\n\n\t            this._sheetsSearchCache = {};\n\n\t            sheets.splice(toIndex, 0, sheets.splice(fromIndex, 1)[0]);\n\n\t            this.trigger("change", { sheetSelection: true });\n\t        },\n\n\t        insertSheet: function(options) {\n\t            options = options || {};\n\t            var that = this;\n\t            var insertIndex = typeof options.index === "number" ? options.index : that._sheets.length;\n\t            var sheetName;\n\t            var sheets = that._sheets;\n\n\t            var getUniqueSheetName = function(sheetNameSuffix) {\n\t                sheetNameSuffix = sheetNameSuffix ? sheetNameSuffix : 1;\n\n\t                var name = kendo.spreadsheet.messages.workbook.defaultSheetName + sheetNameSuffix;\n\n\t                if (!that.sheetByName(name)) {\n\t                    return name;\n\t                }\n\n\t                return getUniqueSheetName(sheetNameSuffix + 1);\n\t            };\n\n\t            if (options.name && that.sheetByName(options.name)) {\n\t                return;\n\t            }\n\n\t            this._sheetsSearchCache = {};\n\n\t            sheetName = options.name || getUniqueSheetName();\n\n\t            var sheet = new kendo.spreadsheet.Sheet(\n\t                options.rows || this.options.rows,\n\t                options.columns || this.options.columns,\n\t                options.rowHeight || this.options.rowHeight,\n\t                options.columnWidth || this.options.columnWidth,\n\t                options.headerHeight || this.options.headerHeight,\n\t                options.headerWidth || this.options.headerWidth,\n\t                options.defaultCellStyle || this.options.defaultCellStyle\n\t            );\n\n\t            sheet._workbook = this;\n\n\t            sheet._name(sheetName);\n\n\t            this._bindSheetEvents(sheet);\n\n\t            sheets.splice(insertIndex, 0, sheet);\n\n\t            if (options.data) {\n\t                sheet.fromJSON(options.data);\n\t            }\n\n\t            if (options.dataSource) {\n\t                sheet.setDataSource(options.dataSource);\n\t            }\n\n\t            this.trigger("change", { sheetSelection: true });\n\n\t            return sheet;\n\t        },\n\n\t        _bindSheetEvents: function(sheet) {\n\t            sheet.bind("changing", this._sheetChanging.bind(this));\n\t            sheet.bind("change", this._sheetChange.bind(this));\n\t            sheet.bind("insertRow", this._sheetInsertRow.bind(this));\n\t            sheet.bind("insertColumn", this._sheetInsertColumn.bind(this));\n\t            sheet.bind("deleteRow", this._sheetDeleteRow.bind(this));\n\t            sheet.bind("deleteColumn", this._sheetDeleteColumn.bind(this));\n\t            sheet.bind("hideRow", this._sheetHideRow.bind(this));\n\t            sheet.bind("hideColumn", this._sheetHideColumn.bind(this));\n\t            sheet.bind("unhideRow", this._sheetUnhideRow.bind(this));\n\t            sheet.bind("unhideColumn", this._sheetUnhideColumn.bind(this));\n\t            sheet.bind("select", this._sheetSelect.bind(this));\n\t            sheet.bind("commandRequest", this._sheetCommandRequest.bind(this));\n\t            sheet.bind("dataBinding", this._sheetDataBinding.bind(this));\n\t            sheet.bind("dataBound", this._sheetDataBound.bind(this));\n\t        },\n\n\t        sheets: function() {\n\t            return this._sheets.slice();\n\t        },\n\n\t        sheetByName: function (sheetName) {\n\t            return this._sheets[this.sheetIndex(sheetName)];\n\t        },\n\n\t        sheetByIndex: function(index) {\n\t            return this._sheets[index];\n\t        },\n\n\t        sheetIndex: function(sheet) {\n\t            var sheets = this._sheets;\n\t            var sheetName = (typeof sheet == "string" ? sheet : sheet.name()).toLowerCase();\n\t            var idx = this._sheetsSearchCache[sheetName];\n\n\t            if (idx >= 0) {\n\t                return idx;\n\t            }\n\n\t            for(idx = 0; idx < sheets.length; idx++) {\n\t                var name = sheets[idx].name().toLowerCase();\n\t                this._sheetsSearchCache[name] = idx;\n\n\t                if (name === sheetName) {\n\t                    return idx;\n\t                }\n\t            }\n\n\t            return -1;\n\t        },\n\n\t        renameSheet: function(sheet, newSheetName) {\n\t            var oldSheetName = sheet.name().toLowerCase();\n\n\t            if (!newSheetName ||\n\t                oldSheetName === newSheetName.toLowerCase() ||\n\t                this.sheetByName(newSheetName)) {\n\t                return;\n\t            }\n\n\t            sheet = this.sheetByName(oldSheetName);\n\n\t            if (!sheet) {\n\t                return;\n\t            }\n\n\t            this._sheetsSearchCache = {};\n\n\t            if (this.trigger("renameSheet", {\n\t                sheet: sheet,\n\t                newSheetName: newSheetName\n\t            })) {\n\t                return;\n\t            }\n\n\t            // update references\n\t            this._sheets.forEach(function(sheet){\n\t                sheet._forFormulas(function(formula){\n\t                    formula.renameSheet(oldSheetName, newSheetName);\n\t                });\n\t            });\n\n\t            this.forEachName(function(def, name){\n\t                // 1. redefine sheet-local names\n\t                if (def.nameref.renameSheet(oldSheetName, newSheetName)) {\n\t                    this.undefineName(name);\n\t                    def.name = def.nameref.print();\n\t                    this.nameDefinition(def.name, def);\n\t                }\n\t                // 2. if the value is reference or formula, update it\n\t                if (def.value instanceof Ref || def.value instanceof Formula) {\n\t                    def.value.renameSheet(oldSheetName, newSheetName);\n\t                }\n\t            }.bind(this));\n\n\t            sheet._name(newSheetName);\n\n\t            this.trigger("change", { sheetSelection: true });\n\n\t            return sheet;\n\t        },\n\n\t        removeSheet: function(sheet) {\n\t            var that = this;\n\t            var sheets = that._sheets;\n\t            var name = sheet.name();\n\t            var index = that.sheetIndex(sheet);\n\n\t            if (sheets.length === 1) {\n\t                return;\n\t            }\n\n\t            if (this.trigger("removeSheet", { sheet: sheet })) {\n\t                return;\n\t            }\n\n\t            this._sheetsSearchCache = {};\n\n\t            if (index > -1) {\n\t                sheet.unbind();\n\n\t                sheets.splice(index, 1);\n\n\t                if (that.activeSheet().name() === name) {\n\t                    var newSheet = sheets[index === sheets.length ? index-1 : index];\n\t                    that.activeSheet(newSheet);\n\t                } else {\n\t                    this.trigger("change", { recalc: true,  sheetSelection: true });\n\t                }\n\t            }\n\t        },\n\n\t        _clearSheets: function() {\n\t            for (var i = 0; i < this._sheets.length; i++) {\n\t                this._sheets[i]._activeDrawing = [];\n\t                this._sheets[i]._drawings = [];\n\t                this._sheets[i].unbind();\n\t            }\n\t            this._sheets = [];\n\t            this._sheetsSearchCache = {};\n\t            this._names = {};\n\t            this._images = {};\n\t            this._imgID = 0;\n\t        },\n\n\t        // _loadImages: function() {\n\t        //     var self = this;\n\t        //     var ids = Object.keys(self._images);\n\t        //     var count = ids.length;\n\t        //     if (count) {\n\t        //         ids.forEach(function(id){\n\t        //             var img = self._images[id];\n\t        //             if (!img.blob) {\n\t        //                 loadBinary(img.url, function(data, type) {\n\t        //                     // XXX: can we do something better in case of error?\n\t        //                     if (data != null) {\n\t        //                         img.blob = new Blob([ data ], { type: type });\n\t        //                         delete img.url;\n\t        //                     }\n\t        //                     next();\n\t        //                 });\n\t        //             }\n\t        //         });\n\t        //     } else {\n\t        //         next();\n\t        //     }\n\t        //     function next() {\n\t        //         if (--count <= 0) {\n\t        //             self.activeSheet().triggerChange({ layout: true });\n\t        //         }\n\t        //     }\n\t        // },\n\n\t        fromJSON: function(json) {\n\t            if (json.sheets) {\n\t                this._clearSheets();\n\n\t                if (json.images) {\n\t                    this._imgID = 0;\n\t                    this._images = {};\n\t                    Object.keys(json.images).forEach(function(id){\n\t                        if (!isNaN(id)) {\n\t                            var num = parseFloat(id);\n\t                            if (isFinite(num)) {\n\t                                this._imgID = Math.max(this._imgID, num);\n\t                            }\n\t                        }\n\t                        this._images[id] = { url: json.images[id] };\n\t                    }, this);\n\t                    // this._loadImages();\n\t                }\n\n\t                for (var idx = 0; idx < json.sheets.length; idx++) {\n\t                    var data = json.sheets[idx];\n\t                    var args = sheetParamsFromJSON(data, this.options);\n\t                    var sheet = this.insertSheet({\n\t                        rows         : args.rowCount,\n\t                        columns      : args.columnCount,\n\t                        rowHeight    : args.rowHeight,\n\t                        columnWidth  : args.columnWidth,\n\t                        headerHeight : args.headerHeight,\n\t                        headerWidth  : args.headerWidth,\n\t                        data         : data\n\t                    });\n\n\t                    if (data.dataSource) {\n\t                        sheet.setDataSource(data.dataSource);\n\t                    }\n\t                }\n\t            }\n\n\t            if (json.activeSheet) {\n\t                this.activeSheet(this.sheetByName(json.activeSheet));\n\t            } else {\n\t                this.activeSheet(this._sheets[0]);\n\t            }\n\n\t            if (json.names) {\n\t                json.names.forEach(function(def){\n\t                    this.defineName(def.name, def.value, def.hidden);\n\t                }, this);\n\t            }\n\t        },\n\n\t        toJSON: function() {\n\t            this.resetFormulas();\n\t            this.resetValidations();\n\t            var names = Object.keys(this._names).map(function(name){\n\t                var def = this._names[name];\n\t                var val = def.value;\n\t                if (val instanceof Ref || val instanceof Formula) {\n\t                    val = val.print(0, 0, true);\n\t                } else if (val instanceof CalcError) {\n\t                    val = val + "";\n\t                } else {\n\t                    val = JSON.stringify(val);\n\t                }\n\t                return {\n\t                    value     : val,\n\t                    hidden    : def.hidden,\n\t                    name      : def.name,\n\n\t                    // these two are not really useful in\n\t                    // deserialization, but are handy in OOXML export.\n\t                    sheet     : def.nameref.sheet,\n\t                    localName : def.nameref.name\n\t                };\n\t            }, this);\n\t            return {\n\t                activeSheet: this.activeSheet().name(),\n\t                sheets: this._sheets.map(function(sheet) {\n\t                    sheet.recalc(this._context);\n\t                    sheet.revalidate(this._validationContext);\n\t                    return sheet.toJSON();\n\t                }, this),\n\t                names: names,\n\t                columnWidth: this.options.columnWidth,\n\t                rowHeight: this.options.rowHeight\n\t            };\n\t        },\n\n\t        saveJSON: function() {\n\t            var self = this;\n\t            var deferred = new $.Deferred();\n\t            var data = self.toJSON();\n\t            var ids = Object.keys(self._images).filter(function(id){\n\t                return self.usesImage(id) === 1;\n\t            });\n\t            var count = ids.length;\n\t            data.images = {};\n\t            if (count) {\n\t                ids.forEach(function(id){\n\t                    var img = self._images[id];\n\t                    if (img.blob) {\n\t                        var reader = new FileReader();\n\t                        reader.onload = function() {\n\t                            data.images[id] = reader.result;\n\t                            next();\n\t                        };\n\t                        reader.readAsDataURL(img.blob);\n\t                    } else {\n\t                        data.images[id] = img.url;\n\t                        next();\n\t                    }\n\t                });\n\t            } else {\n\t                next();\n\t            }\n\t            return deferred.promise();\n\n\t            function next() {\n\t                if (--count <= 0) {\n\t                    deferred.resolve(data);\n\t                }\n\t            }\n\t        },\n\n\t        fromFile: function(file) {\n\t            var deferred = new $.Deferred();\n\t            var promise = deferred.promise();\n\t            var args = { file: file, promise: promise };\n\n\t            if (file && !this.trigger("excelImport", args)) {\n\t                this._clearSheets();\n\t                kendo.spreadsheet.readExcel(file, this, deferred);\n\t            } else {\n\t                deferred.reject();\n\t            }\n\n\t            return promise;\n\t        },\n\n\t        saveAsExcel: function(options) {\n\t            var self = this;\n\t            options = $.extend({}, self.options.excel, options);\n\t            var data = self.toJSON();\n\n\t            if (self.trigger("excelExport", { workbook: data })) {\n\t                return;\n\t            }\n\n\t            var ids = Object.keys(self._images).filter(function(id){\n\t                return self.usesImage(id) === 1;\n\t            });\n\t            var count = ids.length;\n\t            var images = count ? {} : null;\n\t            if (count) {\n\t                ids.forEach(function(id){\n\t                    var img = self._images[id];\n\t                    if (img.blob) {\n\t                        var reader = new FileReader();\n\t                        reader.onload = function() {\n\t                            images[id] = {\n\t                                type: img.blob.type,\n\t                                name: img.blob.name,\n\t                                data: reader.result\n\t                            };\n\t                            next();\n\t                        };\n\t                        reader.readAsArrayBuffer(img.blob);\n\t                    } else {\n\t                        loadBinary(img.url, function(data, type){\n\t                            images[id] = { type: type, data: data };\n\t                            next();\n\t                        });\n\t                    }\n\t                });\n\t            } else {\n\t                next();\n\t            }\n\n\t            function next() {\n\t                if (--count <= 0) {\n\t                    data.images = images;\n\t                    var workbook = new kendo.ooxml.Workbook(data);\n\t                    kendo.saveAs({\n\t                        dataURI: options.forceProxy ? workbook.toDataURL() : workbook.toBlob(),\n\t                        fileName: data.fileName || options.fileName,\n\t                        proxyURL: options.proxyURL,\n\t                        forceProxy: options.forceProxy\n\t                    });\n\t                }\n\t            }\n\t        },\n\n\t        draw: function(options, callback) {\n\t            if (typeof options == "function" && !callback) {\n\t                callback = options;\n\t                options = {};\n\t            }\n\t            var parts = [], sheets = this._sheets;\n\t            (function loop(i){\n\t                if (i < sheets.length) {\n\t                    sheets[i].draw(kendo.spreadsheet.SHEETREF, options, function(group){\n\t                        parts.push(group);\n\t                        loop(i + 1);\n\t                    });\n\t                } else {\n\t                    var group = parts[0];\n\t                    for (i = 1; i < parts.length; ++i) {\n\t                        group.children = group.children.concat(parts[i].children);\n\t                    }\n\t                    callback(group);\n\t                }\n\t            })(0);\n\t        },\n\n\t        nameForRef: function(ref, sheet) {\n\t            if (sheet === undefined) {\n\t                sheet = ref.sheet;\n\t            }\n\t            sheet = sheet.toLowerCase();\n\t            var str = ref + "";\n\t            for (var name in this._names) {\n\t                var def = this._names[name];\n\t                var val = def.value;\n\t                if (val instanceof Ref) {\n\t                    if (!val.sheet || (val.sheet && sheet == val.sheet.toLowerCase())) {\n\t                        if (val + "" == str) {\n\t                            return def;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return { name: str };\n\t        },\n\n\t        defineName: function(name, value, hidden) {\n\t            var x = kendo.spreadsheet.calc.parseNameDefinition(name, value);\n\t            name = x.name.print();\n\t            this._names[name.toLowerCase()] = {\n\t                value   : x.value,\n\t                hidden  : hidden,\n\t                name    : name,\n\t                nameref : x.name\n\t            };\n\t        },\n\n\t        undefineName: function(name) {\n\t            delete this._names[name.toLowerCase()];\n\t        },\n\n\t        nameValue: function(name) {\n\t            name = name.toLowerCase();\n\t            if (name in this._names) {\n\t                return this._names[name].value;\n\t            }\n\t            return null;\n\t        },\n\n\t        nameDefinition: function(name, def) {\n\t            name = name.toLowerCase();\n\t            if (arguments.length > 1) {\n\t                if (def === undefined) {\n\t                    delete this._names[name];\n\t                } else {\n\t                    this._names[name] = def;\n\t                }\n\t            }\n\t            return this._names[name];\n\t        },\n\n\t        forEachName: function(func) {\n\t            Object.keys(this._names).forEach(function(name){\n\t                func(this._names[name], name);\n\t            }, this);\n\t        },\n\n\t        adjustNames: function(affectedSheet, forRow, start, delta) {\n\t            affectedSheet = affectedSheet.toLowerCase();\n\t            Object.keys(this._names).forEach(function(name){\n\t                var def = this._names[name];\n\t                var x = def.value;\n\t                if (x instanceof Ref &&\n\t                    x.sheet.toLowerCase() == affectedSheet) {\n\t                    def.value = x.adjust(null, null, null, null, forRow, start, delta);\n\t                }\n\t                else if (x instanceof Formula) {\n\t                    x.adjust(affectedSheet, forRow ? "row" : "col", start, delta);\n\t                }\n\t            }, this);\n\t        },\n\n\t        addImage: function(image) {\n\t            var id = String(++this._imgID);\n\t            if (typeof image == "string") {\n\t                this._images[id] = { url: image };\n\t            } else {\n\t                this._images[id] = { blob: image };\n\t            }\n\t            return id;\n\t        },\n\n\t        imageUrl: function(id) {\n\t            var img = this._images[id];\n\t            var url = img.url;\n\t            if (!url) {\n\t                url = img.url = window.URL.createObjectURL(img.blob);\n\t            }\n\t            return url;\n\t        },\n\n\t        cleanupImages: function() {\n\t            Object.keys(this._images).forEach(function(id){\n\t                if (!this.usesImage(id)) {\n\t                    var url = this._images[id].url;\n\t                    if (url) {\n\t                        window.URL.revokeObjectURL(url);\n\t                    }\n\t                    delete this._images[id];\n\t                }\n\t            }, this);\n\t        },\n\n\t        usesImage: function(img) {\n\t            var i;\n\t            var sheets = this._sheets;\n\t            for (i = sheets.length; --i >= 0;) {\n\t                if (sheets[i].usesImage(img)) {\n\t                    return 1;\n\t                }\n\t            }\n\t            var stack = this.undoRedoStack.stack;\n\t            for (i = stack.length; --i >= 0;) {\n\t                if (stack[i].usesImage(img)) {\n\t                    return 2; // signal that it\'s only in the undo stack\n\t                }\n\t            }\n\t            return false;\n\t        }\n\n\t    });\n\n\t    function sheetParamsFromJSON(data, options) {\n\t        function or(a, b, c) {\n\t            return a !== undefined ? a : b !== undefined ? b : c;\n\t        }\n\n\t        var rowCount     = or(data.rowCount, options.rows, 200),\n\t            columnCount  = or(data.columnCount, options.columns, 50),\n\t            rowHeight    = or(data.rowHeight, options.rowHeight, 20),\n\t            columnWidth  = or(data.columnWidth, options.columnWidth, 64),\n\t            headerHeight = or(data.headerHeight, options.headerHeight, 20),\n\t            headerWidth  = or(data.headerWidth, options.headerWidth, 32);\n\n\t        if (data.rows !== undefined) {\n\t            for (var i = 0; i < data.rows.length; ++i) {\n\t                var row = data.rows[i];\n\t                var ri = or(row.index, i);\n\t                if (ri >= rowCount) { rowCount = ri + 1; }\n\t                if (row.cells) {\n\t                    for (var j = 0; j < row.cells.length; ++j) {\n\t                        var cell = row.cells[j];\n\t                        var ci = or(cell.index, j);\n\t                        if (ci >= columnCount) { columnCount = ci + 1; }\n\t                    }\n\t                }\n\t            }\n\t        }\n\n\t        return {\n\t            rowCount     : rowCount,\n\t            columnCount  : columnCount,\n\t            rowHeight    : rowHeight,\n\t            columnWidth  : columnWidth,\n\t            headerHeight : headerHeight,\n\t            headerWidth  : headerWidth\n\t        };\n\t    }\n\n\t    kendo.spreadsheet.Workbook = Workbook;\n\t    if (kendo.PDFMixin) {\n\t        kendo.PDFMixin.extend(Workbook.prototype);\n\n\t        Workbook.prototype.saveAsPDF = function(options) {\n\t            var progress = new $.Deferred();\n\t            var promise = progress.promise();\n\t            var args = { promise: promise };\n\t            if (this.trigger("pdfExport", args)) {\n\t                return;\n\t            }\n\n\t            this._drawPDF(options, progress)\n\t            .then(function(root) {\n\t                return options.forceProxy\n\t                    ? kendo.pdf.exportPDF(root) // produce data URI for proxy\n\t                    : kendo.pdf.exportPDFToBlob(root);\n\t            })\n\t            .done(function(dataURI) {\n\t                kendo.saveAs({\n\t                    dataURI: dataURI,\n\t                    fileName: options.fileName,\n\t                    proxyURL: options.proxyURL,\n\t                    forceProxy: options.forceProxy,\n\t                    proxyTarget: options.proxyTarget\n\t                });\n\n\t                progress.resolve();\n\t            })\n\t            .fail(function(err) {\n\t                progress.reject(err);\n\t            });\n\n\t            return promise;\n\t        };\n\n\t        Workbook.prototype._drawPDF = function(options) {\n\t            var result = new $.Deferred();\n\t            var callback = function(group) {\n\t                result.resolve(group);\n\t            };\n\t            switch(options.area) {\n\t            case "workbook":\n\t                options.workbook.draw(options, callback);\n\t                break;\n\t            case "sheet":\n\t                options.workbook.activeSheet().draw(options, callback);\n\t                break;\n\t            case "selection":\n\t                options.workbook.activeSheet().selection().draw(options, callback);\n\t                break;\n\t            }\n\n\t            return result.promise();\n\t        };\n\t    }\n\t})(kendo);\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1589:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./excel-reader */ "./node_modules/@progress/kendo-ui/js/spreadsheet/excel-reader.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/workbook.js?')}}]);