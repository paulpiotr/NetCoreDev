(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{"./node_modules/@progress/kendo-ui/js/kendo.upload.js":
/*!************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.upload.js ***!
  \************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1405);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1017:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1405:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "upload",\n\t    name: "Upload",\n\t    category: "web",\n\t    description: "The Upload widget uses progressive enhancement to deliver the best possible uploading experience to users.",\n\t    depends: [ "core" ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        Widget = kendo.ui.Widget,\n\t        antiForgeryTokens = kendo.antiForgeryTokens,\n\t        logToConsole = kendo.logToConsole,\n\t        rFileExtension = /\\.([^\\.]+)$/,\n\t        NS = ".kendoUpload",\n\t        SELECT = "select",\n\t        UPLOAD = "upload",\n\t        SUCCESS = "success",\n\t        ERROR = "error",\n\t        COMPLETE = "complete",\n\t        CANCEL = "cancel",\n\t        CLEAR = "clear",\n\t        PAUSE = "pause",\n\t        RESUME = "resume",\n\t        PROGRESS = "progress",\n\t        REMOVE = "remove",\n\t        VALIDATIONERRORS = "validationErrors",\n\t        INVALIDMAXFILESIZE = "invalidMaxFileSize",\n\t        INVALIDMINFILESIZE = "invalidMinFileSize",\n\t        INVALIDFILEEXTENSION = "invalidFileExtension",\n\t        PROGRESSHIDEDELAY = 1000,\n\t        PROGRESSHIDEDURATION = 2000;\n\n\t    var headerStatusIcon = {\n\t        loading: "k-i-upload",\n\t        warning: "k-i-warning",\n\t        success: "k-i-check"\n\t    };\n\n\t    var Upload = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that.name = element.name;\n\t            that.multiple = that.options.multiple;\n\t            that.directory = that.options.directory;\n\t            that.localization = that.options.localization;\n\n\t            var activeInput = that.element;\n\t            that.wrapper = activeInput.closest(".k-upload");\n\t            if (that.wrapper.length === 0) {\n\t                that.wrapper = that._wrapInput(activeInput);\n\t            }\n\n\t            that._activeInput(activeInput);\n\t            that.toggle(that.options.enabled);\n\n\t            var ns = that._ns = NS + "-" + kendo.guid();\n\t            activeInput.closest("form")\n\t                .on("submit" + ns, $.proxy(that._onParentFormSubmit, that))\n\t                .on("reset" + ns, $.proxy(that._onParentFormReset, that));\n\n\t            if (that.options.async.saveUrl) {\n\t                that._module = that._supportsFormData() ?\n\t                new formDataUploadModule(that) :\n\t                new iframeUploadModule(that);\n\t                that._async = true;\n\n\t                var initialFiles = that.options.files;\n\t                if (initialFiles.length > 0) {\n\t                    that._renderInitialFiles(initialFiles);\n\t                }\n\n\t            } else {\n\t                that._module = new syncUploadModule(that);\n\t            }\n\n\t            that._toggleDropZone();\n\n\t            that.wrapper\n\t            .on("click", ".k-upload-action", $.proxy(that._onFileAction, that))\n\t            .on("click", ".k-clear-selected", $.proxy(that._onClearSelected, that))\n\t            .on("click", ".k-upload-selected", $.proxy(that._onUploadSelected, that));\n\n\t            if(that.element.val()) {\n\t                that._onInputChange({ target: that.element });\n\t            }\n\t        },\n\n\t        events: [\n\t            SELECT,\n\t            UPLOAD,\n\t            SUCCESS,\n\t            ERROR,\n\t            COMPLETE,\n\t            CANCEL,\n\t            CLEAR,\n\t            PROGRESS,\n\t            REMOVE,\n\t            PAUSE,\n\t            RESUME\n\t        ],\n\n\t        options: {\n\t            name: "Upload",\n\t            enabled: true,\n\t            multiple: true,\n\t            directory: false,\n\t            showFileList: true,\n\t            template: "",\n\t            files: [],\n\t            async: {\n\t                autoRetryAfter: 0,\n\t                bufferChunkSize: 10000000,\n\t                maxAutoRetries: 1,\n\t                removeVerb: "POST",\n\t                autoUpload: true,\n\t                withCredentials: true,\n\t                accept: "*/*; q=0.5, application/json",\n\t                useArrayBuffer: false\n\t            },\n\t            localization: {\n\t                "select": "Select files...",\n\t                "cancel": "Cancel",\n\t                "retry": "Retry",\n\t                "remove": "Remove",\n\t                "pause": "Pause",\n\t                "resume": "Resume",\n\t                "clearSelectedFiles": "Clear",\n\t                "uploadSelectedFiles": "Upload",\n\t                "dropFilesHere": "Drop files here to upload",\n\t                "invalidFiles": "Invalid file(s). Please check file upload requirements.",\n\t                "statusUploading": "uploading",\n\t                "statusUploaded": "uploaded",\n\t                "statusWarning": "warning",\n\t                "statusFailed": "failed",\n\t                "headerStatusUploading": "Uploading...",\n\t                "headerStatusPaused": "Paused",\n\t                "headerStatusUploaded": "Done",\n\t                "uploadSuccess": "File(s) uploaded successfully.",\n\t                "uploadFail": "File(s) failed to upload.",\n\t                "invalidMaxFileSize": "File size too large.",\n\t                "invalidMinFileSize": "File size too small.",\n\t                "invalidFileExtension": "File type not allowed."\n\t            },\n\t            validation: {\n\t                allowedExtensions: [],\n\t                maxFileSize: 0,\n\t                minFileSize: 0\n\t            },\n\t            dropZone: ""\n\t        },\n\n\t        setOptions: function(options) {\n\t            var that = this,\n\t                activeInput = that.element;\n\n\t            $(that.options.dropZone).off(that._ns);\n\n\t            Widget.fn.setOptions.call(that, options);\n\n\t            that.multiple = that.options.multiple;\n\t            that.directory = that.options.directory;\n\n\t            activeInput.attr("multiple", that._supportsMultiple() ? that.multiple : false);\n\t            if(that.directory){\n\t                activeInput.attr("webkitdirectory", that.directory);\n\t                activeInput.attr("directory", that.directory);\n\t            }\n\t            that.toggle(that.options.enabled);\n\n\t            that._toggleDropZone();\n\t        },\n\n\t        enable: function(enable) {\n\t            enable = typeof (enable) === "undefined" ? true : enable;\n\t            this.toggle(enable);\n\t        },\n\n\t        disable: function() {\n\t            this.toggle(false);\n\t        },\n\n\t        toggle: function(enable) {\n\t            enable = typeof (enable) === "undefined" ? enable : !enable;\n\t            this.wrapper.toggleClass("k-state-disabled", enable);\n\t            this.element.prop("disabled", enable);\n\t        },\n\n\t        focus: function() {\n\t            this.element.focus();\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\t            var customDropZone = $(that.options.dropZone);\n\n\t            $(document)\n\t                .add($(".k-dropzone", that.wrapper))\n\t                .add(that.wrapper.closest("form"))\n\t                .off(that._ns);\n\n\t            if(customDropZone.length > 0) {\n\t                customDropZone.off(that._ns);\n\t            }\n\n\t            $(that.element).off(NS);\n\n\t            Widget.fn.destroy.call(that);\n\t        },\n\t        pause: function(fileEntry){\n\t            this._module.onPause({ target: $(fileEntry, this.wrapper) });\n\n\t            var pauseIcon = fileEntry.find(".k-i-pause-sm");\n\t            pauseIcon.removeClass("k-i-pause-sm").addClass("k-i-play-sm").attr("title", this.localization.resume);\n\t            $(pauseIcon).parent().attr("aria-label", this.localization.resume);\n\t        },\n\t        resume: function(fileEntry){\n\t            this._module.onResume({ target: $(fileEntry, this.wrapper) });\n\n\t            var playIcon = fileEntry.find(".k-i-play-sm");\n\t            playIcon.removeClass("k-i-play-sm").addClass("k-i-pause-sm").attr("title", this.localization.pause);\n\t            $(playIcon).parent().attr("aria-label", this.localization.pause);\n\t        },\n\t        upload: function() {\n\t            var that = this;\n\n\t            that._module.onSaveSelected();\n\t        },\n\n\t        getFiles: function() {\n\t            var that = this;\n\t            var filesData;\n\t            var allFiles = [];\n\t            var listItems = that.wrapper.find(".k-file");\n\n\t            for(var i = 0; i < listItems.length; i++) {\n\t                filesData = $(listItems[i]).data("fileNames");\n\n\t                if(filesData) {\n\t                    for(var j = 0; j < filesData.length; j++) {\n\t                        allFiles.push(filesData[j]);\n\t                    }\n\t                }\n\t            }\n\n\t            return allFiles;\n\t        },\n\n\t        clearAllFiles: function() {\n\t            var that = this;\n\t            var files = that.wrapper.find(".k-file");\n\n\t            files.each(function(index, file) {\n\t                that._removeFileByDomElement(file, false);\n\t            });\n\t        },\n\n\t        removeAllFiles: function() {\n\t            var that = this;\n\t            var files = that.wrapper.find(".k-file");\n\n\t            files.each(function(index, file) {\n\t                that._removeFileByDomElement(file, true);\n\t            });\n\t        },\n\n\t        removeFileByUid: function(uid) {\n\t            this._removeFileByUid(uid, true);\n\t        },\n\n\t        clearFileByUid: function(uid) {\n\t            this._removeFileByUid(uid, false);\n\t        },\n\n\t        _removeFileByUid: function(uid, shouldSendRemoveRequest) {\n\t            var that = this;\n\t            var fileEntry;\n\n\t            if(typeof uid !== \'string\') { return; }\n\n\t            fileEntry = $(\'.k-file[\' + kendo.attr(\'uid\') + \'="\' + uid + \'"]\', that.wrapper);\n\n\t            if(fileEntry.length > 0) {\n\t                that._removeFileByDomElement(fileEntry, shouldSendRemoveRequest);\n\t            }\n\t        },\n\n\t        clearFile: function(callback) {\n\t            this._removeFile(callback, false);\n\t        },\n\n\t        removeFile: function(callback) {\n\t            this._removeFile(callback, true);\n\t        },\n\n\t        _removeFile: function(callback, shouldSendRemoveRequest) {\n\t            var that = this;\n\t            var files = that.wrapper.find(".k-file");\n\t            var fileData;\n\n\t            if(typeof callback === "function") {\n\t                files.each(function(index, file){\n\t                    fileData = $(file).data("fileNames");\n\n\t                    if(callback(fileData)) {\n\t                        that._removeFileByDomElement(file, shouldSendRemoveRequest);\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        _removeFileByDomElement: function(fileEntry, shouldSendRemoveRequest) {\n\t            var that = this;\n\t            var fileData = {\n\t                target: $(fileEntry, that.wrapper)\n\t            };\n\t            var allFiles;\n\n\t            if(that.options.async.saveUrl) {\n\t                if($(fileEntry).hasClass("k-file-progress")) {\n\t                    that._module.onCancel(fileData);\n\t                } else {\n\t                    that._module.onRemove(fileData, {}, shouldSendRemoveRequest);\n\t                }\n\n\t                allFiles = $(".k-file", that.wrapper);\n\n\t                if(allFiles.length === 0) {\n\t                    that._hideHeaderUploadstatus();\n\t                } else {\n\t                    that._updateHeaderUploadStatus();\n\t                }\n\t            } else {\n\t                that._module.onRemove(fileData, {}, shouldSendRemoveRequest);\n\t            }\n\t        },\n\n\t        _addInput: function(sourceInput) {\n\t            //check if source input is a DOM element. Required for some unit tests\n\t            if (!sourceInput[0].nodeType) {\n\t                return;\n\t            }\n\n\t            var that = this,\n\t                input = sourceInput.clone().val("");\n\n\t            input\n\t                .insertAfter(that.element)\n\t                .data("kendo" + that.options.prefix + that.options.name, that);\n\n\t            $(that.element)\n\t                .hide()\n\t                .attr("tabindex", "-1")\n\t                .removeAttr("id")\n\t                .off(NS);\n\n\t            that._activeInput(input);\n\t            that.element.focus();\n\t        },\n\n\t        _activeInput: function(input) {\n\t            var that = this,\n\t                wrapper = that.wrapper;\n\n\t            that.element = input;\n\n\t            if(that.directory){\n\t                input.attr("webkitdirectory", that.directory);\n\t                input.attr("directory", that.directory);\n\t            }\n\n\t            input\n\t                .attr("multiple", that._supportsMultiple() ? that.multiple : false)\n\t                .attr("autocomplete", "off")\n\t                .on("click" + NS, function(e) {\n\t                    if (wrapper.hasClass("k-state-disabled")) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .on("focus" + NS, function() {\n\t                    $(this).parent().addClass("k-state-focused");\n\t                })\n\t                .on("blur" + NS, function() {\n\t                    $(this).parent().removeClass("k-state-focused");\n\t                })\n\t                .on("change" + NS, $.proxy(that._onInputChange, that))\n\t                .on("keydown" + NS, $.proxy(that._onInputKeyDown, that));\n\t        },\n\n\t        _onInputKeyDown: function(e) {\n\t            var that = this;\n\t            var firstButton = that.wrapper.find(".k-upload-action:visible:first");\n\n\t            if (e.keyCode === kendo.keys.TAB && firstButton.length > 0 && !e.shiftKey) {\n\t                e.preventDefault();\n\n\t                firstButton.focus();\n\t            }\n\t        },\n\n\t        _onInputChange: function(e) {\n\t            var that = this;\n\t            var input = $(e.target);\n\t            var files = assignGuidToFiles(that._inputFiles(input), that._isAsyncNonBatch());\n\n\t            validateFiles(files, that.options.validation);\n\n\t            var prevented = that.trigger(SELECT, { files: files });\n\t            if (prevented) {\n\t                that._addInput(input);\n\t                input.remove();\n\t            } else {\n\t                that._module.onSelect({target : input}, files);\n\t            }\n\t        },\n\n\t        _readDirectory: function(item){\n\t            var deferred = new $.Deferred();\n\t            var dirReader = item.createReader();\n\t            var allFolderFiles = [];\n\n\t            var readEntries = function () {\n\t                dirReader.readEntries(function(entries) {\n\t                    if (!entries.length) {\n\t                        deferred.resolve(allFolderFiles);\n\t                    } else {\n\t                        allFolderFiles = allFolderFiles.concat(entries);\n\t                        readEntries();\n\t                    }\n\t                }, deferred.reject);\n\t            };\n\n\t            readEntries();\n\n\t             return deferred.promise();\n\t        },\n\n\t        _readFile: function(item){\n\t            var that = this;\n\t            var fullpath = item.fullPath;\n\n\t            item.file(function(file){\n\t                    file.relativePath = fullpath.slice(1);\n\t                    that.droppedFolderFiles.push(file);\n\t                    that.droppedFolderCounter --;\n\t                    if(that.droppedFolderCounter === 0){\n\t                        setTimeout(function(){\n\t                            if(that.droppedFolderCounter === 0){\n\t                                if(that.droppedFolderFiles.length){\n\t                                    that._proceedDroppedItems(that.droppedFolderFiles);\n\t                                    that.droppedFolderFiles = [];\n\t                                }\n\t                            }\n\t                        },0);\n\t                    }\n\t            }, function(){\n\t                logToConsole("File error.");\n\t            });\n\t        },\n\n\t        _traverseFileTree: function (item, skipCounter) {\n\t            var that = this;\n\t            if(!skipCounter){\n\t                that.droppedFolderCounter--;\n\t            }\n\n\t            this._readDirectory(item).then(function(items){\n\t                that.droppedFolderCounter += items.length;\n\t                for (var i = 0; i < items.length; i++) {\n\t                    if(items[i].isFile){\n\t                        that._readFile(items[i]);\n\t                    } else if (items[i].isDirectory){\n\t                        that._traverseFileTree(items[i]);\n\t                    }\n\t                }\n\t            });\n\t        },\n\n\t        _onDrop: function (e) {\n\t            var dt = e.originalEvent.dataTransfer;\n\t            var that = this;\n\t            var droppedFiles = dt.files;\n\t            var length;\n\n\t            stopEvent(e);\n\t           if(that.options.directoryDrop && dt.items){\n\t                length = dt.items.length;\n\t                that.droppedFolderCounter = 0;\n\t                that.droppedFolderFiles = [];\n\n\t                for (var i = 0; i < length; i++) {\n\t                    if(dt.items[i].webkitGetAsEntry){\n\t                        var entry = dt.items[i].webkitGetAsEntry();\n\n\t                        if(entry.isDirectory){\n\t                            that._traverseFileTree(entry, true);\n\t                        }else if (entry.isFile){\n\t                            that.droppedFolderFiles.push(dt.files[i]);\n\t                        }\n\t                    }else{\n\t                         that._proceedDroppedItems(droppedFiles);\n\t                    }\n\t                }\n\t           }else{\n\t               that._proceedDroppedItems(droppedFiles);\n\t           }\n\t        },\n\n\t        _proceedDroppedItems: function(droppedFiles){\n\t            var that = this;\n\t            var files = assignGuidToFiles(getAllFileInfo(droppedFiles), that._isAsyncNonBatch());\n\n\t              if (droppedFiles.length > 0 && !that.wrapper.hasClass("k-state-disabled")) {\n\t                if (!that.multiple && files.length > 1) {\n\t                    files.splice(1, files.length - 1);\n\t                }\n\n\t                validateFiles(files, that.options.validation);\n\n\t                var prevented = that.trigger(SELECT, { files: files });\n\t                if (!prevented) {\n\t                    that._module.onSelect({target : $(".k-dropzone", that.wrapper) }, files);\n\t                }\n\t            }\n\t        },\n\n\t        _filesContainValidationErrors: function(files) {\n\t            var hasErrors = false;\n\n\t            $(files).each(function(index, file){\n\t                if(file[VALIDATIONERRORS] && file[VALIDATIONERRORS].length > 0) {\n\t                    hasErrors = true;\n\t                    return false;\n\t                }\n\t            });\n\n\t            return hasErrors;\n\t        },\n\n\t        _isAsyncNonBatch: function () {\n\t            return (this._async && !this.options.async.batch) || false;\n\t        },\n\n\t        _renderInitialFiles: function(files) {\n\t            var that = this;\n\t            var idx = 0;\n\t            files = assignGuidToFiles(files, true);\n\n\t            for (idx = 0; idx < files.length; idx++) {\n\t                var currentFile = files[idx];\n\n\t                var fileEntry = that._enqueueFile(currentFile.name, { fileNames: [ currentFile ] });\n\t                fileEntry.addClass("k-file-success").data("files", [ files[idx] ]);\n\n\t                if (that._supportsRemove()){\n\t                    that._fileAction(fileEntry, REMOVE);\n\t                }\n\t            }\n\t        },\n\n\t        _prepareTemplateData: function(name, data) {\n\t            var filesData = data.fileNames,\n\t                templateData = {},\n\t                totalSize = 0,\n\t                idx = 0;\n\n\t            for (idx = 0; idx < filesData.length; idx++) {\n\t                totalSize += filesData[idx].size;\n\t            }\n\n\t            templateData.name = name;\n\t            templateData.size = totalSize;\n\t            templateData.files = data.fileNames;\n\n\t            return templateData;\n\t        },\n\n\t        _prepareDefaultSingleFileEntryTemplate: function(data) {\n\t            var that = this;\n\t            var file = data.fileNames[0];\n\t            var fileSize = getTotalFilesSizeMessage(data.fileNames);\n\t            var fileGroup = kendo.getFileGroup(file.extension, true);\n\t            var errors = file[VALIDATIONERRORS];\n\t            var template = "";\n\n\t            if(errors && errors.length > 0) {\n\t                template += "<li class=\'k-file k-file-invalid\'><div class=\'k-progressbar k-hidden\'><span class=\'k-progress\'></span></div>" +\n\t                "<span class=\'k-file-invalid-group-wrapper\'>" +\n\t                    "<span class=\'k-file-group k-icon k-i-" + fileGroup + "\'></span>" +\n\t                    "<span class=\'k-file-state\'></span>" +\n\t                "</span>" +\n\t                "<span class=\'k-file-name-size-wrapper\'>" +\n\t                    "<span class=\'k-file-name k-file-name-invalid\' title=\'" + file.name + "\'>" + file.name + "</span>" +\n\t                    "<span class=\'k-file-validation-message k-text-error\'>" + that.localization[errors[0]] + "</span>" +\n\t                "</span>";\n\t            } else {\n\t                template += "<li class=\'k-file\'><div class=\'k-progressbar k-hidden\'><span class=\'k-progress\'></span></div>" +\n\t                "<span class=\'k-file-group-wrapper\'>" +\n\t                    "<span class=\'k-file-group k-icon k-i-" + fileGroup + "\'></span>" +\n\t                    "<span class=\'k-file-state\'></span>" +\n\t                "</span>" +\n\t                "<span class=\'k-file-name-size-wrapper\'><span class=\'k-file-name\' title=\'" + file.name + "\'>" + file.name + "</span>" +\n\t                "<span class=\'k-file-size\'>" + fileSize + "</span></span>";\n\t            }\n\n\t            template += "<strong class=\'k-upload-status\'></strong>";\n\n\t            return $(template);\n\t        },\n\n\t        _prepareDefaultMultipleFileEntriesTemplate: function(data) {\n\t            var that = this;\n\t            var files = data.fileNames;\n\t            var filesHaveValidationErrors = that._filesContainValidationErrors(files);\n\t            var totalFileSize = getTotalFilesSizeMessage(files);\n\t            var template = "";\n\t            var i, currentFile;\n\n\t            if(filesHaveValidationErrors) {\n\t                template += "<li class=\'k-file k-file-invalid\'><div class=\'k-progressbar k-hidden\'><span class=\'k-progress\'></span></div>" +\n\t                    "<span class=\'k-multiple-files-invalid-group-wrapper\'>" +\n\t                    "<span class=\'k-file-group k-icon k-i-files\'></span>";\n\t            } else {\n\t                template += "<li class=\'k-file\'><div class=\'k-progressbar k-hidden\'><span class=\'k-progress\'></span></div>" +\n\t                    "<span class=\'k-multiple-files-group-wrapper\'>" +\n\t                        "<span class=\'k-file-group k-icon k-i-files\'></span>";\n\t            }\n\n\t            template += "<span class=\'k-file-state\'></span></span>";\n\n\t            files.sort(function(a, b){\n\t                if(a[VALIDATIONERRORS]) { return -1; }\n\n\t                if (b[VALIDATIONERRORS]) { return 1; }\n\n\t                return 0;\n\t            });\n\n\t            template += "<span class=\'k-multiple-files-wrapper\'>";\n\t            for(i = 0; i < files.length; i++) {\n\t                currentFile = files[i];\n\t                var fileSize = getTotalFilesSizeMessage([currentFile]);\n\n\t                template += "<span class=\'k-file-name-size-wrapper\'>";\n\t                if(currentFile[VALIDATIONERRORS] && currentFile[VALIDATIONERRORS].length > 0) {\n\t                    template += "<span class=\'k-file-name k-file-name-invalid\' title=\'" + currentFile.name + "\'>" + currentFile.name + "</span>";\n\t                } else {\n\t                    template += "<span class=\'k-file-name\' title=\'" + currentFile.name + "\'>" + currentFile.name + "</span>";\n\t                }\n\t                template += "<span class=\'k-file-size\'>" + fileSize + "</span></span>";\n\t            }\n\n\t            if(filesHaveValidationErrors) {\n\t                template += "<span class=\'k-file-validation-message k-text-error\'>" + that.localization.invalidFiles +"</span>";\n\t            } else {\n\t                template += "<span class=\'k-file-information\'>Total: " + files.length + " files, " + totalFileSize + "</span>";\n\t            }\n\n\t            template += "</span><strong class=\'k-upload-status\'></strong>";\n\n\t            return $(template);\n\t        },\n\n\t        _enqueueFile: function(name, data) {\n\t            var that = this;\n\t            var existingFileEntries;\n\t            var fileEntry;\n\t            var fileUid = data.fileNames[0].uid;\n\t            var fileList =  $(".k-upload-files", that.wrapper);\n\t            var options = that.options;\n\t            var template = options.template;\n\t            var templateData;\n\t            var removeEventArgs;\n\n\t            if (fileList.length === 0) {\n\t                fileList = $("<ul class=\'k-upload-files k-reset\'></ul>").appendTo(that.wrapper);\n\t                if (!that.options.showFileList) {\n\t                    fileList.hide();\n\t                }\n\n\t                that.wrapper.removeClass("k-upload-empty");\n\t            }\n\n\t            existingFileEntries = $(".k-file", fileList);\n\n\t            if (!template) {\n\t                if(data.fileNames.length === 1) {\n\t                    fileEntry = that._prepareDefaultSingleFileEntryTemplate(data);\n\t                } else {\n\t                    fileEntry = that._prepareDefaultMultipleFileEntriesTemplate(data);\n\t                }\n\t            } else {\n\t                templateData = that._prepareTemplateData(name, data);\n\t                template = kendo.template(template);\n\n\t                fileEntry = $("<li class=\'k-file\'>" + template(templateData) + "</li>");\n\t                fileEntry.find(".k-upload-action").addClass("k-button k-button-icon k-flat");\n\n\t                that.angular("compile", function(){\n\t                    return {\n\t                        elements: fileEntry,\n\t                        data: [ templateData ]\n\t                    };\n\t                });\n\t            }\n\n\t            fileEntry\n\t                .attr(kendo.attr("uid"), fileUid)\n\t                .appendTo(fileList)\n\t                .data(data);\n\n\t            if (!that._async) {\n\t                $(".k-progress", fileEntry).width(\'100%\');\n\t            }\n\n\t            if (!that.multiple && existingFileEntries.length > 0) {\n\t                removeEventArgs = {\n\t                    files: existingFileEntries.data("fileNames"),\n\t                    headers: {}\n\t                };\n\t                if (!that.trigger(REMOVE, removeEventArgs)) {\n\t                    that._module.onRemove({target : $(existingFileEntries, that.wrapper)}, removeEventArgs);\n\t                }\n\t            }\n\n\t            return fileEntry;\n\t        },\n\n\t        _removeFileEntry: function(fileEntry) {\n\t            var that = this;\n\t            var fileList = fileEntry.closest(".k-upload-files");\n\t            var allFiles, allCompletedFiles, allInvalidFiles;\n\n\t            fileEntry.remove();\n\t            allFiles = $(".k-file", fileList);\n\t            allCompletedFiles = $(".k-file-success, .k-file-error", fileList);\n\t            allInvalidFiles = $(".k-file-invalid", fileList);\n\n\t            if (allCompletedFiles.length === allFiles.length || allInvalidFiles.length === allFiles.length) {\n\t                this._hideActionButtons();\n\t            }\n\n\t            if (allFiles.length === 0) {\n\t                fileList.remove();\n\t                that.wrapper.addClass("k-upload-empty");\n\t                that._hideHeaderUploadstatus();\n\t            } else {\n\t                that._updateHeaderUploadStatus();\n\t            }\n\t        },\n\n\t        _fileAction: function(fileElement, actionKey, skipClear) {\n\t            var classDictionary = { remove: "k-i-x", cancel: "k-i-cancel", retry: "k-i-retry", pause: "k-i-pause-sm"};\n\t            var iconsClassDictionary = {remove: "k-i-close", cancel: "k-i-cancel", retry: "k-i-reload-sm", pause: "k-i-pause-sm"};\n\t            var firstActionButton;\n\n\t            if (!classDictionary.hasOwnProperty(actionKey)) {\n\t                return;\n\t            }\n\t            if(!skipClear){\n\t                this._clearFileAction(fileElement);\n\t            }\n\t            if (!this.options.template) {\n\t                if(!skipClear){\n\t                    fileElement.find(".k-upload-status .k-upload-action").remove();\n\t                }\n\t                fileElement.find(".k-upload-status").append(\n\t                    this._renderAction(classDictionary[actionKey], this.localization[actionKey], iconsClassDictionary[actionKey])\n\t                );\n\t            } else {\n\t                firstActionButton = fileElement.find(".k-upload-action").first();\n\t                if(!firstActionButton.find(".k-icon").length){\n\t                firstActionButton\n\t                        .addClass("k-button")\n\t                        .append("<span class=\'k-icon " + iconsClassDictionary[actionKey] + " " + classDictionary[actionKey] +\n\t                                "\' title=\'" + this.localization[actionKey] + "\'" +\n\t                                "aria-label=\'" + this.localization[actionKey] + "\'></span>")\n\t                        .show();\n\t                }else if (firstActionButton.next(".k-upload-action").length){\n\t                    firstActionButton.next(".k-upload-action")\n\t                        .addClass("k-button")\n\t                        .append("<span class=\'k-icon " + iconsClassDictionary[actionKey] + " " + classDictionary[actionKey] +\n\t                                "\' title=\'" + this.localization[actionKey] + "\'" +\n\t                                "aria-label=\'" + this.localization[actionKey] + "\'></span>")\n\t                        .show();\n\t                }\n\t            }\n\t        },\n\n\t        _fileState: function(fileEntry, stateKey) {\n\t            var localization = this.localization,\n\t                states = {\n\t                    uploading: {\n\t                        text : localization.statusUploading\n\t                    },\n\t                    uploaded: {\n\t                        text : localization.statusUploaded\n\t                    },\n\t                    failed: {\n\t                        text : localization.statusFailed\n\t                    }\n\t                },\n\t                currentState = states[stateKey];\n\n\t            if (currentState) {\n\t                $("span.k-file-state", fileEntry).text(currentState.text);\n\t            }\n\t        },\n\n\t        _renderAction: function (actionClass, actionText, iconClass) {\n\t            if (actionClass !== "") {\n\t                return $(\n\t                "<button type=\'button\' class=\'k-button k-button-icon k-flat k-upload-action\' aria-label=\'" + actionText + "\'>" +\n\t                    "<span class=\'k-icon "+ iconClass + " " + actionClass + "\' title=\'" + actionText + "\'></span>" +\n\t                "</button>"\n\t                ).on("focus", function() { $(this).addClass("k-state-focused"); })\n\t                 .on("blur", function() { $(this).removeClass("k-state-focused"); });\n\t            }\n\t            else {\n\t                return $(\n\t                "<button type=\'button\' class=\'k-button\'>" +\n\t                    actionText +\n\t                "</button>"\n\t                );\n\t            }\n\t        },\n\n\t        _clearFileAction: function(fileElement) {\n\t            $(".k-upload-action", fileElement).empty().hide();\n\t        },\n\n\t        _onFileAction: function(e) {\n\t            var that = this;\n\t            if (!that.wrapper.hasClass("k-state-disabled")) {\n\t                var button = $(e.target).closest(".k-upload-action");\n\t                var icon = button.find(".k-icon");\n\t                var fileEntry = button.closest(".k-file");\n\t                var files = fileEntry.data("fileNames");\n\t                var hasValidationErrors = that._filesContainValidationErrors(files);\n\t                var eventArgs = {\n\t                    files: files,\n\t                    headers: {}\n\t                };\n\n\t                that._retryClicked = false;\n\n\t                if (icon.hasClass("k-i-x")) {\n\t                    if (!that.trigger(REMOVE, eventArgs)) {\n\t                        that._module.onRemove({target : $(fileEntry, that.wrapper)}, eventArgs, !hasValidationErrors);\n\t                    }\n\t                } else if (icon.hasClass("k-i-cancel")) {\n\t                    that.trigger(CANCEL, eventArgs);\n\t                    that._module.onCancel({ target: $(fileEntry, that.wrapper) });\n\t                    that._checkAllComplete();\n\t                    that._updateHeaderUploadStatus();\n\t                } else if (icon.hasClass("k-i-pause-sm")) {\n\t                    that.trigger(PAUSE, eventArgs);\n\t                    that.pause(fileEntry);\n\t                    that._updateHeaderUploadStatus();\n\t                } else if (icon.hasClass("k-i-play-sm")) {\n\t                    that.trigger(RESUME, eventArgs);\n\t                    that.resume(fileEntry);\n\t                }else if (icon.hasClass("k-i-retry")) {\n\t                    $(".k-i-warning", fileEntry).remove();\n\t                    $(".k-progressbar", fileEntry).finish().show();\n\t                    that._module.onRetry({ target: $(fileEntry, that.wrapper) });\n\t                    that._retryClicked = true;\n\t                }\n\t            }\n\n\t            return false;\n\t        },\n\n\t        _onUploadSelected: function() {\n\t            var that = this;\n\t            var wrapper = that.wrapper;\n\n\t            if (!wrapper.hasClass("k-state-disabled")) {\n\t                this._module.onSaveSelected();\n\t            }\n\n\t            return false;\n\t        },\n\n\t        _onClearSelected: function() {\n\t            var that = this;\n\t            var wrapper = that.wrapper;\n\n\t            var clearEventArgs = { };\n\t            if(!wrapper.hasClass("k-state-disabled") && !that.trigger(CLEAR, clearEventArgs)) {\n\t                that.clearAllFiles();\n\t            }\n\n\t            return false;\n\t        },\n\n\t        _onFileProgress: function(e, percentComplete) {\n\t            var progressPct;\n\n\t            if (percentComplete > 100) {\n\t                percentComplete = 100;\n\t            }\n\n\t            $(".k-progressbar", e.target).removeClass(\'k-hidden\');\n\n\t            if (!this.options.template) {\n\t                progressPct = $(".k-upload-pct", e.target);\n\n\t                if (progressPct.length === 0) {\n\t                    $(".k-upload-status", e.target).prepend("<span class=\'k-upload-pct\'></span>");\n\t                }\n\n\t                if(percentComplete !== 100){\n\t                    $(".k-upload-pct", e.target).text(percentComplete + "%");\n\t                }else{\n\t                     $(".k-upload-pct", e.target).remove();\n\t                }\n\t                $(".k-progress", e.target).width(percentComplete + "%");\n\t            } else {\n\t                $(".k-progress", e.target).width(percentComplete + "%");\n\t            }\n\n\t            this.trigger(PROGRESS, {\n\t                files: getFileEntry(e).data("fileNames"),\n\t                percentComplete: percentComplete\n\t            });\n\t        },\n\n\t        _onUploadSuccess: function(e, response, xhr) {\n\t            var that = this;\n\t            var fileEntry = getFileEntry(e);\n\t            var files = fileEntry.data("fileNames");\n\t            var fileInfo = fileEntry.find(\'.k-file-information\');\n\t            var fileSize = fileEntry.find(\'.k-file-size\');\n\n\t            var prevented = that.trigger(SUCCESS, {\n\t                files: fileEntry.data("fileNames"),\n\t                response: response,\n\t                operation: "upload",\n\t                XMLHttpRequest: xhr\n\t            });\n\n\t            if(prevented) {\n\t                that._setUploadErrorState(fileEntry);\n\t            } else {\n\t                that._fileState(fileEntry, "uploaded");\n\t                fileEntry.removeClass(\'k-file-progress\').addClass(\'k-file-success\');\n\n\t                if(fileInfo.length > 0) {\n\t                    fileInfo.addClass(\'k-hidden\')\n\t                        .after(\'<span class="k-file-validation-message k-text-success">\' + files.length + \' \' + that.localization.uploadSuccess + \'</span>\');\n\t                } else if (fileSize.length > 0) {\n\t                    fileSize.addClass(\'k-hidden\')\n\t                        .after(\'<span class="k-file-validation-message k-text-success">\' + that.localization.uploadSuccess + \'</span>\');\n\t                }\n\n\t                that._updateHeaderUploadStatus();\n\n\t                if (that._supportsRemove()) {\n\t                    that._fileAction(fileEntry, REMOVE);\n\t                } else {\n\t                    that._clearFileAction(fileEntry);\n\t                }\n\t            }\n\n\t            that._hideUploadProgress(fileEntry);\n\n\t            that._checkAllComplete();\n\t        },\n\n\t        _onUploadError: function(e, xhr) {\n\t            var that = this;\n\t            var module = that._module;\n\t            var fileEntry = getFileEntry(e);\n\t            var fileUid = fileEntry.data("uid");\n\n\t            that._setUploadErrorState(fileEntry);\n\n\t            that.trigger(ERROR, {\n\t                operation: "upload",\n\t                files: fileEntry.data("fileNames"),\n\t                XMLHttpRequest: xhr\n\t            });\n\n\t            logToConsole("Server response: " + xhr.responseText);\n\n\t            if(!that.options.async.chunkSize){\n\t                that._hideUploadProgress(fileEntry);\n\t            }else{\n\t                if(module._decreasePosition){\n\t                    module._decreasePosition(fileUid);\n\t                }\n\t            }\n\n\t           that._checkAllComplete();\n\n\t            if(this.options.async.autoRetryAfter){\n\t               this._autoRetryAfter(fileEntry);\n\t            }\n\t        },\n\t        _autoRetryAfter: function(fileEntry){\n\t            var that = this;\n\t            var retries = this._module.retries;\n\n\t            if(!retries){\n\t                return;\n\t            }\n\n\t            if(!retries[fileEntry.data("uid")]){\n\t                retries[fileEntry.data("uid")] = 1;\n\t            }\n\n\t            if(retries[fileEntry.data("uid")] <= this.options.async.maxAutoRetries){\n\t                retries[fileEntry.data("uid")]++;\n\t                setTimeout(function(){\n\t                    that._module.performUpload(fileEntry);\n\t                },this.options.async.autoRetryAfter);\n\t            }\n\t        },\n\t        _setUploadErrorState: function(fileEntry) {\n\t            var that = this,\n\t                uploadPercentage,\n\t                files = fileEntry.data("fileNames"),\n\t                fileInfo = fileEntry.find(\'.k-file-information\'),\n\t                fileSize = fileEntry.find(\'.k-file-size\');\n\n\t            that._fileState(fileEntry, "failed");\n\t            fileEntry.removeClass(\'k-file-progress\').addClass(\'k-file-error\');\n\n\t            if(fileInfo.length > 0) {\n\t                fileInfo.addClass(\'k-hidden\')\n\t                    .after(\'<span class="k-file-validation-message k-text-error">\' + files.length + \' \' + that.localization.uploadFail + \'</span>\');\n\t            } else if (fileSize.length > 0) {\n\t                fileSize.addClass(\'k-hidden\')\n\t                    .after(\'<span class="k-file-validation-message k-text-error">\' + that.localization.uploadFail + \'</span>\');\n\t            }\n\n\t            that._updateUploadProgress(fileEntry);\n\n\t            uploadPercentage = $(\'.k-upload-pct\', fileEntry);\n\n\t            if (uploadPercentage.length > 0) {\n\t                uploadPercentage.remove();\n\t            }\n\n\t            this._updateHeaderUploadStatus();\n\t            this._fileAction(fileEntry, "retry");\n\t            this._fileAction(fileEntry, REMOVE, true);\n\n\t            if (that._retryClicked) {\n\t                fileEntry.find(".k-i-retry").parent().focus();\n\t            }\n\t        },\n\n\t       _updateUploadProgress: function(fileEntry){\n\t            var that = this;\n\n\t            if(!that.options.async.chunkSize){\n\t                $(\'.k-progress\', fileEntry).width("100%");\n\t            }else{\n\t                var fileUid = fileEntry.data("uid");\n\t                if(that._module.metaData){\n\t                    var fileMetaData = that._module.metaData[fileUid];\n\n\t                    if(fileMetaData){\n\t                        var percentComplete = fileMetaData.totalChunks ? Math.round(((fileMetaData.chunkIndex)/fileMetaData.totalChunks)*100):100;\n\n\t                        that._onFileProgress({ target : $(fileEntry, that.wrapper) }, percentComplete);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _hideUploadProgress: function(fileEntry) {\n\t            $(".k-progressbar", fileEntry)\n\t                .delay(PROGRESSHIDEDELAY)\n\t                .fadeOut(PROGRESSHIDEDURATION, function() {\n\t                    $(this).find(\'.k-progress\').css("width", "0%");\n\t                });\n\t        },\n\n\t        _showActionButtons: function() {\n\t            var that = this;\n\t            var actionsWrapper = $(".k-action-buttons", that.wrapper);\n\t            var uploadButton = $(".k-upload-selected", that.wrapper);\n\t            var clearButton = $(".k-clear-selected", that.wrapper);\n\n\t            if (uploadButton.length === 0) {\n\t                uploadButton = that._renderAction("", this.localization.uploadSelectedFiles)\n\t                                   .addClass("k-upload-selected")\n\t                                   .addClass("k-primary");\n\n\t                clearButton = that._renderAction("", this.localization.clearSelectedFiles)\n\t                                  .addClass("k-clear-selected");\n\t            }\n\n\t            if (!actionsWrapper.length) {\n\t                actionsWrapper = $("<div />")\n\t                    .addClass("k-action-buttons")\n\t                    .append(clearButton, uploadButton);\n\t            }\n\n\n\t            this.wrapper.append(actionsWrapper);\n\t        },\n\n\t        _hideActionButtons: function() {\n\t            $(".k-action-buttons", this.wrapper).remove();\n\t        },\n\n\t        _showHeaderUploadStatus: function(isUploading) {\n\t            var that = this;\n\t            var localization = that.localization;\n\t            var dropZone = $(".k-dropzone", that.wrapper);\n\t            var headerUploadStatus = $(\'.k-upload-status-total\', that.wrapper);\n\n\t            if (headerUploadStatus.length !== 0) {\n\t                headerUploadStatus.remove();\n\t            }\n\n\t            $(\'.k-dropzone-hint\', that.wrapper).addClass(\'k-hidden\');\n\n\t            headerUploadStatus = \'<strong class="k-upload-status k-upload-status-total"><span class="k-icon"></span></strong>\';\n\n\t            if(isUploading) {\n\t                headerUploadStatus = $(headerUploadStatus).append(localization.headerStatusUploading);\n\t                headerUploadStatus.find(".k-icon").addClass(headerStatusIcon.loading);\n\t            } else {\n\t                headerUploadStatus = $(headerUploadStatus).append(localization.headerStatusUploaded);\n\t                headerUploadStatus.find(".k-icon").addClass(headerStatusIcon.warning);\n\t            }\n\n\t            if (dropZone.length > 0) {\n\t                dropZone.append(headerUploadStatus);\n\t            } else {\n\t                $(\'.k-upload-button\', that.wrapper).after(headerUploadStatus);\n\t            }\n\t        },\n\n\t        _updateHeaderUploadStatus: function() {\n\t            var that = this;\n\t            var headerUploadStatus = $(\'.k-upload-status-total\', this.wrapper);\n\t            var currentlyUploading = $(\'.k-file\', that.wrapper).not(\'.k-file-success, .k-file-error, .k-file-invalid\');\n\t            var currentlyInvalid = $(\'.k-file-invalid\', that.wrapper);\n\t            var currentlyFailed = $(\'.k-file-error\', that.wrapper);\n\t            var currentlyPaused = $(\'.k-file\', that.wrapper).find(".k-i-play-sm");\n\t            var failedUploads, headerUploadStatusIcon;\n\n\t            if(currentlyPaused.length &&\n\t            (currentlyPaused.length === currentlyUploading.length || !that.options.async.concurrent)){\n\t                headerUploadStatusIcon = $(\'.k-icon\', headerUploadStatus)\n\t                                .removeClass()\n\t                                .addClass("k-icon")\n\t                                .addClass("k-i-pause-sm");\n\n\t                headerUploadStatus.html(headerUploadStatusIcon)\n\t                                  .append(that.localization.headerStatusPaused);\n\t            }else if (currentlyUploading.length === 0 || currentlyInvalid.length > 0 || currentlyFailed.length > 0) {\n\t                failedUploads = $(\'.k-file.k-file-error, .k-file.k-file-invalid\', that.wrapper);\n\n\t                headerUploadStatus = $(\'.k-upload-status-total\', that.wrapper);\n\t                headerUploadStatusIcon = $(\'.k-icon\', headerUploadStatus).removeClass().addClass("k-icon")\n\t                                              .addClass(failedUploads.length !== 0 ? headerStatusIcon.warning : headerStatusIcon.success);\n\n\t                headerUploadStatus.html(headerUploadStatusIcon)\n\t                                  .append(that.localization.headerStatusUploaded);\n\t            }\n\t        },\n\n\t        _hideHeaderUploadstatus: function() {\n\t            var that = this,\n\t                dropZone = that.options.dropZone;\n\n\t            $(\'.k-upload-status-total\', this.wrapper).remove();\n\n\t            if (dropZone === "") {\n\t                $(\'.k-dropzone-hint\', that.wrapper).removeClass(\'k-hidden\');\n\t            }\n\t        },\n\n\t        _onParentFormSubmit: function() {\n\t            var upload = this,\n\t                element = upload.element;\n\n\t            if(typeof this._module.onAbort !== \'undefined\'){\n\t                this._module.onAbort();\n\t            }\n\n\t            if (!element.value) {\n\t                var input = $(element);\n\n\t                // Prevent submitting an empty input\n\t                input.attr("disabled", "disabled");\n\n\t                window.setTimeout(function() {\n\t                    // Restore the input so the Upload remains functional\n\t                    // in case the user cancels the form submit\n\t                    input.removeAttr("disabled");\n\t                }, 0);\n\t            }\n\t        },\n\n\t        _onParentFormReset: function() {\n\t            $(".k-upload-files", this.wrapper).remove();\n\t        },\n\n\t        _supportsFormData: function() {\n\t            return typeof(FormData) != "undefined";\n\t        },\n\n\t        _supportsMultiple: function() {\n\t            var windows = this._userAgent().indexOf("Windows") > -1;\n\n\t            return !kendo.support.browser.opera &&\n\t                   !(kendo.support.browser.safari && windows);\n\t        },\n\n\t        _supportsDrop: function() {\n\t            var userAgent = this._userAgent().toLowerCase();\n\t            var isChrome = /chrome/.test(userAgent);\n\t            var isSafari = !isChrome && /safari/.test(userAgent);\n\t            var isWindowsSafari = isSafari && /windows/.test(userAgent);\n\n\t            return !isWindowsSafari && this._supportsFormData() && (this.options.async.saveUrl);\n\t        },\n\n\t        _userAgent: function() {\n\t            return navigator.userAgent;\n\t        },\n\n\t        _setupDropZone: function() {\n\t            var that = this;\n\n\t            var ns = that._ns;\n\t            var dropZone = $(".k-dropzone", that.wrapper)\n\n\t                .on("dragenter" + ns, stopEvent)\n\t                .on("dragover" + ns, function(e) { e.preventDefault(); })\n\t                .on("drop" + ns, $.proxy(that._onDrop, that));\n\n\t            if (!dropZone.find(".k-dropzone-hint").length) {\n\t                dropZone.append($("<em class=\'k-dropzone-hint\'>" + that.localization.dropFilesHere + "</em>"));\n\t            }\n\n\t            bindDragEventWrappers(dropZone, ns,\n\t                function() {\n\t                    if (!dropZone.closest(\'.k-upload\').hasClass("k-state-disabled")) {\n\t                        dropZone.addClass("k-dropzone-hovered");\n\t                    }\n\t                },\n\t                function() { dropZone.removeClass("k-dropzone-hovered"); });\n\n\t            that._bindDocumentDragEventWrappers(dropZone);\n\t        },\n\n\t        _setupCustomDropZone: function() {\n\t            var that = this;\n\t            var dropZone = $(that.options.dropZone);\n\n\t            if (!that.wrapper.find(".k-dropzone-hint").length) {\n\t                $(".k-dropzone", that.wrapper)\n\t                    .append($("<em class=\'k-dropzone-hint k-hidden\'>" + that.localization.dropFilesHere + "</em>"));\n\t            } else {\n\t                // Dropzone hint in upload should be hidden if customDropZone is used\n\t                $(\'.k-dropzone-hint\', that.wrapper).addClass(\'k-hidden\');\n\t            }\n\n\t            var ns = that._ns;\n\t            dropZone.on("dragenter" + ns, stopEvent)\n\t                    .on("dragover" + ns, function(e) { e.preventDefault(); })\n\t                    .on("drop" + ns, $.proxy(that._onDrop, that));\n\n\t            bindDragEventWrappers(dropZone, ns,\n\t                function(e) {\n\t                    if (!that.wrapper.hasClass("k-state-disabled")) {\n\t                        dropZone.removeClass("k-dropzone-hovered");\n\t                        dropZone.addClass("k-dropzone-hovered");\n\t                        $(e.target).addClass("k-dropzone-hovered");\n\t                    }\n\t                },\n\t                function() {\n\t                    dropZone.removeClass("k-dropzone-hovered");\n\t                    dropZone.find(\'.k-dropzone-hovered\').removeClass("k-dropzone-hovered");\n\t                }\n\t            );\n\n\t            that._bindDocumentDragEventWrappers(dropZone);\n\t        },\n\n\t        _bindDocumentDragEventWrappers: function(dropZone) {\n\t            var that = this;\n\t            var ns = that._ns;\n\n\t            bindDragEventWrappers($(document), ns,\n\t                function() {\n\t                    if (!that.wrapper.hasClass("k-state-disabled")) {\n\t                        dropZone.addClass("k-dropzone-active");\n\t                        dropZone.closest(\'.k-upload\').removeClass(\'k-upload-empty\');\n\t                        dropZone.find(\'.k-dropzone-hint\').removeClass(\'k-hidden\');\n\t                    }\n\t                },\n\t                function() {\n\t                    dropZone.removeClass("k-dropzone-active");\n\t                    dropZone.find(\'.k-dropzone-hint\').addClass(\'k-hidden\');\n\t                    if ($(\'li.k-file\', dropZone.closest(\'.k-upload\')).length === 0) {\n\t                        dropZone.closest(\'.k-upload\').addClass(\'k-upload-empty\');\n\t                    }\n\t                }\n\t            );\n\t        },\n\n\t        _toggleDropZone: function() {\n\t            var that = this,\n\t                dropZone = that.options.dropZone;\n\n\t            if (!that._supportsDrop()) {\n\t                return;\n\t            }\n\n\t            $(dropZone).off(that._ns);\n\t            $(".k-dropzone", that.wrapper).off(that._ns);\n\n\t            if (dropZone !== "") {\n\t                that._setupCustomDropZone();\n\t            } else {\n\t                that._setupDropZone();\n\t            }\n\t        },\n\n\t        _supportsRemove: function() {\n\t            return !!this.options.async.removeUrl;\n\t        },\n\n\t        _submitRemove: function(fileNames, eventArgs, onSuccess, onError) {\n\t            var upload = this,\n\t                removeField = upload.options.async.removeField || "fileNames",\n\t                params = $.extend(eventArgs.data, antiForgeryTokens());\n\n\t            params[removeField] = fileNames;\n\n\t            jQuery.ajax({\n\t                  type: this.options.async.removeVerb,\n\t                  dataType: "json",\n\t                  dataFilter: normalizeJSON,\n\t                  url: this.options.async.removeUrl,\n\t                  traditional: true,\n\t                  data: params,\n\t                  headers: eventArgs.headers,\n\t                  success: onSuccess,\n\t                  error: onError,\n\t                  xhrFields:{\n\t                    withCredentials: this.options.async.withCredentials\n\t                  }\n\t            });\n\t        },\n\n\t        _wrapInput: function(input) {\n\t            var that = this;\n\t            var options = that.options;\n\t            input.wrap("<div class=\'k-widget k-upload\'><div class=\'k-dropzone\'><div class=\'k-button k-upload-button\' aria-label=\'" + this.localization.select + "\'></div></div></div>");\n\n\t            if (!options.async.saveUrl) {\n\t                input.closest(".k-upload").addClass("k-upload-sync");\n\t            } else {\n\t                input.closest(".k-upload").addClass("k-upload-async");\n\t            }\n\n\t            input.closest(".k-upload").addClass("k-upload-empty");\n\n\t            input.closest(".k-button")\n\t                .append("<span>" + this.localization.select + "</span>");\n\n\t            return input.closest(".k-upload");\n\t        },\n\n\t        _checkAllComplete: function() {\n\t            if ($(".k-file.k-file-progress", this.wrapper).length === 0) {\n\t                this.trigger(COMPLETE);\n\t            }\n\t        },\n\n\t        _inputFiles: function(sourceInput) {\n\t            return inputFiles(sourceInput);\n\t        }\n\t    });\n\n\t    // Synchronous upload module\n\t    var syncUploadModule = function(upload) {\n\t        this.name = "syncUploadModule";\n\t        this.element = upload.wrapper;\n\t        this.upload = upload;\n\t        this.element\n\t            .closest("form")\n\t                .attr("enctype", "multipart/form-data")\n\t                .attr("encoding", "multipart/form-data");\n\t    };\n\n\t    syncUploadModule.prototype = {\n\t        onSelect: function(e, files) {\n\t            var upload = this.upload;\n\t            var sourceInput = $(e.target);\n\t            var filesContainErrors = upload._filesContainValidationErrors(files);\n\n\t            upload._addInput(sourceInput);\n\n\t            var fileData = { "fileNames": files };\n\n\t            if(filesContainErrors) {\n\t                sourceInput.remove();\n\t            } else {\n\t                fileData.relatedInput = sourceInput;\n\t            }\n\n\t            var file = upload._enqueueFile(getFileName(sourceInput), fileData);\n\n\t            if(filesContainErrors) {\n\t                upload._hideUploadProgress(file);\n\t            }\n\n\t            upload._fileAction(file, REMOVE);\n\t        },\n\n\t        onRemove: function(e) {\n\t            var fileEntry = getFileEntry(e);\n\t            var relatedInput = fileEntry.data("relatedInput");\n\n\t            if(relatedInput) {\n\t                relatedInput.remove();\n\t            }\n\n\t            this.upload._removeFileEntry(fileEntry);\n\t        }\n\t    };\n\n\t    var iframeUploadModule = function(upload) {\n\t        this.name = "iframeUploadModule";\n\t        this.element = upload.wrapper;\n\t        this.upload = upload;\n\t        this.iframes = [];\n\t    };\n\n\t    Upload._frameId = 0;\n\n\t    iframeUploadModule.prototype = {\n\t        onSelect: function(e, files) {\n\t            var upload = this.upload;\n\t            var sourceInput = $(e.target);\n\t            var hasValidationErrors = upload._filesContainValidationErrors(files);\n\n\t            var fileEntry = this.prepareUpload(sourceInput, files, hasValidationErrors);\n\n\t            if (upload.options.async.autoUpload) {\n\t                if(!hasValidationErrors) {\n\t                    this.performUpload(fileEntry);\n\t                } else {\n\t                    upload._fileAction(fileEntry, REMOVE);\n\t                    upload._showHeaderUploadStatus(false);\n\t                }\n\t            } else {\n\t                upload._fileAction(fileEntry, REMOVE);\n\n\t                if(!hasValidationErrors) {\n\t                    upload._showActionButtons();\n\t                } else {\n\t                    upload._updateHeaderUploadStatus();\n\t                }\n\t            }\n\n\t            if(hasValidationErrors) {\n\t                upload._hideUploadProgress(fileEntry);\n\t            }\n\t        },\n\n\t        prepareUpload: function(sourceInput, files, hasValidationErrors) {\n\t            var upload = this.upload;\n\t            var activeInput = $(upload.element);\n\t            var name = upload.options.async.saveField || sourceInput.attr("name");\n\t            var fileEntry, fileData, iframe, form;\n\n\t            upload._addInput(sourceInput);\n\t            sourceInput.attr("name", name);\n\n\t            if(!hasValidationErrors) {\n\t                iframe = this.createFrame(upload.name + "_" + Upload._frameId++);\n\t                this.registerFrame(iframe);\n\n\t                form = this.createForm(upload.options.async.saveUrl, iframe.attr("name"))\n\t                           .append(activeInput);\n\n\t                fileData = { "frame": iframe, "relatedInput": activeInput, "fileNames": files };\n\t            } else {\n\t                sourceInput.remove();\n\n\t                fileData = { "fileNames": files };\n\t            }\n\n\t            fileEntry = upload._enqueueFile(getFileName(sourceInput), fileData);\n\n\t            if(iframe) {\n\t                iframe.data({ "form": form, "file": fileEntry });\n\t            }\n\n\t            return fileEntry;\n\t        },\n\n\t        performUpload: function(fileEntry) {\n\t            var e = { files: fileEntry.data("fileNames") };\n\t            var iframe = fileEntry.data("frame");\n\t            var upload = this.upload;\n\t            var fileValidation = fileEntry.find(\'.k-file-validation-message\');\n\t            var fileInfo = fileEntry.find(\'.k-file-information\');\n\t            var fileSize = fileEntry.find(\'.k-file-size\');\n\n\t            if (!upload.trigger(UPLOAD, e)) {\n\t                upload._hideActionButtons();\n\t                upload._showHeaderUploadStatus(true);\n\n\t                iframe.appendTo(document.body);\n\n\t                var form = iframe.data("form")\n\t                    .attr("action", upload.options.async.saveUrl)\n\t                    .appendTo(document.body);\n\n\t                e.data = $.extend({ }, e.data, antiForgeryTokens());\n\t                for (var key in e.data) {\n\t                    var dataInput = form.find("input[name=\'" + key + "\']");\n\t                    if (dataInput.length === 0) {\n\t                        dataInput = $("<input>", { type: "hidden", name: key })\n\t                            .prependTo(form);\n\t                    }\n\t                    dataInput.val(e.data[key]);\n\t                }\n\n\t                upload._fileAction(fileEntry, CANCEL);\n\t                upload._fileState(fileEntry, "uploading");\n\t                $(fileEntry).removeClass("k-file-error").addClass("k-file-progress");\n\n\t                if(fileValidation.length > 0) {\n\t                    fileValidation.remove();\n\t                }\n\n\t                if(fileInfo.length > 0) {\n\t                    fileInfo.removeClass(\'k-hidden\');\n\t                } else if (fileSize.length > 0) {\n\t                    fileSize.removeClass(\'k-hidden\');\n\t                }\n\n\t                iframe\n\t                    .one("load", $.proxy(this.onIframeLoad, this));\n\n\t                form[0].submit();\n\t            } else {\n\t                upload._removeFileEntry(iframe.data("file"));\n\t                this.cleanupFrame(iframe);\n\t                this.unregisterFrame(iframe);\n\t            }\n\t        },\n\n\t        onSaveSelected: function() {\n\t            var module = this;\n\t            var upload = module.upload;\n\n\t            $(".k-file", this.element).each(function() {\n\t                var fileEntry = $(this);\n\t                var started = isFileUploadStarted(fileEntry);\n\t                var hasValidationErrors = upload._filesContainValidationErrors(fileEntry.data("fileNames"));\n\n\t                if (!started && !hasValidationErrors) {\n\t                    module.performUpload(fileEntry);\n\t                }\n\t            });\n\t        },\n\n\t        onIframeLoad: function(e) {\n\t            var iframe = $(e.target),\n\t                responseText;\n\n\t            try {\n\t                responseText = iframe.contents().text();\n\t            } catch (ex) {\n\t                responseText = "Error trying to get server response: " + ex;\n\t            }\n\n\t            this.processResponse(iframe, responseText);\n\t        },\n\n\t        processResponse: function(iframe, responseText) {\n\t            var fileEntry = iframe.data("file"),\n\t                module = this,\n\t                fakeXHR = {\n\t                    responseText: responseText\n\t                };\n\t            tryParseJSON(responseText,\n\t                function(jsonResult) {\n\t                    $.extend(fakeXHR, { statusText: "OK", status: "200" });\n\t                    module.upload._onFileProgress({ target : $(fileEntry, module.upload.wrapper) }, 100);\n\t                    module.upload._onUploadSuccess({ target : $(fileEntry, module.upload.wrapper) }, jsonResult, fakeXHR);\n\n\t                    module.cleanupFrame(iframe);\n\t                    module.unregisterFrame(iframe);\n\t                },\n\t                function() {\n\t                    $.extend(fakeXHR, { statusText: "error", status: "500" });\n\t                    module.upload._onUploadError({ target : $(fileEntry, module.upload.wrapper) }, fakeXHR);\n\t                }\n\t            );\n\t        },\n\n\t        onCancel: function(e) {\n\t            var iframe = $(e.target).data("frame");\n\n\t            this.stopFrameSubmit(iframe);\n\t            this.cleanupFrame(iframe);\n\t            this.unregisterFrame(iframe);\n\t            this.upload._removeFileEntry(iframe.data("file"));\n\t        },\n\n\t        onRetry: function(e) {\n\t            var fileEntry = getFileEntry(e);\n\t            this.performUpload(fileEntry);\n\t        },\n\n\t        onRemove: function(e, eventArgs, shouldSendRemoveRequest) {\n\t            var module = this;\n\t            var upload = module.upload;\n\t            var fileEntry = getFileEntry(e);\n\t            var iframe = fileEntry.data("frame");\n\n\t            if (iframe) {\n\t                module.unregisterFrame(iframe);\n\t                upload._removeFileEntry(fileEntry);\n\t                module.cleanupFrame(iframe);\n\t            } else {\n\t                if (fileEntry.hasClass("k-file-success")) {\n\t                    removeUploadedFile(fileEntry, upload, eventArgs, shouldSendRemoveRequest);\n\t                } else {\n\t                    upload._removeFileEntry(fileEntry);\n\t                }\n\t            }\n\t        },\n\n\t        onAbort: function() {\n\t            var element = this.element,\n\t                module = this;\n\n\t            $.each(this.iframes, function() {\n\t                $("input", this.data("form")).appendTo(element);\n\t                module.stopFrameSubmit(this[0]);\n\t                this.data("form").remove();\n\t                this.remove();\n\t            });\n\n\t            this.iframes = [];\n\t        },\n\n\t        createFrame: function(id) {\n\t            return $(\n\t                "<iframe" +\n\t                " name=\'" + id + "\'" +\n\t                " id=\'" + id + "\'" +\n\t                " style=\'display:none;\' />"\n\t            );\n\t        },\n\n\t        createForm: function(action, target) {\n\t            return $(\n\t                "<form enctype=\'multipart/form-data\' method=\'POST\'" +\n\t                " action=\'" + action + "\'" +\n\t                " target=\'" + target + "\'" +\n\t                "/>");\n\t        },\n\n\t        stopFrameSubmit: function(frame) {\n\t            if (typeof(frame.stop) != "undefined") {\n\t                frame.stop();\n\t            } else if (frame.document) {\n\t                frame.document.execCommand("Stop");\n\t            }\n\t        },\n\n\t        registerFrame: function(frame) {\n\t            this.iframes.push(frame);\n\t        },\n\n\t        unregisterFrame: function(frame) {\n\t            this.iframes = $.grep(this.iframes, function(value) {\n\t                return value.attr("name") != frame.attr("name");\n\t            });\n\t        },\n\n\t        cleanupFrame: function(frame) {\n\t            var form = frame.data("form");\n\n\t            frame.data("file").data("frame", null);\n\n\t            setTimeout(function () {\n\t                form.remove();\n\t                frame.remove();\n\t            }, 1);\n\t        }\n\t    };\n\n\t    // FormData upload module\n\t    var formDataUploadModule = function(upload) {\n\t        this.name = "formDataUploadModule";\n\t        this.element = upload.wrapper;\n\t        this.upload = upload;\n\t        this.position = {};\n\t        this.metaData = {};\n\t        this.cancelled = {};\n\t        this.resume = {};\n\t        this.paused = {};\n\t        this.retries = {};\n\t    };\n\n\t    formDataUploadModule.prototype = {\n\t        onSelect: function(e, files) {\n\t            var upload = this.upload;\n\t            var module = this;\n\t            var sourceElement = $(e.target);\n\t            var fileEntries = this.prepareUpload(sourceElement, files);\n\t            var hasValidationErrors;\n\t            var prev;\n\n\t            $.each(fileEntries, function(index) {\n\t                hasValidationErrors = upload._filesContainValidationErrors($(this.data("fileNames")));\n\n\t                if (upload.options.async.autoUpload) {\n\t                    if(!hasValidationErrors) {\n\t                        if(upload.options.async.chunkSize){\n\t                            module.prepareChunk(this);\n\t                            prev = this.prev();\n\n\t                            if(upload.options.async.concurrent || (index === 0 && !prev.length) ||\n\t                             (index === 0 && prev.hasClass("k-file-success"))){\n\t                                module.performUpload(this);\n\t                            }\n\t                        }else{\n\t                            module.performUpload(this);\n\t                        }\n\t                    } else {\n\t                        upload._fileAction(this, REMOVE);\n\t                        upload._showHeaderUploadStatus(false);\n\t                    }\n\t                } else {\n\t                    upload._fileAction(this, REMOVE);\n\n\t                    if(!hasValidationErrors) {\n\t                        upload._showActionButtons();\n\t                        this.addClass("k-toupload");\n\t                    } else {\n\t                        upload._updateHeaderUploadStatus();\n\t                    }\n\t                }\n\n\t                if(hasValidationErrors) {\n\t                    upload._hideUploadProgress(this);\n\t                }\n\t            });\n\t        },\n\n\t        prepareUpload: function(sourceElement, files) {\n\t            var fileEntries = this.enqueueFiles(files);\n\n\t            if (sourceElement.is("input")) {\n\t                $.each(fileEntries, function() {\n\t                    $(this).data("relatedInput", sourceElement);\n\t                });\n\t                sourceElement.data("relatedFileEntries", fileEntries);\n\t                this.upload._addInput(sourceElement);\n\t            }\n\n\t            return fileEntries;\n\t        },\n\n\t        enqueueFiles: function(files) {\n\t            var upload = this.upload;\n\t            var name;\n\t            var i;\n\t            var filesLength = files.length;\n\t            var currentFile;\n\t            var fileEntry;\n\t            var fileEntries = [];\n\n\t            if (upload.options.async.batch === true) {\n\t                name = $.map(files, function(file) { return file.name; }).join(", ");\n\n\t                if(upload.directory || upload.options.directoryDrop){\n\t                    $(files).each(function(){\n\t                        if(this.rawFile.webkitRelativePath || this.rawFile.relativePath){\n\t                            this.name = this.rawFile.webkitRelativePath || this.rawFile.relativePath;\n\t                        }\n\t                    });\n\t                }\n\n\t                fileEntry = upload._enqueueFile(name, { fileNames: files });\n\t                fileEntry.data("files", files);\n\n\t                fileEntries.push(fileEntry);\n\t            } else {\n\t                for (i = 0; i < filesLength; i++) {\n\t                    currentFile = files[i];\n\t                    name = currentFile.name;\n\t                    if(upload.directory || upload.options.directoryDrop){\n\t                        if(currentFile.rawFile.webkitRelativePath || currentFile.rawFile.relativePath){\n\t                            currentFile.name = currentFile.rawFile.webkitRelativePath || currentFile.rawFile.relativePath;\n\t                        }\n\t                    }\n\t                    fileEntry = upload._enqueueFile(name, { fileNames: [ currentFile ] });\n\t                    fileEntry.data("files", [ currentFile ]);\n\n\t                    fileEntries.push(fileEntry);\n\t                }\n\t            }\n\n\t            return fileEntries;\n\t        },\n\n\t        performUpload: function(fileEntry) {\n\t            var upload = this.upload,\n\t                formData = this.createFormData(),\n\t                xhr = this.createXHR(),\n\t                e = {\n\t                    files: fileEntry.data("fileNames"),\n\t                    XMLHttpRequest: xhr\n\t                },\n\t                files;\n\t            var fileValidation = fileEntry.find(\'.k-file-validation-message\');\n\t            var fileInfo = fileEntry.find(\'.k-file-information\');\n\t            var fileSize = fileEntry.find(\'.k-file-size\');\n\n\t            if (!upload.trigger(UPLOAD, e)) {\n\t                if (fileEntry.find(".k-i-cancel").length === 0) {\n\t                    if (upload.options.async.chunkSize) {\n\t                        upload._fileAction(fileEntry, PAUSE);\n\t                    }\n\t                    upload._fileAction(fileEntry, CANCEL, upload.options.async.chunkSize);\n\t                }\n\n\t                if (!upload.wrapper.find(".k-toupload").length) {\n\t                    upload._hideActionButtons();\n\t                }\n\n\t                upload._showHeaderUploadStatus(true);\n\n\t                if (e.formData) {\n\t                    formData = e.formData;\n\t                } else {\n\t                    e.data = $.extend({ }, e.data, antiForgeryTokens());\n\t                    for (var key in e.data) {\n\t                        formData.append(key, e.data[key]);\n\t                    }\n\n\t                    files = fileEntry.data("files");\n\t                    if (files) {\n\t                        this.populateFormData(formData, files);\n\t                    }\n\t                }\n\n\t                upload._fileState(fileEntry, "uploading");\n\t                $(fileEntry).removeClass("k-file-error").addClass("k-file-progress");\n\n\t                if(fileValidation.length > 0) {\n\t                    fileValidation.remove();\n\t                }\n\n\t                if(fileInfo.length > 0) {\n\t                    fileInfo.removeClass(\'k-hidden\');\n\t                } else if (fileSize.length > 0) {\n\t                    fileSize.removeClass(\'k-hidden\');\n\t                }\n\n\t                if (upload.options.async.useArrayBuffer && window.FileReader) {\n\t                    this._readFile(upload.options.async.saveUrl, formData, fileEntry, xhr);\n\t                } else {\n\t                    this.postFormData(upload.options.async.saveUrl, formData, fileEntry, xhr);\n\t                }\n\t            } else {\n\t                this.removeFileEntry(fileEntry);\n\t            }\n\t        },\n\n\t        _readFile: function(saveUrl, formData, fileEntry, xhr){\n\t            var that = this;\n\t            var upload = that.upload;\n\t            var file = fileEntry.data("files")[0];\n\n\t            var reader = new FileReader();\n\t            reader.onload = function (e) {\n\t                try{\n\t                    if(!that.fileArrayBuffer){\n\t                        that.fileArrayBuffer = e.target.result;\n\t                    }else{\n\t                        that.fileArrayBuffer = that._appendBuffer(that.fileArrayBuffer, e.target.result);\n\t                    }\n\t                }catch(err) {\n\t                    upload._onUploadError({ target : $(fileEntry, upload.wrapper) }, xhr);\n\t                    return;\n\t                }\n\n\t                if(that.position[file.uid] > file.size){\n\t                    that.postFormData(upload.options.async.saveUrl, that.fileArrayBuffer, fileEntry, xhr);\n\t                    that.fileArrayBuffer = null;\n\t                }else{\n\t                    that._readFile(saveUrl, formData, fileEntry, xhr);\n\t                }\n\t            };\n\t            reader.onerror = function () {\n\t                upload._onUploadError({ target : $(fileEntry, upload.wrapper) }, xhr);\n\t            };\n\t            reader.readAsArrayBuffer(that._getCurrentChunk(file.rawFile, file.uid));\n\t        },\n\n\t        _appendBuffer: function(buffer1, buffer2) {\n\t            var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n\n\t            tmp.set(new Uint8Array(buffer1), 0);\n\t            tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n\n\t            return tmp.buffer;\n\t        },\n\n\t        onSaveSelected: function() {\n\t            var module = this;\n\t            var upload = module.upload;\n\n\t            $(".k-toupload", this.element).filter(function() {\n\t                var fileEntry = $(this);\n\t                var started = isFileUploadStarted(fileEntry);\n\t                var hasValidationErrors = upload._filesContainValidationErrors(fileEntry.data("fileNames"));\n\n\t                return !started && !hasValidationErrors;\n\t            }).each(function(index) {\n\t                var fileEntry = $(this);\n\t                var prevEntry = fileEntry.prev();\n\n\t                fileEntry.removeClass("k-toupload");\n\t                if(upload.options.async.chunkSize){\n\t                    module.prepareChunk(fileEntry);\n\n\t                    if(upload.options.async.concurrent || (index === 0 && !prevEntry.length) ||\n\t                        (index === 0 && prevEntry.hasClass("k-file-success") || prevEntry.hasClass("k-file-error"))){\n\t                        module.performUpload(fileEntry);\n\t                    }\n\t                }else{\n\t                    module.performUpload(fileEntry);\n\t                }\n\t            });\n\t        },\n\n\t        onCancel: function(e) {\n\t            var fileEntry = getFileEntry(e);\n\n\t            if(this.upload.options.async.chunkSize){\n\t                this.cancelled[fileEntry.data("uid")] = true;\n\t            }\n\t            this.stopUploadRequest(fileEntry);\n\t            this.removeFileEntry(fileEntry);\n\t        },\n\n\t        onPause: function(e) {\n\t            var fileEntry = getFileEntry(e);\n\t            var fileUid = fileEntry.data("uid");\n\t            var async = this.upload.options.async;\n\n\t            if(async.chunkSize){\n\t                this.retries[fileUid] = async.maxAutoRetries + 1;\n\t                this.paused[fileUid] = true;\n\t                this.resume[fileUid] = false;\n\t            }\n\t        },\n\n\t        onResume: function(e) {\n\t            var fileEntry = getFileEntry(e);\n\t            var fileUid = fileEntry.data("uid");\n\n\t            if(this.upload.options.async.chunkSize){\n\t                delete this.paused[fileUid];\n\t                this.resume[fileUid] = true;\n\t                this.retries[fileEntry.data("uid")] = 1;\n\t                this._increaseChunkIndex(fileUid);\n\t                this.performUpload(fileEntry);\n\t            }\n\t        },\n\n\t        onRetry: function(e) {\n\t            var fileEntry = getFileEntry(e);\n\t            var async = this.upload.options.async;\n\n\t            if(async.chunkSize){\n\t                this.retries[fileEntry.data("uid")] = async.maxAutoRetries + 1;\n\t                delete this.paused[fileEntry.data("uid")];\n\t            }\n\n\t            this.performUpload(fileEntry);\n\t        },\n\n\t        onRemove: function(e, eventArgs, shouldSendRemoveRequest) {\n\t            var module = this;\n\t            var upload = module.upload;\n\t            var fileEntry = getFileEntry(e);\n\t            var async = this.upload.options.async;\n\n\t            if(async.chunkSize){\n\t                this.retries[fileEntry.data("uid")] = async.maxAutoRetries + 1;\n\t            }\n\n\t            if (fileEntry.hasClass("k-file-success")) {\n\t                removeUploadedFile(fileEntry, upload, eventArgs, shouldSendRemoveRequest);\n\t            } else {\n\t                module.removeFileEntry(fileEntry);\n\t            }\n\t        },\n\n\t        createXHR: function() {\n\t            return new XMLHttpRequest();\n\t        },\n\n\t        postFormData: function(url, data, fileEntry, xhr) {\n\t            var module = this;\n\n\t            fileEntry.data("request", xhr);\n\n\t            xhr.addEventListener("load", function(e) {\n\t                module.onRequestSuccess.call(module, e, fileEntry);\n\t            }, false);\n\n\t            xhr.addEventListener(ERROR, function(e) {\n\t                module.onRequestError.call(module, e, fileEntry);\n\t            }, false);\n\n\t            xhr.upload.addEventListener("progress", function(e) {\n\t                module.onRequestProgress.call(module, e, fileEntry);\n\t            }, false);\n\n\t            xhr.open("POST", url, true);\n\t            xhr.withCredentials = this.upload.options.async.withCredentials;\n\n\t            var accept = this.upload.options.async.accept;\n\t            if (accept) {\n\t                xhr.setRequestHeader("Accept", accept);\n\t            }\n\n\t            xhr.send(data);\n\t        },\n\n\t        createFormData: function() {\n\t            return new FormData();\n\t        },\n\n\t        populateFormData: function(data, files) {\n\t            var chunk;\n\t            var i;\n\t            var length = files.length;\n\t            var uid;\n\t            var upload = this.upload;\n\n\t            if(upload.options.async.chunkSize){\n\t                 uid = files[0].uid;\n\t                 chunk = this._getCurrentChunk(files[0].rawFile, uid);\n\n\t                data.append(\n\t                    upload.options.async.saveField || upload.name,\n\t                    chunk\n\t                );\n\n\t                var serializedMetaData = JSON.stringify(this.metaData[uid]);\n\t                data.append("metadata", serializedMetaData);\n\t            }else{\n\t                 for (i = 0; i < length; i++) {\n\t                    data.append(\n\t                        upload.options.async.saveField || upload.name,\n\t                        files[i].rawFile\n\t                    );\n\t                 }\n\t            }\n\n\t            return data;\n\t        },\n\n\t        onRequestSuccess: function(e, fileEntry) {\n\t            var xhr = e.target,\n\t                module = this;\n\n\t            function raiseError() {\n\t                module.upload._onUploadError({ target : $(fileEntry, module.upload.wrapper) }, xhr);\n\t            }\n\n\t            function parseSuccess(jsonResult) {\n\t                var batch = module.upload.options.async.batch;\n\t                var chunkSize = module.upload.options.async.chunkSize;\n\t                var concurrent = module.upload.options.async.concurrent;\n\t                var fileUid = jsonResult.fileUid;\n\n\t                if(module.paused[fileUid] || module.cancelled[fileUid]){\n\t                    return;\n\t                }\n\n\t                delete module.retries[fileUid];\n\n\t                if(chunkSize && !batch && !jsonResult.uploaded){\n\n\t                    module._increaseChunkIndex(fileUid);\n\t                    module.performUpload(fileEntry);\n\t                }else if(chunkSize && !batch && !concurrent && fileEntry.next().length && !fileEntry.next().hasClass("k-toupload")) {\n\t                        module.upload._onFileProgress({ target : $(fileEntry, module.upload.wrapper) }, 100);\n\t                        module._resetChunkIndex(fileUid);\n\t                        module.upload._onUploadSuccess({ target : $(fileEntry, module.upload.wrapper) }, jsonResult, xhr);\n\n\t                        module.performUpload(fileEntry.next());\n\t                }else{\n\t                    module.upload._onFileProgress({ target : $(fileEntry, module.upload.wrapper) }, 100);\n\t                    module.upload._onUploadSuccess({ target : $(fileEntry, module.upload.wrapper) }, jsonResult, xhr);\n\t                    module.cleanupFileEntry(fileEntry);\n\t                }\n\t            }\n\n\t            if (xhr.status >= 200 && xhr.status <= 299) {\n\t                tryParseJSON(xhr.responseText,\n\t                    parseSuccess,\n\t                    raiseError\n\t                );\n\t            } else {\n\t                raiseError();\n\t            }\n\t        },\n\n\t        onRequestError: function(e, fileEntry) {\n\t            var xhr = e.target;\n\n\t            this.upload._onUploadError({ target : $(fileEntry, this.upload.wrapper) }, xhr);\n\t        },\n\n\t        cleanupFileEntry: function(fileEntry) {\n\t            var relatedInput = fileEntry.data("relatedInput"),\n\t                uploadComplete = true;\n\n\t            if (relatedInput) {\n\t                $.each(relatedInput.data("relatedFileEntries") || [], function() {\n\t                    // Exclude removed file entries and self\n\t                    if (this.parent().length > 0 && this[0] != fileEntry[0]) {\n\t                        uploadComplete = uploadComplete && this.hasClass("k-file-success");\n\t                    }\n\t                });\n\n\t                if (uploadComplete) {\n\t                    relatedInput.remove();\n\t                }\n\t            }\n\t        },\n\n\t        removeFileEntry: function(fileEntry) {\n\t            var chunkSize = this.upload.options.async.chunkSize;\n\t            var concurrent = this.upload.options.async.concurrent;\n\t            var isUploadButtonVisible = this.upload.wrapper.find(".k-upload-selected").length > 0;\n\n\t            this.cleanupFileEntry(fileEntry);\n\t            if(chunkSize && !concurrent && !isUploadButtonVisible){\n\t                 if(fileEntry.next().length){\n\t                     this.performUpload(fileEntry.next());\n\t                 }\n\t            }\n\t            this.upload._removeFileEntry(fileEntry);\n\t        },\n\n\t        onRequestProgress: function(e, fileEntry) {\n\t            var percentComplete = Math.round(e.loaded * 100 / e.total);\n\t            var fileUid = fileEntry.data("uid");\n\t            var fileMetaData;\n\n\t            if(this.upload.options.async.chunkSize){\n\t                fileMetaData = this.metaData[fileUid];\n\t                percentComplete = fileMetaData && fileMetaData.totalChunks ? Math.round(((fileMetaData.chunkIndex)/fileMetaData.totalChunks)*100):100;\n\t            }\n\t            this.upload._onFileProgress({ target : $(fileEntry, this.upload.wrapper) }, percentComplete);\n\t        },\n\n\t        stopUploadRequest: function(fileEntry) {\n\t            fileEntry.data("request").abort();\n\t        },\n\n\t        prepareChunk: function (fileEntry) {\n\t            var file = fileEntry.data("files")[0];\n\t            var rawFile = file.rawFile;\n\t            var uid = file.uid;\n\t            var chunkSize  = this.upload.options.async.chunkSize;\n\t            this.position[uid] = 0;\n\n\t            this.metaData[uid] = {\n\t                chunkIndex: 0,\n\t                contentType: rawFile.type,\n\t                fileName: rawFile.name,\n\t                relativePath: file.name,\n\t                totalFileSize: rawFile.size,\n\t                totalChunks: Math.ceil(rawFile.size / chunkSize),\n\t                uploadUid: uid\n\t            };\n\t        },\n\n\t        _decreaseChunkIndex: function(uid){\n\t            this.metaData[uid].chunkIndex--;\n\t        },\n\n\t        _increaseChunkIndex: function(uid){\n\t            this.metaData[uid].chunkIndex++;\n\t        },\n\n\t        _resetChunkIndex: function(uid){\n\t            this.metaData[uid].chunkIndex = 0;\n\t        },\n\n\t        _decreasePosition: function(uid){\n\t            this.position[uid] -= this.upload.options.async.chunkSize;\n\t        },\n\n\t        _getCurrentChunk: function (file, uid) {\n\t            var oldPosition = this.position[uid];\n\t            var methodToInvoke;\n\t            var async = this.upload.options.async;\n\t            var chunkSize = async.chunkSize || async.bufferChunkSize;\n\n\t            if(!this.position[uid]){\n\t                this.position[uid] = 0;\n\t            }\n\t            this.position[uid] += chunkSize;\n\n\t            if (!!(methodToInvoke = this._getChunker(file))){\n\t                return file[methodToInvoke](oldPosition, this.position[uid]);\n\t            }else{\n\t                return file;\n\t            }\n\t        },\n\n\t        _getChunker: function (file) {\n\t            if (file.slice) {\n\t                return "slice";\n\t            }else if (file.mozSlice) {\n\t                return "mozSlice";\n\t            }else if (file.webkitSlice) {\n\t                    return "webkitSlice";\n\t            }else {\n\t                return null;\n\t            }\n\t        }\n\t    };\n\n\t    // Helper functions\n\t    function getFileName(input) {\n\t        return $.map(inputFiles(input), function (file) {\n\t            return file.name;\n\t        }).join(", ");\n\t    }\n\n\t    function inputFiles($input) {\n\t        var input = $input[0];\n\n\t        if (input.files) {\n\t            return getAllFileInfo(input.files);\n\t        } else {\n\t            return [{\n\t                name: stripPath(input.value),\n\t                extension: getFileExtension(input.value),\n\t                size: null\n\t            }];\n\t        }\n\t    }\n\n\t    function getAllFileInfo(rawFiles) {\n\t        return $.map(rawFiles, function (file) {\n\t            return getFileInfo(file);\n\t        });\n\t    }\n\n\t    function getFileInfo(rawFile) {\n\t        // Older Firefox versions (before 3.6) use fileName and fileSize\n\t        var fileName = rawFile.name || rawFile.fileName;\n\t        return {\n\t            name: kendo.htmlEncode(fileName),\n\t            extension: getFileExtension(fileName),\n\t            size: typeof rawFile.size == "number" ? rawFile.size : rawFile.fileSize, //rawFile.size || rawFile.fileSize,\n\t            rawFile: rawFile\n\t        };\n\t    }\n\n\t    function getFileExtension(fileName) {\n\t        var matches = fileName.match(rFileExtension);\n\t        return matches ? matches[0] : "";\n\t    }\n\n\t    function stripPath(name) {\n\t        var slashIndex = name.lastIndexOf("\\\\");\n\t        return (slashIndex != -1) ? name.substr(slashIndex + 1) : name;\n\t    }\n\n\t    function assignGuidToFiles(files, unique) {\n\t        var uid = kendo.guid();\n\n\t        return $.map(files, function(file){\n\t            file.uid = unique ? kendo.guid() : uid;\n\n\t            return file;\n\t        });\n\t    }\n\n\t    function validateFiles(files, validationInfo) {\n\t        var allowedExtensions = parseAllowedExtensions(validationInfo.allowedExtensions);\n\t        var maxFileSize = validationInfo.maxFileSize;\n\t        var minFileSize = validationInfo.minFileSize;\n\n\t        for(var i = 0; i < files.length; i++) {\n\t            validateFileExtension(files[i], allowedExtensions);\n\t            validateFileSize(files[i], minFileSize, maxFileSize);\n\t        }\n\t    }\n\n\t    function parseAllowedExtensions(extensions) {\n\t        var allowedExtensions = $.map(extensions, function(ext){\n\t            var parsedExt = (ext.substring(0, 1) === ".") ? ext : ("." + ext);\n\t            return parsedExt.toLowerCase();\n\t        });\n\n\t        return allowedExtensions;\n\t    }\n\n\t    function validateFileExtension(file, allowedExtensions) {\n\t        if(allowedExtensions.length > 0) {\n\t            if(allowedExtensions.indexOf(file.extension.toLowerCase()) < 0) {\n\t                file.validationErrors = file.validationErrors || [];\n\t                if($.inArray(INVALIDFILEEXTENSION, file.validationErrors) === -1) {\n\t                    file.validationErrors.push(INVALIDFILEEXTENSION);\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    function validateFileSize(file, minFileSize, maxFileSize) {\n\t        if(minFileSize !== 0 && file.size < minFileSize) {\n\t            file.validationErrors = file.validationErrors || [];\n\t            if($.inArray(INVALIDMINFILESIZE, file.validationErrors) === -1) {\n\t                file.validationErrors.push(INVALIDMINFILESIZE);\n\t            }\n\t        }\n\n\t        if(maxFileSize !== 0 && file.size > maxFileSize) {\n\t            file.validationErrors = file.validationErrors || [];\n\t            if($.inArray(INVALIDMAXFILESIZE, file.validationErrors) === -1) {\n\t                file.validationErrors.push(INVALIDMAXFILESIZE);\n\t            }\n\t        }\n\t    }\n\n\t    function getTotalFilesSizeMessage(files) {\n\t        var totalSize = 0;\n\n\t        if(typeof files[0].size == "number") {\n\t            for(var i = 0; i < files.length; i++) {\n\t                if(files[i].size) {\n\t                    totalSize += files[i].size;\n\t                }\n\t            }\n\t        } else {\n\t            return "";\n\t        }\n\n\t        totalSize /= 1024;\n\n\t        if(totalSize < 1024) {\n\t            return totalSize.toFixed(2) + " KB";\n\t        } else {\n\t            return (totalSize / 1024).toFixed(2) + " MB";\n\t        }\n\t    }\n\n\t    function shouldRemoveFileEntry(upload) {\n\t        return !upload.multiple && $(".k-file", upload.wrapper).length > 1;\n\t    }\n\n\t    function removeUploadedFile(fileEntry, upload, eventArgs, shouldSendRemoveRequest) {\n\t        if (!upload._supportsRemove()) {\n\t            if(shouldRemoveFileEntry(upload) || !shouldSendRemoveRequest) {\n\t                upload._removeFileEntry(fileEntry);\n\t            }\n\n\t            return;\n\t        }\n\n\t        var files = fileEntry.data("fileNames");\n\t        var fileNames = $.map(files, function(file) { return file.name; });\n\n\t        if(shouldSendRemoveRequest === false) {\n\t            upload._removeFileEntry(fileEntry);\n\n\t            return;\n\t        }\n\n\t        upload._submitRemove(fileNames, eventArgs,\n\t            function onSuccess(data, textStatus, xhr) {\n\t                var prevented = upload.trigger(SUCCESS, {\n\t                    operation: "remove",\n\t                    files: files,\n\t                    response: data,\n\t                    XMLHttpRequest: xhr\n\t                });\n\n\t                if(!prevented) {\n\t                    upload._removeFileEntry(fileEntry);\n\t                }\n\t            },\n\n\t            function onError(xhr) {\n\t                if(shouldRemoveFileEntry(upload)) {\n\t                    upload._removeFileEntry(fileEntry);\n\t                }\n\n\t                upload.trigger(ERROR, {\n\t                    operation: "remove",\n\t                    files: files,\n\t                    XMLHttpRequest: xhr\n\t                });\n\n\t                logToConsole("Server response: " + xhr.responseText);\n\t            }\n\t        );\n\t    }\n\n\t    function tryParseJSON(input, onSuccess, onError) {\n\t        var success = false,\n\t            json = "";\n\n\t        try {\n\t            json = $.parseJSON(normalizeJSON(input));\n\t            success = true;\n\t        } catch (e) {\n\t            onError();\n\t        }\n\n\t        if (success) {\n\t            onSuccess(json);\n\t        }\n\t    }\n\n\t    function normalizeJSON(input) {\n\t        if (typeof input === "undefined" || input === "") {\n\t            input = "{}";\n\t        }\n\n\t        return input;\n\t    }\n\n\t    function stopEvent(e) {\n\t        e.stopPropagation(); e.preventDefault();\n\t    }\n\n\t    function bindDragEventWrappers(element, namespace, onDragEnter, onDragLeave) {\n\t        var hideInterval, lastDrag;\n\n\t        element\n\t            .on("dragenter" + namespace, function(e) {\n\t                onDragEnter(e);\n\t                lastDrag = new Date();\n\n\t                if (!hideInterval) {\n\t                    hideInterval = setInterval(function() {\n\t                        var sinceLastDrag = new Date() - lastDrag;\n\t                        if (sinceLastDrag > 100) {\n\t                            onDragLeave();\n\n\t                            clearInterval(hideInterval);\n\t                            hideInterval = null;\n\t                        }\n\t                    }, 100);\n\t                }\n\t            })\n\t            .on("dragover" + namespace, function() {\n\t                lastDrag = new Date();\n\t            });\n\t    }\n\n\t    function isFileUploadStarted(fileEntry) {\n\t        return fileEntry.is(".k-file-progress, .k-file-success, .k-file-error");\n\t    }\n\n\t    function getFileEntry(e) {\n\t        return $(e.target).closest(".k-file");\n\t    }\n\n\t    kendo.ui.plugin(Upload);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1017)))\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.upload.js?')}}]);