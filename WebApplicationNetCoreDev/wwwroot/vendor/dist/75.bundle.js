(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{"./node_modules/@progress/kendo-ui/js/spreadsheet/dialogs.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/dialogs.js ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1548);\n\tmodule.exports = __webpack_require__(1548);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 8:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.validator */ "./node_modules/@progress/kendo-ui/js/kendo.validator.js");\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1522:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.binder */ "./node_modules/@progress/kendo-ui/js/kendo.binder.js");\n\n/***/ }),\n\n/***/ 1548:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20), __webpack_require__(1522), __webpack_require__(8) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function(kendo) {\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    /* jshint eqnull:true */\n\t    /* jshint latedef: false */\n\t    /* jshint multistr: true */\n\n\t    var $ = kendo.jQuery;\n\t    var ObservableObject = kendo.data.ObservableObject;\n\n\t    var MESSAGES = kendo.spreadsheet.messages.dialogs = {\n\t        apply: "Apply",\n\t        save: "Save",\n\t        cancel: "Cancel",\n\t        remove: "Remove",\n\t        retry: "Retry",\n\t        revert: "Revert",\n\t        okText: "OK",\n\t        formatCellsDialog: {\n\t            title: "Format",\n\t            categories: {\n\t                number: "Number",\n\t                currency: "Currency",\n\t                date: "Date"\n\t            }\n\t        },\n\t        fontFamilyDialog: {\n\t            title: "Font"\n\t        },\n\t        fontSizeDialog: {\n\t            title: "Font size"\n\t        },\n\t        bordersDialog: {\n\t            title: "Borders"\n\t        },\n\t        alignmentDialog: {\n\t            title: "Alignment",\n\t            buttons: {\n\t                justtifyLeft: "Align left",\n\t                justifyCenter: "Center",\n\t                justifyRight: "Align right",\n\t                justifyFull: "Justify",\n\t                alignTop: "Align top",\n\t                alignMiddle: "Align middle",\n\t                alignBottom: "Align bottom"\n\t            }\n\t        },\n\t        mergeDialog: {\n\t            title: "Merge cells",\n\t            buttons: {\n\t                mergeCells: "Merge all",\n\t                mergeHorizontally: "Merge horizontally",\n\t                mergeVertically: "Merge vertically",\n\t                unmerge: "Unmerge"\n\t            }\n\t        },\n\t        freezeDialog: {\n\t            title: "Freeze panes",\n\t            buttons: {\n\t                freezePanes: "Freeze panes",\n\t                freezeRows: "Freeze rows",\n\t                freezeColumns: "Freeze columns",\n\t                unfreeze: "Unfreeze panes"\n\t            }\n\t        },\n\t        confirmationDialog: {\n\t            text: "Are you sure you want to remove this sheet?",\n\t            title: "Sheet remove"\n\t        },\n\t        validationDialog: {\n\t            title: "Data Validation",\n\t            hintMessage: "Please enter a valid {0} value {1}.",\n\t            hintTitle: "Validation {0}",\n\t            criteria: {\n\t                any: "Any value",\n\t                number: "Number",\n\t                text: "Text",\n\t                date: "Date",\n\t                custom: "Custom Formula",\n\t                list: "List"\n\t            },\n\t            comparers: {\n\t                greaterThan: "greater than",\n\t                lessThan: "less than",\n\t                between: "between",\n\t                notBetween: "not between",\n\t                equalTo: "equal to",\n\t                notEqualTo: "not equal to",\n\t                greaterThanOrEqualTo: "greater than or equal to",\n\t                lessThanOrEqualTo: "less than or equal to"\n\t            },\n\t            comparerMessages: {\n\t                greaterThan: "greater than {0}",\n\t                lessThan: "less than {0}",\n\t                between: "between {0} and {1}",\n\t                notBetween: "not between {0} and {1}",\n\t                equalTo: "equal to {0}",\n\t                notEqualTo: "not equal to {0}",\n\t                greaterThanOrEqualTo: "greater than or equal to {0}",\n\t                lessThanOrEqualTo: "less than or equal to {0}",\n\t                custom: "that satisfies the formula: {0}"\n\t            },\n\t            labels: {\n\t                criteria: "Criteria",\n\t                comparer: "Comparer",\n\t                min: "Min",\n\t                max: "Max",\n\t                value: "Value",\n\t                start: "Start",\n\t                end: "End",\n\t                onInvalidData: "On invalid data",\n\t                rejectInput: "Reject input",\n\t                showWarning: "Show warning",\n\t                showHint: "Show hint",\n\t                hintTitle: "Hint title",\n\t                hintMessage: "Hint message",\n\t                ignoreBlank: "Ignore blank",\n\t                showListButton: "Display button to show list",\n\t                showCalendarButton: "Display button to show calendar"\n\t            },\n\t            placeholders: {\n\t                typeTitle: "Type title",\n\t                typeMessage: "Type message"\n\t            }\n\t        },\n\t        exportAsDialog: {\n\t            title: "Export...",\n\t            defaultFileName: "Workbook",\n\t            xlsx: {\n\t                description: "Excel Workbook (.xlsx)"\n\t            },\n\t            pdf: {\n\t                description: "Portable Document Format (.pdf)",\n\t                area: {\n\t                    workbook: "Entire Workbook",\n\t                    sheet: "Active Sheet",\n\t                    selection: "Selection"\n\t                },\n\t                paper: {\n\t                    a2        : "A2 (420 mm × 594 mm)",\n\t                    a3        : "A3 (297 mm x 420 mm)",\n\t                    a4        : "A4 (210 mm x 297 mm)",\n\t                    a5        : "A5 (148 mm x 210 mm)",\n\t                    b3        : "B3 (353 mm × 500 mm)",\n\t                    b4        : "B4 (250 mm x 353 mm)",\n\t                    b5        : "B5 (176 mm x 250 mm)",\n\t                    folio     : \'Folio (8.5" x 13")\',\n\t                    legal     : \'Legal (8.5" x 14")\',\n\t                    letter    : \'Letter (8.5" x 11")\',\n\t                    tabloid   : \'Tabloid (11" x 17")\',\n\t                    executive : \'Executive (7.25" x 10.5")\'\n\t                },\n\t                margin: {\n\t                    normal: "Normal",\n\t                    narrow: "Narrow",\n\t                    wide: "Wide"\n\t                }\n\t            },\n\t            labels: {\n\t                scale: "Scale",\n\t                fit: "Fit to page",\n\t                fileName: "File name",\n\t                saveAsType: "Save as type",\n\t                exportArea: "Export",\n\t                paperSize: "Paper size",\n\t                margins: "Margins",\n\t                orientation: "Orientation",\n\t                print: "Print",\n\t                guidelines: "Guidelines",\n\t                center: "Center",\n\t                horizontally: "Horizontally",\n\t                vertically: "Vertically"\n\t            }\n\t        },\n\t        modifyMergedDialog: {\n\t            errorMessage: "Cannot change part of a merged cell."\n\t        },\n\t        rangeDisabledDialog: {\n\t            errorMessage: "Destination range contains disabled cells."\n\t        },\n\t        intersectsArrayDialog: {\n\t            errorMessage: "You cannot alter part of an array"\n\t        },\n\t        incompatibleRangesDialog: {\n\t            errorMessage: "Incompatible ranges"\n\t        },\n\t        noFillDirectionDialog: {\n\t            errorMessage: "Cannot determine fill direction"\n\t        },\n\t        duplicateSheetNameDialog: {\n\t            errorMessage: "Duplicate sheet name"\n\t        },\n\t        overflowDialog: {\n\t            errorMessage: "Cannot paste, because the copy area and the paste area are not the same size and shape."\n\t        },\n\t        useKeyboardDialog: {\n\t            title: "Copying and pasting",\n\t            errorMessage: "These actions cannot be invoked through the menu. Please use the keyboard shortcuts instead:",\n\t            labels: {\n\t                forCopy: "for copy",\n\t                forCut: "for cut",\n\t                forPaste: "for paste"\n\t            }\n\t        },\n\t        unsupportedSelectionDialog: {\n\t            errorMessage: "That action cannot be performed on multiple selection."\n\t        },\n\t        linkDialog: {\n\t            title: "Hyperlink",\n\t            labels: {\n\t                text: "Text",\n\t                url: "Address",\n\t                removeLink: "Remove link"\n\t            }\n\t        },\n\t        insertCommentDialog: {\n\t            title: "Insert comment",\n\t            labels: {\n\t                comment: "Comment",\n\t                removeComment: "Remove comment"\n\t            }\n\t        },\n\t        insertImageDialog: {\n\t            title: "Insert image",\n\t            info: "Drag an image here, or click to select",\n\t            typeError: "Please select a JPEG, PNG or GIF image"\n\t        }\n\t    };\n\n\t    var registry = {};\n\t    kendo.spreadsheet.dialogs = {\n\t        register: function(name, dialogClass) {\n\t            registry[name] = dialogClass;\n\t        },\n\t        registered: function(name) {\n\t            return !!registry[name];\n\t        },\n\t        create: function(name, options) {\n\t            var dialogClass = registry[name];\n\n\t            if (dialogClass) {\n\t                return new dialogClass(options);\n\t            }\n\t        }\n\t    };\n\n\t    var SpreadsheetDialog = kendo.spreadsheet.SpreadsheetDialog = kendo.Observable.extend({\n\t        init: function(options) {\n\t            kendo.Observable.fn.init.call(this, options);\n\n\t            this.options = translate($.extend(true, {}, this.options, options));\n\n\t            this.bind(this.events, options);\n\t        },\n\t        events: [\n\t            "close",\n\t            "activate"\n\t        ],\n\t        options: {\n\t            autoFocus: true\n\t        },\n\t        dialog: function() {\n\t            if (!this._dialog) {\n\t                var options = {\n\t                    autoFocus: false,\n\t                    scrollable: false,\n\t                    resizable: false,\n\t                    modal: true,\n\t                    visible: false,\n\t                    width: this.options.width || 320,\n\t                    title: this.options.title,\n\t                    open: function() {\n\t                        this.center();\n\t                    },\n\t                    close: this._onDialogClose.bind(this),\n\t                    activate: this._onDialogActivate.bind(this),\n\t                    deactivate: this._onDialogDeactivate.bind(this)\n\t                };\n\t                this._dialog = $("<div class=\'k-spreadsheet-window k-action-window k-popup-edit-form\' />")\n\t                    .addClass(this.options.className || "")\n\t                    .append(kendo.template(this.options.template)({\n\t                        messages: kendo.spreadsheet.messages.dialogs || MESSAGES,\n\n\t                        // this is for ImportErrorDialog.  ugly that\n\t                        // we need this line here, but I couldn\'t\n\t                        // figure out a better way\n\t                        errors: this.options.errors\n\t                    }))\n\t                    .kendoWindow(options)\n\t                    .data("kendoWindow");\n\t            }\n\n\t            return this._dialog;\n\t        },\n\t        _onDialogClose: function() {\n\t            this.trigger("close", {\n\t                action: this._action\n\t            });\n\t        },\n\t        _onDialogActivate: function() {\n\t            this.trigger("activate");\n\t        },\n\t        _onDialogDeactivate: function() {\n\t            this.trigger("deactivate");\n\t            this.destroy();\n\t        },\n\t        destroy: function() {\n\t            if (this._dialog) {\n\t                this._dialog.destroy();\n\t                this._dialog = null;\n\t            }\n\t        },\n\t        open: function() {\n\t            this.dialog().open();\n\t            this.dialog().element.find(".k-primary").focus();\n\t        },\n\t        apply: function() {\n\t            this.close();\n\t        },\n\t        close: function() {\n\t            this._action = "close";\n\n\t            this.dialog().close();\n\t        }\n\t    });\n\n\t    function formattedValue(value, format) {\n\t        return kendo.spreadsheet.formatting.text(value, format);\n\t    }\n\n\t    var FormatCellsViewModel = kendo.spreadsheet.FormatCellsViewModel = ObservableObject.extend({\n\t        init: function(options) {\n\t            ObservableObject.fn.init.call(this, options);\n\n\t            this.useCategory(this.category);\n\t        },\n\t        useCategory: function(category) {\n\t            var type = category && category.type || "number";\n\t            var formatCurrency = type == "currency";\n\n\t            this.category = category;\n\n\t            this.set("showCurrencyFilter", formatCurrency && this.currencies.length > 1);\n\n\t            if (!formatCurrency) {\n\t                this.set("formats", this.allFormats[type + "Formats"]);\n\t            } else {\n\t                this.currency(this.currencies[0]);\n\t            }\n\n\t            this.useFirstFormat();\n\t        },\n\t        useFirstFormat: function() {\n\t            if (this.formats.length) {\n\t                this.set("format", this.formats[0].value);\n\t            }\n\t        },\n\t        currency: function(currency) {\n\t            if (currency !== undefined) {\n\t                this._currency = currency;\n\n\t                var info = currency.value;\n\t                var formats = [\n\t                    { currency: info, decimals: true },\n\t                    { currency: info, decimals: true, iso: true },\n\t                    { currency: info, decimals: false }\n\t                ];\n\n\t                formats = formats.map(function(format) {\n\t                    format = FormatCellsViewModel.convert.currency(format);\n\n\t                    return { value: format, name: formattedValue(1000, format) };\n\t                });\n\n\t                this.set("formats", formats);\n\n\t                this.useFirstFormat();\n\t            }\n\n\t            return this._currency || this.currencies[0];\n\t        },\n\t        categoryFilter: function(category) {\n\t            if (category !== undefined) {\n\t                this.useCategory(category);\n\t            }\n\n\t            return this.category;\n\t        },\n\t        preview: function() {\n\t            var format = this.get("format");\n\t            var value = this.value || 0;\n\n\t            if (format && format.length) {\n\t                return formattedValue(value, format);\n\t            } else {\n\t                return value;\n\t            }\n\t        }\n\t    });\n\n\t    FormatCellsViewModel.convert = {\n\t        currency: function(options) {\n\t            function repeat(token, n) {\n\t                return new Array(n+1).join(token);\n\t            }\n\n\t            // convert culture info to spreadsheet format\n\t            var info = options.currency;\n\t            var format = info.pattern[1];\n\n\t            if (options.decimals) {\n\t                format = format.replace(/n/g, "n" + info["."] + repeat("0", info.decimals));\n\t            }\n\n\t            if (options.iso) {\n\t                format = \'"\' + info.abbr + \'" \' + format.replace(/\\s*\\$\\s*/g, "");\n\t            } else {\n\t                format = format.replace(/\\$/g, JSON.stringify(info.symbol));\n\t            }\n\n\t            format = format.replace(/n/g, "?");\n\n\t            return format;\n\t        },\n\t        date: function(format) {\n\t            if ((/T|Z/).test(format)) {\n\t                return "";\n\t            }\n\n\t            return format.toLowerCase().replace(/tt/g, "AM/PM").replace(/\'/g, \'"\');\n\t        }\n\t    };\n\n\t    function uniqueBy(field, array) {\n\t        var result = [];\n\t        var values = [];\n\n\t        for (var i = 0; i < array.length; i++) {\n\t            if ($.inArray(array[i][field], values) == -1) {\n\t                result.push(array[i]);\n\t                values.push(array[i][field]);\n\t            }\n\t        }\n\n\t        return result;\n\t    }\n\n\t    var FormatCellsDialog = SpreadsheetDialog.extend({\n\t        init: function(options) {\n\t            var messages = kendo.spreadsheet.messages.dialogs.formatCellsDialog || MESSAGES;\n\t            var defaultOptions = {\n\t                title: messages.title,\n\t                categories: [\n\t                    { type: "number", name: messages.categories.number },\n\t                    { type: "currency", name: messages.categories.currency },\n\t                    { type: "date", name: messages.categories.date }\n\t                ]\n\t            };\n\n\t            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n\n\t            this._generateFormats();\n\t        },\n\t        options: {\n\t            className: "k-spreadsheet-format-cells",\n\t            template:\n\t                "<div class=\'k-edit-form-container\'>" +\n\n\t                    "<div class=\'k-root-tabs\' data-role=\'tabstrip\' " +\n\t                        "data-text-field=\'name\' " +\n\t                        "data-bind=\'source: categories, value: categoryFilter\' " +\n\t                        "data-animation=\'false\'></div>" +\n\n\t                    "<div class=\'k-spreadsheet-preview\' data-bind=\'text: preview\'></div>" +\n\n\t                    "<script type=\'text/x-kendo-template\' id=\'format-item-template\'>" +\n\t                        "\\\\#: data.name \\\\#" +\n\t                    "<\/script>" +\n\n\t                    "<select data-role=\'dropdownlist\' class=\'k-format-filter\' " +\n\t                        "data-text-field=\'description\' " +\n\t                        "data-value-field=\'value.name\' " +\n\t                        "data-bind=\'visible: showCurrencyFilter, value: currency, source: currencies\'></select>" +\n\n\t                    "<ul data-role=\'staticlist\' tabindex=\'0\' " +\n\t                        "class=\'k-list k-reset\' " +\n\t                        "data-template=\'format-item-template\' " +\n\t                        "data-value-primitive=\'true\' " +\n\t                        "data-value-field=\'value\' " +\n\t                        "data-bind=\'source: formats, value: format\'></ul>" +\n\n\t                    "<div class=\'k-action-buttons\'>" +\n\t                        "<button class=\'k-button k-primary\' data-bind=\'click: apply\'>#: messages.apply #</button>" +\n\t                        "<button class=\'k-button\' data-bind=\'click: close\'>#: messages.cancel #</button>" +\n\t                    "</div>"+\n\n\t                "</div>"\n\t        },\n\t        _generateFormats: function() {\n\t            var options = this.options;\n\n\t            if (!options.currencies) {\n\t                options.currencies = FormatCellsDialog.currenciesFrom(kendo.cultures);\n\t            }\n\n\t            if (!options.numberFormats) {\n\t                options.numberFormats = [\n\t                    { value: "#.00%", name: "100.00%" },\n\t                    { value: "#%", name: "100%" },\n\t                    { value: "#.00", name: "1024.00" },\n\t                    { value: "#,###.00", name: "1,024.00" }\n\t                ];\n\t            }\n\n\t            if (!options.dateFormats) {\n\t                var calendarPatterns = kendo.cultures.current.calendars.standard.patterns;\n\n\t                options.dateFormats = uniqueBy("value", $.map(calendarPatterns, function(format) {\n\t                    format = FormatCellsViewModel.convert.date(format);\n\n\t                    if (!format) {\n\t                        return;\n\t                    }\n\n\t                    return { value: format, name: formattedValue(34567.7678, format) };\n\t                }));\n\t            }\n\t        },\n\t        open: function(range) {\n\t            var options = this.options;\n\t            var value = range.value();\n\t            var categories = options.categories.slice(0);\n\t            var element;\n\n\t            this.viewModel = new FormatCellsViewModel({\n\t                currencies: options.currencies.slice(0),\n\t                allFormats: {\n\t                    numberFormats: options.numberFormats.slice(0),\n\t                    dateFormats: options.dateFormats.slice(0)\n\t                },\n\t                categories: categories,\n\t                format: range.format(),\n\t                category: value instanceof Date ? categories[2] : categories[0],\n\t                apply: this.apply.bind(this),\n\t                close: this.close.bind(this),\n\t                value: value\n\t            });\n\n\t            SpreadsheetDialog.fn.open.call(this);\n\n\t            element = this.dialog().element;\n\n\t            kendo.bind(element, this.viewModel);\n\n\t            var currencyFilter = element.find("select.k-format-filter").data("kendoDropDownList");\n\n\t            if (options.currencies.length > 10) {\n\t                currencyFilter.setOptions({ filter: "contains" });\n\t            }\n\n\t            element.find(kendo.roleSelector("staticlist")).parent().addClass("k-list-wrapper");\n\t        },\n\t        apply: function() {\n\t            var format = this.viewModel.format;\n\n\t            SpreadsheetDialog.fn.apply.call(this);\n\n\t            this.trigger("action", {\n\t                command: "PropertyChangeCommand",\n\t                options: {\n\t                    property: "format",\n\t                    value: format\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    FormatCellsDialog.currenciesFrom = function (cultures) {\n\t        return uniqueBy("description", $.map(cultures, function(culture, name) {\n\t            if (!(/-/).test(name)) {\n\t                return;\n\t            }\n\n\t            var currency = culture.numberFormat.currency;\n\t            var description = kendo.format(\n\t                "{0} ({1}, {2})",\n\t                currency.name,\n\t                currency.abbr,\n\t                currency.symbol\n\t            );\n\n\t            return { description: description, value: currency };\n\t        }));\n\t    };\n\n\t    kendo.spreadsheet.dialogs.register("formatCells", FormatCellsDialog);\n\n\t    kendo.spreadsheet.dialogs.FormatCellsDialog = FormatCellsDialog;\n\n\t    var MessageDialog = SpreadsheetDialog.extend({\n\t        options: {\n\t            className: "k-spreadsheet-message",\n\t            title: "",\n\t            messageId: "",\n\t            text: "",\n\t            template:\n\t                "<div class=\'k-spreadsheet-message-content\' data-bind=\'text: text\'></div>" +\n\t                "<div class=\'k-action-buttons\'>" +\n\t                    "<button class=\'k-button k-primary\' data-bind=\'click: close\'>" +\n\t                        "#= messages.okText #" +\n\t                    "</button>" +\n\t                "</div>"\n\t        },\n\t        open: function() {\n\t            SpreadsheetDialog.fn.open.call(this);\n\n\t            var options = this.options;\n\t            var text = options.text;\n\n\t            if (options.messageId) {\n\t                text = kendo.getter(options.messageId, true)(kendo.spreadsheet.messages.dialogs);\n\t            }\n\n\t            kendo.bind(this.dialog().element, {\n\t                text: text,\n\t                close: this.close.bind(this)\n\t            });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("message", MessageDialog);\n\n\t    var ConfirmationDialog = SpreadsheetDialog.extend({\n\t        init: function(options) {\n\t            var messages = kendo.spreadsheet.messages.dialogs.confirmationDialog || MESSAGES;\n\t            var defaultOptions = {\n\t                title: messages.title,\n\t                text: messages.text\n\t            };\n\n\t            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n\t        },\n\t        options: {\n\t            className: "k-spreadsheet-message",\n\t            messageId: "",\n\t            template:\n\t                "<div class=\'k-spreadsheet-message-content\' data-bind=\'text: text\'></div>" +\n\t                "<div class=\'k-action-buttons\'>" +\n\t                    "<button class=\'k-button k-primary\' data-bind=\'click: confirm\'>" +\n\t                        "#= messages.okText #" +\n\t                    "</button>" +\n\t                    "<button class=\'k-button\' data-bind=\'click: cancel\'>" +\n\t                        "#= messages.cancel #" +\n\t                    "</button>" +\n\t                "</div>"\n\t        },\n\t        open: function() {\n\t            SpreadsheetDialog.fn.open.call(this);\n\n\t            var options = this.options;\n\t            var text = options.text;\n\n\t            if (options.messageId) {\n\t                text = kendo.getter(options.messageId, true)(kendo.spreadsheet.messages.dialogs);\n\t            }\n\n\t            kendo.bind(this.dialog().element, {\n\t                text: text,\n\t                confirm: this.confirm.bind(this),\n\t                cancel: this.close.bind(this)\n\t            });\n\t        },\n\t        isConfirmed: function() {\n\t            return this._confirmed;\n\t        },\n\t        confirm: function() {\n\t            this._confirmed = true;\n\t            this.close();\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("confirmation", ConfirmationDialog);\n\n\t    var ValidationErrorDialog = SpreadsheetDialog.extend({\n\t        options: {\n\t            className: "k-spreadsheet-message",\n\t            title: "",\n\t            messageId: "",\n\t            text: "",\n\t            template:\n\t            "<div class=\'k-spreadsheet-message-content\' data-bind=\'text: text\'></div>" +\n\t            "<div class=\'k-action-buttons\'>" +\n\t            "<button class=\'k-button k-primary\' data-bind=\'click: retry\'>" +\n\t                "#= messages.retry #" +\n\t            "</button>" +\n\t            "<button class=\'k-button\' data-bind=\'click: cancel\'>" +\n\t                "#= messages.cancel #" +\n\t            "</button>" +\n\t            "</div>"\n\t        },\n\t        open: function() {\n\t            SpreadsheetDialog.fn.open.call(this);\n\n\t            var options = this.options;\n\t            var text = options.text;\n\n\t            if (options.messageId) {\n\t                text = kendo.getter(options.messageId, true)(kendo.spreadsheet.messages.dialogs);\n\t            }\n\n\t            kendo.bind(this.dialog().element, {\n\t                text: text,\n\t                retry: this.retry.bind(this),\n\t                cancel: this.close.bind(this)\n\t            });\n\t        },\n\t        retry: function() {\n\t            this._retry = true;\n\t            this.close();\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("validationError", ValidationErrorDialog);\n\n\t    var FontFamilyDialog = SpreadsheetDialog.extend({\n\t        init: function(options) {\n\t            var messages = kendo.spreadsheet.messages.dialogs.fontFamilyDialog || MESSAGES;\n\n\t            SpreadsheetDialog.fn.init.call(this, $.extend({ title: messages.title }, options));\n\n\t            this._list();\n\t        },\n\t        options: {\n\t            template: "<ul class=\'k-list k-reset\'></ul>"\n\t        },\n\t        _list: function() {\n\t            var ul = this.dialog().element.find("ul");\n\t            var fonts = this.options.fonts;\n\t            var defaultFont = this.options.defaultFont;\n\n\t            this.list = new kendo.ui.StaticList(ul, {\n\t                dataSource: new kendo.data.DataSource({ data: fonts }),\n\t                template: "#: data #",\n\t                value: defaultFont,\n\t                change: this.apply.bind(this)\n\t            });\n\n\t            this.list.dataSource.fetch();\n\t        },\n\t        apply: function(e) {\n\t            SpreadsheetDialog.fn.apply.call(this);\n\n\t            this.trigger("action", {\n\t                command: "PropertyChangeCommand",\n\t                options: {\n\t                    property: "fontFamily",\n\t                    value: e.sender.value()[0]\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("fontFamily", FontFamilyDialog);\n\n\t    var FontSizeDialog = SpreadsheetDialog.extend({\n\t        init: function(options) {\n\t            var messages = kendo.spreadsheet.messages.dialogs.fontSizeDialog || MESSAGES;\n\n\t            SpreadsheetDialog.fn.init.call(this, $.extend({ title: messages.title }, options));\n\n\t            this._list();\n\t        },\n\t        options: {\n\t            template: "<ul class=\'k-list k-reset\'></ul>"\n\t        },\n\t        _list: function() {\n\t            var ul = this.dialog().element.find("ul");\n\t            var sizes = this.options.sizes;\n\t            var defaultSize = this.options.defaultSize;\n\n\t            this.list = new kendo.ui.StaticList(ul, {\n\t                dataSource: new kendo.data.DataSource({ data: sizes }),\n\t                template: "#: data #",\n\t                value: defaultSize,\n\t                change: this.apply.bind(this)\n\t            });\n\n\t            this.list.dataSource.fetch();\n\t        },\n\t        apply: function(e) {\n\t            SpreadsheetDialog.fn.apply.call(this);\n\n\t            this.trigger("action", {\n\t                command: "PropertyChangeCommand",\n\t                options: {\n\t                    property: "fontSize",\n\t                    value: kendo.parseInt(e.sender.value()[0])\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("fontSize", FontSizeDialog);\n\n\t    var BordersDialog = SpreadsheetDialog.extend({\n\t        init: function(options) {\n\t            var messages = kendo.spreadsheet.messages.dialogs.bordersDialog || MESSAGES;\n\n\t            SpreadsheetDialog.fn.init.call(this, $.extend({ title: messages.title }, options));\n\n\t            this.element = this.dialog().element;\n\t            this._borderPalette();\n\n\t            this.viewModel = kendo.observable({\n\t                apply: this.apply.bind(this),\n\t                close: this.close.bind(this)\n\t            });\n\n\t            kendo.bind(this.element.find(".k-action-buttons"), this.viewModel);\n\t        },\n\t        options: {\n\t            width: 177,\n\t            template:   "<div></div>" +\n\t                        "<div class=\'k-action-buttons\'>" +\n\t                            "<button class=\'k-button k-primary\' data-bind=\'click: apply\'>#: messages.apply #</button>" +\n\t                            "<button class=\'k-button\' data-bind=\'click: close\'>#: messages.cancel #</button>" +\n\t                        "</div>"\n\t        },\n\t        apply: function() {\n\t            SpreadsheetDialog.fn.apply.call(this);\n\n\t            var state = this.value();\n\n\t            this.trigger("action", {\n\t                command: "BorderChangeCommand",\n\t                options: {\n\t                    border: state.type,\n\t                    style: { size: 1, color: state.color }\n\t                }\n\t            });\n\t        },\n\t        _borderPalette: function() {\n\t            var element = this.dialog().element.find("div:first");\n\n\t            this.borderPalette = new kendo.spreadsheet.BorderPalette(element, {\n\t                change: this.value.bind(this)\n\t            });\n\t        },\n\t        value: function(state) {\n\t            if (state === undefined) {\n\t                return this._state;\n\t            } else {\n\t                this._state = state;\n\t            }\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("borders", BordersDialog);\n\n\t    var ColorChooser = SpreadsheetDialog.extend({\n\t        init: function(options) {\n\t            SpreadsheetDialog.fn.init.call(this, options);\n\n\t            this.element = this.dialog().element;\n\t            this.property = options.property;\n\t            this.options.title = options.title;\n\n\t            this.viewModel = kendo.observable({\n\t                apply: this.apply.bind(this),\n\t                close: this.close.bind(this)\n\t            });\n\n\t            kendo.bind(this.element.find(".k-action-buttons"), this.viewModel);\n\t        },\n\t        options: {\n\t            template:   "<div></div>" +\n\t                        "<div class=\'k-action-buttons\'>" +\n\t                            "<button class=\'k-button k-primary\' data-bind=\'click: apply\'>#: messages.apply #</button>" +\n\t                            "<button class=\'k-button\' data-bind=\'click: close\'>#: messages.cancel #</button>" +\n\t                        "</div>"\n\t        },\n\t        apply: function() {\n\t            SpreadsheetDialog.fn.apply.call(this);\n\n\t            this.trigger("action", {\n\t                command: "PropertyChangeCommand",\n\t                options: {\n\t                    property: this.property,\n\t                    value: this.value()\n\t                }\n\t            });\n\t        },\n\t        value: function(e) {\n\t            if (e === undefined) {\n\t                return this._value;\n\t            } else {\n\t                this._value = e.value;\n\t            }\n\t        }\n\t    });\n\n\t    var ColorPickerDialog = ColorChooser.extend({\n\t        init: function(options) {\n\t            options.width = 177;\n\t            ColorChooser.fn.init.call(this, options);\n\t            this._colorPalette();\n\t        },\n\t        _colorPalette: function() {\n\t            var element = this.dialog().element.find("div:first");\n\t            this.colorPalette = element.kendoColorPalette({\n\t                palette: [ //metro palette\n\t                    "#ffffff", "#000000", "#d6ecff", "#4e5b6f", "#7fd13b", "#ea157a", "#feb80a", "#00addc", "#738ac8", "#1ab39f",\n\t                    "#f2f2f2", "#7f7f7f", "#a7d6ff", "#d9dde4", "#e5f5d7", "#fad0e4", "#fef0cd", "#c5f2ff", "#e2e7f4", "#c9f7f1",\n\t                    "#d8d8d8", "#595959", "#60b5ff", "#b3bcca", "#cbecb0", "#f6a1c9", "#fee29c", "#8be6ff", "#c7d0e9", "#94efe3",\n\t                    "#bfbfbf", "#3f3f3f", "#007dea", "#8d9baf", "#b2e389", "#f272af", "#fed46b", "#51d9ff", "#aab8de", "#5fe7d5",\n\t                    "#a5a5a5", "#262626", "#003e75", "#3a4453", "#5ea226", "#af0f5b", "#c58c00", "#0081a5", "#425ea9", "#138677",\n\t                    "#7f7f7f", "#0c0c0c", "#00192e", "#272d37", "#3f6c19", "#750a3d", "#835d00", "#00566e", "#2c3f71", "#0c594f"\n\t                ],\n\t                change: this.value.bind(this)\n\t            }).data("kendoColorPalette");\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("colorPicker", ColorPickerDialog);\n\n\t    var CustomColorDialog = ColorChooser.extend({\n\t        init: function(options) {\n\t            options.width = 268;\n\t            ColorChooser.fn.init.call(this, options);\n\t            this.dialog().setOptions({ animation: false });\n\t            this.dialog().one("activate", this._colorPicker.bind(this));\n\t        },\n\t        _colorPicker: function() {\n\t            var element = this.dialog().element.find("div:first");\n\t            this.colorPicker = element.kendoFlatColorPicker({\n\t                change: this.value.bind(this)\n\t            }).data("kendoFlatColorPicker");\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("customColor", CustomColorDialog);\n\n\t    var AlignmentDialog = SpreadsheetDialog.extend({\n\t        init: function(options) {\n\t            var messages = kendo.spreadsheet.messages.dialogs.alignmentDialog || MESSAGES;\n\t            var defaultOptions = {\n\t                title: messages.title,\n\t                buttons: [\n\t                    { property: "textAlign",     value: "left",    iconClass: "align-left",   text: messages.buttons.justtifyLeft },\n\t                    { property: "textAlign",     value: "center",  iconClass: "align-center", text: messages.buttons.justifyCenter },\n\t                    { property: "textAlign",     value: "right",   iconClass: "align-right",  text: messages.buttons.justifyRight },\n\t                    { property: "textAlign",     value: "justify", iconClass: "align-justify",   text: messages.buttons.justifyFull },\n\t                    { property: "verticalAlign", value: "top",     iconClass: "align-top",      text: messages.buttons.alignTop },\n\t                    { property: "verticalAlign", value: "center",  iconClass: "align-middle",   text: messages.buttons.alignMiddle },\n\t                    { property: "verticalAlign", value: "bottom",  iconClass: "align-bottom",   text: messages.buttons.alignBottom }\n\t                ]\n\t            };\n\n\t            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n\n\t            this._list();\n\t        },\n\t        options: {\n\t            template: "<ul class=\'k-list k-reset\'></ul>"\n\t        },\n\t        _list: function() {\n\t            var ul = this.dialog().element.find("ul");\n\n\t            this.list = new kendo.ui.StaticList(ul, {\n\t                dataSource: new kendo.data.DataSource({ data: this.options.buttons }),\n\t                template: "<a role=\'button\' title=\'#=text#\' data-property=\'#=property#\' data-value=\'#=value#\'>" +\n\t                                "<span class=\'k-icon k-i-#=iconClass#\'></span>" +\n\t                                "#=text#" +\n\t                           "</a>",\n\t                change: this.apply.bind(this)\n\t            });\n\n\t            this.list.dataSource.fetch();\n\t        },\n\t        apply: function(e) {\n\t            var dataItem = e.sender.value()[0];\n\t            SpreadsheetDialog.fn.apply.call(this);\n\n\t            this.trigger("action", {\n\t                command: "PropertyChangeCommand",\n\t                options: {\n\t                    property: dataItem.property,\n\t                    value: dataItem.value\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("alignment", AlignmentDialog);\n\n\t    var MergeDialog = SpreadsheetDialog.extend({\n\t        init: function(options) {\n\t            var messages = kendo.spreadsheet.messages.dialogs.mergeDialog || MESSAGES;\n\t            var defaultOptions = {\n\t                title: messages.title,\n\t                buttons: [\n\t                    { value: "cells",        iconClass: "cells-merge",        text: messages.buttons.mergeCells },\n\t                    { value: "horizontally", iconClass: "cells-merge-horizontally", text: messages.buttons.mergeHorizontally },\n\t                    { value: "vertically",   iconClass: "cells-merge-vertically",   text: messages.buttons.mergeVertically },\n\t                    { value: "unmerge",      iconClass: "table-unmerge",      text: messages.buttons.unmerge }\n\t                ]\n\t            };\n\n\t            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n\n\t            this._list();\n\t        },\n\t        options: {\n\t            template: "<ul class=\'k-list k-reset\'></ul>"\n\t        },\n\t        _list: function() {\n\t            var ul = this.dialog().element.find("ul");\n\n\t            this.list = new kendo.ui.StaticList(ul, {\n\t                dataSource: new kendo.data.DataSource({ data: this.options.buttons }),\n\t                template: "<a role=\'button\' title=\'#=text#\' data-value=\'#=value#\'>" +\n\t                            "<span class=\'k-icon k-icon k-i-#=iconClass#\'></span>#=text#" +\n\t                          "</a>",\n\t                change: this.apply.bind(this)\n\t            });\n\n\t            this.list.dataSource.fetch();\n\t        },\n\t        apply: function(e) {\n\t            var dataItem = e.sender.value()[0];\n\t            SpreadsheetDialog.fn.apply.call(this);\n\n\t            this.trigger("action", {\n\t                command: "MergeCellCommand",\n\t                options: {\n\t                    value: dataItem.value\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("merge", MergeDialog);\n\n\t    var FreezeDialog = SpreadsheetDialog.extend({\n\t        init: function(options) {\n\t            var messages = kendo.spreadsheet.messages.dialogs.freezeDialog || MESSAGES;\n\t            var defaultOptions = {\n\t                title: messages.title,\n\t                buttons: [\n\t                    { value: "panes",    iconClass: "pane-freeze",  text: messages.buttons.freezePanes },\n\t                    { value: "rows",     iconClass: "row-freeze",    text: messages.buttons.freezeRows },\n\t                    { value: "columns",  iconClass: "column-freeze",    text: messages.buttons.freezeColumns },\n\t                    { value: "unfreeze", iconClass: "table-unmerge", text: messages.buttons.unfreeze }\n\t                ]\n\t            };\n\n\t            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n\n\t            this._list();\n\t        },\n\t        options: {\n\t            template: "<ul class=\'k-list k-reset\'></ul>"\n\t        },\n\t        _list: function() {\n\t            var ul = this.dialog().element.find("ul");\n\n\t            this.list = new kendo.ui.StaticList(ul, {\n\t                dataSource: new kendo.data.DataSource({ data: this.options.buttons }),\n\t                template: "<a role=\'button\' title=\'#=text#\' data-value=\'#=value#\'>" +\n\t                            "<span class=\'k-icon k-icon k-i-#=iconClass#\'></span>#=text#" +\n\t                          "</a>",\n\t                change: this.apply.bind(this)\n\t            });\n\n\t            this.list.dataSource.fetch();\n\t        },\n\t        apply: function(e) {\n\t            var dataItem = e.sender.value()[0];\n\t            SpreadsheetDialog.fn.apply.call(this);\n\n\t            this.trigger("action", {\n\t                command: "FreezePanesCommand",\n\t                options: {\n\t                    value: dataItem.value\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("freeze", FreezeDialog);\n\n\t    var ValidationViewModel = kendo.spreadsheet.ValidationCellsViewModel = ObservableObject.extend({\n\t        init: function(options) {\n\t            ObservableObject.fn.init.call(this, options);\n\n\t            this.bind("change", (function(e) {\n\n\t                if (e.field === "criterion") {\n\t                    this.reset();\n\n\t                    if (this.criterion === "custom" || this.criterion === "list") {\n\t                        this.setHintMessageTemplate();\n\t                    }\n\t                }\n\n\t                if (e.field === "comparer") {\n\t                    this.setHintMessageTemplate();\n\t                }\n\n\t                if ((e.field == "hintMessage" || e.field == "hintTitle") && !this._mute) {\n\t                    this.shouldBuild = false;\n\t                }\n\n\t                if ((e.field == "from" || e.field == "to" || e.field == "hintMessageTemplate" || e.field == "type") && this.shouldBuild) {\n\t                    this.buildMessages();\n\t                }\n\t            }).bind(this));\n\n\t            this.reset();\n\t        },\n\t        buildMessages: function() {\n\t            this._mute = true;\n\t            this.set("hintTitle", this.hintTitleTemplate ? kendo.format(this.hintTitleTemplate, this.type) : "");\n\t            this.set("hintMessage", this.hintMessageTemplate ? kendo.format(this.hintMessageTemplate, this.from, this.to) : "");\n\t            this._mute = false;\n\t        },\n\t        reset: function() {\n\t            this.setComparers();\n\t            this.set("comparer", this.comparers[0].type);\n\t            this.set("from", null);\n\t            this.set("to", null);\n\n\t            this.set("useCustomMessages", false);\n\n\t            this.shouldBuild = true;\n\n\t            this.hintTitleTemplate = this.defaultHintTitle;\n\t            this.buildMessages();\n\t        },\n\t        //TODO: refactor\n\t        setComparers: function() {\n\t            var all = this.defaultComparers;\n\t            var comparers = [];\n\n\t            if (this.criterion === "text") {\n\t                var text_comparers = ["equalTo", "notEqualTo"];\n\t                for (var idx = 0; idx < all.length; idx++) {\n\t                    if (text_comparers[0] == all[idx].type) {\n\t                        comparers.push(all[idx]);\n\t                        text_comparers.shift();\n\t                    }\n\t                }\n\t            } else {\n\t                comparers = all.slice();\n\t            }\n\n\t            this.set("comparers", comparers);\n\t        },\n\t        setHintMessageTemplate: function() {\n\t           if (this.criterion !== "custom" && this.criterion !== "list") {\n\t               this.set("hintMessageTemplate", kendo.format(this.defaultHintMessage, this.criterion, this.comparerMessages[this.comparer]));\n\t           } else {\n\t               this.set("hintMessageTemplate", "");\n\t               this.set("hintMessage", "");\n\t           }\n\t        },\n\t        isAny: function() {\n\t            return this.get("criterion") === "any";\n\t        },\n\t        isNumber: function() {\n\t            return this.get("criterion") === "number";\n\t        },\n\t        showToForNumber: function() {\n\t            return this.showTo() && this.isNumber();\n\t        },\n\t        showToForDate: function() {\n\t            return this.showTo() && this.isDate();\n\t        },\n\t        isText: function() {\n\t            return this.get("criterion") === "text";\n\t        },\n\t        isDate: function() {\n\t            return this.get("criterion") === "date";\n\t        },\n\t        isList: function() {\n\t            return this.get("criterion") === "list";\n\t        },\n\t        isCustom: function() {\n\t            return this.get("criterion") === "custom";\n\t        },\n\t        showRemove: function() {\n\t            return this.get("hasValidation");\n\t        },\n\t        showTo: function() {\n\t            return this.get("comparer") == "between" || this.get("comparer") == "notBetween";\n\t        },\n\t        update: function(validation) {\n\t            this.set("hasValidation", !!validation);\n\n\t            if (validation) {\n\t                this.fromValidationObject(validation);\n\t            }\n\t        },\n\t        fromValidationObject: function(validation) {\n\t            this.set("criterion", validation.dataType);\n\t            this.set("comparer", validation.comparerType);\n\t            this.set("from", validation.from);\n\t            this.set("to", validation.to);\n\t            this.set("type", validation.type);\n\t            this.set("ignoreBlank", validation.allowNulls);\n\t            this.set("showButton", validation.showButton);\n\n\t            if (validation.messageTemplate || validation.titleTemplate) {\n\t                this.hintMessageTemplate = validation.messageTemplate;\n\t                this.hintMessage = validation.messageTemplate;\n\t                this.hintTitleTemplate = validation.titleTemplate;\n\t                this.hintTitle = validation.titleTemplate;\n\t                this.useCustomMessages = true;\n\t                this.buildMessages();\n\t            } else {\n\t                this.useCustomMessages = false;\n\t            }\n\t        },\n\t        toValidationObject: function() {\n\t            if (this.criterion === "any") {\n\t                return null;\n\t            }\n\n\t            var options = {\n\t                type: this.type,\n\t                dataType: this.criterion,\n\t                comparerType: this.comparer,\n\t                from: this.from,\n\t                to: this.to,\n\t                allowNulls: this.ignoreBlank,\n\t                showButton: this.showButton\n\t            };\n\n\t            if (this.useCustomMessages) {\n\t                options.messageTemplate = this.shouldBuild ? this.hintMessageTemplate : this.hintMessage;\n\t                options.titleTemplate = this.hintTitle;\n\t            }\n\n\t            return options;\n\t        }\n\t    });\n\n\t    var ValidationDialog = SpreadsheetDialog.extend({\n\t        init: function(options) {\n\t            var messages = kendo.spreadsheet.messages.dialogs.validationDialog || MESSAGES;\n\t            var defaultOptions = {\n\t                title: messages.title,\n\t                hintMessage: messages.hintMessage,\n\t                hintTitle: messages.hintTitle,\n\t                criteria: [\n\t                    { type: "any", name: messages.criteria.any },\n\t                    { type: "number", name: messages.criteria.number },\n\t                    { type: "text", name: messages.criteria.text },\n\t                    { type: "date", name: messages.criteria.date },\n\t                    { type: "custom", name: messages.criteria.custom },\n\t                    { type: "list", name: messages.criteria.list }\n\t                ],\n\t                comparers: [\n\t                    { type: "greaterThan", name: messages.comparers.greaterThan },\n\t                    { type: "lessThan",    name: messages.comparers.lessThan },\n\t                    { type: "between",     name: messages.comparers.between },\n\t                    { type: "notBetween",  name: messages.comparers.notBetween },\n\t                    { type: "equalTo",     name: messages.comparers.equalTo },\n\t                    { type: "notEqualTo",  name: messages.comparers.notEqualTo },\n\t                    { type: "greaterThanOrEqualTo", name: messages.comparers.greaterThanOrEqualTo },\n\t                    { type: "lessThanOrEqualTo",    name: messages.comparers.lessThanOrEqualTo }\n\t                ],\n\t                comparerMessages: messages.comparerMessages\n\t            };\n\n\t            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n\t        },\n\t        options: {\n\t            width: 450,\n\t            criterion: "any",\n\t            type: "reject",\n\t            ignoreBlank: true,\n\t            showButton: true,\n\t            useCustomMessages: false,\n\t            errorTemplate:\n\t                \'<div class="k-tooltip k-tooltip-error k-validator-tooltip">\' +\n\t                    \'<span class="k-tooltip-icon k-icon k-i-warning"></span>\' +\n\t                    \'<span class="k-tooltip-content">#= message #</span>\' +\n\t                    \'<span class="k-callout k-callout-n"></span>\' +\n\t                \'</div>\',\n\t            template:\n\t                \'<div class="k-edit-form-container">\' +\n\t                    \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.criteria #:</label></div>\' +\n\t                    \'<div class="k-edit-field">\' +\n\t                        \'<select data-role="dropdownlist" \' +\n\t                            \'title="#: messages.validationDialog.labels.criteria #"\' +\n\t                            \'data-text-field="name" \' +\n\t                            \'data-value-field="type" \' +\n\t                            \'data-bind="value: criterion, source: criteria"></select>\' +\n\t                    \'</div>\' +\n\n\t                    \'<div data-bind="visible: isNumber">\' +\n\t                        \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.comparer #:</label></div>\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<select data-role="dropdownlist" \' +\n\t                                \'title="#: messages.validationDialog.labels.comparer #"\' +\n\t                                \'data-text-field="name" \' +\n\t                                \'data-value-field="type" \' +\n\t                                \'data-bind="value: comparer, source: comparers"></select>\' +\n\t                        \'</div>\' +\n\t                        \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.min #:</label></div>\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<input name="#: messages.validationDialog.labels.min #" title="#: messages.validationDialog.labels.min #" placeholder="e.g. 10" class="k-textbox" data-bind="value: from, enabled: isNumber" required="required" />\' +\n\t                        \'</div>\' +\n\t                        \'<div data-bind="visible: showTo">\' +\n\t                            \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.max #:</label></div>\' +\n\t                            \'<div class="k-edit-field">\' +\n\t                                \'<input name="#: messages.validationDialog.labels.max #" title="#: messages.validationDialog.labels.max #" placeholder="e.g. 100" class="k-textbox" data-bind="value: to, enabled: showToForNumber" required="required" />\' +\n\t                            \'</div>\' +\n\t                        \'</div>\' +\n\t                    \'</div>\' +\n\n\t                    \'<div data-bind="visible: isText">\' +\n\t                        \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.comparer #:</label></div>\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<select data-role="dropdownlist" \' +\n\t                                \'title="#: messages.validationDialog.labels.comparer #"\' +\n\t                                \'data-text-field="name" \' +\n\t                                \'data-value-field="type" \' +\n\t                                \'data-bind="value: comparer, source: comparers"></select>\' +\n\t                        \'</div>\' +\n\t                        \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.value #:</label></div>\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<input name="#: messages.validationDialog.labels.value #" title="#: messages.validationDialog.labels.value #" class="k-textbox" data-bind="value: from, enabled: isText" required="required" />\' +\n\t                        \'</div>\' +\n\t                    \'</div>\' +\n\n\t                    \'<div data-bind="visible: isDate">\' +\n\t                        \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.comparer #:</label></div>\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<select data-role="dropdownlist" \' +\n\t                                \'title="#: messages.validationDialog.labels.comparer #"\' +\n\t                                \'data-text-field="name" \' +\n\t                                \'data-value-field="type" \' +\n\t                                \'data-bind="value: comparer, source: comparers"></select>\' +\n\t                        \'</div>\' +\n\t                        \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.start #:</label></div>\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<input name="#: messages.validationDialog.labels.start #" title="#: messages.validationDialog.labels.start #" class="k-textbox" data-bind="value: from, enabled: isDate" required="required" />\' +\n\t                        \'</div>\' +\n\t                        \'<div data-bind="visible: showTo">\' +\n\t                            \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.end #:</label></div>\' +\n\t                            \'<div class="k-edit-field">\' +\n\t                                \'<input name="#: messages.validationDialog.labels.end #" title="#: messages.validationDialog.labels.end #" class="k-textbox" data-bind="value: to, enabled: showToForDate" required="required" />\' +\n\t                            \'</div>\' +\n\t                        \'</div>\' +\n\t                    \'</div>\' +\n\n\t                    \'<div data-bind="visible: isCustom">\' +\n\t                        \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.value #:</label></div>\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<input name="#: messages.validationDialog.labels.value #" title="#: messages.validationDialog.labels.value #" class="k-textbox" data-bind="value: from, enabled: isCustom" required="required" />\' +\n\t                        \'</div>\' +\n\t                    \'</div>\' +\n\n\t                    \'<div data-bind="visible: isList">\' +\n\t                        \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.value #:</label></div>\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<input name="#: messages.validationDialog.labels.value #" title="#: messages.validationDialog.labels.value #" class="k-textbox" data-bind="value: from, enabled: isList" required="required" />\' +\n\t                        \'</div>\' +\n\t                    \'</div>\' +\n\n\t                    \'<div data-bind="visible: isList">\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<input type="checkbox" name="showButton" id="listShowButton" class="k-checkbox" data-bind="checked: showButton"/>\' +\n\t                            \'<label for="listShowButton" class="k-checkbox-label">\' +\n\t                                \' #: messages.validationDialog.labels.showListButton #\' +\n\t                            \'</label>\' +\n\t                        \'</div>\' +\n\t                    "</div>" +\n\n\t                    \'<div data-bind="visible: isDate">\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<input type="checkbox" name="showButton" id="dateShowButton" class="k-checkbox" data-bind="checked: showButton"/>\' +\n\t                            \'<label for="dateShowButton" class="k-checkbox-label">\' +\n\t                                \' #: messages.validationDialog.labels.showCalendarButton #\' +\n\t                            \'</label>\' +\n\t                        \'</div>\' +\n\t                    "</div>" +\n\n\t                    \'<div data-bind="invisible: isAny">\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<input type="checkbox" title="#: messages.validationDialog.labels.ignoreBlank #" name="ignoreBlank" id="ignoreBlank" class="k-checkbox" data-bind="checked: ignoreBlank"/>\' +\n\t                            \'<label for="ignoreBlank" class="k-checkbox-label">\' +\n\t                                \' #: messages.validationDialog.labels.ignoreBlank #\' +\n\t                            \'</label>\' +\n\t                        \'</div>\' +\n\t                    \'</div>\' +\n\n\t                    \'<div data-bind="invisible: isAny">\' +\n\t                        \'<div class="k-hr"></div>\' +\n\t                        \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.onInvalidData #:</label></div>\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<input type="radio" title="#: messages.validationDialog.labels.rejectInput #" id="validationTypeReject" name="validationType" value="reject" data-bind="checked: type" class="k-radio" />\' +\n\t                            \'<label for="validationTypeReject" class="k-radio-label">\' +\n\t                                 "#: messages.validationDialog.labels.rejectInput #" +\n\t                            \'</label> \' +\n\t                            \'<input type="radio" title="#: messages.validationDialog.labels.showWarning #" id="validationTypeWarning"  name="validationType" value="warning" data-bind="checked: type" class="k-radio" />\' +\n\t                            \'<label for="validationTypeWarning" class="k-radio-label">\' +\n\t                                 "#: messages.validationDialog.labels.showWarning #" +\n\t                            \'</label>\' +\n\t                        \'</div>\' +\n\t                    \'</div>\' +\n\n\t                    \'<div data-bind="invisible: isAny" class="hint-wrapper">\' +\n\t                        \'<div class="k-edit-field">\' +\n\t                            \'<input type="checkbox" title="#: messages.validationDialog.labels.showHint #" name="useCustomMessages" id="useCustomMessages" class="k-checkbox" data-bind="checked: useCustomMessages" />\' +\n\t                            \'<label class="k-checkbox-label" for="useCustomMessages">\'+\n\t                                \' #: messages.validationDialog.labels.showHint #\' +\n\t                            \'</label>\' +\n\t                        \'</div>\' +\n\t                        \'<div data-bind="visible: useCustomMessages">\' +\n\t                            \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.hintTitle #:</label></div>\' +\n\t                            \'<div class="k-edit-field">\' +\n\t                                \'<input class="k-textbox" title="#: messages.validationDialog.labels.hintTitle #" placeholder="#: messages.validationDialog.placeholders.typeTitle #" data-bind="value: hintTitle" />\' +\n\t                            \'</div>\' +\n\t                            \'<div class="k-edit-label"><label>#: messages.validationDialog.labels.hintMessage #:</label></div>\' +\n\t                            \'<div class="k-edit-field">\' +\n\t                                \'<input class="k-textbox" title="#: messages.validationDialog.labels.hintMessage #" placeholder="#: messages.validationDialog.placeholders.typeMessage #" data-bind="value: hintMessage" />\' +\n\t                            \'</div>\' +\n\t                        \'</div>\' +\n\t                    \'</div>\' +\n\n\t                    \'<div class="k-action-buttons">\' +\n\t                        \'<button class="k-button" data-bind="visible: showRemove, click: remove">#: messages.remove #</button>\' +\n\t                        \'<button class="k-button k-primary" data-bind="click: apply">#: messages.apply #</button>\' +\n\t                        \'<button class="k-button" data-bind="click: close">#: messages.cancel #</button>\' +\n\t                    "</div>" +\n\t                "</div>"\n\t        },\n\t        open: function(range) {\n\t            var options = this.options;\n\t            var element;\n\n\t            this.viewModel = new ValidationViewModel({\n\t                type: options.type,\n\t                defaultHintMessage: options.hintMessage,\n\t                defaultHintTitle: options.hintTitle,\n\t                defaultComparers: options.comparers.slice(0),\n\t                comparerMessages: options.comparerMessages,\n\t                criteria: options.criteria.slice(0),\n\t                criterion: options.criterion,\n\t                ignoreBlank: options.ignoreBlank,\n\t                showButton: options.showButton,\n\t                apply: this.apply.bind(this),\n\t                close: this.close.bind(this),\n\t                remove: this.remove.bind(this)\n\t            });\n\n\t            this.viewModel.update(range.validation());\n\n\t            SpreadsheetDialog.fn.open.call(this);\n\n\t            element = this.dialog().element;\n\n\t            if (this.validatable) {\n\t                this.validatable.destroy();\n\t            }\n\n\t            kendo.bind(element, this.viewModel);\n\n\t            this.validatable = new kendo.ui.Validator(element.find(".k-edit-form-container"), {\n\t                validateOnBlur: false,\n\t                errorTemplate: this.options.errorTemplate || undefined\n\t            });\n\t        },\n\t        apply: function() {\n\n\t            if (this.validatable.validate()) {\n\t                SpreadsheetDialog.fn.apply.call(this);\n\n\t                this.trigger("action", {\n\t                    command: "EditValidationCommand",\n\t                    options: {\n\t                        value: this.viewModel.toValidationObject()\n\t                    }\n\t                });\n\t            }\n\t        },\n\t        remove: function() {\n\t            this.viewModel.set("criterion", "any");\n\t            this.apply();\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("validation", ValidationDialog);\n\t    kendo.spreadsheet.dialogs.ValidationDialog = ValidationDialog;\n\n\t    function PDF_PAPER_SIZE(size) {\n\t        return {\n\t            value: size,\n\t            text: TEXT("exportAsDialog.pdf.paper." + size)\n\t        };\n\t    }\n\n\t    var ExportAsDialog = SpreadsheetDialog.extend({\n\t        init: function(options) {\n\t            SpreadsheetDialog.fn.init.call(this, options);\n\t            options = this.options;\n\n\t            this.viewModel = kendo.observable({\n\t                title: options.title,\n\t                name: options.name,\n\t                extension: options.extension,\n\t                fileFormats:options.fileFormats,\n\t                excel: options.excelExport,\n\t                pdf: {\n\t                    proxyURL: options.pdfExport.proxyURL,\n\t                    forceProxy: options.pdfExport.forceProxy,\n\t                    title: options.pdfExport.title,\n\t                    author: options.pdfExport.author,\n\t                    subject: options.pdfExport.subject,\n\t                    keywords: options.pdfExport.keywords,\n\t                    creator: options.pdfExport.creator,\n\t                    date: options.pdfExport.date,\n\n\t                    fitWidth: options.pdf.fitWidth,\n\t                    area: options.pdf.area,\n\t                    areas: options.pdf.areas,\n\t                    paperSize: options.pdf.paperSize,\n\t                    paperSizes: options.pdf.paperSizes,\n\t                    margin: options.pdf.margin,\n\t                    margins: options.pdf.margins,\n\t                    landscape: options.pdf.landscape,\n\t                    guidelines: options.pdf.guidelines,\n\t                    hCenter: options.pdf.hCenter,\n\t                    vCenter: options.pdf.vCenter\n\t                },\n\t                apply: this.apply.bind(this),\n\t                close: this.close.bind(this)\n\t            });\n\n\t            var dialog = this.dialog();\n\t            this.viewModel.bind("change", function(e) {\n\t                if (e.field === "extension") {\n\t                    this.set("showPdfOptions", this.extension === ".pdf" ? true : false);\n\t                    dialog.center();\n\t                }\n\t            });\n\n\t            kendo.bind(dialog.element, this.viewModel);\n\t        },\n\t        options: {\n\t            title: TEXT("exportAsDialog.title", "Export..."),\n\t            name: TEXT("exportAsDialog.defaultFileName", "Workbook"),\n\t            extension: ".xlsx",\n\t            fileFormats: [{\n\t                description: TEXT("exportAsDialog.xlsx.description", "Excel Workbook (.xlsx)"),\n\t                extension: ".xlsx"\n\t            }, {\n\t                description: TEXT("exportAsDialog.pdf.description", "Portable Document Format (.pdf)"),\n\t                extension: ".pdf"\n\t            }],\n\t            pdf: {\n\t                fitWidth: true,\n\t                area: "workbook",\n\t                areas: [{\n\t                    area: "workbook",\n\t                    text: TEXT("exportAsDialog.pdf.area.workbook", "Entire Workbook")\n\t                },{\n\t                    area: "sheet",\n\t                    text: TEXT("exportAsDialog.pdf.area.sheet", "Active Sheet")\n\t                },{\n\t                    area: "selection",\n\t                    text: TEXT("exportAsDialog.pdf.area.selection", "Selection")\n\t                }],\n\t                paperSize: "a4",\n\t                paperSizes: [\n\t                    "a2", "a3", "a4", "a5", "b3", "b4", "b5", "folio", "legal", "letter", "tabloid", "executive"\n\t                ].map(PDF_PAPER_SIZE),\n\t                margin: {bottom: "0.75in", left: "0.7in", right: "0.7in", top: "0.75in"},\n\t                margins: [\n\t                    { value: { bottom: "0.75in", left: "0.7in", right: "0.7in", top: "0.75in" },\n\t                      text: TEXT("exportAsDialog.pdf.margin.normal", "Normal")\n\t                    },\n\t                    { value: { bottom: "0.75in", left: "0.25in", right: "0.25in", top: "0.75in" },\n\t                      text: TEXT("exportAsDialog.pdf.margin.narrow", "Narrow")\n\t                    },\n\t                    { value: { bottom: "1in", left: "1in", right: "1in", top: "1in" },\n\t                      text: TEXT("exportAsDialog.pdf.margin.wide", "Wide")\n\t                    }\n\t                ],\n\t                landscape: true,\n\t                guidelines: true,\n\t                hCenter: true,\n\t                vCenter: true\n\t            },\n\t            width: 520,\n\t            template:\n\t                "<div class=\'k-edit-label\'><label>#: messages.exportAsDialog.labels.fileName #:</label></div>" +\n\t                "<div class=\'k-edit-field\'>" +\n\t                    "<input class=\'k-textbox\' data-bind=\'value: name\' />" +\n\t                "</div>" +\n\t                "<div >" +\n\t                    "<div class=\'k-edit-label\'><label>#: messages.exportAsDialog.labels.saveAsType #:</label></div>" +\n\t                    "<div class=\'k-edit-field\'>" +\n\t                    "<select data-role=\'dropdownlist\' class=\'k-file-format\' " +\n\t                        "data-text-field=\'description\' " +\n\t                        "data-value-field=\'extension\' " +\n\t                        "data-bind=\'value: extension, source: fileFormats\'></select>" +\n\t                    "</div>" +\n\t                "</div>" +\n\t                "<div class=\'k-export-config\' data-bind=\'visible: showPdfOptions\'>" +\n\t                    "<hr class=\'k-hr\' />" +\n\t                    "<div class=\'k-edit-label\'><label>#: messages.exportAsDialog.labels.exportArea #:</label></div>" +\n\t                    "<div class=\'k-edit-field\'>" +\n\t                        "<select data-role=\'dropdownlist\' class=\'k-file-format\' " +\n\t                            "data-text-field=\'text\' " +\n\t                            "data-value-field=\'area\' " +\n\t                            "data-bind=\'value: pdf.area, source: pdf.areas\'></select>" +\n\t                    "</div>" +\n\t                    "<div class=\'k-edit-label\'><label>#: messages.exportAsDialog.labels.paperSize#:</label></div>" +\n\t                    "<div class=\'k-edit-field\'>" +\n\t                        "<select data-role=\'dropdownlist\' class=\'k-file-format\' " +\n\t                            "data-text-field=\'text\' " +\n\t                            "data-value-field=\'value\' " +\n\t                            "data-bind=\'value: pdf.paperSize, source: pdf.paperSizes\'></select>" +\n\t                    "</div>" +\n\t                    "<div class=\'k-edit-label\'><label>#: messages.exportAsDialog.labels.margins #:</label></div>" +\n\t                    "<div class=\'k-edit-field\'>" +\n\t                        "<select data-role=\'dropdownlist\' class=\'k-file-format\' " +\n\t                            "data-value-primitive=\'true\'" +\n\t                            "data-text-field=\'text\' " +\n\t                            "data-value-field=\'value\' " +\n\t                            "data-bind=\'value: pdf.margin, source: pdf.margins\'></select>" +\n\t                    "</div>" +\n\t                    "<div class=\'k-edit-label\'><label>#: messages.exportAsDialog.labels.orientation #:</label></div>" +\n\t                    "<div class=\'k-edit-field\'>" +\n\t                        "<div class=\'k-button-group\'>" +\n\t                            "<input type=\'radio\' id=\'k-orientation-portrait\' name=\'orientation\' data-type=\'boolean\' data-bind=\'checked: pdf.landscape\' value=\'false\' />" +\n\t                            "<label class=\'k-button k-button-icon k-group-start k-orientation-button\' for=\'k-orientation-portrait\'><span class=\'k-icon k-i-page-portrait\'></span></label>" +\n\t                            "<input type=\'radio\' id=\'k-orientation-landscape\' name=\'orientation\' data-type=\'boolean\' data-bind=\'checked: pdf.landscape\' value=\'true\' />" +\n\t                            "<label class=\'k-button k-button-icon k-group-end k-orientation-button\' for=\'k-orientation-landscape\'><span class=\'k-icon k-i-page-landscape\'></span></label>" +\n\t                        "</div>" +\n\t                    "</div>" +\n\t                    "<div class=\'k-edit-label\'><label>#: messages.exportAsDialog.labels.print #:</label></div>" +\n\t                    "<div class=\'k-edit-field\'>" +\n\t                        "<input class=\'k-checkbox\' id=\'guidelines\' type=\'checkbox\' data-bind=\'checked: pdf.guidelines\'/><label class=\'k-checkbox-label\' for=\'guidelines\'>#: messages.exportAsDialog.labels.guidelines#</label>" +\n\t                    "</div>" +\n\t                    "<div class=\'k-edit-label\'><label>#: messages.exportAsDialog.labels.scale #:</label></div>" +\n\t                    "<div class=\'k-edit-field\'>" +\n\t                        "<input class=\'k-checkbox\' id=\'fitWidth\' type=\'checkbox\' data-bind=\'checked: pdf.fitWidth\'/><label class=\'k-checkbox-label\' for=\'fitWidth\'>#: messages.exportAsDialog.labels.fit #</label>" +\n\t                    "</div>" +\n\t                    "<div class=\'k-edit-label\'><label>#: messages.exportAsDialog.labels.center #:</label></div>" +\n\t                    "<div class=\'k-edit-field\'>" +\n\t                        "<input class=\'k-checkbox\' id=\'hCenter\' type=\'checkbox\' data-bind=\'checked: pdf.hCenter\'/><label class=\'k-checkbox-label\' for=\'hCenter\'>#: messages.exportAsDialog.labels.horizontally #</label>" +\n\t                        "<input class=\'k-checkbox\' id=\'vCenter\' type=\'checkbox\' data-bind=\'checked: pdf.vCenter\'/><label class=\'k-checkbox-label\' for=\'vCenter\'>#: messages.exportAsDialog.labels.vertically #</label>" +\n\t                    "</div>" +\n\t                    "<div class=\'k-page-orientation\'>" +\n\t                        "<span class=\'k-icon k-i-page-portrait\' data-bind=\'invisible: pdf.landscape\'></span>" +\n\t                        "<span class=\'k-icon k-i-page-landscape\' data-bind=\'visible: pdf.landscape\'></span>" +\n\t                    "</div>" +\n\t                "</div>" +\n\t                "<div class=\'k-action-buttons\'>" +\n\t                    "<button class=\'k-button k-primary\' data-bind=\'click: apply\'>#: messages.save #</button>" +\n\t                    "<button class=\'k-button\' data-bind=\'click: close\'>#: messages.cancel #</button>" +\n\t                "</div>"\n\t        },\n\t        apply: function() {\n\t            SpreadsheetDialog.fn.apply.call(this);\n\n\t            this.trigger("action", {\n\t                command: "SaveAsCommand",\n\t                options: this.viewModel\n\t            });\n\t        }\n\t    });\n\t    kendo.spreadsheet.dialogs.register("exportAs", ExportAsDialog);\n\n\t    function basicErrorDialog(id, msg) {\n\t        kendo.spreadsheet.dialogs.register(\n\t            id,\n\t            MessageDialog.extend({\n\t                options: { messageId: msg }\n\t            })\n\t        );\n\t    }\n\n\t    basicErrorDialog("modifyMerged", "modifyMergedDialog.errorMessage");\n\t    basicErrorDialog("rangeDisabled", "rangeDisabledDialog.errorMessage");\n\t    basicErrorDialog("intersectsArray", "intersectsArrayDialog.errorMessage");\n\t    basicErrorDialog("overflow", "overflowDialog.errorMessage");\n\t    basicErrorDialog("unsupportedSelection", "unsupportedSelectionDialog.errorMessage");\n\t    basicErrorDialog("incompatibleRanges", "incompatibleRangesDialog.errorMessage");\n\t    basicErrorDialog("noFillDirection", "noFillDirectionDialog.errorMessage");\n\t    basicErrorDialog("duplicateSheetName", "duplicateSheetNameDialog.errorMessage");\n\n\t    var ImportErrorDialog = MessageDialog.extend({\n\t        options: {\n\t            width: 640,\n\t            title: "Errors in import",\n\t            template:\n\t                "<div class=\'k-spreadsheet-message-content k-spreadsheet-import-errors\'>" +\n\t                  "<div class=\'k--header-message\'>We encountered #= errors.length # errors while reading this file.  Please be aware that some formulas might be missing, or contain invalid results.</div>" +\n\t                  "<div class=\'k--errors\'>" +\n\t                    "<table>" +\n\t                      "<thead>" +\n\t                        "<tr><th>Context</th><th>Error message</th></tr>" +\n\t                      "</thead>" +\n\t                      "# for (var i = 0; i < errors.length; ++i) { #" +\n\t                        "# var err = errors[i]; #" +\n\t                        "<tr><td>#: err.context #</td><td>#: err.error #</td></tr>" +\n\t                      "# } #" +\n\t                    "</table>" +\n\t                  "</div>" +\n\t                "</div>" +\n\t                "<div class=\'k-action-buttons\'>" +\n\t                  "<button class=\'k-button k-primary\' data-bind=\'click: close\'>" +\n\t                    "#: messages.okText #" +\n\t                  "</button>" +\n\t                "</div>"\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("importError", ImportErrorDialog);\n\n\t    var UseKeyboardDialog = MessageDialog.extend({\n\t        options: {\n\t            title: TEXT("useKeyboardDialog.title", "Copying and pasting"),\n\t            template:\n\t                "#: messages.useKeyboardDialog.errorMessage #" +\n\t                "<div>Ctrl+C #: messages.useKeyboardDialog.labels.forCopy #</div>" +\n\t                "<div>Ctrl+X #: messages.useKeyboardDialog.labels.forCut #</div>" +\n\t                "<div>Ctrl+V #: messages.useKeyboardDialog.labels.forPaste #</div>" +\n\t                \'<div class="k-action-buttons">\' +\n\t                    "<button class=\'k-button k-primary\' data-bind=\'click: close\'>" +\n\t                        "#= messages.okText #" +\n\t                    "</button>" +\n\t                "</div>"\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("useKeyboard", UseKeyboardDialog);\n\n\t    var HyperlinkDialog = SpreadsheetDialog.extend({\n\t        options: {\n\t            title: TEXT("linkDialog.title", "Hyperlink"),\n\t            template:\n\t            ("<div class=\'k-edit-label\'><label>#: messages.linkDialog.labels.url #:</label></div>" +\n\t             "<div class=\'k-edit-field\'><input class=\'k-textbox\' data-bind=\'value: url\' title=\'#: messages.linkDialog.labels.url #\' /></div>" +\n\t             "<div class=\'k-action-buttons\'>" + (\n\t                 ("<button class=\'k-button k-left\' data-bind=\'click: remove\'>#= messages.linkDialog.labels.removeLink #</button>" +\n\t                  "<button class=\'k-button k-primary\' data-bind=\'click: apply\'>#= messages.okText #</button>" +\n\t                  "<button class=\'k-button\' data-bind=\'click: cancel\'>#= messages.cancel #</button>")\n\t             ) + "</div>"\n\t            ),\n\t            autoFocus: false\n\t        },\n\t        open: function(range) {\n\t            var self = this;\n\t            SpreadsheetDialog.fn.open.apply(self, arguments);\n\t            var element = self.dialog().element;\n\t            var model = kendo.observable({\n\t                url: range.link(),\n\t                apply: function() {\n\t                    if (!/\\S/.test(model.url)) {\n\t                        model.url = null;\n\t                    }\n\t                    self.trigger("action", {\n\t                        command: "HyperlinkCommand",\n\t                        options: {\n\t                            link: model.url\n\t                        }\n\t                    });\n\t                    self.close();\n\t                },\n\t                remove: function() {\n\t                    model.url = null;\n\t                    model.apply();\n\t                },\n\t                cancel: self.close.bind(self)\n\t            });\n\t            kendo.bind(element, model);\n\n\t            // it would be nice if we could easily handle that in one\n\t            // place for all dialogs, but it doesn\'t seem easily\n\t            // doable.\n\t            element.find("input")\n\t                .focus()\n\t                .on("keydown", function(ev){\n\t                    if (ev.keyCode == 13 /*ENTER*/) {\n\t                        model.url = $(this).val(); // there won\'t be a "change" event and the model wouldn\'t update :-\\\n\t                        ev.stopPropagation();\n\t                        ev.preventDefault();\n\t                        model.apply();\n\t                    } else if (ev.keyCode == 27 /*ESC*/) {\n\t                        ev.stopPropagation();\n\t                        ev.preventDefault();\n\t                        model.cancel();\n\t                    }\n\t                });\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("hyperlink", HyperlinkDialog);\n\n\t    var InsertCommentDialog = SpreadsheetDialog.extend({\n\t        options: {\n\t            className: "k-spreadsheet-insert-comment",\n\t            template: "\\\n\t<div class=\'k-edit-label\'><label>#: messages.insertCommentDialog.labels.comment #:</label></div>\\\n\t<div class=\'k-edit-field\'><textarea rows=\'5\' class=\'k-textbox\' data-bind=\'value: comment\'></textarea></div>\\\n\t<div class=\'k-action-buttons\'>\\\n\t  <button class=\'k-button k-left\' data-bind=\'click: remove\'>#: messages.insertCommentDialog.labels.removeComment #</button>\\\n\t  <button class=\'k-button k-primary\' data-bind=\'click: apply\'>#: messages.okText #</button>\\\n\t  <button class=\'k-button\' data-bind=\'click: cancel\'>#= messages.cancel #</button>\\\n\t</div>\\\n\t",\n\t            title: TEXT("insertCommentDialog.title", "Insert comment"),\n\t            autoFocus: false,\n\t            width: 450\n\t        },\n\t        open: function(range) {\n\t            var self = this;\n\t            SpreadsheetDialog.fn.open.apply(self, arguments);\n\t            var element = self.dialog().element;\n\t            var model = kendo.observable({\n\t                comment: range.comment(),\n\t                apply: function() {\n\t                    if (!/\\S/.test(model.comment)) {\n\t                        model.comment = null;\n\t                    }\n\t                    self.trigger("action", {\n\t                        command: "InsertCommentCommand",\n\t                        options: {\n\t                            value: model.comment\n\t                        }\n\t                    });\n\t                    self.close();\n\t                },\n\t                remove: function() {\n\t                    model.comment = null;\n\t                    model.apply();\n\t                },\n\t                cancel: self.close.bind(self)\n\t            });\n\t            kendo.bind(element, model);\n\n\t            element.find("textarea").focus();\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("insertComment", InsertCommentDialog);\n\n\t    var InsertImageDialog = SpreadsheetDialog.extend({\n\t        options: {\n\t            template: "\\\n\t<div class=\'k-spreadsheet-insert-image-dialog\'>\\\n\t  <label data-bind=\'style: { background-image: imageUrl },\\\n\t                    css: { k-spreadsheet-has-image: hasImage, k-state-hovered: isHovered },\\\n\t                    events: { dragenter: dragEnter, dragover: stopEvent, dragleave: dragLeave, drop: drop }\'>\\\n\t    <div data-bind=\'text: info\'></div>\\\n\t    <input type=\'file\' data-bind=\'events: { change: change }\'\\\n\t           accept=\'image/png, image/jpeg, image/gif\' />\\\n\t  </label>\\\n\t</div>\\\n\t<div class=\'k-action-buttons\'>\\\n\t  <button class=\'k-button k-primary\' data-bind=\'enabled: okEnabled, click: apply\'>#: messages.okText #</button>\\\n\t  <button class=\'k-button\' data-bind=\'click: cancel\'>#= messages.cancel #</button>\\\n\t</div>",\n\t            title: TEXT("insertImageDialog.title", "Insert image"),\n\t            width: "auto"\n\t        },\n\t        open: function() {\n\t            var self = this;\n\t            SpreadsheetDialog.fn.open.apply(self, arguments);\n\t            var element = self.dialog().element;\n\t            var model = kendo.observable({\n\t                okEnabled: false,\n\t                info: kendo.spreadsheet.messages.dialogs.insertImageDialog.info,\n\t                imageUrl: "",\n\t                hasImage: false,\n\t                isHovered: false,\n\t                _url: null,\n\t                _image: null,\n\t                apply: function() {\n\t                    window.URL.revokeObjectURL(model._url);\n\t                    self.trigger("action", {\n\t                        command: "InsertImageCommand",\n\t                        options: {\n\t                            blob   : model._image,\n\t                            width  : model._width,\n\t                            height : model._height\n\t                        }\n\t                    });\n\t                    self.close();\n\t                },\n\t                cancel: self.close.bind(self),\n\t                stopEvent: function(ev) {\n\t                    ev.stopPropagation();\n\t                    ev.preventDefault();\n\t                },\n\t                drop: function(ev) {\n\t                    model.stopEvent(ev);\n\t                    model.selectFile(ev.originalEvent.dataTransfer.files);\n\t                    model.set("isHovered", false);\n\t                },\n\t                dragEnter: function(ev) {\n\t                    model.stopEvent(ev);\n\t                    model.set("isHovered", true);\n\t                },\n\t                dragLeave: function(ev) {\n\t                    model.stopEvent(ev);\n\t                    model.set("isHovered", false);\n\t                },\n\t                change: function(ev) {\n\t                    model.selectFile(ev.target.files);\n\t                },\n\t                selectFile: function(files) {\n\t                    var image;\n\t                    for (var i = 0; i < files.length; ++i) {\n\t                        if (/^image\\//i.test(files[i].type)) {\n\t                            image = files[i];\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (model._url) {\n\t                        window.URL.revokeObjectURL(model._url);\n\t                    }\n\t                    if (image) {\n\t                        model._image = image;\n\t                        model._url = window.URL.createObjectURL(image);\n\t                        var img = new Image();\n\t                        img.src = model._url;\n\t                        img.onload = function() {\n\t                            model._width = img.width;\n\t                            model._height = img.height;\n\t                            model.set("info", kendo.spreadsheet.messages.dialogs.insertImageDialog.info);\n\t                            model.set("okEnabled", true);\n\t                            model.set("imageUrl", "url(\'" + model._url + "\')");\n\t                            model.set("hasImage", true);\n\t                        };\n\t                    } else {\n\t                        model._image = null;\n\t                        model.set("info", kendo.spreadsheet.messages.dialogs.insertImageDialog.typeError);\n\t                        model.set("okEnabled", false);\n\t                        model.set("imageUrl", "");\n\t                        model.set("hasImage", false);\n\t                    }\n\t                }\n\t            });\n\t            kendo.bind(element, model);\n\t        }\n\t    });\n\n\t    kendo.spreadsheet.dialogs.register("insertImage", InsertImageDialog);\n\n\t    function Localizable(path, def) {\n\t        this.path = path.split(".");\n\t        this.def = def;\n\t    }\n\n\t    Localizable.prototype.trans = function() {\n\t        var msg = kendo.spreadsheet.messages.dialogs;\n\t        for (var i = 0; i < this.path.length; ++i) {\n\t            msg = msg[this.path[i]];\n\t            if (!msg) {\n\t                return this.def;\n\t            }\n\t        }\n\t        return msg;\n\t    };\n\n\t    function TEXT(path, def) {\n\t        return new Localizable(path, def);\n\t    }\n\n\t    function translate(thing) {\n\t        if (thing instanceof Localizable) {\n\t            return thing.trans();\n\t        }\n\t        else if (Array.isArray(thing)) {\n\t            return thing.map(translate);\n\t        }\n\t        else if (thing != null && typeof thing == "object") {\n\t            return Object.keys(thing).reduce(function(ret, key){\n\t                ret[key] = translate(thing[key]);\n\t                return ret;\n\t            }, {});\n\t        }\n\t        return thing;\n\t    }\n\n\t})(window.kendo);\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/dialogs.js?')},"./node_modules/@progress/kendo-ui/js/spreadsheet/editor.js":
/*!******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/editor.js ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1549);\n\tmodule.exports = __webpack_require__(1549);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1549:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function(kendo) {\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    var SheetEditor = kendo.Observable.extend({\n\t        init: function(view) {\n\t            kendo.Observable.fn.init.call(this);\n\n\t            this.view = view;\n\t            this.formulaBar = view.formulaBar;\n\t            this._active = false;\n\n\t            this.barInput = view.formulaBar.formulaInput;\n\t            this.cellInput = view.formulaInput;\n\n\t            this.barInput.syncWith(this.cellInput);\n\t            this.cellInput.syncWith(this.barInput);\n\n\t            this.barInput.bind("keyup", this._triggerUpdate.bind(this));\n\t            this.cellInput.bind("keyup", this._triggerUpdate.bind(this));\n\n\t            this.barInput.bind("blur", this._blur.bind(this));\n\t            this.cellInput.bind("blur", this._blur.bind(this));\n\t        },\n\n\t        events: [\n\t            "activate",\n\t            "deactivate",\n\t            "change",\n\t            "update"\n\t        ],\n\n\t        _blur: function() {\n\t            this.deactivate();\n\t        },\n\n\t        _triggerUpdate: function() {\n\t            this.trigger("update", { value: this.value() });\n\t        },\n\n\t        activeEditor: function() {\n\t            var editor = null;\n\t            var activeElement = kendo._activeElement();\n\n\t            if (this.barElement()[0] === activeElement) {\n\t                editor = this.barInput;\n\t            } else if (this.cellElement()[0] === activeElement) {\n\t                editor = this.cellInput;\n\t            }\n\n\t            return editor;\n\t        },\n\n\t        activate: function(options) {\n\t            this._active = true;\n\t            this._rect = options.rect;\n\t            this._range = options.range;\n\n\t            this.cellInput.position(options.rect);\n\t            this.cellInput.resize(options.rect);\n\t            this.cellInput.tooltip(options.tooltip);\n\t            this.cellInput.activeCell = this.barInput.activeCell = this._range.topLeft();\n\t            this.cellInput.activeSheet = this.barInput.activeSheet = this._range._sheet;\n\n\t            this.trigger("activate");\n\n\t            return this;\n\t        },\n\n\t        deactivate: function(noChange) {\n\t            var cellInput = this.cellInput;\n\n\t            if (!this._active) {\n\t                return;\n\t            }\n\n\t            this._active = false;\n\n\t            if (!noChange && cellInput.value() != this._value) {\n\t                this.trigger("change", {\n\t                    value: cellInput.value(),\n\t                    range: this._range\n\t                });\n\t            }\n\n\t            this._rect = null;\n\t            cellInput.hide();\n\t            this.trigger("deactivate");\n\t        },\n\n\t        enable: function(enable) {\n\t            this.barInput.enable(enable);\n\t            this.cellInput.enable(enable);\n\t        },\n\n\t        barElement: function() {\n\t            return this.barInput.element;\n\t        },\n\n\t        cellElement: function() {\n\t            return this.cellInput.element;\n\t        },\n\n\t        focus: function(inputType) {\n\t            inputType = inputType || "cell";\n\n\t            if (inputType === "cell") {\n\t                this.cellInput.element.focus();\n\t                this.cellInput.end();\n\t            } else {\n\t                this.barInput.element.focus();\n\t            }\n\t        },\n\n\t        isActive: function() {\n\t            return this._active;\n\t        },\n\n\t        isFiltered: function() {\n\t            return this.barInput.popup.visible() || this.cellInput.popup.visible();\n\t        },\n\n\t        canInsertRef: function(isKeyboardAction) {\n\t            var editor = this.activeEditor();\n\t            return editor && editor.canInsertRef(isKeyboardAction);\n\t        },\n\n\t        highlightedRefs: function() {\n\t            var editor = this.activeEditor();\n\t            var refs = [];\n\n\t            if (editor) {\n\t                refs = editor.highlightedRefs();\n\t            }\n\n\t            return refs;\n\t        },\n\n\t        scale: function() {\n\t            this.cellInput.scale();\n\t        },\n\n\t        toggleTooltip: function(rect) {\n\t            this.cellInput.toggleTooltip(notEqual(this._rect, rect));\n\t        },\n\n\t        value: function(value, isArrayFormula) {\n\t            if (value === undefined) {\n\t                return this.barInput.value();\n\t            }\n\n\t            if (value === null) {\n\t                value = "";\n\t            }\n\n\t            this._value = value;\n\n\t            this.barInput.value(value);\n\t            this.cellInput.value(value);\n\n\t            this.barInput.element.toggleClass("k-spreadsheet-array-formula", !!isArrayFormula);\n\t        },\n\n\t        insertNewline: function() {\n\t            this.activeEditor().insertNewline();\n\t            this.scale();\n\t        },\n\n\t        select: function() {\n\t            this.activeEditor().select();\n\t        }\n\t    });\n\n\t    function notEqual(oldRect, newRect) {\n\t        return oldRect && (oldRect.top !== newRect.top || oldRect.left !== newRect.left);\n\t    }\n\n\t    kendo.spreadsheet.SheetEditor = SheetEditor;\n\t})(kendo);\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/editor.js?')}}]);