(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{"./node_modules/@progress/kendo-ui/js/kendo.filebrowser.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.filebrowser.js ***!
  \*****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1231);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1054:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.dropdownlist */ "./node_modules/@progress/kendo-ui/js/kendo.dropdownlist.js");\n\n/***/ }),\n\n/***/ 1231:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1232), __webpack_require__(1054), __webpack_require__(1233), __webpack_require__(1234) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "filebrowser",\n\t    name: "FileBrowser",\n\t    category: "web",\n\t    description: "",\n\t    hidden: true,\n\t    depends: [ "selectable", "listview", "dropdownlist", "upload", "breadcrumb" ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        Widget = kendo.ui.Widget,\n\t        isPlainObject = $.isPlainObject,\n\t        proxy = $.proxy,\n\t        extend = $.extend,\n\t        placeholderSupported = kendo.support.placeholder,\n\t        browser = kendo.support.browser,\n\t        isFunction = kendo.isFunction,\n\t        trimSlashesRegExp = /(^\\/|\\/$)/g,\n\t        CHANGE = "change",\n\t        APPLY = "apply",\n\t        ERROR = "error",\n\t        CLICK = "click",\n\t        NS = ".kendoFileBrowser",\n\t        SEARCHBOXNS = ".kendoSearchBox",\n\t        NAMEFIELD = "name",\n\t        SIZEFIELD = "size",\n\t        TYPEFIELD = "type",\n\t        DEFAULTSORTORDER = { field: TYPEFIELD, dir: "asc" },\n\t        EMPTYTILE = kendo.template(\'<div class="k-listview-item k-listview-item-empty"><span class="k-file-preview"><span class="k-file-icon k-icon k-i-none"></span></span><span class="k-file-name">${text}</span></div>\'),\n\t        TOOLBARTMPL = \'<div class="k-widget k-filebrowser-toolbar k-toolbar k-floatwrap">\' +\n\n\t                            \'# if (showCreate) { #\' +\n\t                                \'<button type="button" class="k-button k-icon-button"><span class="k-icon k-i-folder-add"></span></button>\' +\n\t                            \'# } #\' +\n\n\t                            \'# if (showUpload) { # \' +\n\t                                \'<div class="k-widget k-upload"><div class="k-button k-button-icontext k-upload-button">\' +\n\t                                    \'<span class="k-icon k-i-plus"></span>#=messages.uploadFile#<input type="file" name="file" /></div></div>\' +\n\t                            \'# } #\' +\n\n\t                            \'# if (showDelete) { #\' +\n\t                                \'<button type="button" class="k-button k-button-icon k-state-disabled"><span class="k-icon k-i-close"></span></button>\' +\n\t                            \'# } #\' +\n\t                            \'<div class="k-tiles-arrange">\' +\n\t                                \'<label>#=messages.orderBy#: <select></select></label>\' +\n\t                            \'</div>\' +\n\n\t                            \'<span class="k-toolbar-spacer" />\' +\n\n\t                            \'<input data-role="searchbox" />\' +\n\n\t                        \'</div>\';\n\n\t    extend(true, kendo.data, {\n\t        schemas: {\n\t            "filebrowser": {\n\t                data: function(data) {\n\t                    return data.items || data || [];\n\t                },\n\t                model: {\n\t                    id: "name",\n\t                    fields: {\n\t                        name: "name",\n\t                        size: "size",\n\t                        type: "type"\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    extend(true, kendo.data, {\n\t        transports: {\n\t            "filebrowser": kendo.data.RemoteTransport.extend({\n\t                init: function(options) {\n\t                    kendo.data.RemoteTransport.fn.init.call(this, $.extend(true, {}, this.options, options));\n\t                },\n\t                _call: function(type, options) {\n\t                    options.data = $.extend({}, options.data, { path: this.options.path() });\n\n\t                    if (isFunction(this.options[type])) {\n\t                        this.options[type].call(this, options);\n\t                    } else {\n\t                        kendo.data.RemoteTransport.fn[type].call(this, options);\n\t                    }\n\t                },\n\t                read: function(options) {\n\t                    this._call("read", options);\n\t                },\n\t                create: function(options) {\n\t                    this._call("create", options);\n\t                },\n\t                destroy: function(options) {\n\t                    this._call("destroy", options);\n\t                },\n\t                update: function() {\n\t                    //updates are handled by the upload\n\t                },\n\t                options: {\n\t                    read: {\n\t                        type: "POST"\n\t                    },\n\t                    update: {\n\t                        type: "POST"\n\t                    },\n\t                    create: {\n\t                        type: "POST"\n\t                    },\n\t                    destroy: {\n\t                        type: "POST"\n\t                    }\n\t                }\n\t            })\n\t        }\n\t    });\n\n\t    function bindDragEventWrappers(element, onDragEnter, onDragLeave) {\n\t        var hideInterval, lastDrag;\n\n\t        element\n\t            .on("dragenter" + NS, function() {\n\t                onDragEnter();\n\t                lastDrag = new Date();\n\n\t                if (!hideInterval) {\n\t                    hideInterval = setInterval(function() {\n\t                        var sinceLastDrag = new Date() - lastDrag;\n\t                        if (sinceLastDrag > 100) {\n\t                            onDragLeave();\n\n\t                            clearInterval(hideInterval);\n\t                            hideInterval = null;\n\t                        }\n\t                    }, 100);\n\t                }\n\t            })\n\t            .on("dragover" + NS, function() {\n\t                lastDrag = new Date();\n\t            });\n\t    }\n\n\t    var offsetTop;\n\t    if (browser.msie && browser.version < 8) {\n\t        offsetTop = function (element) {\n\t            return element.offsetTop;\n\t        };\n\t    } else {\n\t        offsetTop = function (element) {\n\t            return element.offsetTop - $(element).height();\n\t        };\n\t    }\n\n\t    function concatPaths(path, name) {\n\t        if(path === undefined || !path.match(/\\/$/)) {\n\t            path = (path || "") + "/";\n\t        }\n\t        return path + name;\n\t    }\n\n\t    function sizeFormatter(value) {\n\t        if(!value) {\n\t            return "";\n\t        }\n\n\t        var suffix = " bytes";\n\n\t        if (value >= 1073741824) {\n\t            suffix = " GB";\n\t            value /= 1073741824;\n\t        } else if (value >= 1048576) {\n\t            suffix = " MB";\n\t            value /= 1048576;\n\t        } else  if (value >= 1024) {\n\t            suffix = " KB";\n\t            value /= 1024;\n\t        }\n\n\t        return Math.round(value * 100) / 100 + suffix;\n\t    }\n\n\t    function fieldName(fields, name) {\n\t        var descriptor = fields[name];\n\n\t        if (isPlainObject(descriptor)) {\n\t            return descriptor.from || descriptor.field || name;\n\t        }\n\t        return descriptor;\n\t    }\n\n\t    var FileBrowser = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            options = options || {};\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that.element.addClass("k-filebrowser");\n\n\t            that.element\n\t                .on(CLICK + NS, ".k-filebrowser-toolbar button:not(.k-state-disabled):has(.k-i-close)", proxy(that._deleteClick, that))\n\t                .on(CLICK + NS, ".k-filebrowser-toolbar button:not(.k-state-disabled):has(.k-i-folder-add)", proxy(that._addClick, that))\n\t                .on("keydown" + NS, ".k-listview-item.k-state-selected input", proxy(that._directoryKeyDown, that))\n\t                .on("blur" + NS, ".k-listview-item.k-state-selected input", proxy(that._directoryBlur, that));\n\n\t            that._dataSource();\n\n\t            that.refresh();\n\n\t            that.path(that.options.path);\n\t        },\n\n\t        options: {\n\t            name: "FileBrowser",\n\t            messages: {\n\t                uploadFile: "Upload",\n\t                orderBy: "Arrange by",\n\t                orderByName: "Name",\n\t                orderBySize: "Size",\n\t                directoryNotFound: "A directory with this name was not found.",\n\t                emptyFolder: "Empty Folder",\n\t                deleteFile: \'Are you sure you want to delete "{0}"?\',\n\t                invalidFileType: "The selected file \\"{0}\\" is not valid. Supported file types are {1}.",\n\t                overwriteFile: "A file with name \\"{0}\\" already exists in the current directory. Do you want to overwrite it?",\n\t                dropFilesHere: "drop file here to upload",\n\t                search: "Search"\n\t            },\n\t            transport: {},\n\t            path: "/",\n\t            fileTypes: "*.*"\n\t        },\n\n\t        events: [ERROR, CHANGE, APPLY],\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            that.dataSource\n\t                .unbind(ERROR, that._errorHandler);\n\n\t            that.element\n\t                .add(that.list)\n\t                .add(that.toolbar)\n\t                .off(NS);\n\n\t            kendo.destroy(that.element);\n\t        },\n\n\t        value: function() {\n\t            var that = this,\n\t                selected = that._selectedItem(),\n\t                path,\n\t                fileUrl = that.options.transport.fileUrl;\n\n\t            if (selected && selected.get(TYPEFIELD) === "f") {\n\t                path = concatPaths(that.path(), selected.get(NAMEFIELD)).replace(trimSlashesRegExp, "");\n\t                if (fileUrl) {\n\t                    path = isFunction(fileUrl) ? fileUrl(path) : kendo.format(fileUrl, encodeURIComponent(path));\n\t                }\n\t                return path;\n\t            }\n\t        },\n\n\t        _selectedItem: function() {\n\t            var listView = this.listView,\n\t                selected = listView.select();\n\n\t            if (selected.length) {\n\t                return this.dataSource.getByUid(selected.attr(kendo.attr("uid")));\n\t            }\n\t        },\n\n\t        _toolbar: function() {\n\t            var that = this,\n\t                template = kendo.template(TOOLBARTMPL),\n\t                messages = that.options.messages,\n\t                arrangeBy = [\n\t                    { text: messages.orderByName, value: "name" },\n\t                    { text: messages.orderBySize, value: "size" }\n\t                ];\n\n\t            that.toolbar = $(template({\n\t                    messages: messages,\n\t                    showUpload: that.options.transport.uploadUrl,\n\t                    showCreate: that.options.transport.create,\n\t                    showDelete: that.options.transport.destroy\n\t                }))\n\t                .appendTo(that.element)\n\t                .find(".k-upload input")\n\t                .kendoUpload({\n\t                    multiple: false,\n\t                    localization: {\n\t                        dropFilesHere: messages.dropFilesHere\n\t                    },\n\t                    async: {\n\t                        saveUrl: that.options.transport.uploadUrl,\n\t                        autoUpload: true\n\t                    },\n\t                    upload: proxy(that._fileUpload, that),\n\t                    error: function(e) {\n\t                        that._error({ xhr: e.XMLHttpRequest, status: "error" });\n\t                    }\n\t                }).end();\n\n\t            that.upload = that.toolbar\n\t                .find(".k-upload input")\n\t                .data("kendoUpload");\n\n\t            that.arrangeBy = that.toolbar.find(".k-tiles-arrange select")\n\t                .kendoDropDownList({\n\t                    dataSource: arrangeBy,\n\t                    dataTextField: "text",\n\t                    dataValueField: "value",\n\t                    change: function() {\n\t                        that.orderBy(this.value());\n\t                    }\n\t                })\n\t                .data("kendoDropDownList");\n\n\t            that.searchBox = that.toolbar.find("input[data-role=\'searchbox\']")\n\t                .kendoSearchBox({\n\t                    label: that.options.messages.search,\n\t                    change: function() {\n\t                        that.search(this.value());\n\t                    }\n\t                }).data("kendoSearchBox");\n\n\t            that._attachDropzoneEvents();\n\t        },\n\n\t        _attachDropzoneEvents: function() {\n\t            var that = this;\n\n\t            if (that.options.transport.uploadUrl) {\n\t                bindDragEventWrappers($(document.documentElement),\n\t                    $.proxy(that._dropEnter, that),\n\t                    $.proxy(that._dropLeave, that)\n\t                );\n\t                that._scrollHandler = proxy(that._positionDropzone, that);\n\t            }\n\t        },\n\n\t        _dropEnter: function() {\n\t            this._positionDropzone();\n\t            $(document).on("scroll" + NS, this._scrollHandler);\n\t        },\n\n\t        _dropLeave: function() {\n\t            this._removeDropzone();\n\t            $(document).off("scroll" + NS, this._scrollHandler);\n\t        },\n\n\t        _positionDropzone: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                offset = element.offset();\n\n\t            that.toolbar.find(".k-dropzone")\n\t                .addClass("k-filebrowser-dropzone")\n\t                .offset(offset)\n\t                .css({\n\t                    width: element[0].clientWidth,\n\t                    height: element[0].clientHeight,\n\t                    lineHeight: element[0].clientHeight + "px"\n\t                });\n\t        },\n\n\t        _removeDropzone: function() {\n\t            this.toolbar.find(".k-dropzone")\n\t                .removeClass("k-filebrowser-dropzone")\n\t                .css({ width: "", height: "", lineHeight: "", top: "", left: "" });\n\t        },\n\n\t        _deleteClick: function() {\n\t            var that = this,\n\t                item = that.listView.select(),\n\t                message = kendo.format(that.options.messages.deleteFile, item.find(".k-file-name").text());\n\n\t            if (item.length && that._showMessage(message, "confirm")) {\n\t                that.listView.remove(item);\n\t            }\n\t        },\n\n\t        _addClick: function() {\n\t            this.createDirectory();\n\t        },\n\n\t        _getFieldName: function(name) {\n\t            return fieldName(this.dataSource.reader.model.fields, name);\n\t        },\n\n\t        _fileUpload: function(e) {\n\t            var that = this,\n\t                options = that.options,\n\t                fileTypes = options.fileTypes,\n\t                filterRegExp = new RegExp(("(" + fileTypes.split(",").join(")|(") + ")").replace(/\\*\\./g , ".*."), "i"),\n\t                fileName = e.files[0].name,\n\t                fileSize = e.files[0].size,\n\t                fileNameField = NAMEFIELD,\n\t                sizeField = SIZEFIELD,\n\t                file;\n\n\t            if (filterRegExp.test(fileName)) {\n\t                e.data = { path: that.path() };\n\n\t                file = that._createFile(fileName, fileSize);\n\n\t                if (!file) {\n\t                    e.preventDefault();\n\t                } else {\n\t                    that.upload.one("success", function(e) {\n\t                        var model = that._insertFileToList(file);\n\n\t                        if(model._override) {\n\t                            model.set(fileNameField, e.response[that._getFieldName(fileNameField)]);\n\t                            model.set(sizeField, e.response[that._getFieldName(sizeField)]);\n\n\t                            that.listView.dataSource.pushUpdate(model);\n\t                        }\n\n\t                        that._tiles = that.listView.items().filter("[" + kendo.attr("type") + "=f]");\n\t                    });\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t                that._showMessage(kendo.format(options.messages.invalidFileType, fileName, fileTypes));\n\t            }\n\t        },\n\n\t        _findFile: function(name) {\n\t            var data = this.dataSource.data(),\n\t                idx,\n\t                result,\n\t                typeField = TYPEFIELD,\n\t                nameField = NAMEFIELD,\n\t                length;\n\n\t            name = name.toLowerCase();\n\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                if (data[idx].get(typeField) === "f" &&\n\t                    data[idx].get(nameField).toLowerCase() === name) {\n\n\t                    result = data[idx];\n\t                    break;\n\t                }\n\t            }\n\t            return result;\n\t        },\n\n\t        _createFile: function(fileName, fileSize) {\n\t            var that = this,\n\t                model = {},\n\t                typeField = TYPEFIELD,\n\t                file = that._findFile(fileName);\n\n\t            if (file) {\n\t                if (!that._showMessage(kendo.format(that.options.messages.overwriteFile, fileName), "confirm")) {\n\t                    return null;\n\t                } else {\n\t                    file._override = true;\n\t                    return file;\n\t                }\n\t            }\n\n\t            model[typeField] = "f";\n\t            model[NAMEFIELD] = fileName;\n\t            model[SIZEFIELD] = fileSize;\n\n\t            return model;\n\t        },\n\n\t        _insertFileToList: function(model) {\n\t            var index;\n\t            if(model._override) {\n\t                return model;\n\t            }\n\n\t            var dataSource = this.dataSource;\n\t            var view = dataSource.view();\n\n\t            for (var i = 0, length = view.length; i < length; i++) {\n\t                if (view[i].get(TYPEFIELD) === "f") {\n\t                    index = i;\n\t                    break;\n\t                }\n\t            }\n\n\t            return dataSource.insert(++index, model);\n\t        },\n\n\t        createDirectory: function() {\n\t            var that = this,\n\t                idx,\n\t                length,\n\t                lastDirectoryIdx = 0,\n\t                typeField = TYPEFIELD,\n\t                nameField = NAMEFIELD,\n\t                view = that.dataSource.data(),\n\t                name = that._nameDirectory(),\n\t                model = new that.dataSource.reader.model();\n\n\t            for (idx = 0, length = view.length; idx < length; idx++) {\n\t                if (view[idx].get(typeField) === "d") {\n\t                    lastDirectoryIdx = idx;\n\t                }\n\t            }\n\n\t            model.set(typeField, "d");\n\t            model.set(nameField, name);\n\n\t            that.listView.one("dataBound", function() {\n\t                var selected = that.listView.items()\n\t                    .filter("[" + kendo.attr("uid") + "=" + model.uid + "]");\n\n\t                if (selected.length) {\n\t                    this.edit(selected);\n\t                }\n\n\t                this.element.scrollTop(selected.attr("offsetTop") - this.element[0].offsetHeight);\n\n\t                setTimeout(function() {\n\t                    that.listView.element.find(\'.k-edit-item input\').select();\n\t                });\n\t            })\n\t            .one("save", function(e) {\n\t                var value = e.model.get(nameField);\n\n\t                if (!value) {\n\t                    e.model.set(nameField, name);\n\t                } else {\n\t                    e.model.set(nameField, that._nameExists(value, model.uid) ? that._nameDirectory() : value);\n\t                }\n\t            });\n\n\t            that.dataSource.insert(++lastDirectoryIdx, model);\n\t        },\n\n\t        _directoryKeyDown: function(e) {\n\t            if (e.keyCode == 13) {\n\t                e.currentTarget.blur();\n\t            }\n\t        },\n\n\t        _directoryBlur: function() {\n\t            this.listView.save();\n\t        },\n\n\t        _nameExists: function(name, uid) {\n\t            var data = this.dataSource.data(),\n\t                typeField = TYPEFIELD,\n\t                nameField = NAMEFIELD,\n\t                idx,\n\t                length;\n\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                if (data[idx].get(typeField) === "d" &&\n\t                    data[idx].get(nameField).toLowerCase() === name.toLowerCase() &&\n\t                    data[idx].uid !== uid) {\n\t                    return true;\n\t                }\n\t            }\n\t            return false;\n\t        },\n\n\t        _nameDirectory: function() {\n\t            var name = "New folder",\n\t                data = this.dataSource.data(),\n\t                directoryNames = [],\n\t                typeField = TYPEFIELD,\n\t                nameField = NAMEFIELD,\n\t                candidate,\n\t                idx,\n\t                length;\n\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                if (data[idx].get(typeField) === "d" && data[idx].get(nameField).toLowerCase().indexOf(name.toLowerCase()) > -1) {\n\t                    directoryNames.push(data[idx].get(nameField));\n\t                }\n\t            }\n\n\t            if ($.inArray(name, directoryNames) > -1) {\n\t                idx = 2;\n\n\t                do {\n\t                    candidate = name + " (" + idx + ")";\n\t                    idx++;\n\t                } while ($.inArray(candidate, directoryNames) > -1);\n\n\t                name = candidate;\n\t            }\n\n\t            return name;\n\t        },\n\n\t        orderBy: function(field) {\n\t            this.dataSource.sort([\n\t                { field: TYPEFIELD, dir: "asc" },\n\t                { field: field, dir: "asc" }\n\t            ]);\n\t        },\n\n\t        search: function(name) {\n\t            this.dataSource.filter({\n\t                field: NAMEFIELD,\n\t                operator: "contains",\n\t                value: name\n\t            });\n\t        },\n\n\t        _content: function() {\n\t            var that = this;\n\n\t            that.list = $(\'<div class="k-filemanager-listview" />\')\n\t                .appendTo(that.element)\n\t                .on("dblclick" + NS, ".k-listview-item", proxy(that._dblClick, that));\n\n\t            that.listView = new kendo.ui.ListView(that.list, {\n\t                layout: "flex",\n\t                flex: {\n\t                    direction: "row",\n\t                    wrap: "wrap"\n\t                },\n\t                dataSource: that.dataSource,\n\t                template: that._itemTmpl(),\n\t                editTemplate: that._editTmpl(),\n\t                selectable: true,\n\t                autoBind: false,\n\t                dataBinding: function(e) {\n\t                    that.toolbar.find(".k-i-close").parent().addClass("k-state-disabled");\n\n\t                    if (e.action === "remove" || e.action === "sync") {\n\t                        e.preventDefault();\n\t                        kendo.ui.progress(that.listView.content, false);\n\t                    }\n\t                },\n\t                dataBound: function() {\n\t                    if (that.dataSource.view().length) {\n\t                        that._tiles = this.items().filter("[" + kendo.attr("type") + "=f]");\n\t                    } else {\n\t                        this.content.append(EMPTYTILE({ text: that.options.messages.emptyFolder }));\n\t                    }\n\t                },\n\t                change: proxy(that._listViewChange, that)\n\t            });\n\t        },\n\n\t        _dblClick: function(e) {\n\t            var that = this,\n\t                li = $(e.currentTarget);\n\n\t            if (li.hasClass("k-edit-item")) {\n\t                that._directoryBlur();\n\t            }\n\n\t            if (li.filter("[" + kendo.attr("type") + "=d]").length) {\n\t                var folder = that.dataSource.getByUid(li.attr(kendo.attr("uid")));\n\t                if (folder) {\n\t                    that.path(concatPaths(that.path(), folder.get(NAMEFIELD)));\n\t                    that.breadcrumbs.value("/" + that.path());\n\t                }\n\t            } else if (li.filter("[" + kendo.attr("type") + "=f]").length) {\n\t                that.trigger(APPLY);\n\t            }\n\t        },\n\n\t        _listViewChange: function() {\n\t            var selected = this._selectedItem();\n\n\t            if (selected) {\n\t                this.toolbar.find(".k-i-close").parent().removeClass("k-state-disabled");\n\t                this.trigger(CHANGE, { selected: selected });\n\t            }\n\t        },\n\n\t        _dataSource: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                transport = options.transport,\n\t                typeSortOrder = extend({}, DEFAULTSORTORDER),\n\t                nameSortOrder = { field: NAMEFIELD, dir: "asc" },\n\t                schema,\n\t                dataSource = {\n\t                    type: transport.type || "filebrowser",\n\t                    sort: [typeSortOrder, nameSortOrder]\n\t                };\n\n\t            if (isPlainObject(transport)) {\n\t                transport.path = proxy(that.path, that);\n\t                dataSource.transport = transport;\n\t            }\n\n\t            if (isPlainObject(options.schema)) {\n\t                dataSource.schema = options.schema;\n\t            } else if (transport.type && isPlainObject(kendo.data.schemas[transport.type])) {\n\t                schema = kendo.data.schemas[transport.type];\n\t            }\n\n\t            if (that.dataSource && that._errorHandler) {\n\t                that.dataSource.unbind(ERROR, that._errorHandler);\n\t            } else {\n\t                that._errorHandler = proxy(that._error, that);\n\t            }\n\n\t            that.dataSource = kendo.data.DataSource.create(dataSource)\n\t                .bind(ERROR, that._errorHandler);\n\t        },\n\n\t        _navigation: function() {\n\t            var that = this,\n\t                navigation = $(\'<div class="k-floatwrap"><nav></nav></div>\')\n\t                    .appendTo(this.element);\n\n\t            that.breadcrumbs = navigation.find("nav:first")\n\t                    .kendoBreadcrumb({\n\t                        editable: true,\n\t                        gap: 50,\n\t                        value: that.options.path || "/",\n\t                        change: function() {\n\t                            that.path(this.value());\n\t                        }\n\t                    }).data("kendoBreadcrumb");\n\t        },\n\n\t        _error: function(e) {\n\t            var that = this,\n\t                status;\n\n\t            if (!that.trigger(ERROR, e)) {\n\t                status = e.xhr.status;\n\n\t                if (e.status == \'error\') {\n\t                    if (status == \'404\') {\n\t                        that._showMessage(that.options.messages.directoryNotFound);\n\t                    } else if (status != \'0\') {\n\t                        that._showMessage(\'Error! The requested URL returned \' + status + \' - \' + e.xhr.statusText);\n\t                    }\n\t                } else if (status == \'timeout\') {\n\t                    that._showMessage(\'Error! Server timeout.\');\n\t                }\n\n\t                var dataSource = that.dataSource;\n\t                if (dataSource.hasChanges()) {\n\t                    dataSource.cancelChanges();\n\t                }\n\t            }\n\t        },\n\n\t        _showMessage: function(message, type) {\n\t            return window[type || "alert"](message);\n\t        },\n\n\t        refresh: function() {\n\t            var that = this;\n\t            that._navigation();\n\t            that._toolbar();\n\t            that._content();\n\t        },\n\n\t        _editTmpl: function() {\n\t            var html = \'<div class="k-listview-item k-state-selected" \' + kendo.attr("uid") + \'="#=uid#" \';\n\n\t            html += kendo.attr("type") + \'="${\' + TYPEFIELD + \'}">\';\n\t            html += \'#if(\' + TYPEFIELD + \' == "d") { #\';\n\t            html += \'<div class="k-file-preview"><span class="k-file-icon k-icon k-i-folder"></span></div>\';\n\t            html += "#}else{#";\n\t            html += \'<div class="k-file-preview"><span class="k-file-icon k-icon k-i-loading"></span></div>\';\n\t            html += "#}#";\n\t            html += \'#if(\' + TYPEFIELD + \' == "d") { #\';\n\t            html += \'<span class="k-file-name"><input class="k-textbox" \' + kendo.attr("bind") + \'="value:\' + NAMEFIELD + \'"/></span>\';\n\t            html += "#}#";\n\t            html += \'</div>\';\n\n\t            return proxy(kendo.template(html), { sizeFormatter: sizeFormatter } );\n\t        },\n\n\t        _itemTmpl: function() {\n\t            var html = \'<div class="k-listview-item" \' + kendo.attr("uid") + \'="#=uid#" \';\n\n\t            html += kendo.attr("type") + \'="${\' + TYPEFIELD + \'}">\';\n\t            html += \'#if(\' + TYPEFIELD + \' == "d") { #\';\n\t            html += \'<div class="k-file-preview"><span class="k-file-icon k-icon k-i-folder"></span></div>\';\n\t            html += "#}else{#";\n\t            html += \'<div class="k-file-preview"><span class="k-file-icon k-icon k-i-file"></span></div>\';\n\t            html += "#}#";\n\t            html += \'<span class="k-file-name">${\' + NAMEFIELD + \'}</span>\';\n\t            html += \'#if(\' + TYPEFIELD + \' == "f") { # <span class="k-file-size">${this.sizeFormatter(\' + SIZEFIELD + \')}</span> #}#\';\n\t            html += \'</div>\';\n\n\t            return proxy(kendo.template(html), { sizeFormatter: sizeFormatter } );\n\t        },\n\n\t        path: function(value) {\n\t            var that = this,\n\t                path = that._path || "";\n\n\t            if (value !== undefined) {\n\t                that._path = value.replace(trimSlashesRegExp, "") + "/";\n\t                that.dataSource.read({ path: that._path });\n\t                return;\n\t            }\n\n\t            if (path) {\n\t                path = path.replace(trimSlashesRegExp, "");\n\t            }\n\n\t            return path === "/" || path === "" ? "" : (path + "/");\n\t        }\n\t    });\n\n\t    var SearchBox = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            options = options || {};\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            if (placeholderSupported) {\n\t                that.element.attr("placeholder", that.options.label);\n\t            }\n\n\t            that._wrapper();\n\n\t            that.element\n\t                .on("keydown" + SEARCHBOXNS, proxy(that._keydown, that))\n\t                .on("change" + SEARCHBOXNS, proxy(that._updateValue, that));\n\n\t            that.wrapper\n\t                .on(CLICK + SEARCHBOXNS, "a", proxy(that._click, that));\n\n\t            if (!placeholderSupported) {\n\t                that.element.on("focus" + SEARCHBOXNS, proxy(that._focus, that))\n\t                    .on("blur" + SEARCHBOXNS, proxy(that._blur, that));\n\t            }\n\t        },\n\n\t        options: {\n\t            name: "SearchBox",\n\t            label: "Search",\n\t            value: ""\n\t        },\n\n\t        events: [ CHANGE ],\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that.wrapper\n\t                .add(that.element)\n\t                .add(that.label)\n\t                .off(SEARCHBOXNS);\n\n\t            Widget.fn.destroy.call(that);\n\t        },\n\n\t        _keydown: function(e) {\n\t            if (e.keyCode === 13) {\n\t                this._updateValue();\n\t            }\n\t        },\n\n\t        _click: function(e) {\n\t            e.preventDefault();\n\t            this._updateValue();\n\t        },\n\n\t        _updateValue: function() {\n\t            var that = this,\n\t                value = that.element.val();\n\n\t            if (value !== that.value()) {\n\t                that.value(value);\n\n\t                that.trigger(CHANGE);\n\t            }\n\t        },\n\n\t        _blur: function() {\n\t            this._updateValue();\n\t            this._toggleLabel();\n\t        },\n\n\t        _toggleLabel: function() {\n\t            if (!placeholderSupported) {\n\t                this.label.toggle(!this.element.val());\n\t            }\n\t        },\n\n\t        _focus: function() {\n\t            this.label.hide();\n\t        },\n\n\t        _wrapper: function() {\n\t            var element = this.element,\n\t                wrapper = element.parents(".k-search-wrap");\n\n\t            element[0].style.width = "";\n\t            element.addClass("k-input");\n\n\t            if (!wrapper.length) {\n\t                wrapper = element.wrap($(\'<div class="k-widget k-search-wrap k-textbox"/>\')).parent();\n\t                if (!placeholderSupported) {\n\t                    $(\'<label style="display:block">\' + this.options.label + \'</label>\').insertBefore(element);\n\t                }\n\t                $(\'<a href="#" class="k-icon k-i-zoom k-search"/>\').appendTo(wrapper);\n\t            }\n\n\t            this.wrapper = wrapper;\n\t            this.label = wrapper.find(">label");\n\t        },\n\n\t        value: function(value) {\n\t            var that = this;\n\n\t            if (value !== undefined) {\n\t                that.options.value = value;\n\t                that.element.val(value);\n\t                that._toggleLabel();\n\t                return;\n\t            }\n\t            return that.options.value;\n\t        }\n\t    });\n\n\t    kendo.ui.plugin(FileBrowser);\n\t    kendo.ui.plugin(SearchBox);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1232:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.listview */ "./node_modules/@progress/kendo-ui/js/kendo.listview.js");\n\n/***/ }),\n\n/***/ 1233:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.upload */ "./node_modules/@progress/kendo-ui/js/kendo.upload.js");\n\n/***/ }),\n\n/***/ 1234:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.breadcrumb */ "./node_modules/@progress/kendo-ui/js/kendo.breadcrumb.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.filebrowser.js?')},"./node_modules/@progress/kendo-ui/js/kendo.filemanager.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.filemanager.js ***!
  \*****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1235);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1190:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.resizable */ "./node_modules/@progress/kendo-ui/js/kendo.resizable.js");\n\n/***/ }),\n\n/***/ 1233:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.upload */ "./node_modules/@progress/kendo-ui/js/kendo.upload.js");\n\n/***/ }),\n\n/***/ 1234:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.breadcrumb */ "./node_modules/@progress/kendo-ui/js/kendo.breadcrumb.js");\n\n/***/ }),\n\n/***/ 1235:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t        __webpack_require__(1240),\n\t        __webpack_require__(1237),\n\t        __webpack_require__(1238),\n\t        __webpack_require__(1239),\n\t        __webpack_require__(1236),\n\n\t        __webpack_require__(1234),\n\t        __webpack_require__(1233),\n\t        __webpack_require__(1241),\n\t        __webpack_require__(1190)\n\t    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "filemanager",\n\t    name: "FileManager",\n\t    category: "web",\n\t    description: "The FileManager widget displays offers file management functionality.",\n\t    depends: [ "core", "data", "listview", "toolbar", "breadcrumb", "menu", "treeview", "upload", "dialog", "switch", "resizable", "selectable", "editable" ],\n\t    features: [{\n\t        id: "filemanager-grid-view",\n\t        name: "GridView",\n\t        description: "Support for GridView",\n\t        depends: [ "grid" ]\n\t    }]\n\t};\n\n\t(function($, undefined) {\n\t    var ui = kendo.ui,\n\t        extend = $.extend,\n\t        isPlainObject = $.isPlainObject,\n\t        isArray = $.isArray,\n\t        DataBoundWidget = ui.DataBoundWidget,\n\t        proxy = $.proxy,\n\t        template = kendo.template,\n\t        outerHeight = kendo._outerHeight,\n\n\t        NAVIGATE = "navigate",\n\t        SELECT = "select",\n\t        OPEN = "open",\n\t        ERROR = "error",\n\t        CHANGE = "change",\n\t        UPLOAD = "upload",\n\t        SUCCESS = "success",\n\t        CLOSE = "close",\n\t        HIDE = "hide",\n\t        LOAD = "load",\n\t        DATABINDING = "dataBinding",\n\t        DATABOUND = "dataBound",\n\t        DROP = "drop",\n\t        EXECUTE = "execute",\n\t        COMMAND = "command",\n\t        KEYDOWNACTION = "keydownAction",\n\t        CANCEL = "cancel",\n\n\t        TREE_TYPE = "tree",\n\t        DOT = ".";\n\n\t    var fileManagerStyles = {\n\t        wrapper: "k-widget k-filemanager",\n\t        header: "k-filemanager-header",\n\t        navigation: "k-filemanager-navigation",\n\t        contentContainer: "k-filemanager-content-container",\n\t        content: "k-filemanager-content",\n\t        preview: "k-filemanager-preview",\n\t        toolbar: "k-filemanager-toolbar",\n\t        treeview: "k-filemanager-treeview",\n\t        breadcrumb: "k-filemanager-breadcrumb",\n\t        view: "k-filemanager-view",\n\t        grid: "k-filemanager-grid",\n\t        list: "k-filemanager-listview",\n\t        upload: "k-filemanager-upload",\n\t        uploadDialog: "k-filemanager-upload-dialog",\n\t        splitBar: "k-splitbar",\n\t        splitBarHorizontal: "k-splitbar-horizontal k-splitbar-draggable-horizontal",\n\t        splitBarHover: "k-splitbar-horizontal-hover",\n\t        splitBarIcon: "k-icon k-resize-handle",\n\t        splitBarNavigation: "k-filemanager-splitbar-navigation",\n\t        splitBarPreview: "k-filemanager-splitbar-preview",\n\t        resizable: "k-filemanager-resizable"\n\t    };\n\n\t    var fileManagerTemplateStyles = {\n\t        filePreview: "k-file-preview",\n\t        fileInfo: "k-file-info",\n\t        fileName: "k-file-name",\n\t        fileMeta: "k-file-meta",\n\t        metaLabel: "k-file-meta-label",\n\t        metaValue: "k-file-meta-value",\n\t        extension: "k-file-type",\n\t        size: "k-file-size",\n\t        created: "k-file-created",\n\t        modified: "k-file-modified"\n\t    };\n\n\t    var viewTypes = {\n\t        grid: "grid",\n\t        list: "list"\n\t    };\n\n\t    var NO_FILE_PREVIEW_TEMPLATE = \'\' +\n\t        \'<div class="#:styles.fileInfo#">\' +\n\t            \'<div class="#:styles.filePreview#">\' +\n\t                \'<span class="k-file-icon k-icon k-i-none"></span>\' +\n\t            \'</div>\' +\n\t            \'<span class="#:styles.fileName#" k-no-file-selected>#: messages.noFileSelected #</span>\' +\n\t        \'</div>\';\n\n\t    var SINGLE_FILES_PREVIEW_TEMPLATE = \'\' +\n\t        \'<div class="#:styles.fileInfo#">\' +\n\t            \'<div class="#:styles.filePreview#">\' +\n\t                \'<span class="k-file-icon k-icon k-i-#: !selection[0].isDirectory ? kendo.getFileGroup(selection[0].extension, true) : "folder" #"></span>\' +\n\t            \'</div>\' +\n\t            \'<span class="#:styles.fileName#">#:selection[0].name#</span>\' +\n\t            \'#if(metaFields){#\' +\n\t                \'<dl class="#:styles.fileMeta#">\'+\n\t                    \'#for(var i = 0; i < metaFields.length; i+=1){#\' +\n\t                        \'#var field = metaFields[i]#\' +\n\t                        \'<dt class="#:styles.metaLabel#">#:messages[field]#: </dt>\' +\n\t                        \'<dd class="#:styles.metaValue# #:styles[field]#">\' +\n\t                            \'#if(field == "size"){#\' +\n\t                                \' #:kendo.getFileSizeMessage(selection[0][field])#\' +\n\t                            \'#} else if(selection[0][field] instanceof Date) {#\' +\n\t                                \' #:kendo.toString(selection[0][field], "G")#\' +\n\t                            \'#} else if(field == "extension") {#\' +\n\t                                \' #: !selection[0].isDirectory ? kendo.getFileGroup(selection[0].extension) : "folder"#\' +\n\t                            \'#} else {#\' +\n\t                                \' #:selection[0][field]#\' +\n\t                            \'#}#\' +\n\t                        \'</dd>\'+\n\t                        \'<dd class="k-line-break"></dd>\' +\n\t                    \'# } #\' +\n\t                \'</dl>\' +\n\t            \'#}#\' +\n\t        \'</div>\';\n\n\t    var MULTIPLE_FILES_PREVIEW_TEMPLATE = \'\' +\n\t        \'<div class="#:styles.fileInfo#">\' +\n\t            \'<div class="#:styles.filePreview#">\' +\n\t                \'<span class="k-file-icon k-icon k-i-file"></span>\' +\n\t            \'</div>\' +\n\t            \'<span class="#:styles.fileName#">\' +\n\t                \'#:selection.length# \' +\n\t                \'#:messages.items#\' +\n\t            \'</span>\' +\n\t        \'</div>\';\n\n\t    var FileManager = DataBoundWidget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            DataBoundWidget.fn.init.call(that, element, options);\n\n\t            that.options = kendo.deepExtend({}, that.options, options);\n\n\t            that.defaultSortOption = { field: "name", dir: "asc" };\n\t            that.folderSortOption = { field: "isDirectory", dir: "desc" };\n\n\t            that._commandStack = new ui.filemanager.CommandStack();\n\n\t            that._dataSource();\n\n\t            that._wrapper();\n\n\t            that._renderHeader();\n\n\t            that._renderContentContainer();\n\n\t            that._initContextMenu();\n\n\t            that._renderNavigation();\n\n\t            that._renderContent();\n\n\t            that._renderPreview();\n\n\t            that._initUploadDialog();\n\n\t            that._resizable();\n\n\t            that.resize();\n\n\t            kendo.notify(that, kendo.ui);\n\t        },\n\n\t        options: {\n\t            name: "FileManager",\n\t            height: 500,\n\t            resizable: true,\n\t            initialView: viewTypes.list,\n\t            toolbar: {\n\t                resizable: true\n\t            },\n\t            contextMenu: {},\n\t            upload: {},\n\t            uploadUrl: "",\n\t            views: {},\n\t            breadcrumb: {},\n\t            draggable: true,\n\t            dialogs: {\n\t                upload: {\n\t                    width: 530\n\t                },\n\t                moveConfirm: {\n\t                    width: 350,\n\t                    closable: true\n\t                },\n\t                deleteConfirm: {\n\t                    width: 360,\n\t                    closable: true\n\t                },\n\t                renamePrompt: {\n\t                    width: 350,\n\t                    closable: true\n\t                }\n\t            },\n\t            previewPane: {\n\t                metaFields: ["extension", "size", "created", "modified"],\n\t                noFileTemplate: NO_FILE_PREVIEW_TEMPLATE,\n\t                singleFileTemplate: SINGLE_FILES_PREVIEW_TEMPLATE,\n\t                multipleFilesTemplate: MULTIPLE_FILES_PREVIEW_TEMPLATE\n\t            },\n\t            messages: {\n\t                toolbar: {\n\t                    createFolder: "New Folder",\n\t                    upload: "Upload",\n\t                    sortDirection: "Sort Direction",\n\t                    sortDirectionAsc: "Sort Direction Ascending",\n\t                    sortDirectionDesc: "Sort Direction Descending",\n\t                    sortField: "Sort By",\n\t                    nameField: "Name",\n\t                    sizeField: "File Size",\n\t                    typeField: "Type",\n\t                    dateModifiedField: "Date Modified",\n\t                    dateCreatedField: "Date Created",\n\t                    listView: "List View",\n\t                    gridView: "Grid View",\n\t                    search: "Search",\n\t                    details: "View Details",\n\t                    detailsChecked: "On",\n\t                    detailsUnchecked: "Off",\n\t                    "delete": "Delete",\n\t                    rename: "Rename"\n\t                },\n\t                views: {\n\t                    nameField: "Name",\n\t                    sizeField: "File Size",\n\t                    typeField: "Type",\n\t                    dateModifiedField: "Date Modified",\n\t                    dateCreatedField: "Date Created",\n\t                    items: "items"\n\t                },\n\t                dialogs: {\n\t                    upload: {\n\t                        title: "Upload Files",\n\t                        clear: "Clear List",\n\t                        done: "Done"\n\t                    },\n\t                    moveConfirm: {\n\t                        title: "Confirm",\n\t                        content: "<p style=\'text-align: center;\'>Do you want to move or copy?</p>",\n\t                        okText: "Copy",\n\t                        cancel: "Move",\n\t                        close: "close"\n\t                    },\n\t                    deleteConfirm: {\n\t                        title: "Confirm",\n\t                        content: "<p style=\'text-align: center;\'>Are you sure you want to delete the selected file(s)?</br>You cannot undo this action.</p>",\n\t                        okText: "Delete",\n\t                        cancel: "Cancel",\n\t                        close: "close"\n\t                    },\n\t                    renamePrompt: {\n\t                        title: "Prompt",\n\t                        content: "<p style=\'text-align: center;\'>Enter new name for the file.</p>",\n\t                        okText: "Rename",\n\t                        cancel: "Cancel",\n\t                        close: "close"\n\t                    }\n\t                },\n\t                previewPane: {\n\t                    noFileSelected: "No File Selected",\n\t                    extension: "Type",\n\t                    size: "Size",\n\t                    created: "Date Created",\n\t                    createdUtc: "Date Created UTC",\n\t                    modified: "Date Modified",\n\t                    modifiedUtc: "Date Modified UTC",\n\t                    items: "items"\n\t                }\n\t            }\n\t        },\n\n\t        events: [\n\t            NAVIGATE,\n\t            SELECT,\n\t            OPEN,\n\t            DATABINDING,\n\t            DATABOUND,\n\t            ERROR,\n\t            DROP,\n\t            EXECUTE,\n\t            COMMAND\n\t        ],\n\n\t        _dataSource: function () {\n\t            var that = this,\n\t                options = that.options,\n\t                dataSourceOptions = options.dataSource || {},\n\t                typeSortOrder = that.folderSortOption,\n\t                nameSortOrder = that.defaultSortOption,\n\t                dataSource;\n\n\t            if (!(dataSourceOptions instanceof kendo.data.FileManagerDataSource)) {\n\t                if(isArray(dataSourceOptions)){\n\t                    dataSource = {\n\t                        data: dataSourceOptions,\n\t                        autoSync: false,\n\t                        sort: [typeSortOrder, nameSortOrder]\n\t                     };\n\t                } else {\n\t                    dataSource = extend(true, dataSourceOptions, {\n\t                        autoSync: false,\n\t                        sort: [typeSortOrder, nameSortOrder]\n\t                    });\n\t                }\n\n\t                if (dataSourceOptions && isPlainObject(dataSourceOptions.schema)) {\n\t                    dataSource.schema = dataSourceOptions.schema;\n\t                } else if (isPlainObject(kendo.data.schemas.filemanager)) {\n\t                    dataSource.schema = kendo.data.schemas.filemanager;\n\t                }\n\t            } else {\n\t                dataSource = dataSourceOptions;\n\t            }\n\n\t            if (that.dataSource && that._errorHandler) {\n\t                that.dataSource.unbind(ERROR, that._errorHandler);\n\t                that.dataSource.unbind(CHANGE, that._changeHandler);\n\t            } else {\n\t                that._errorHandler = proxy(that._error, that);\n\t                that._changeHandler = proxy(that._change, that);\n\t            }\n\n\t            that.dataSource = kendo.data.FileManagerDataSource.create(dataSource)\n\t                .bind(ERROR, that._errorHandler)\n\t                .bind(CHANGE, that._changeHandler);\n\t        },\n\n\t        _error: function (ev) {\n\t            if(!this.trigger(ERROR, ev)) {\n\t                window.console.warn(\'Error! The requested URL returned \' + ev.xhr.status + \' - \' + ev.xhr.statusText);\n\t            }\n\t        },\n\n\t        _wrapper: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                width = options.width,\n\t                height = options.height;\n\n\t            that.wrapper = that.element\n\t                .addClass(fileManagerStyles.wrapper);\n\n\t            if (width) {\n\t                that.wrapper.width(width);\n\t            }\n\n\t            if (height) {\n\t                that.wrapper.height(height);\n\t            }\n\n\t            that._resizeHandler = kendo.onResize(function() {\n\t                that.resize(true);\n\t            });\n\t        },\n\n\t        _renderHeader: function () {\n\t            var that = this,\n\t                options = that.options;\n\n\t            if (options.toolbar) {\n\t                that.header = $("<div />").addClass(fileManagerStyles.header);\n\t                that.header.append(that._initToolbar().element);\n\t            }\n\n\t            that.wrapper.append(that.header);\n\t        },\n\n\t        _renderContentContainer: function() {\n\t            var that = this,\n\t                container = $("<div />").addClass(fileManagerStyles.contentContainer);\n\n\t            that.contentContainer = container;\n\n\t            that.wrapper.append(that.contentContainer);\n\t        },\n\n\t        _initContextMenu: function(){\n\t            var that = this,\n\t                options = that.options,\n\t                menuOptions = extend({}, options.contextMenu, {\n\t                    filemanager: that,\n\t                    messages: options.messages.toolbar,\n\t                    target: that.contentContainer,\n\t                    filter: "[data-uid]",\n\t                    action: that.executeCommand.bind(that),\n\t                    isLocalBinding: that.dataSource.isLocalBinding\n\t                });\n\n\t            if(options.contextMenu === false) {\n\t                return;\n\t            }\n\n\t            that.contextMenu = new ui.filemanager.ContextMenu("<ul></ul>", menuOptions);\n\n\t            that.contextMenu.bind(OPEN, proxy(that._cacheFocus, that));\n\t        },\n\n\t        _renderNavigation: function() {\n\t            var that = this;\n\n\t            that.navigation = $("<div />").addClass(fileManagerStyles.navigation);\n\t            that.navigation.append(that._initTreeView().element);\n\n\t            that.contentContainer.append(that.navigation);\n\t        },\n\n\t        _renderContent: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                toolbar = that.toolbar;\n\n\t            that.content = $("<div />").addClass(fileManagerStyles.content);\n\n\t            if (options.breadcrumb) {\n\t                that.content.append(that._initBreadcrumb().element);\n\t            }\n\n\t            that.content.append(that._initView());\n\n\t            if (!toolbar || !toolbar.isToolEnabled(toolbar.defaultTools.upload.name)) {\n\t                that.content.append(that._initUpload().wrapper.hide());\n\t            }\n\n\t            that.contentContainer.append(that.content);\n\t        },\n\n\t        _renderPreview: function() {\n\t            var that = this,\n\t                enablePreview = that.options.previewPane;\n\n\t            if (!enablePreview) {\n\t               return;\n\t            }\n\n\t            that.preview = $("<div />").addClass(fileManagerStyles.preview);\n\t            that.previewContainer = $("<div />").addClass(fileManagerStyles.previewContainer);\n\t            that.preview.append(that.previewContainer);\n\n\t            that._setPreviewPaneContent();\n\n\t            that.contentContainer.append(that.preview.hide());\n\t        },\n\n\t        _setPreviewPaneContent: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                previewPaneMessages = options.messages.previewPane,\n\t                previewPaneOptions = options.previewPane,\n\t                selection = that.getSelected(),\n\t                previewTemplate;\n\n\t            if (!selection) {\n\t                previewTemplate = template(previewPaneOptions.noFileTemplate)({\n\t                    styles: fileManagerTemplateStyles,\n\t                    messages: previewPaneMessages\n\t                });\n\n\t                that.previewContainer.html(previewTemplate);\n\t                return;\n\t            }\n\n\t            previewTemplate = selection.length === 1 ?\n\t                previewPaneOptions.singleFileTemplate :\n\t                previewPaneOptions.multipleFilesTemplate;\n\n\t            previewTemplate = template(previewTemplate)({\n\t                styles: fileManagerTemplateStyles,\n\t                messages: previewPaneMessages,\n\t                selection: selection,\n\t                metaFields: previewPaneOptions.metaFields\n\t            });\n\n\t            that.previewContainer.html(previewTemplate);\n\t        },\n\n\t        _initToolbar: function () {\n\t            var that = this,\n\t                options = that.options,\n\t                toolbarElement = $("<div />").addClass(fileManagerStyles.toolbar),\n\t                toolbarOptions = extend({}, options.toolbar, {\n\t                    filemanager: this,\n\t                    messages: options.messages.toolbar,\n\t                    action: that.executeCommand.bind(that)\n\t                });\n\n\t            that.toolbar = new ui.filemanager.ToolBar(toolbarElement, toolbarOptions);\n\n\t            return that.toolbar;\n\t        },\n\n\t        _initTreeView: function() {\n\t            var that = this,\n\t                treeViewElement = $("<div />").addClass(fileManagerStyles.treeview),\n\t                options = that.options.views[TREE_TYPE],\n\t                explicitOptions = extend(true, {}, {\n\t                    dataSource: that.options.dataSource,\n\t                    messages: that.options.messages.views,\n\t                    draggable: that.options.draggable,\n\t                    isLocalBinding: that.dataSource.isLocalBinding\n\t                });\n\n\t            that.treeView = new ui.filemanager.ViewComponents[TREE_TYPE](treeViewElement, options, explicitOptions);\n\n\t            that.treeView.bind(NAVIGATE, proxy(that._navigate, that))\n\t                         .bind(LOAD, proxy(that._load, that))\n\t                         .bind(DROP, proxy(that._drop, that))\n\t                         .bind(KEYDOWNACTION, proxy(that._keydownAction, that));\n\n\t            return that.treeView;\n\t        },\n\n\t        _drop: function (ev) {\n\t            var that = this;\n\n\t            if(!that.trigger(DROP, ev) && ev.items.indexOf(ev.target) < 0) {\n\t                that._confirm({\n\t                    type: "move",\n\t                    target: ev.target\n\t                }).done(function(){\n\t                    that.executeCommand({command: "CopyCommand", options: ev});\n\t                }).fail(function(){\n\t                    that.executeCommand({command: "MoveCommand", options: ev});\n\t                });\n\t            }\n\t        },\n\n\t        _keydownAction: function (ev) {\n\t            var that = this,\n\t                keyCode = ev.keyCode,\n\t                keys = kendo.keys;\n\n\t            if (keyCode === keys.DELETE) {\n\t                that.executeCommand({command: "DeleteCommand", options: { target: ev.target } });\n\t            }\n\n\t            if (keyCode === keys.F2) {\n\t                that.executeCommand({command: "RenameCommand", options: { target: ev.target } });\n\t            }\n\t        },\n\n\t        _confirm: function(options){\n\t            var that = this,\n\t                messages = that.options.messages.dialogs[options.type + "Confirm"];\n\n\t            var confirm = $("<div></div>").kendoConfirm(extend({}, {\n\t                title: messages.title,\n\t                content: messages.content,\n\t                messages: messages\n\t            }, that.options.dialogs[options.type + "Confirm"])).data("kendoConfirm");\n\n\t            confirm.bind(OPEN, proxy(that._cacheFocus, that));\n\t            confirm.bind(HIDE, proxy(that._restoreFocus, that, options.target));\n\n\t            confirm.open();\n\n\t            confirm.wrapper.removeClass("k-confirm");\n\n\t            return confirm.result;\n\t        },\n\n\t        _prompt: function(options){\n\t            var that = this,\n\t                messages = this.options.messages.dialogs[options.type + "Prompt"];\n\n\t            var prompt = $("<div></div>").kendoPrompt(extend({}, {\n\t                title: messages.title,\n\t                content: messages.content,\n\t                messages: messages,\n\t                value: options.defaultInput\n\t            },this.options.dialogs[options.type + "Prompt"])).data("kendoPrompt");\n\n\t            prompt.bind(OPEN, proxy(that._cacheFocus, that));\n\t            prompt.bind(CLOSE, proxy(that._restoreFocus, that, options.target));\n\n\t            prompt.open();\n\n\t            prompt.wrapper.removeClass("k-prompt");\n\n\t            return prompt.result;\n\t        },\n\n\t        _cacheFocus: function() {\n\t            var that = this,\n\t                activeElement = $(document.activeElement),\n\t                view = that.view(),\n\t                treeView = that.treeView.widgetComponent;\n\n\t            if (that.contextMenu && that.contextMenu.popup.visible()) {\n\t                return;\n\t            }\n\n\t            that.treeView._shouldFocus = false;\n\n\t            if ((treeView.current() && treeView.current().find(".k-state-focused").length) ||\n\t                activeElement.hasClass(fileManagerStyles.treeview)){\n\t                that.treeView._shouldFocus = true;\n\t                view._focusElement = activeElement;\n\t                return;\n\t            }\n\n\t            view._focusElement = activeElement.hasClass(fileManagerStyles[that._viewType]) ?\n\t                activeElement :\n\t                null;\n\t        },\n\n\t        _restoreFocus: function(target) {\n\t            var that = this,\n\t                view = that.view();\n\n\t            if (!target) {\n\t                return;\n\t            }\n\n\t            if (view._focusElement) {\n\t                view._focusElement.focus();\n\t            } else if (target.closest && target.closest(":kendoFocusable").length) {\n\t                target.closest(":kendoFocusable").focus();\n\t            }\n\t        },\n\n\t        _initView: function() {\n\t            var that = this,\n\t                viewWrapper = $("<div />").addClass(fileManagerStyles.view),\n\t                initialView = that.options.initialView;\n\n\t            that.viewWrapper = viewWrapper;\n\t            that.viewWrapper.append(that.view(initialView));\n\n\t            return viewWrapper;\n\t        },\n\n\t        _initBreadcrumb: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                breadcrumbElement = $("<nav />").addClass(fileManagerStyles.breadcrumb),\n\t                breadcrumbOptions = extend({}, {\n\t                    items: [\n\t                        {type:"rootitem", text: "" }\n\t                    ],\n\t                    change: proxy(that._breadcrumbChange, that)\n\t                }, options.breadcrumb);\n\n\t            that.breadcrumb = new ui.Breadcrumb(breadcrumbElement, breadcrumbOptions);\n\n\t            return that.breadcrumb;\n\t        },\n\n\t        _breadcrumbChange: function(ev){\n\t            this._navigate({ path: ev.value });\n\t        },\n\n\t        _initUploadDialog: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                dialogMessages = options.messages.dialogs.upload,\n\t                dialogElement = $("<div />"),\n\t                dialogOptions = extend({}, {\n\t                    title: dialogMessages.title,\n\t                    modal: true,\n\t                    visible: false,\n\t                    width: 500,\n\t                    actions: [\n\t                        { text: dialogMessages.clear, action: proxy(that._clearUploadFilesList, that) },\n\t                        { text: dialogMessages.done, primary: true }\n\t                    ],\n\t                    messages: dialogMessages\n\t                }, options.dialogs.upload),\n\t                uploadInstance;\n\n\t            if (!that._shouldInitUpload()) {\n\t                return;\n\t            }\n\n\t            uploadInstance = that._initUpload();\n\n\t            that.uploadDialog = new ui.Dialog(dialogElement, dialogOptions);\n\t            that.uploadDialog.wrapper.addClass(fileManagerStyles.uploadDialog);\n\t            that.uploadDialog.element.append(uploadInstance.wrapper);\n\n\t            that.uploadDialog.bind(OPEN, proxy(that._toggleUploadDropZone, that, ""));\n\t            that.uploadDialog.bind(CLOSE, proxy(that._toggleUploadDropZone, that, that.viewWrapper));\n\n\t            return that.uploadDialog;\n\t        },\n\n\t        _shouldInitUpload: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                shouldInit = false;\n\n\t            if ((options.uploadUrl || (options.upload.async && options.upload.async.saveUrl)) &&\n\t                options.upload !== false) {\n\t                    shouldInit = true;\n\t            }\n\n\t            return shouldInit;\n\t        },\n\n\t        _initUpload: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                uploadElement = $("<input type=\'file\' name=\'file\'/>").addClass(fileManagerStyles.upload),\n\t                uploadOptions = extend(true, {\n\t                    async: {\n\t                         autoUpload: true,\n\t                         saveUrl: options.uploadUrl\n\t                    },\n\t                    dropZone: that.viewWrapper\n\t                }, options.upload);\n\n\t            that.upload = new ui.Upload(uploadElement[0], uploadOptions);\n\n\t            that.upload.bind(UPLOAD, proxy(that._sendUploadPathParameter, that));\n\t            that.upload.bind(SUCCESS, proxy(that._success, that));\n\n\t            return that.upload;\n\t        },\n\n\t        _sendUploadPathParameter: function(ev) {\n\t            ev.data = extend(ev.data, { path: this.path() });\n\t        },\n\n\t        _success: function(){\n\t            this._view.widgetComponent.dataSource.read();\n\t        },\n\n\t        _clearUploadFilesList: function() {\n\t            var that = this,\n\t                upload = that.upload;\n\n\t            if (upload) {\n\t                upload.clearAllFiles();\n\t            }\n\t        },\n\n\t        _toggleUploadDropZone: function(zone) {\n\t            var that = this,\n\t                upload = that.upload;\n\n\t            if (upload) {\n\t                upload.setOptions({ dropZone: zone});\n\t            }\n\t        },\n\n\t        _binding: function (ev){\n\t            if(this.trigger(DATABINDING, { source: "view", action: ev.action, items: ev.items, index: ev.index })){\n\t                ev.preventDefault();\n\t            }\n\t        },\n\n\t        _bound: function (){\n\t            if (this.options.previewPane) {\n\t                this._setPreviewPaneContent();\n\t            }\n\t            this.trigger(DATABOUND);\n\t        },\n\n\t        _createResizableSplitBar: function(cssClass) {\n\t            var splitBar = $("<div />")\n\t                    .addClass(fileManagerStyles.splitBar)\n\t                    .addClass(fileManagerStyles.splitBarHorizontal)\n\t                    .addClass(cssClass),\n\t                icon = $("<span />").addClass(fileManagerStyles.splitBarIcon);\n\n\t            splitBar.append(icon);\n\n\t            splitBar.hover(function () {\n\t                $(this).toggleClass(fileManagerStyles.splitBarHover);\n\t            });\n\n\t            return splitBar;\n\t        },\n\n\t        _initResizableNavigation: function() {\n\t            var that = this,\n\t                wrapper = that.wrapper,\n\t                splitBar = that._createResizableSplitBar(fileManagerStyles.splitBarNavigation),\n\t                contentWrapper = wrapper.find(DOT + fileManagerStyles.content),\n\t                navigationWrapper = wrapper.find(DOT + fileManagerStyles.navigation),\n\t                contentWrapperWidth,\n\t                navigationWrapperWidth;\n\n\t            splitBar.insertAfter(navigationWrapper);\n\n\t            that._resizeDraggable.navigation = that.wrapper.find(splitBar)\n\t                .end()\n\t                .kendoResizable({\n\t                    handle: DOT + fileManagerStyles.splitBarNavigation,\n\t                    start: function () {\n\t                        contentWrapperWidth = contentWrapper.width();\n\t                        navigationWrapperWidth = navigationWrapper.width();\n\t                    },\n\t                    resize: function(e) {\n\t                        var delta = e.x.initialDelta;\n\n\t                        if (kendo.support.isRtl(wrapper)) {\n\t                            delta *= -1;\n\t                        }\n\n\t                        if (navigationWrapperWidth + delta < -2 || contentWrapperWidth - delta < -2) {\n\t                            return;\n\t                        }\n\n\t                        navigationWrapper.width(navigationWrapperWidth + delta);\n\t                    }\n\t                }).getKendoResizable();\n\t        },\n\n\t        _initResizablePreview: function() {\n\t            var that = this,\n\t                wrapper = that.wrapper,\n\t                splitBar = that._createResizableSplitBar(fileManagerStyles.splitBarPreview),\n\t                contentWrapper = wrapper.find(DOT + fileManagerStyles.content),\n\t                previewWrapper = wrapper.find(DOT + fileManagerStyles.preview),\n\t                contentWrapperWidth,\n\t                previewWrapperWidth;\n\n\t            if (!that.options.previewPane) {\n\t                return;\n\t            }\n\n\t            splitBar.insertBefore(previewWrapper).hide();\n\n\t            that._resizeDraggable.preview = wrapper.find(splitBar)\n\t                .end()\n\t                .kendoResizable({\n\t                    handle: DOT + fileManagerStyles.splitBarPreview,\n\t                    start: function () {\n\t                        contentWrapperWidth = contentWrapper.width();\n\t                        previewWrapperWidth = previewWrapper.width();\n\t                    },\n\t                    resize: function(e) {\n\t                        var delta = e.x.initialDelta;\n\n\t                        if (kendo.support.isRtl(wrapper)) {\n\t                            delta *= -1;\n\t                        }\n\n\t                        if (previewWrapperWidth - delta < -2 || contentWrapperWidth + delta < -2) {\n\t                            return;\n\t                        }\n\n\t                        previewWrapper.width(previewWrapperWidth - delta);\n\t                    }\n\t                }).getKendoResizable();\n\t        },\n\n\t        _resizable: function() {\n\t            var that = this,\n\t                options = that.options;\n\n\t            that._resizeDraggable = {};\n\n\t            if (!options.resizable) {\n\t                return;\n\t            }\n\n\t            that.wrapper.addClass(fileManagerStyles.resizable);\n\n\t            that._initResizableNavigation();\n\n\t            that._initResizablePreview();\n\t        },\n\n\t        view: function(type) {\n\t            var that = this,\n\t                element = $(\'<div></div>\'),\n\t                options = that.options.views[type],\n\t                explicitOptions = extend(true, {}, {\n\t                    dataSource: that._viewDataSource || that.dataSource,\n\t                    messages: that.options.messages.views,\n\t                    draggable: that.options.draggable\n\t                });\n\n\t            if(type === undefined) {\n\t                return that._view;\n\t            }\n\n\t            if(!ui.filemanager.ViewComponents[type]) {\n\t                throw new Error(kendo.format("There is no {0} ViewComponent registered!", type));\n\t            }\n\n\t            if(that._view && that._view.destroy) {\n\t                that._view.destroy();\n\t                that.viewWrapper.empty();\n\t            }\n\n\t            that._viewType = type;\n\t            that._view = new ui.filemanager.ViewComponents[type](element, options, explicitOptions);\n\n\t            that._view.bind(SELECT, proxy(that._select, that));\n\t            that._view.bind(OPEN, proxy(that._open, that));\n\t            that._view.bind(DATABINDING, proxy(that._binding, that));\n\t            that._view.bind(DATABOUND, proxy(that._bound, that));\n\t            that._view.bind(DROP, proxy(that._drop, that));\n\t            that._view.bind(KEYDOWNACTION, proxy(that._keydownAction, that));\n\t            that._view.bind(CANCEL, proxy(that._cancel, that));\n\n\t            that._view.element.addClass(fileManagerStyles[type]);\n\n\t            that.viewWrapper\n\t                .removeClass(\n\t                    Object.keys(ui.filemanager.ViewComponents).map(function(el) {\n\t                        return fileManagerStyles.view + "-" + el;\n\t                    }).join(" ")\n\t                )\n\t                .addClass(fileManagerStyles.view + "-" + type);\n\n\t            that.viewWrapper.append(that._view.element);\n\t        },\n\n\t        executeCommand: function(args) {\n\t            var commandName = args.command,\n\t                commandOptions = extend({ filemanager: this }, isPlainObject(args.options) ? args.options : {value: args.options}),\n\t                command = new ui.filemanager.commands[commandName](commandOptions);\n\n\t            if(!this.trigger(EXECUTE, args)) {\n\t                return command.exec();\n\t            }\n\t        },\n\n\t        _navigate: function(ev){\n\t            var that = this,\n\t                path = ev.path;\n\n\t            if(!that.trigger(NAVIGATE, { path: path })) {\n\t                that.navigate(path);\n\t            }\n\t        },\n\n\t        _load: function(ev){\n\t            var entry = this.dataSource.get(ev.entryId);\n\t            entry.load();\n\t        },\n\n\t        _select: function (ev) {\n\t            if (this.options.previewPane) {\n\t                this._setPreviewPaneContent();\n\t            }\n\n\t            this.trigger(SELECT, { entries: ev.entries });\n\t        },\n\n\t        _open: function (ev) {\n\t            var that = this,\n\t                entry = ev.entry;\n\n\t            that.trigger(OPEN, { entry: entry });\n\n\t            if(entry.isDirectory) {\n\t                that._navigate({ path: entry.id });\n\t            }\n\t        },\n\n\t        _cancel: function () {\n\t            var that = this,\n\t                commandStack = that._commandStack,\n\t                command = commandStack.next();\n\n\t            commandStack.reject(command);\n\t            that.trigger(COMMAND, { status: "cancel", action: "itemchange", data: command.data });\n\t        },\n\n\t        _change: function (ev) {\n\t            var that = this,\n\t                commandStack = that._commandStack,\n\t                targetDataSource = ev.node ? ev.node.children : that.dataSource;\n\n\t            if(that.trigger(DATABINDING, { source: "tree", action: ev.action, items: ev.items, index: ev.index })){\n\t                return;\n\t            }\n\n\t            that.treeView._refreshDataSource(ev);\n\n\t            if(ev.action === "remove" || ev.action === "itemchange" || ev.action === "add") {\n\t                if (commandStack.empty()) {\n\t                    targetDataSource.sync();\n\t                } else {\n\t                    var command = commandStack.next();\n\n\t                    targetDataSource.sync().then(function(res){\n\t                        commandStack.resolve(command);\n\t                        that.trigger(COMMAND, { status: "success", action: ev.action, data: command.data, response: res });\n\t                    }).fail(function(res){\n\t                        commandStack.reject(command);\n\t                        that.trigger(COMMAND, { status: "fail", action: ev.action, data: command.data, response: res });\n\t                    });\n\t                }\n\t            }\n\n\t            if(ev.action === "remove" && that._viewDataSource && that._viewDataSource.parent() && ev.items[0] === that._viewDataSource.parent()) {\n\t                that._navigateToParent(ev.items[0]);\n\t            }\n\n\t            if(ev.action == "itemchange" && that._viewDataSource && that._viewDataSource.parent() && that.path().indexOf(ev.items[0].id) >= 0) {\n\t                that._navigateToParent(ev.items[0]);\n\t            }\n\n\t            if(ev.action === "itemchange") {\n\t                ev.items[0].loaded(false);\n\t            }\n\t        },\n\n\t        _navigateToParent: function(item){\n\t            var that = this;\n\t            var parent = item.parentNode();\n\t            var parentNodePath = parent ? parent.id : "";\n\t            that._navigate({path: parentNodePath});\n\t        },\n\n\t        _buildBreadcrumbPath: function (entry){\n\t            var that = this,\n\t                breadcrumb = that.breadcrumb,\n\t                values = [];\n\n\t            while(entry) {\n\t                values.push(entry.name);\n\t                entry = entry.parentNode && entry.parentNode();\n\t            }\n\n\t            values.push("");\n\t            breadcrumb.value(values.reverse().join("/"));\n\t        },\n\n\t        _adjustDimensions: function() {\n\t            var that = this,\n\t                wrapper = that.wrapper,\n\t                gridSelector = DOT + fileManagerStyles.grid,\n\t                listViewSelector = DOT + fileManagerStyles.list,\n\t                contentContainer = DOT + fileManagerStyles.contentContainer,\n\t                totalHeight = wrapper.height(),\n\t                toolbarHeight = 0,\n\t                breadcrumbHeight = 0;\n\n\t            if (that.toolbar) {\n\t                toolbarHeight = outerHeight(that.toolbar.wrapper);\n\t            }\n\n\t            if (that.breadcrumb) {\n\t                breadcrumbHeight = outerHeight(that.breadcrumb.wrapper);\n\t            }\n\n\t            if (that.options.height !== "auto") {\n\t                wrapper\n\t                    .find([gridSelector].join(","))\n\t                    .height(totalHeight - (toolbarHeight + breadcrumbHeight + 1));\n\n\t                wrapper\n\t                    .find(listViewSelector)\n\t                    .parent()\n\t                    .height(totalHeight - (toolbarHeight + breadcrumbHeight + 1));\n\n\t                wrapper\n\t                    .find(contentContainer)\n\t                    .height(totalHeight - toolbarHeight);\n\t            }\n\t        },\n\n\t        _resize: function() {\n\t            this._adjustDimensions();\n\t            kendo.resize(this.element.children());\n\t        },\n\n\t        setDataSource: function(dataSource) {\n\t            var that = this;\n\n\t            that.options.dataSource = dataSource;\n\t            that._dataSource();\n\n\t            if(that.toolbar) {\n\t                that.toolbar.destroy();\n\t                that.header.empty();\n\t                that.header.append(that._initToolbar().element);\n\t            }\n\n\t            if(that.treeView){\n\t                that.treeView.destroy();\n\t                that.navigation.empty();\n\t                that.navigation.append(that._initTreeView().element);\n\t            }\n\n\t            if(that._view) {\n\t                that.view(that._viewType|| that.options.initialView);\n\t            }\n\n\t            that._initContextMenu();\n\n\t        },\n\n\t        refresh: function (){\n\t            var that = this,\n\t                dataSource = that._viewDataSource || that.dataSource;\n\n\t            dataSource.read();\n\t        },\n\n\t        getSize: function() {\n\t            return kendo.dimensions(this.wrapper);\n\t        },\n\n\t        getSelected: function(){\n\t            var that = this,\n\t                items = that._view.getSelected(),\n\t                treeView = that.treeView;\n\n\t            if(items && items.length) {\n\t                return items;\n\t            }\n\n\t            var item = treeView.getSelected();\n\n\t            if(item) {\n\t                return [ that.dataSource.get(item.id) ];\n\t            }\n\t        },\n\n\t        path: function () {\n\t            return this._path || "";\n\t        },\n\n\t        navigate: function (path) {\n\t            var that = this,\n\t                dataSource = that.dataSource,\n\t                entry = dataSource.get(path.replace(/^\\//, "")),\n\t                view = that._view,\n\t                treeView = that.treeView,\n\t                breadcrumb = that.breadcrumb;\n\n\t            that._path = path;\n\n\t            if(that.trigger(DATABINDING, { source: "navigation", action: "rebind", items: [entry] })){\n\t                return;\n\t            }\n\n\t            if(breadcrumb) {\n\t                that._buildBreadcrumbPath(entry);\n\t            }\n\n\t            if(path === "" || path === "/") {\n\t                dataSource.sort([ that.folderSortOption, that.defaultSortOption ]);\n\t                that._viewDataSource = dataSource;\n\t                view.refresh(that._viewDataSource);\n\t                treeView.treeView.select($());\n\n\t                if (that.options.previewPane) {\n\t                    that._setPreviewPaneContent();\n\t                }\n\n\t                return;\n\t            }\n\n\t            if(entry.loaded && !entry.loaded()) {\n\t                entry.load();\n\t            }\n\n\t            if(view) {\n\t                that._viewDataSource = entry.children;\n\t                that._viewDataSource._sort = [ that.folderSortOption, that.defaultSortOption ];\n\t                view.refresh(that._viewDataSource);\n\t            }\n\n\t            if(treeView) {\n\t                treeView.refresh(entry.id);\n\t            }\n\n\t            if (that.options.previewPane) {\n\t                that._setPreviewPaneContent();\n\t            }\n\t        },\n\n\t        items: function () {\n\t            var that = this;\n\n\t            return that.treeView.widgetComponent.items().add(that._view.widgetComponent.items());\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            DataBoundWidget.fn.destroy.call(that);\n\n\t            that.dataSource\n\t                .unbind(ERROR, that._errorHandler)\n\t                .unbind(CHANGE, that._changeHandler);\n\n\t            if (that._resizeDraggable.navigation) {\n\t                that._resizeDraggable.navigation.destroy();\n\t                that._resizeDraggable.navigation = null;\n\t            }\n\n\t            if (that._resizeDraggable.preview) {\n\t                that._resizeDraggable.preview.destroy();\n\t                that._resizeDraggable.preview = null;\n\t            }\n\n\t            if (that.uploadDialog) {\n\t                that.uploadDialog.destroy();\n\t                that.uploadDialog = null;\n\t            }\n\n\t            if (that.upload) {\n\t                that.upload.destroy();\n\t                that.upload = null;\n\t            }\n\n\t            if (that.contextMenu) {\n\t                that.contextMenu.destroy();\n\t                that.contextMenu = null;\n\t            }\n\n\t            kendo.unbindResize(that._resizeHandler);\n\n\t            that.dataSource = null;\n\t            that._viewDataSource = null;\n\n\t            kendo.destroy(that.element);\n\t        }\n\t    });\n\n\t    ui.plugin(FileManager);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ }),\n\n/***/ 1236:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./filemanager/contextmenu */ "./node_modules/@progress/kendo-ui/js/filemanager/contextmenu.js");\n\n/***/ }),\n\n/***/ 1237:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./filemanager/view */ "./node_modules/@progress/kendo-ui/js/filemanager/view.js");\n\n/***/ }),\n\n/***/ 1238:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./filemanager/toolbar */ "./node_modules/@progress/kendo-ui/js/filemanager/toolbar.js");\n\n/***/ }),\n\n/***/ 1239:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./filemanager/data */ "./node_modules/@progress/kendo-ui/js/filemanager/data.js");\n\n/***/ }),\n\n/***/ 1240:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./filemanager/commands */ "./node_modules/@progress/kendo-ui/js/filemanager/commands.js");\n\n/***/ }),\n\n/***/ 1241:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.dialog */ "./node_modules/@progress/kendo-ui/js/kendo.dialog.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.filemanager.js?')}}]);