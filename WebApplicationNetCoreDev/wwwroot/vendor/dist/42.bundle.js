(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{"./node_modules/@progress/kendo-ui/js/kendo.data.odata.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.data.odata.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1067);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1067:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "data.odata",\n\t    name: "OData",\n\t    category: "framework",\n\t    depends: [ "core" ],\n\t    hidden: true\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        extend = $.extend,\n\t        NEWLINE = "\\r\\n",\n\t        DOUBLELINE = "\\r\\n\\r\\n",\n\t        isFunction = kendo.isFunction,\n\t        odataFilters = {\n\t            eq: "eq",\n\t            neq: "ne",\n\t            gt: "gt",\n\t            gte: "ge",\n\t            lt: "lt",\n\t            lte: "le",\n\t            contains : "substringof",\n\t            doesnotcontain: "substringof",\n\t            endswith: "endswith",\n\t            startswith: "startswith",\n\t            isnull: "eq",\n\t            isnotnull: "ne",\n\t            isnullorempty: "eq",\n\t            isnotnullorempty: "ne",\n\t            isempty: "eq",\n\t            isnotempty: "ne"\n\t        },\n\t        odataFiltersVersionFour = extend({}, odataFilters, {\n\t            contains: "contains"\n\t        }),\n\t        mappers = {\n\t            pageSize: $.noop,\n\t            page: $.noop,\n\t            filter: function(params, filter, useVersionFour) {\n\t                if (filter) {\n\t                    filter = toOdataFilter(filter, useVersionFour);\n\t                    if (filter) {\n\t                        params.$filter = filter;\n\t                    }\n\t                }\n\t            },\n\t            sort: function(params, orderby) {\n\t                var expr = $.map(orderby, function(value) {\n\t                    var order = value.field.replace(/\\./g, "/");\n\n\t                    if (value.dir === "desc") {\n\t                        order += " desc";\n\t                    }\n\n\t                    return order;\n\t                }).join(",");\n\n\t                if (expr) {\n\t                    params.$orderby = expr;\n\t                }\n\t            },\n\t            skip: function(params, skip) {\n\t                if (skip) {\n\t                    params.$skip = skip;\n\t                }\n\t            },\n\t            take: function(params, take) {\n\t                if (take) {\n\t                    params.$top = take;\n\t                }\n\t            }\n\t        },\n\t        defaultDataType = {\n\t            read: {\n\t                dataType: "jsonp"\n\t            }\n\t        };\n\n\t    function toOdataFilter(filter, useOdataFour) {\n\t        var result = [],\n\t            logic = filter.logic || "and",\n\t            idx,\n\t            length,\n\t            field,\n\t            type,\n\t            format,\n\t            operator,\n\t            value,\n\t            ignoreCase,\n\t            filters = filter.filters;\n\n\t        for (idx = 0, length = filters.length; idx < length; idx++) {\n\t            filter = filters[idx];\n\t            field = filter.field;\n\t            value = filter.value;\n\t            operator = filter.operator;\n\n\t            if (filter.filters) {\n\t                filter = toOdataFilter(filter, useOdataFour);\n\t            } else {\n\t                ignoreCase = filter.ignoreCase;\n\t                field = field.replace(/\\./g, "/");\n\t                filter = odataFilters[operator];\n\t                if (useOdataFour) {\n\t                    filter = odataFiltersVersionFour[operator];\n\t                }\n\n\t                if (operator === "isnullorempty") {\n\t                    filter = kendo.format("{0} {1} null or {0} {1} \'\'", field, filter);\n\t                } else if(operator === "isnotnullorempty") {\n\t                    filter = kendo.format("{0} {1} null and {0} {1} \'\'", field, filter);\n\t                } else if (operator === "isnull" || operator === "isnotnull") {\n\t                    filter = kendo.format("{0} {1} null", field, filter);\n\t                } else if (operator === "isempty" || operator === "isnotempty") {\n\t                    filter = kendo.format("{0} {1} \'\'", field, filter);\n\t                } else if (filter && value !== undefined) {\n\t                    type = $.type(value);\n\t                    if (type === "string") {\n\t                        format = "\'{1}\'";\n\t                        value = value.replace(/\'/g, "\'\'");\n\n\t                        if (ignoreCase === true) {\n\t                            field = "tolower(" + field + ")";\n\t                        }\n\n\t                    } else if (type === "date") {\n\t                        if (useOdataFour) {\n\t                            format = "{1:yyyy-MM-ddTHH:mm:ss+00:00}";\n\t                            value = kendo.timezone.apply(value, \'Etc/UTC\');\n\t                        } else {\n\t                            format = "datetime\'{1:yyyy-MM-ddTHH:mm:ss}\'";\n\t                        }\n\t                    } else {\n\t                        format = "{1}";\n\t                    }\n\n\t                    if (filter.length > 3) {\n\t                        if (filter !== "substringof") {\n\t                            format = "{0}({2}," + format + ")";\n\t                        } else {\n\t                            format = "{0}(" + format + ",{2})";\n\t                            if (operator === "doesnotcontain") {\n\t                                if (useOdataFour) {\n\t                                    format = "{0}({2},\'{1}\') eq -1";\n\t                                    filter = "indexof";\n\t                                } else {\n\t                                    format += " eq false";\n\t                                }\n\t                            }\n\t                        }\n\t                    } else {\n\t                        format = "{2} {0} " + format;\n\t                    }\n\n\t                    filter = kendo.format(format, filter, value, field);\n\t                }\n\t            }\n\n\t            result.push(filter);\n\t        }\n\n\t        filter = result.join(" " + logic + " ");\n\n\t        if (result.length > 1) {\n\t            filter = "(" + filter + ")";\n\t        }\n\n\t        return filter;\n\t    }\n\n\t    function stripMetadata(obj) {\n\t        for (var name in obj) {\n\t            if(name.indexOf("@odata") === 0) {\n\t                delete obj[name];\n\t            }\n\t        }\n\t    }\n\n\t    function hex16() {\n\t        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substr(1);\n\t    }\n\n\t    function createBoundary(prefix) {\n\t        return prefix + hex16() + \'-\' + hex16() + \'-\' + hex16();\n\t    }\n\n\t    function createDelimeter(boundary, close) {\n\t        var result = NEWLINE + "--" + boundary;\n\n\t        if (close) {\n\t            result += "--";\n\t        }\n\n\t        return result;\n\t    }\n\n\t    function createCommand(transport, item, httpVerb, command) {\n\t         var transportUrl = transport.options[command].url;\n\t         var commandPrefix = kendo.format("{0} ", httpVerb);\n\n\t         if (isFunction(transportUrl)) {\n\t             return commandPrefix + transportUrl(item);\n\t         } else {\n\t             return commandPrefix + transportUrl;\n\t         }\n\t    }\n\n\t    function getOperationHeader(changeset, changeId) {\n\t        var header = "";\n\n\t        header += createDelimeter(changeset, false);\n\t        header += NEWLINE + \'Content-Type: application/http\';\n\t        header += NEWLINE + \'Content-Transfer-Encoding: binary\';\n\t        header += NEWLINE + \'Content-ID: \' + changeId;\n\n\t        return header;\n\t    }\n\n\t    function getOperationContent(item) {\n\t        var content = "";\n\n\t        content += NEWLINE + "Content-Type: application/json;odata=minimalmetadata";\n\t        content += NEWLINE + "Prefer: return=representation";\n\t        content += DOUBLELINE + kendo.stringify(item);\n\n\t        return content;\n\t    }\n\n\t    function getOperations(collection, changeset, changeId, command, transport, skipContent) {\n\t        var requestBody = "";\n\n\t        for (var i = 0; i < collection.length; i++) {\n\t            requestBody += getOperationHeader(changeset, changeId);\n\t            requestBody += DOUBLELINE + createCommand(transport, collection[i], transport.options[command].type, command) + \' HTTP/1.1\';\n\t            if (!skipContent) {\n\t                requestBody += getOperationContent(collection[i]);\n\t            }\n\t            requestBody += NEWLINE;\n\t            changeId++;\n\t        }\n\n\t        return requestBody;\n\t    }\n\n\t    function processCollection(colection, boundary, changeset, changeId, transport, command, skipContent) {\n\t        var requestBody = "";\n\n\t        requestBody += getBoundary(boundary, changeset);\n\t        requestBody += getOperations(colection, changeset, changeId, command, transport, skipContent);\n\t        requestBody += createDelimeter(changeset, true);\n\t        requestBody += NEWLINE;\n\n\t        return requestBody;\n\t    }\n\n\t    function getBoundary(boundary,changeset) {\n\t        var requestBody = "";\n\n\t        requestBody += "--" + boundary + NEWLINE;\n\t        requestBody += "Content-Type: multipart/mixed; boundary=" + changeset + NEWLINE;\n\n\t        return requestBody;\n\t    }\n\n\t    function createBatchRequest(transport, colections) {\n\t        var options = {};\n\t        var boundary = createBoundary("sf_batch_");\n\t        var requestBody = "";\n\t        var changeId = 0;\n\t        var batchURL = transport.options.batch.url;\n\t        var changeset = createBoundary("sf_changeset_");\n\n\t        options.type = transport.options.batch.type;\n\t        options.url = isFunction(batchURL) ? batchURL() : batchURL;\n\t        options.headers = {\n\t            "Content-Type": "multipart/mixed; boundary=" + boundary\n\t        };\n\n\t        if (colections.updated.length) {\n\t            requestBody += processCollection(colections.updated, boundary, changeset, changeId, transport, "update", false);\n\t            changeId += colections.updated.length;\n\t            changeset = createBoundary("sf_changeset_");\n\t        }\n\n\t        if (colections.destroyed.length) {\n\t            requestBody += processCollection(colections.destroyed, boundary, changeset, changeId, transport, "destroy", true);\n\t            changeId += colections.destroyed.length;\n\t            changeset = createBoundary("sf_changeset_");\n\t        }\n\n\t        if (colections.created.length) {\n\t            requestBody += processCollection(colections.created, boundary, changeset, changeId, transport, "create", false);\n\t        }\n\n\t        requestBody += createDelimeter(boundary, true);\n\n\t        options.data = requestBody;\n\n\t        return options;\n\t    }\n\n\t    function parseBatchResponse(responseText) {\n\t        var responseMarkers = responseText.match(/--changesetresponse_[a-z0-9-]+$/gm);\n\t        var markerIndex = 0;\n\t        var collections = [];\n\t        var changeBody;\n\t        var status;\n\t        var code;\n\t        var marker;\n\t        var jsonModel;\n\n\t        collections.push({ models: [], passed: true });\n\n\t        for (var i = 0; i < responseMarkers.length; i++) {\n\t            marker = responseMarkers[i];\n\t            if (marker.lastIndexOf(\'--\', marker.length - 1)) {\n\t                if (i < responseMarkers.length - 1) {\n\t                    collections.push({ models: [], passed: true });\n\t                }\n\t                continue;\n\t            }\n\n\t            if (!markerIndex) {\n\t                markerIndex = responseText.indexOf(marker);\n\t            } else {\n\t                markerIndex = responseText.indexOf(marker, markerIndex + marker.length);\n\t            }\n\n\t            changeBody = responseText.substring(markerIndex, responseText.indexOf("--", markerIndex + 1));\n\t            status = changeBody.match(/^HTTP\\/1\\.\\d (\\d{3}) (.*)$/gm).pop();\n\t            code = kendo.parseFloat(status.match(/\\d{3}/g).pop());\n\n\t            if (code >= 200 && code <= 299) {\n\t                jsonModel = changeBody.match(/\\{.*\\}/gm);\n\t                if (jsonModel) {\n\t                    collections[collections.length - 1].models.push(JSON.parse(jsonModel[0]));\n\t                }\n\t            } else {\n\t                collections[collections.length - 1].passed = false;\n\t            }\n\n\t        }\n\n\t        return collections;\n\t    }\n\n\t    extend(true, kendo.data, {\n\t        schemas: {\n\t            odata: {\n\t                type: "json",\n\t                data: function(data) {\n\t                    return data.d.results || [data.d];\n\t                },\n\t                total: "d.__count"\n\t            }\n\t        },\n\t        transports: {\n\t            odata: {\n\t                read: {\n\t                    cache: true, // to prevent jQuery from adding cache buster\n\t                    dataType: "jsonp",\n\t                    jsonp: "$callback"\n\t                },\n\t                update: {\n\t                    cache: true,\n\t                    dataType: "json",\n\t                    contentType: "application/json", // to inform the server the the request body is JSON encoded\n\t                    type: "PUT" // can be PUT or MERGE\n\t                },\n\t                create: {\n\t                    cache: true,\n\t                    dataType: "json",\n\t                    contentType: "application/json",\n\t                    type: "POST" // must be POST to create new entity\n\t                },\n\t                destroy: {\n\t                    cache: true,\n\t                    dataType: "json",\n\t                    type: "DELETE"\n\t                },\n\t                parameterMap: function(options, type, useVersionFour) {\n\t                    var params,\n\t                        value,\n\t                        option,\n\t                        dataType;\n\n\t                    options = options || {};\n\t                    type = type || "read";\n\t                    dataType = (this.options || defaultDataType)[type];\n\t                    dataType = dataType ? dataType.dataType : "json";\n\n\t                    if (type === "read") {\n\t                        params = {\n\t                            $inlinecount: "allpages"\n\t                        };\n\n\t                        if (dataType != "json") {\n\t                            params.$format = "json";\n\t                        }\n\n\t                        for (option in options) {\n\t                            if (mappers[option]) {\n\t                                mappers[option](params, options[option], useVersionFour);\n\t                            } else {\n\t                                params[option] = options[option];\n\t                            }\n\t                        }\n\t                    } else {\n\t                        if (dataType !== "json") {\n\t                            throw new Error("Only json dataType can be used for " + type + " operation.");\n\t                        }\n\n\t                        if (type !== "destroy") {\n\t                            for (option in options) {\n\t                                value = options[option];\n\t                                if (typeof value === "number") {\n\t                                    options[option] = value + "";\n\t                                }\n\t                            }\n\n\t                            params = kendo.stringify(options);\n\t                        }\n\t                    }\n\n\t                    return params;\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    extend(true, kendo.data, {\n\t        schemas: {\n\t            "odata-v4": {\n\t                type: "json",\n\t                data: function(data) {\n\t                    if ($.isArray(data)) {\n\t                        for (var i = 0; i < data.length; i++) {\n\t                            stripMetadata(data[i]);\n\t                        }\n\t                        return data;\n\t                    } else {\n\t                        data = $.extend({}, data);\n\t                        stripMetadata(data);\n\n\t                        if (data.value) {\n\t                            return data.value;\n\t                        }\n\t                        return [data];\n\t                    }\n\t                },\n\t                total: function(data) {\n\t                    return data["@odata.count"];\n\t                }\n\t            }\n\t        },\n\t        transports: {\n\t            "odata-v4": {\n\t                batch: {\n\t                    type: "POST"\n\t                },\n\t                read: {\n\t                    cache: true, // to prevent jQuery from adding cache buster\n\t                    dataType: "json"\n\t                },\n\t                update: {\n\t                    cache: true,\n\t                    dataType: "json",\n\t                    contentType: "application/json;IEEE754Compatible=true", // to inform the server the the request body is JSON encoded\n\t                    type: "PUT" // can be PUT or MERGE\n\t                },\n\t                create: {\n\t                    cache: true,\n\t                    dataType: "json",\n\t                    contentType: "application/json;IEEE754Compatible=true",\n\t                    type: "POST" // must be POST to create new entity\n\t                },\n\t                destroy: {\n\t                    cache: true,\n\t                    dataType: "json",\n\t                    type: "DELETE"\n\t                },\n\t                parameterMap: function(options, type) {\n\t                    var result = kendo.data.transports.odata.parameterMap(options, type, true);\n\t                    if (type == "read") {\n\t                        result.$count = true;\n\t                        delete result.$inlinecount;\n\t                    }\n\n\t                    return result;\n\t                },\n\t                submit: function(e) {\n\t                    var that = this;\n\t                    var options = createBatchRequest(that, e.data);\n\t                    var collections = e.data;\n\n\t                    if (!collections.updated.length && !collections.destroyed.length && !collections.created.length) {\n\t                        return;\n\t                    }\n\n\t                    $.ajax(extend(true, {}, {\n\t                        success: function (response) {\n\t                            var responses = parseBatchResponse(response);\n\t                            var index = 0;\n\t                            var current;\n\n\t                            if (collections.updated.length) {\n\t                                current = responses[index];\n\t                                if (current.passed) {\n\t                                    // Pass either the obtained models or an empty array if only status codes are returned.\n\t                                    e.success(current.models.length ? current.models : [], "update");\n\t                                }\n\t                                index++;\n\t                            }\n\t                            if (collections.destroyed.length) {\n\t                                current = responses[index];\n\t                                if (current.passed) {\n\t                                    // For delete operations OData returns only status codes.\n\t                                    // Passing empty array to datasource will force it to correctly remove the deleted items from the pristine collection.\n\t                                    e.success([], "destroy");\n\t                                }\n\t                                index++;\n\t                            }\n\t                            if (collections.created.length) {\n\t                                current = responses[index];\n\t                                if (current.passed) {\n\t                                    e.success(current.models, "create");\n\t                                }\n\t                            }\n\t                        },\n\t                        error: function (response, status, error) {\n\t                            e.error(response, status, error);\n\t                        }\n\t                    }, options));\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.data.odata.js?')},"./node_modules/@progress/kendo-ui/js/kendo.data.signalr.js":
/*!******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.data.signalr.js ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1068);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1027:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ "./node_modules/@progress/kendo-ui/js/kendo.data.js");\n\n/***/ }),\n\n/***/ 1068:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\r\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1027) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t})(function(){\r\n\r\n\tvar __meta__ = { // jshint ignore:line\r\n\t    id: "data.signalr",\r\n\t    name: "SignalR",\r\n\t    category: "framework",\r\n\t    depends: [ "data" ],\r\n\t    hidden: true\r\n\t};\r\n\r\n\t(function($) {\r\n\t    var kendo = window.kendo;\r\n\t    var isFunction = kendo.isFunction;\r\n\r\n\t    function isJQueryPromise(promise) {\r\n\t        return promise && isFunction(promise.done) && isFunction(promise.fail);\r\n\t    }\r\n\r\n\t    function isNativePromise(promise) {\r\n\t        return promise && isFunction(promise.then) && isFunction(promise.catch); // jshint ignore:line\r\n\t    }\r\n\r\n\t    var transport = kendo.data.RemoteTransport.extend({\r\n\t        init: function (options) {\r\n\t            var signalr = options && options.signalr ? options.signalr : {};\r\n\r\n\t            var promise = signalr.promise;\r\n\r\n\t            if (!promise) {\r\n\t                throw new Error(\'The "promise" option must be set.\');\r\n\t            }\r\n\r\n\t            if (!isJQueryPromise(promise) && !isNativePromise(promise)) {\r\n\t                throw new Error(\'The "promise" option must be a Promise.\');\r\n\t            }\r\n\r\n\t            this.promise = promise;\r\n\r\n\t            var hub = signalr.hub;\r\n\r\n\t            if (!hub) {\r\n\t                throw new Error(\'The "hub" option must be set.\');\r\n\t            }\r\n\r\n\t            if (typeof hub.on != "function" || typeof hub.invoke != "function") {\r\n\t                throw new Error(\'The "hub" option is not a valid SignalR hub proxy.\');\r\n\t            }\r\n\r\n\t            this.hub = hub;\r\n\r\n\t            kendo.data.RemoteTransport.fn.init.call(this, options);\r\n\t        },\r\n\r\n\t        push: function(callbacks) {\r\n\t            var client = this.options.signalr.client || {};\r\n\r\n\t            if (client.create) {\r\n\t                this.hub.on(client.create, callbacks.pushCreate);\r\n\t            }\r\n\r\n\t            if (client.update) {\r\n\t                this.hub.on(client.update, callbacks.pushUpdate);\r\n\t            }\r\n\r\n\t            if (client.destroy) {\r\n\t                this.hub.on(client.destroy, callbacks.pushDestroy);\r\n\t            }\r\n\t        },\r\n\r\n\t        _crud: function(options, type) {\r\n\t            var hub = this.hub;\r\n\t            var promise = this.promise;\r\n\t            var server = this.options.signalr.server;\r\n\r\n\t            if (!server || !server[type]) {\r\n\t                throw new Error(kendo.format(\'The "server.{0}" option must be set.\', type));\r\n\t            }\r\n\r\n\t            var args = [server[type]];\r\n\r\n\t            var data = this.parameterMap(options.data, type);\r\n\r\n\t            if (!$.isEmptyObject(data)) {\r\n\t                args.push(data);\r\n\t            }\r\n\r\n\t            if (isJQueryPromise(promise)) {\r\n\t                promise.done(function() {\r\n\t                    hub.invoke.apply(hub, args)\r\n\t                              .done(options.success)\r\n\t                              .fail(options.error);\r\n\t                });\r\n\t            } else if (isNativePromise(promise)) {\r\n\t                promise.then(function() {\r\n\t                    hub.invoke.apply(hub, args)\r\n\t                              .then(options.success)\r\n\t                              .catch(options.error); // jshint ignore:line\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        read: function(options) {\r\n\t            this._crud(options, "read");\r\n\t        },\r\n\r\n\t        create: function(options) {\r\n\t            this._crud(options, "create");\r\n\t        },\r\n\r\n\t        update: function(options) {\r\n\t            this._crud(options, "update");\r\n\t        },\r\n\r\n\t        destroy: function(options) {\r\n\t            this._crud(options, "destroy");\r\n\t        }\r\n\t    });\r\n\r\n\t    $.extend(true, kendo.data, {\r\n\t        transports: {\r\n\t            signalr: transport\r\n\t        }\r\n\t    });\r\n\r\n\t})(window.kendo.jQuery);\r\n\r\n\treturn window.kendo;\r\n\r\n\t}, __webpack_require__(3));\r\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.data.signalr.js?')},"./node_modules/@progress/kendo-ui/js/kendo.data.xml.js":
/*!**************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.data.xml.js ***!
  \**************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1069);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1069:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\r\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t})(function(){\r\n\r\n\tvar __meta__ = { // jshint ignore:line\r\n\t    id: "data.xml",\r\n\t    name: "XML",\r\n\t    category: "framework",\r\n\t    depends: [ "core" ],\r\n\t    hidden: true\r\n\t};\r\n\r\n\t/*jshint  eqnull: true, boss: true */\r\n\t(function($, undefined) {\r\n\t    var kendo = window.kendo,\r\n\t        isArray = $.isArray,\r\n\t        isPlainObject = $.isPlainObject,\r\n\t        map = $.map,\r\n\t        each = $.each,\r\n\t        extend = $.extend,\r\n\t        getter = kendo.getter,\r\n\t        Class = kendo.Class;\r\n\r\n\t    var XmlDataReader = Class.extend({\r\n\t        init: function(options) {\r\n\t            var that = this,\r\n\t                total = options.total,\r\n\t                model = options.model,\r\n\t                parse = options.parse,\r\n\t                errors = options.errors,\r\n\t                serialize = options.serialize,\r\n\t                data = options.data;\r\n\r\n\t            if (model) {\r\n\t                if (isPlainObject(model)) {\r\n\t                    var base = options.modelBase || kendo.data.Model;\r\n\r\n\t                    if (model.fields) {\r\n\t                        each(model.fields, function(field, value) {\r\n\t                            if (isPlainObject(value) && value.field) {\r\n\t                                if (!$.isFunction(value.field)) {\r\n\t                                    value = extend(value, { field: that.getter(value.field) });\r\n\t                                }\r\n\t                            } else {\r\n\t                                value = { field: that.getter(value) };\r\n\t                            }\r\n\t                            model.fields[field] = value;\r\n\t                        });\r\n\t                    }\r\n\r\n\t                    var id = model.id;\r\n\t                    if (id) {\r\n\t                        var idField = {};\r\n\r\n\t                        idField[that.xpathToMember(id, true)] = { field : that.getter(id) };\r\n\t                        model.fields = extend(idField, model.fields);\r\n\t                        model.id = that.xpathToMember(id);\r\n\t                    }\r\n\t                    model = base.define(model);\r\n\t                }\r\n\r\n\t                that.model = model;\r\n\t            }\r\n\r\n\t            if (total) {\r\n\t                if (typeof total == "string") {\r\n\t                    total = that.getter(total);\r\n\t                    that.total = function(data) {\r\n\t                        return parseInt(total(data), 10);\r\n\t                    };\r\n\t                } else if (typeof total == "function"){\r\n\t                    that.total = total;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (errors) {\r\n\t                if (typeof errors == "string") {\r\n\t                    errors = that.getter(errors);\r\n\t                    that.errors = function(data) {\r\n\t                        return errors(data) || null;\r\n\t                    };\r\n\t                } else if (typeof errors == "function"){\r\n\t                    that.errors = errors;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (data) {\r\n\t                if (typeof data == "string") {\r\n\t                    data = that.xpathToMember(data);\r\n\t                    that.data = function(value) {\r\n\t                        var result = that.evaluate(value, data),\r\n\t                            modelInstance;\r\n\r\n\t                        result = isArray(result) ? result : [result];\r\n\r\n\t                        if (that.model && model.fields) {\r\n\t                            modelInstance = new that.model();\r\n\r\n\t                            return map(result, function(value) {\r\n\t                                if (value) {\r\n\t                                    var record = {}, field;\r\n\r\n\t                                    for (field in model.fields) {\r\n\t                                        record[field] = modelInstance._parse(field, model.fields[field].field(value));\r\n\t                                    }\r\n\r\n\t                                    return record;\r\n\t                                }\r\n\t                            });\r\n\t                        }\r\n\r\n\t                        return result;\r\n\t                    };\r\n\t                } else if (typeof data == "function") {\r\n\t                    that.data = data;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (typeof parse == "function") {\r\n\t                var xmlParse = that.parse;\r\n\r\n\t                that.parse = function(data) {\r\n\t                    var xml = parse.call(that, data);\r\n\t                    return xmlParse.call(that, xml);\r\n\t                };\r\n\t            }\r\n\r\n\t            if (typeof serialize == "function") {\r\n\t                that.serialize = serialize;\r\n\t            }\r\n\t        },\r\n\t        total: function(result) {\r\n\t            return this.data(result).length;\r\n\t        },\r\n\t        errors: function(data) {\r\n\t            return data ? data.errors : null;\r\n\t        },\r\n\t        serialize: function(data) {\r\n\t            return data;\r\n\t        },\r\n\t        parseDOM: function(element) {\r\n\t            var result = {},\r\n\t                parsedNode,\r\n\t                node,\r\n\t                nodeType,\r\n\t                nodeName,\r\n\t                member,\r\n\t                attribute,\r\n\t                attributes = element.attributes,\r\n\t                attributeCount = attributes.length,\r\n\t                idx;\r\n\r\n\t            for (idx = 0; idx < attributeCount; idx++) {\r\n\t                attribute = attributes[idx];\r\n\t                result["@" + attribute.nodeName] = attribute.nodeValue;\r\n\t            }\r\n\r\n\t            for (node = element.firstChild; node; node = node.nextSibling) {\r\n\t                nodeType = node.nodeType;\r\n\r\n\t                if (nodeType === 3 || nodeType === 4) {\r\n\t                    // text nodes or CDATA are stored as #text field\r\n\t                    result["#text"] = node.nodeValue;\r\n\t                } else if (nodeType === 1) {\r\n\t                    // elements are stored as fields\r\n\t                    parsedNode = this.parseDOM(node);\r\n\r\n\t                    nodeName = node.nodeName;\r\n\r\n\t                    member = result[nodeName];\r\n\r\n\t                    if (isArray(member)) {\r\n\t                        // elements of same nodeName are stored as array\r\n\t                        member.push(parsedNode);\r\n\t                    } else if (member !== undefined) {\r\n\t                        member = [member, parsedNode];\r\n\t                    } else {\r\n\t                        member = parsedNode;\r\n\t                    }\r\n\r\n\t                    result[nodeName] = member;\r\n\t                }\r\n\t            }\r\n\t            return result;\r\n\t        },\r\n\r\n\t        evaluate: function(value, expression) {\r\n\t            var members = expression.split("."),\r\n\t                member,\r\n\t                result,\r\n\t                length,\r\n\t                intermediateResult,\r\n\t                idx;\r\n\r\n\t            while (member = members.shift()) {\r\n\t                value = value[member];\r\n\r\n\t                if (isArray(value)) {\r\n\t                    result = [];\r\n\t                    expression = members.join(".");\r\n\r\n\t                    for (idx = 0, length = value.length; idx < length; idx++) {\r\n\t                        intermediateResult = this.evaluate(value[idx], expression);\r\n\r\n\t                        intermediateResult = isArray(intermediateResult) ? intermediateResult : [intermediateResult];\r\n\r\n\t                        result.push.apply(result, intermediateResult);\r\n\t                    }\r\n\r\n\t                    return result;\r\n\t                }\r\n\t            }\r\n\r\n\t            return value;\r\n\t        },\r\n\r\n\t        parse: function(xml) {\r\n\t            var documentElement,\r\n\t                tree,\r\n\t                result = {};\r\n\r\n\t            documentElement = xml.documentElement || $.parseXML(xml).documentElement;\r\n\r\n\t            tree = this.parseDOM(documentElement);\r\n\r\n\t            result[documentElement.nodeName] = tree;\r\n\r\n\t            return result;\r\n\t        },\r\n\r\n\t        xpathToMember: function(member, raw) {\r\n\t            if (!member) {\r\n\t                return "";\r\n\t            }\r\n\r\n\t            member = member.replace(/^\\//, "") // remove the first "/"\r\n\t                           .replace(/\\//g, "."); // replace all "/" with "."\r\n\r\n\t            if (member.indexOf("@") >= 0) {\r\n\t                // replace @attribute with \'["@attribute"]\'\r\n\t                return member.replace(/\\.?(@.*)/, raw? \'$1\':\'["$1"]\');\r\n\t            }\r\n\r\n\t            if (member.indexOf("text()") >= 0) {\r\n\t                // replace ".text()" with \'["#text"]\'\r\n\t                return member.replace(/(\\.?text\\(\\))/, raw? \'#text\':\'["#text"]\');\r\n\t            }\r\n\r\n\t            return member;\r\n\t        },\r\n\t        getter: function(member) {\r\n\t            return getter(this.xpathToMember(member), true);\r\n\t        }\r\n\t    });\r\n\r\n\t    $.extend(true, kendo.data, {\r\n\t        XmlDataReader: XmlDataReader,\r\n\t        readers: {\r\n\t            xml: XmlDataReader\r\n\t        }\r\n\t    });\r\n\t})(window.kendo.jQuery);\r\n\r\n\treturn window.kendo;\r\n\r\n\t}, __webpack_require__(3));\r\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.data.xml.js?')}}]);