(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{"./node_modules/@progress/kendo-ui/js/kendo.gantt.js":
/*!***********************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.gantt.js ***!
  \***********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1251);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1059:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ "./node_modules/@progress/kendo-ui/js/kendo.data.js");\n\n/***/ }),\n\n/***/ 1190:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.resizable */ "./node_modules/@progress/kendo-ui/js/kendo.resizable.js");\n\n/***/ }),\n\n/***/ 1251:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1059), __webpack_require__(1190), __webpack_require__(1252), __webpack_require__(1253), __webpack_require__(1254), __webpack_require__(1255), __webpack_require__(1256), __webpack_require__(1257)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "gantt",\n\t    name: "Gantt",\n\t    category: "web",\n\t    description: "The Gantt component.",\n\t    depends: [ "data", "resizable", "switch", "gantt.data", "gantt.editors", "gantt.list", "gantt.timeline", "pdf" ]\n\t};\n\n\t(function($, undefined) {\n\n\t    var kendo = window.kendo,\n\t        keys = $.extend({F10: 121}, kendo.keys),\n\t        supportsMedia = "matchMedia" in window,\n\t        mobileOS = kendo.support.mobileOS,\n\t        Widget = kendo.ui.Widget,\n\t        ObservableObject = kendo.data.ObservableObject,\n\t        ObservableArray = kendo.data.ObservableArray,\n\t        Query = kendo.data.Query,\n\t        isArray = $.isArray,\n\t        inArray = $.inArray,\n\t        isFunction = kendo.isFunction,\n\t        proxy = $.proxy,\n\t        extend = $.extend,\n\t        isPlainObject = $.isPlainObject,\n\t        outerWidth = kendo._outerWidth,\n\t        outerHeight = kendo._outerHeight,\n\t        defaultIndicatorWidth = 3,\n\n\t        NS = ".kendoGantt",\n\t        PERCENTAGE_FORMAT = "p0",\n\t        TABINDEX = "tabIndex",\n\t        CLICK = "click",\n\t        STRING = "string",\n\t        ARIA_DESCENDANT = "aria-activedescendant",\n\t        ARIA_LABEL = "aria-label",\n\t        ACTIVE_CELL = "gantt_active_cell",\n\t        DOT = ".",\n\t        TASK_DELETE_CONFIRM = "Are you sure you want to delete this task?",\n\t        DEPENDENCY_DELETE_CONFIRM = "Are you sure you want to delete this dependency?",\n\t        TOGGLE_BUTTON_TEMPLATE = kendo.template(\'<button class="#=styles.buttonToggle#" type="button" \'+ ARIA_LABEL + \'="Toggle"><span class="#=styles.iconToggle#"></span></button>\'),\n\t        BUTTON_TEMPLATE = \'<button class="#=styles.button# #=className#" type="button" \'+\n\t            \'#if (action) {#\' +\n\t                \'data-action="#=action#"\' +\n\t            \'#}#\' +\n\t        \'><span class="#=iconClass#"></span><span class="k-button-text">#=text#</span></button>\',\n\t        COMMAND_BUTTON_TEMPLATE = \'<a class="#=className#" #=attr# href="\\\\#">#=text#</a>\',\n\t        VIEWS_DROPDOWN_TEMPLATE = kendo.template(\'<select class="k-dropdown #= styles.viewsDropdown #">\' +\n\t            \'#for(var view in views){#\' +\n\t                \'<option value="#=view#">#=views[view].title#</option>\' +\n\t            \'#}#\' +\n\t        \'</select>\'),\n\t        HEADER_VIEWS_TEMPLATE = kendo.template(\'<div class="#=styles.viewsWrapper#">\' +\n\t            \'<span class="k-button-group #=styles.views#">\' +\n\t                \'#for(var view in views){#\' +\n\t                    \'<button type="button" class="#=styles.button# #=styles.viewButton#-#= view.toLowerCase() #" data-#=ns#name="#=view#"><span class="k-button-text">#=views[view].title#</span></button>\' +\n\t                \'#}#\' +\n\t            \'</span>\' +\n\t        \'</div>\');\n\n\t    var ganttStyles = {\n\t        wrapper: "k-widget k-gantt",\n\t        plannedTasks: "k-gantt-planned",\n\t        rowHeight: "k-gantt-rowheight",\n\t        content: "k-gantt-content",\n\t        listWrapper: "k-gantt-treelist",\n\t        list: "k-gantt-treelist",\n\t        timelineWrapper: "k-gantt-timeline",\n\t        timeline: "k-gantt-timeline",\n\t        splitBarWrapper: "k-splitbar k-state-default k-splitbar-horizontal k-splitbar-draggable-horizontal",\n\t        splitBar: "k-splitbar",\n\t        splitBarHover: "k-splitbar-horizontal-hover",\n\t        popupWrapper: "k-list-container",\n\t        popupList: "k-list k-reset",\n\t        resizeHandle: "k-resize-handle",\n\t        icon: "k-icon",\n\t        item: "k-item",\n\t        line: "k-gantt-line",\n\t        buttonDelete: "k-gantt-delete",\n\t        buttonCancel: "k-gantt-cancel",\n\t        buttonSave: "k-gantt-update",\n\t        buttonToggle: "k-gantt-toggle",\n\t        primary: "k-primary",\n\t        hovered: "k-state-hover",\n\t        selected: "k-state-selected",\n\t        focused: "k-state-focused",\n\t        gridHeader: "k-grid-header",\n\t        gridHeaderWrap: "k-grid-header-wrap",\n\t        gridContent: "k-grid-content",\n\t        tasks: "k-gantt-tasks",\n\t        popup: {\n\t            form: "k-popup-edit-form",\n\t            editForm: "k-gantt-edit-form",\n\t            formContainer: "k-edit-form-container",\n\t            resourcesFormContainer: "k-resources-form-container",\n\t            message: "k-popup-message",\n\t            buttonsContainer: "k-edit-buttons k-state-default",\n\t            button: "k-button",\n\t            editField: "k-edit-field",\n\t            editLabel: "k-edit-label",\n\t            resourcesField: "k-gantt-resources"\n\t        },\n\t        toolbar: {\n\t            headerWrapper: "k-gantt-header k-toolbar k-gantt-toolbar",\n\t            footerWrapper: "k-gantt-footer k-toolbar k-gantt-toolbar",\n\t            toolbar: "k-gantt-toolbar",\n\t            views: "k-gantt-views",\n\t            viewsWrapper: "k-gantt-views-wrapper",\n\t            viewsDropdown: "k-views-dropdown",\n\t            button: "k-button k-button-icontext",\n\t            buttonToggle: "k-button k-button-icon k-gantt-toggle",\n\t            iconPlus: "k-icon k-i-plus",\n\t            iconPdf: "k-icon k-i-file-pdf",\n\t            iconToggle: "k-icon k-i-layout-1-by-4",\n\t            viewButtonDefault: "k-state-default",\n\t            viewButton: "k-view",\n\t            link: "k-link",\n\t            pdfButton: "k-gantt-pdf",\n\t            appendButton: "k-gantt-create"\n\t        }\n\t    };\n\n\t    function selector(uid) {\n\t        return "[" + kendo.attr("uid") + (uid ? "=\'" + uid + "\']" : "]");\n\t    }\n\n\t    function trimOptions(options) {\n\t        delete options.name;\n\t        delete options.prefix;\n\n\t        delete options.remove;\n\t        delete options.edit;\n\t        delete options.add;\n\t        delete options.navigate;\n\n\t        return options;\n\t    }\n\n\t    function focusTable(table, direct) {\n\t        var wrapper = table.parents(\'[\' + kendo.attr("role") + \'="gantt"]\');\n\t        var scrollPositions = [];\n\t        var parents = scrollableParents(wrapper);\n\n\t        table.attr(TABINDEX, 0);\n\n\t        if (direct) {\n\t            parents.each(function(index, parent) {\n\t                scrollPositions[index] = $(parent).scrollTop();\n\t            });\n\t        }\n\n\t        try {\n\t            //The setActive method does not cause the document to scroll to the active object in the current page\n\t            table[0].setActive();\n\t        } catch (e) {\n\t            table[0].focus();\n\t        }\n\n\t        if (direct) {\n\t            parents.each(function(index, parent) {\n\t                $(parent).scrollTop(scrollPositions[index]);\n\t            });\n\t        }\n\t    }\n\n\t    function scrollableParents(element) {\n\t        return $(element).parentsUntil("body")\n\t                .filter(function(index, element) {\n\t                    var computedStyle = kendo.getComputedStyles(element, ["overflow"]);\n\t                    return computedStyle.overflow != "visible";\n\t                })\n\t                .add(window);\n\t    }\n\n\t    var defaultCommands;\n\n\t    var Gantt = Widget.extend({\n\t        init: function(element, options, events) {\n\t            if (isArray(options)) {\n\t                options = { dataSource: options };\n\t            }\n\n\t            defaultCommands = {\n\t                append: {\n\t                    text: "Add Task",\n\t                    action: "add",\n\t                    className: Gantt.styles.toolbar.appendButton,\n\t                    iconClass: Gantt.styles.toolbar.iconPlus\n\t                },\n\t                pdf: {\n\t                    text: "Export to PDF",\n\t                    className: Gantt.styles.toolbar.pdfButton,\n\t                    iconClass: Gantt.styles.toolbar.iconPdf\n\t                }\n\t            };\n\n\t            Widget.fn.init.call(this, element, options);\n\n\t            if (events) {\n\t                this._events = events;\n\t            }\n\n\t            this._wrapper();\n\n\t            this._resources();\n\n\t            if (!this.options.views || !this.options.views.length) {\n\t                this.options.views = ["day", "week", "month"];\n\t            }\n\n\t            this._timeline();\n\n\t            this._toolbar();\n\n\t            this._footer();\n\n\t            this._adjustDimensions();\n\n\t            // Prevent extra refresh from setting the view\n\t            this._preventRefresh = true;\n\n\t            this.view(this.timeline._selectedViewName);\n\n\t            this._preventRefresh = false;\n\n\t            this._dataSource();\n\n\t            this._assignments();\n\n\t            this._dropDowns();\n\n\t            this._list();\n\n\t            this._dependencies();\n\n\t            this._resizable();\n\n\t            this._scrollable();\n\n\t            this._dataBind();\n\n\t            this._attachEvents();\n\n\t            this._createEditor();\n\n\t            kendo.notify(this);\n\t        },\n\n\t        events: [\n\t            "dataBinding",\n\t            "dataBound",\n\t            "add",\n\t            "edit",\n\t            "remove",\n\t            "cancel",\n\t            "save",\n\t            "change",\n\t            "navigate",\n\t            "moveStart",\n\t            "move",\n\t            "moveEnd",\n\t            "resizeStart",\n\t            "resize",\n\t            "resizeEnd",\n\t            "columnResize",\n\t            "togglePlannedTasks"\n\t        ],\n\n\t        options: {\n\t            name: "Gantt",\n\t            autoBind: true,\n\t            navigatable: false,\n\t            selectable: true,\n\t            editable: true,\n\t            resizable: false,\n\t            columnResizeHandleWidth: defaultIndicatorWidth,\n\t            columns: [],\n\t            views: [],\n\t            dataSource: {},\n\t            dependencies: {},\n\t            resources: {},\n\t            assignments: {},\n\t            taskTemplate: null,\n\t            messages: {\n\t                save: "Save",\n\t                cancel: "Cancel",\n\t                destroy: "Delete",\n\t                deleteTaskConfirmation: TASK_DELETE_CONFIRM,\n\t                deleteDependencyConfirmation: DEPENDENCY_DELETE_CONFIRM,\n\t                deleteTaskWindowTitle: "Delete task",\n\t                deleteDependencyWindowTitle: "Delete dependency",\n\t                views: {\n\t                    day: "Day",\n\t                    week: "Week",\n\t                    month: "Month",\n\t                    year: "Year",\n\t                    start: "Start",\n\t                    end: "End"\n\t                },\n\t                actions: {\n\t                    append: "Add Task",\n\t                    addChild: "Add Child",\n\t                    insertBefore: "Add Above",\n\t                    insertAfter: "Add Below",\n\t                    pdf: "Export to PDF"\n\t                },\n\t                editor: {\n\t                    editorTitle: "Task",\n\t                    resourcesEditorTitle: "Resources",\n\t                    title: "Title",\n\t                    start: "Start",\n\t                    end: "End",\n\t                    plannedStart: "Planned Start",\n\t                    plannedEnd: "Planned End",\n\t                    percentComplete: "Complete",\n\t                    resources: "Resources",\n\t                    assignButton: "Assign",\n\t                    resourcesHeader: "Resources",\n\t                    unitsHeader: "Units"\n\t                },\n\t                plannedTasks: {\n\t                    switchText: "Planned Tasks",\n\t                    offsetTooltipAdvanced: "Met deadline earlier",\n\t                    offsetTooltipDelay: "Delay",\n\t                    seconds: "seconds",\n\t                    minutes: "minutes",\n\t                    hours: "hours",\n\t                    days: "days"\n\t                }\n\t            },\n\t            showWorkHours: true,\n\t            showWorkDays: true,\n\t            toolbar: null,\n\t            workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n\t            workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n\t            workWeekStart: 1,\n\t            workWeekEnd: 5,\n\t            hourSpan: 1,\n\t            snap: true,\n\t            height: 600,\n\t            listWidth: "30%",\n\t            rowHeight: null,\n\t            showPlannedTasks: false\n\t        },\n\n\t        select: function(value) {\n\t            var list = this.list;\n\n\t            if (!value) {\n\t                return list.select();\n\t            }\n\n\t            if (typeof value === STRING) {\n\t                value = list.content.find(value);\n\t            }\n\n\t            list.select(value);\n\n\t            this.list.element.find("table[role=treegrid]").focus();\n\t            return;\n\t        },\n\n\t        clearSelection: function() {\n\t            this.list.clearSelection();\n\t        },\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\n\t            if (this.dataSource) {\n\t                this.dataSource.unbind("change", this._refreshHandler);\n\t                this.dataSource.unbind("progress", this._progressHandler);\n\t                this.dataSource.unbind("error", this._errorHandler);\n\t            }\n\n\t            if (this.dependencies) {\n\t                this.dependencies.unbind("change", this._dependencyRefreshHandler);\n\t                this.dependencies.unbind("error", this._dependencyErrorHandler);\n\t            }\n\n\t            if (this.timeline) {\n\t                this.timeline.unbind();\n\t                this.timeline.destroy();\n\t            }\n\n\t            if (this.list) {\n\t                this.list.unbind();\n\t                this.list.destroy();\n\t            }\n\n\t            if (this.footerDropDown) {\n\t                this.footerDropDown.destroy();\n\t            }\n\n\t            if (this.headerDropDown) {\n\t                this.headerDropDown.destroy();\n\t            }\n\n\t            if (this._editor) {\n\t                this._editor.destroy();\n\t            }\n\n\t            if (this._resizeDraggable) {\n\t                this._resizeDraggable.destroy();\n\t            }\n\n\t            this.toolbar.off(NS);\n\n\t            if (supportsMedia) {\n\t                this._mediaQuery.removeListener(this._mediaQueryHandler);\n\t                this._mediaQuery = null;\n\t            }\n\n\t            $(window).off("resize" + NS, this._resizeHandler);\n\t            $(this.wrapper).off(NS);\n\n\t            this.toolbar = null;\n\t            this.footer = null;\n\n\t            kendo.destroy(this.element);\n\t        },\n\n\t        setOptions: function(options) {\n\t            var newOptions = kendo.deepExtend({}, this.options, options);\n\n\t            var events = this._events;\n\n\t            if (!options.views) {\n\t                var selectedView = this.view().name;\n\n\t                newOptions.views = $.map(this.options.views, function(view) {\n\t                    var isSettings = isPlainObject(view);\n\t                    var name = isSettings ? ((typeof view.type !== "string") ? view.title : view.type) : view;\n\n\t                    if (selectedView === name) {\n\t                        if (isSettings) {\n\t                            view.selected = true;\n\t                        } else {\n\t                            view = { type: name, selected: true };\n\t                        }\n\t                    } else if (isSettings) {\n\t                        view.selected = false;\n\t                    }\n\n\t                    return view;\n\t                });\n\t            }\n\n\t            if (!options.dataSource) { newOptions.dataSource = this.dataSource; }\n\t            if (!options.dependencies) { newOptions.dependencies = this.dependencies; }\n\t            if (!options.resources) { newOptions.resources = this.resources; }\n\t            if (!options.assignments) { newOptions.assignments = this.assignments; }\n\n\t            this.destroy();\n\t            this.element.empty();\n\t            this.options = null;\n\n\t            this.init(this.element, newOptions, events);\n\n\t            Widget.fn._setEvents.call(this, newOptions);\n\t        },\n\n\t        _attachEvents: function() {\n\t            this._resizeHandler = proxy(this.resize, this, false);\n\t            $(window).on("resize" + NS, this._resizeHandler);\n\n\t            if (supportsMedia && this._mediaQuery.matches === true) {\n\t                this._mediaQueryHandler({ matches: true });\n\t            }\n\t        },\n\n\t        _wrapper: function() {\n\t            var ganttStyles = Gantt.styles;\n\t            var splitBarHandleClassName = [ganttStyles.icon, ganttStyles.resizeHandle].join(" ");\n\t            var options = this.options;\n\t            var height = options.height;\n\t            var width = options.width;\n\n\t            this.wrapper = this.element.addClass(ganttStyles.wrapper);\n\t            this.layout = $("<div class=\'" + ganttStyles.content + "\' />").appendTo(this.wrapper)\n\t                .append("<div class=\'" + ganttStyles.listWrapper + "\'><div></div></div>")\n\t                .append("<div class=\'" + ganttStyles.splitBarWrapper + "\'><div class=\'" + splitBarHandleClassName + "\'></div></div>")\n\t                .append("<div class=\'" + ganttStyles.timelineWrapper + "\'><div></div></div>");\n\n\t            if(options.showPlannedTasks) {\n\t                this.wrapper.addClass(ganttStyles.plannedTasks);\n\t            }\n\n\t            if (height) {\n\t                this.wrapper.css("height", height);\n\t            }\n\n\t            if (width) {\n\t                this.wrapper.css("width", width);\n\t            }\n\n\t            if (options.rowHeight) {\n\t                this.wrapper.addClass(ganttStyles.rowHeight);\n\t            }\n\n\t            this.treelistWrapper = this.wrapper.find(DOT + ganttStyles.list);\n\t            this.splitbar = this.wrapper.find(DOT + ganttStyles.splitBar);\n\t            this.timelineWrapper = this.wrapper.find(DOT + ganttStyles.timeline);\n\n\t            this.treelistWrapper.css("width", options.listWidth);\n\t            this.timelineWrapper.css("width", this.wrapper.width() - this.treelistWrapper.outerWidth() - this.splitbar.outerWidth() );\n\t        },\n\n\t        _toolbar: function() {\n\t            var that = this;\n\t            var ganttStyles = Gantt.styles;\n\t            var viewsSelector = DOT + ganttStyles.toolbar.views + " > button";\n\t            var viewsDropdownSelector = DOT + ganttStyles.toolbar.viewsDropdown;\n\t            var pdfSelector = DOT + ganttStyles.toolbar.pdfButton;\n\t            var toggleSelector = DOT + ganttStyles.buttonToggle;\n\t            var contentSelector = DOT + ganttStyles.gridContent;\n\t            var splitbar = that.splitbar;\n\t            var treelist = that.treelistWrapper;\n\t            var timeline = that.timelineWrapper;\n\t            var actions = this.options.toolbar;\n\t            var toolbar;\n\t            var views;\n\t            var toggleButton;\n\t            var mediaQueryHandler = function(e) {\n\n\t                if (e.matches) {\n\t                    treelist.addClass("k-hidden");\n\t                    splitbar.addClass("k-hidden");\n\n\t                    treelist.width("100%");\n\t                } else {\n\t                    treelist.removeClass("k-hidden");\n\t                    splitbar.removeClass("k-hidden");\n\t                    timeline.removeClass("k-hidden");\n\n\t                    treelist.width(treelist.outerWidth());\n\n\t                    that.refresh();\n\n\t                    timeline\n\t                        .find(contentSelector)\n\t                        .scrollTop(that.scrollTop);\n\t                }\n\n\t                that._resize();\n\t            };\n\n\t            if (!isFunction(actions)) {\n\t                actions = (typeof actions === STRING ? actions : this._actions(actions));\n\t                actions = proxy(kendo.template(actions), this);\n\t            }\n\n\t            toggleButton = $(TOGGLE_BUTTON_TEMPLATE({ styles: ganttStyles.toolbar }));\n\n\t            views = $(HEADER_VIEWS_TEMPLATE({\n\t                ns: kendo.ns,\n\t                views: this.timeline.views,\n\t                styles: ganttStyles.toolbar\n\t            }));\n\n\t            toolbar = $("<div class=\'" + ganttStyles.toolbar.headerWrapper + "\'>")\n\t                .append(toggleButton)\n\t                .append(actions({}))\n\t                .append("<span class=\'k-spacer k-toolbar-spacer\' />")\n\t                .append(views);\n\n\t            if (views.find("button").length > 1) {\n\t                views.prepend(VIEWS_DROPDOWN_TEMPLATE({\n\t                    ns: kendo.ns,\n\t                    views: this.timeline.views,\n\t                    styles: ganttStyles.toolbar\n\t                }));\n\t            }\n\n\t            if(this.toggeSwitchWrap) {\n\t                this.toggeSwitchWrap.insertBefore(views);\n\t            }\n\n\t            this.wrapper.prepend(toolbar);\n\t            this.toolbar = toolbar;\n\n\t            if (supportsMedia) {\n\t                this._mediaQueryHandler = proxy(mediaQueryHandler, this);\n\t                this._mediaQuery = window.matchMedia("(max-width: 480px)");\n\t                this._mediaQuery.addListener(this._mediaQueryHandler);\n\t            }\n\n\t            toolbar\n\t                .on("change" + NS, viewsDropdownSelector, function() {\n\t                    var list = that.list;\n\t                    var name = $(this).val();\n\n\t                    if (list.editable && list.editable.trigger("validate")) {\n\t                        return;\n\t                    }\n\n\t                    if (!that.trigger("navigate", { view: name })) {\n\t                        that.view(name);\n\t                    }\n\n\t                    that.toolbar.find(DOT + ganttStyles.focused).removeClass(ganttStyles.focused);\n\t                })\n\t                .on(CLICK + NS, viewsSelector, function(e) {\n\t                    e.preventDefault();\n\n\t                    var list = that.list;\n\t                    var name = $(this).attr(kendo.attr("name"));\n\n\t                    if (list.editor && !list.editor.end()) {\n\t                        return;\n\t                    }\n\n\t                    if (!that.trigger("navigate", { view: name })) {\n\t                        that.view(name);\n\t                    }\n\n\t                    that.toolbar.find(DOT + ganttStyles.focused).removeClass(ganttStyles.focused);\n\t                })\n\t                .on("keydown" + NS, viewsSelector, function(e) {\n\t                    var views = $(DOT + ganttStyles.toolbar.views).children(":not(.k-current-view)");\n\t                    var focusedViewIndex = views.index((that._focusedView && that._focusedView[0]) || views.closest(DOT + ganttStyles.selected)[0]);\n\n\t                    if (e.keyCode === keys.RIGHT) {\n\t                        $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n\t                        that._focusedView = focusedViewIndex + 1 === views.length ? $(views[0]) : $(views[focusedViewIndex + 1]);\n\t                        that._focusedView.focus().addClass(ganttStyles.focused);\n\t                        e.preventDefault();\n\t                    } else if (e.keyCode === keys.LEFT) {\n\t                        $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n\t                        that._focusedView = focusedViewIndex === 0 ? $(views[views.length - 1]) : $(views[focusedViewIndex - 1]);\n\t                        that._focusedView.focus().addClass(ganttStyles.focused);\n\t                        e.preventDefault();\n\t                    } else if ((e.keyCode === keys.ENTER || e.keyCode === keys.SPACEBAR) && that._focusedView) {\n\t                        that.view(that._focusedView.text().toLowerCase());\n\t                        e.preventDefault();\n\t                    } else if (e.keyCode >= 49 && e.keyCode <= 57) {\n\t                        that.view(that.timeline._viewByIndex(e.keyCode - 49));\n\t                    }\n\t                })\n\t                .on(CLICK + NS, pdfSelector, function(e) {\n\t                    e.preventDefault();\n\n\t                    that.saveAsPDF();\n\t                })\n\t                .on(CLICK + NS, toggleSelector, function(e) {\n\t                    e.preventDefault();\n\n\t                    if (treelist.is(":visible")) {\n\t                        treelist.addClass("k-hidden");\n\t                        timeline.removeClass("k-hidden");\n\n\t                        that.refresh();\n\n\t                        timeline\n\t                            .find(contentSelector)\n\t                            .scrollTop(that.scrollTop);\n\t                    } else {\n\t                        treelist.removeClass("k-hidden");\n\t                        timeline.addClass("k-hidden");\n\n\t                        treelist\n\t                            .find(contentSelector)\n\t                            .scrollTop(that.scrollTop);\n\t                    }\n\n\t                    that._resize();\n\t                });\n\n\t            this.wrapper\n\t                .on("focusout" + NS, function(e) {\n\t                    if (!$(e.relatedTarget).closest(DOT + ganttStyles.toolbar.toolbar).length) {\n\t                        that.toolbar.find(DOT + ganttStyles.focused).removeClass(ganttStyles.focused);\n\t                    }\n\t                    if (!$(e.relatedTarget).closest(DOT + ganttStyles.toolbar.views).length) {\n\t                        that.toolbar.find(DOT + ganttStyles.toolbar.views).removeClass(ganttStyles.toolbar.expanded);\n\t                    }\n\t                });\n\n\t        },\n\n\t        _actions: function() {\n\t            var options = this.options;\n\t            var editable = options.editable;\n\t            var actions = options.toolbar;\n\t            var html = "";\n\t            var action;\n\n\t            if (!isArray(actions)) {\n\t                if (editable && editable.create !== false) {\n\t                    actions = ["append"];\n\t                } else {\n\t                    return html;\n\t                }\n\t            }\n\n\t            for (var i = 0, length = actions.length; i < length; i++) {\n\t                action = actions[i];\n\n\t                if(action === "plannedTasks" || action.name === "plannedTasks") {\n\t                    this._createPlannedTasksSwitch();\n\t                    continue;\n\t                }\n\n\t                html += this._createButton(action);\n\t            }\n\n\t            return html;\n\t        },\n\n\t        _footer: function() {\n\t            var editable = this.options.editable;\n\n\t            if (!editable || editable.create === false) {\n\t                return;\n\t            }\n\n\t            var ganttStyles = Gantt.styles.toolbar;\n\t            var messages = this.options.messages.actions;\n\t            var button = $(kendo.template(BUTTON_TEMPLATE)(extend(true, { styles: ganttStyles }, defaultCommands.append, { text: messages.append })));\n\t            var footer = $("<div class=\'" + ganttStyles.footerWrapper + "\'>").append(button);\n\n\t            this.wrapper.append(footer);\n\t            this.footer = footer;\n\t        },\n\n\t        _createButton: function(command) {\n\t            var template = command.template || BUTTON_TEMPLATE;\n\t            var messages = this.options.messages.actions;\n\t            var commandName = typeof command === STRING ? command : command.name || command.text;\n\t            var className = defaultCommands[commandName] ? defaultCommands[commandName].className : "k-gantt-" + (commandName || "").replace(/\\s/g, "");\n\t            var options = {\n\t                iconClass: "",\n\t                action: "",\n\t                text: commandName,\n\t                className: className,\n\t                styles: Gantt.styles.toolbar\n\t            };\n\n\t            if (!commandName && !(isPlainObject(command) && command.template))  {\n\t                throw new Error("Custom commands should have name specified");\n\t            }\n\n\t            options = extend(true, options, defaultCommands[commandName], { text: messages[commandName] });\n\n\t            if (isPlainObject(command)) {\n\t                if (command.className && inArray(options.className, command.className.split(" ")) < 0) {\n\t                    command.className += " " + options.className;\n\t                }\n\n\t                options = extend(true, options, command);\n\t            }\n\n\t            return kendo.template(template)(options);\n\t        },\n\n\t        _adjustDimensions: function() {\n\t            var element = this.element;\n\t            var toolbarHeight = outerHeight(this.toolbar);\n\t            var footerHeight = this.footer ? outerHeight(this.footer) : 0;\n\t            var totalHeight = element.height();\n\t            var totalWidth = element.width();\n\t            var splitBarWidth = this.splitbar.is(":visible") ? outerWidth(this.splitbar) : 0;\n\t            var treeListWidth = this.treelistWrapper.is(":visible") ? outerWidth(this.treelistWrapper) : 0;\n\t            var timelineWidth = totalWidth - ( treeListWidth + splitBarWidth );\n\n\t            this.layout.children().height(totalHeight - (toolbarHeight + footerHeight));\n\t            this.timelineWrapper.width(timelineWidth);\n\n\t            if (totalWidth < (treeListWidth + splitBarWidth)) {\n\t                this.treelistWrapper.width(totalWidth - splitBarWidth);\n\t            }\n\t        },\n\n\t        _scrollTo: function(value) {\n\t            var view = this.timeline.view();\n\t            var list = this.list;\n\t            var attr = kendo.attr("uid");\n\t            var id = typeof value === "string" ? value :\n\t                value.closest("tr" + selector()).attr(attr);\n\t            var action;\n\t            var scrollTarget;\n\t            var scrollIntoView = function() {\n\t                if (scrollTarget.length !== 0) {\n\t                    action();\n\t                }\n\t            };\n\n\t            if (view.content.is(":visible")) {\n\t                scrollTarget = view.content.find(selector(id));\n\t                action = function() {\n\t                    view._scrollTo(scrollTarget);\n\t                };\n\t            } else {\n\t                scrollTarget = list.element.find(selector(id));\n\t                action = function() {\n\t                    scrollTarget.get(0).scrollIntoView();\n\t                };\n\t            }\n\n\t            scrollIntoView();\n\t        },\n\n\t        _dropDowns: function() {\n\t            var that = this;\n\t            var actionsSelector = DOT + Gantt.styles.toolbar.appendButton;\n\t            var actionMessages = this.options.messages.actions;\n\t            var timeline = this.timeline;\n\t            var editable = this.options.editable;\n\n\t            var handler = function(e) {\n\t                var type = e.type;\n\t                var orderId;\n\t                var dataSource = that.dataSource;\n\t                var task = dataSource._createNewModel({});\n\t                var selected = that.dataItem(that.select());\n\t                var parent = dataSource.taskParent(selected);\n\t                var firstSlot = timeline.view()._timeSlots()[0];\n\t                var target = type === "add" ? selected : parent;\n\t                var editable = that.list.editor;\n\n\t                if (editable && editable.trigger("validate")) {\n\t                    return;\n\t                }\n\n\t                task.set("title", "New task");\n\n\t                if (target) {\n\t                    task.set("parentId", target.get("id"));\n\t                    task.set("start", target.get("start"));\n\t                    task.set("end", target.get("end"));\n\t                    task.set("plannedStart", target.get("plannedStart"));\n\t                    task.set("plannedEnd", target.get("plannedEnd"));\n\t                } else {\n\t                    task.set("start", firstSlot.start);\n\t                    task.set("end", firstSlot.end);\n\t                }\n\n\t                if (type !== "add") {\n\t                    orderId = selected.get("orderId");\n\t                    orderId = type === "insert-before" ? orderId : orderId + 1;\n\t                }\n\n\t                that._createTask(task, orderId);\n\t            };\n\n\t            if (!editable || editable.create === false) {\n\t                return;\n\t            }\n\n\t            this.footerDropDown = new kendo.gantt.TaskDropDown(this.footer.children(actionsSelector).eq(0), {\n\t                messages: {\n\t                    actions: actionMessages\n\t                },\n\t                direction: "up",\n\t                animation: {\n\t                    open: {\n\t                        effects: "slideIn:up"\n\t                    }\n\t                },\n\t                navigatable: that.options.navigatable\n\t            });\n\n\t            this.headerDropDown = new kendo.gantt.TaskDropDown(this.toolbar.children(actionsSelector).eq(0), {\n\t                messages: {\n\t                    actions: actionMessages\n\t                },\n\t                navigatable: that.options.navigatable\n\t            });\n\n\t            this.footerDropDown.bind("command", handler);\n\t            this.headerDropDown.bind("command", handler);\n\t        },\n\n\t        _getListEditable: function() {\n\t            var editable = false,\n\t                options = this.options;\n\n\t            if(options.editable !== false) {\n\t                if(options.editable) {\n\t                    if(options.editable.update === false) {\n\t                        editable = false;\n\t                    } else if(options.editable.reorder !== false) {\n\t                        editable = {\n\t                            mode: "incell",\n\t                            move: {\n\t                                reorderable: true\n\t                            }\n\t                        };\n\t                    }\n\t                } else {\n\t                    editable = "incell";\n\t                }\n\t            }\n\n\t            return editable;\n\t        },\n\n\t        _getListOptions: function() {\n\t            var options = this.options,\n\t                editable = this._getListEditable(),\n\t                listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n\t                ganttListOptions = {\n\t                    columns: options.columns || [],\n\t                    dataSource: this.dataSource,\n\t                    selectable: options.selectable,\n\t                    reorderable: options.reorderable,\n\t                    editable: editable,\n\t                    resizable: options.resizable,\n\t                    filterable: options.filterable,\n\t                    columnMenu: options.columnMenu,\n\t                    columnResizeHandleWidth: this.options.columnResizeHandleWidth,\n\t                    listWidth: outerWidth(listWrapper),\n\t                    resourcesField: this.resources.field,\n\t                    rowHeight: this.options.rowHeight\n\t                };\n\n\t            return ganttListOptions;\n\t        },\n\n\t        _attachResourceEditor: function(columns) {\n\t            var column;\n\n\t            for (var i = 0; i < columns.length; i++) {\n\t                column = columns[i];\n\n\t                if (column.field === this.resources.field && typeof column.editor !== "function") {\n\t                    column.editor = proxy(this._createResourceEditor, this);\n\t                }\n\t            }\n\t        },\n\n\t        _attachListEvents: function() {\n\t            var that = this,\n\t                navigatable = that.options.navigatable,\n\t                toggleButtons = this.wrapper.find(DOT + ganttStyles.toolbar.toolbar + " " + DOT + ganttStyles.toolbar.appendButton),\n\t                restoreFocus = function() {\n\t                    var element;\n\n\t                    if (navigatable && that._cachedCurrent) {\n\t                        element = that.list.content.find("tr").eq(that._cachedCurrent.rowIndex).find("td").eq(that._cachedCurrent.columnIndex);\n\n\t                        that._current(element);\n\n\t                        focusTable(that.list.content.find("table"), true);\n\t                    }\n\n\t                    delete that._cachedCurrent;\n\t                };\n\n\t            that.list\n\t                .bind("render", function() {\n\t                    that._navigatable();\n\t                 }, true)\n\t                .bind("beforeEdit", function(e) {\n\t                    that._cachedCurrent = {\n\t                        rowIndex: e.container.closest("tr").index(),\n\t                        columnIndex: e.container.index()\n\t                    };\n\n\t                    if (that.trigger("edit", { task: e.model, container: e.container })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("cancel", function(e) {\n\t                    if (that.trigger("cancel", { task: e.model, container: e.cell })) {\n\t                        e.preventDefault();\n\t                        return;\n\t                    }\n\n\t                    that._preventItemChange = true;\n\t                    that.list.closeCell(true);\n\t                    restoreFocus();\n\t                })\n\t                .bind("save", function(e) {\n\t                    var updatedValues = e.values;\n\t                    that._preventRefresh = true;\n\n\t                    if(that.updateDuration === null || that.updateDuration === undefined) {\n\t                        that.updateDuration = e.model.duration();\n\t                    }\n\n\t                    if (updatedValues.hasOwnProperty("start")) {\n\t                        updatedValues.end = new Date(updatedValues.start.getTime() + that.updateDuration);\n\t                    }\n\n\t                    that.updatedValues = updatedValues;\n\t                })\n\t                .bind("itemChange", function(e) {\n\t                    var updateInfo = that.updatedValues;\n\t                    var task = e.data;\n\t                    var resourcesField = that.resources.field;\n\n\t                    if(that._preventItemChange) {\n\t                        that._preventItemChange = false;\n\t                        return;\n\t                    }\n\n\t                    if (!that.trigger("save", { task: task, values: updateInfo })) {\n\t                        if(updateInfo) {\n\t                            that._preventRefresh = true;\n\t                            that.dataSource.update(task, updateInfo);\n\n\t                            if (updateInfo[resourcesField]) {\n\t                                that._updateAssignments(task.get("id"), updateInfo[resourcesField]);\n\t                            }\n\t                        }\n\n\t                        that._preventRefresh = false;\n\t                        that._requestStart();\n\t                        that.dataSource.sync().then(function() {\n\t                            restoreFocus();\n\t                        });\n\t                    } else if(that.dataSource.hasChanges()) {\n\t                        that.dataSource.cancelChanges();\n\t                        that._preventRefresh = false;\n\t                        that.refresh();\n\t                    }\n\n\t                    that.updatedValues = null;\n\t                    that.updateDuration = null;\n\t                })\n\t                .bind("change", function() {\n\t                    that.trigger("change");\n\n\t                    var selection = that.list.select();\n\n\t                    if (selection.length) {\n\t                        toggleButtons.removeAttr("data-action", "add");\n\t                        that.timeline.select("[data-uid=\'" + selection.attr("data-uid") + "\']");\n\t                    } else {\n\t                        toggleButtons.attr("data-action", "add");\n\t                        that.timeline.clearSelection();\n\t                    }\n\t                })\n\t                .bind("columnResize", function(e) {\n\t                    that.trigger("columnResize", { column: e.column, oldWidth: e.oldWidth, newWidth: e.newWidth });\n\t                })\n\t                .bind("collapse", function(e) {\n\t                    e.preventDefault();\n\n\t                    var row = that.list.element.find("tr[data-uid=\'" + e.model.uid + "\']");\n\t                    e.model.set("expanded", false);\n\n\t                    that._cachedCurrent = {\n\t                        rowIndex: row.index(),\n\t                        columnIndex: row.find(".k-state-focused").index()\n\t                    };\n\n\t                    restoreFocus();\n\t                })\n\t                .bind("expand", function(e) {\n\t                    e.preventDefault();\n\n\t                    var row = that.list.element.find("tr[data-uid=\'" + e.model.uid + "\']");\n\t                    e.model.set("expanded", true);\n\n\t                    that._cachedCurrent = {\n\t                        rowIndex: row.index(),\n\t                        columnIndex: row.find(".k-state-focused").index()\n\t                    };\n\n\t                    restoreFocus();\n\t                })\n\t                .bind("dragend", function(e) {\n\t                    var dataSource = that.dataSource,\n\t                        task, updateInfo;\n\n\t                    if(e.position === "over") {\n\t                        updateInfo = {\n\t                            parentId: e.source.parentId\n\t                        };\n\t                        dataSource.cancelChanges();\n\t                        task = dataSource.get(e.source.id);\n\n\t                        if (!that.trigger("save", { task: task, values: updateInfo })) {\n\t                            dataSource.update(task, updateInfo);\n\t                        }\n\t                    }\n\n\t                    dataSource.sync();\n\t                })\n\t                .bind("dataBound", function() {\n\t                    if(that.dataSource.sort().length === 0) {\n\t                        that.dataSource.sort([{field: "orderId", dir: "asc"}]);\n\t                    }\n\t                })\n\t                .bind("reorder", function(e) {\n\t                    that._updateTask(e.task, e.updateInfo);\n\t                    restoreFocus();\n\t                });\n\t        },\n\n\t        _list: function() {\n\t            var ganttStyles = Gantt.styles,\n\t                listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n\t                listElement = listWrapper.find("> div"),\n\t                listOptions = this._getListOptions();\n\n\t            this._attachResourceEditor(listOptions.columns);\n\n\t            this.list = new kendo.ui.GanttList(listElement, listOptions);\n\n\t            this._attachListEvents();\n\t        },\n\n\t        _timeline: function() {\n\t            var that = this;\n\t            var ganttStyles = Gantt.styles;\n\t            var options = trimOptions(extend(true, { resourcesField: this.resources.field }, this.options));\n\t            var element = this.wrapper.find(DOT + ganttStyles.timeline + " > div");\n\n\t            this.timeline = new kendo.ui.GanttTimeline(element, options);\n\n\t            this.timeline\n\t                .bind("navigate", function(e) {\n\t                    var viewName = e.view.replace(/\\./g, "\\\\.").toLowerCase();\n\n\t                    that.toolbar\n\t                        .find(DOT + ganttStyles.toolbar.views + " > button")\n\t                        .removeClass(ganttStyles.selected)\n\t                        .end()\n\t                        .find(DOT + ganttStyles.toolbar.viewButton + "-" + viewName)\n\t                        .addClass(ganttStyles.selected);\n\n\t                    that.toolbar\n\t                        .find(DOT + ganttStyles.toolbar.viewsDropdown)\n\t                        .val(viewName);\n\n\t                    that.refresh();\n\t                })\n\t                .bind("moveStart", function(e) {\n\t                    var editable = that.list.editor;\n\n\t                    if (editable && !editable.end()) {\n\t                        e.preventDefault();\n\t                        return;\n\t                    }\n\n\t                    if (that.trigger("moveStart", { task: e.task })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("move", function(e) {\n\t                    var task = e.task;\n\t                    var start = e.start;\n\t                    var end = new Date(start.getTime() + task.duration());\n\n\t                    if (that.trigger("move", { task: task, start: start, end: end })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("moveEnd", function(e) {\n\t                    var task = e.task;\n\t                    var start = e.start;\n\t                    var end = new Date(start.getTime() + task.duration());\n\n\t                    if (!that.trigger("moveEnd", { task: task, start: start, end: end })) {\n\t                        that._updateTask(that.dataSource.getByUid(task.uid), {\n\t                            start: start,\n\t                            end: end\n\t                        });\n\t                    }\n\t                })\n\t                .bind("resizeStart", function(e) {\n\t                    var editable = that.list.editor;\n\n\t                    if (editable && !editable.end()) {\n\t                        e.preventDefault();\n\t                        return;\n\t                    }\n\n\t                    if (that.trigger("resizeStart", { task: e.task })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("resize", function(e) {\n\t                    if (that.trigger("resize", { task: e.task, start: e.start, end: e.end })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("resizeEnd", function(e) {\n\t                    var task = e.task;\n\t                    var updateInfo = {};\n\n\t                    if (e.resizeStart) {\n\t                        updateInfo.start = e.start;\n\t                    } else {\n\t                        updateInfo.end = e.end;\n\t                    }\n\n\t                    if (!that.trigger("resizeEnd", { task: task, start: e.start, end: e.end })) {\n\t                        that._updateTask(that.dataSource.getByUid(task.uid), updateInfo);\n\t                    }\n\t                })\n\t                .bind("percentResizeStart", function(e) {\n\t                    var editable = that.list.editor;\n\n\t                    if (editable && !editable.end()) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("percentResizeEnd", function(e) {\n\t                    that._updateTask(that.dataSource.getByUid(e.task.uid), { percentComplete: e.percentComplete });\n\t                })\n\t                .bind("dependencyDragStart", function(e) {\n\t                    var editable = that.list.editor;\n\n\t                    if (editable && !editable.end()) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("dependencyDragEnd", function(e) {\n\t                    var dependency = that.dependencies._createNewModel({\n\t                        type: e.type,\n\t                        predecessorId: e.predecessor.id,\n\t                        successorId: e.successor.id\n\t                    });\n\n\t                    that._createDependency(dependency);\n\t                })\n\t                .bind("select", function(e) {\n\t                    var editable = that.list.editor;\n\n\t                    if (editable) {\n\t                        editable.end();\n\t                    }\n\n\t                    that.select("[data-uid=\'" + e.uid + "\']");\n\t                })\n\t                .bind("editTask", function(e) {\n\t                    var editable = that.list.editor;\n\n\t                    if (editable && !editable.end()) {\n\t                        return;\n\t                    }\n\n\t                    that.editTask(e.uid);\n\t                })\n\t                .bind("clear", function() {\n\t                    that.clearSelection();\n\t                })\n\t                .bind("removeTask", function(e) {\n\t                    var editable = that.list.editor;\n\n\t                    if (editable && !editable.end()) {\n\t                        return;\n\t                    }\n\n\t                    that.removeTask(that.dataSource.getByUid(e.uid));\n\t                })\n\t                .bind("removeDependency", function(e) {\n\t                    var editable = that.list.editor;\n\n\t                    if (editable && !editable.end()) {\n\t                        return;\n\t                    }\n\n\t                    that.removeDependency(that.dependencies.getByUid(e.uid));\n\t                });\n\t        },\n\n\t        _dataSource: function() {\n\t            var options = this.options;\n\t            var dataSource = options.dataSource;\n\n\t            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n\t            if (this.dataSource && this._refreshHandler) {\n\t                this.dataSource\n\t                    .unbind("change", this._refreshHandler)\n\t                    .unbind("progress", this._progressHandler)\n\t                    .unbind("error", this._errorHandler);\n\t            } else {\n\t                this._refreshHandler = proxy(this.refresh, this);\n\t                this._progressHandler = proxy(this._requestStart, this);\n\t                this._errorHandler = proxy(this._error, this);\n\t            }\n\n\t            this.dataSource = kendo.data.GanttDataSource.create(dataSource)\n\t                .bind("change", this._refreshHandler)\n\t                .bind("progress", this._progressHandler)\n\t                .bind("error", this._errorHandler);\n\t        },\n\n\t        _dependencies: function() {\n\t            var dependencies = this.options.dependencies || {};\n\t            var dataSource = isArray(dependencies) ? { data: dependencies } : dependencies;\n\n\t            if (this.dependencies && this._dependencyRefreshHandler) {\n\t                this.dependencies\n\t                    .unbind("change", this._dependencyRefreshHandler)\n\t                    .unbind("error", this._dependencyErrorHandler);\n\t            } else {\n\t                this._dependencyRefreshHandler = proxy(this.refreshDependencies, this);\n\t                this._dependencyErrorHandler = proxy(this._error, this);\n\t            }\n\n\t            this.dependencies = kendo.data.GanttDependencyDataSource.create(dataSource)\n\t                .bind("change", this._dependencyRefreshHandler)\n\t                .bind("error", this._dependencyErrorHandler);\n\t        },\n\n\t        _resources: function() {\n\t            var resources = this.options.resources;\n\t            var dataSource = resources.dataSource || {};\n\n\t            this.resources = {\n\t                field: "resources",\n\t                dataTextField: "name",\n\t                dataColorField: "color",\n\t                dataFormatField: "format"\n\t            };\n\n\t            extend(this.resources, resources);\n\n\t            this.resources.dataSource = kendo.data.DataSource.create(dataSource);\n\t        },\n\n\t        _assignments: function() {\n\t            var assignments = this.options.assignments;\n\t            var dataSource = assignments.dataSource || { };\n\n\t            if (this.assignments) {\n\t                this.assignments.dataSource\n\t                    .unbind("change", this._assignmentsRefreshHandler);\n\t            } else {\n\t                this._assignmentsRefreshHandler = proxy(this.refresh, this);\n\t            }\n\n\t            this.assignments = {\n\t                dataTaskIdField: "taskId",\n\t                dataResourceIdField: "resourceId",\n\t                dataValueField: "value"\n\t            };\n\n\t            extend(this.assignments, assignments);\n\n\t            this.assignments.dataSource = kendo.data.DataSource.create(dataSource);\n\n\t            this.assignments.dataSource.\n\t                bind("change", this._assignmentsRefreshHandler);\n\t        },\n\n\t        _createEditor: function() {\n\t            var that = this;\n\n\t            var editor = this._editor = new kendo.gantt.PopupEditor(this.wrapper, extend({}, this.options, {\n\t                target: this,\n\t                resources: {\n\t                    field: this.resources.field,\n\t                    editor: proxy(this._createResourceEditor, this)\n\t                },\n\t                createButton: proxy(this._createPopupButton, this)\n\t            }));\n\n\t            editor\n\t                .bind("cancel", function(e) {\n\t                    var task = that.dataSource.getByUid(e.model.uid);\n\n\t                    if (that.trigger("cancel", { container: e.container, task: task })) {\n\t                        e.preventDefault();\n\t                        return;\n\t                    }\n\n\t                    that.cancelTask();\n\t                })\n\t                .bind("edit", function(e) {\n\t                    var task = that.dataSource.getByUid(e.model.uid);\n\n\t                    if (that.trigger("edit", { container: e.container, task: task })) {\n\t                        e.preventDefault();\n\t                    }\n\t                })\n\t                .bind("save", function(e) {\n\t                    var task = that.dataSource.getByUid(e.model.uid);\n\n\t                    that.saveTask(task, e.updateInfo);\n\t                })\n\t                .bind("remove", function(e) {\n\t                    that.removeTask(e.model.uid);\n\t                })\n\t                .bind("close", that._onDialogClose);\n\t        },\n\n\t        _onDialogClose: function() {},\n\n\t        _createResourceEditor: function(container, options) {\n\t            var that = this;\n\t            var model = options instanceof ObservableObject ? options : options.model;\n\t            var id = model.get("id");\n\t            var messages = this.options.messages;\n\t            var resourcesField = this.resources.field;\n\t            var unitsValidation = { step: 0.01 };\n\t            var assignmentsModel = this.assignments.dataSource.options.schema.model;\n\n\t            if (assignmentsModel && assignmentsModel.fields.Units && assignmentsModel.fields.Units.validation) {\n\t                extend(true, unitsValidation, assignmentsModel.fields.Units.validation);\n\t            }\n\n\t            var editor = this._resourceEditor = new kendo.gantt.ResourceEditor(container, {\n\t                resourcesField: resourcesField,\n\t                unitsValidation: unitsValidation,\n\t                data: this._wrapResourceData(id),\n\t                model: model,\n\t                messages: extend({}, messages.editor),\n\t                buttons: [\n\t                    { name: "update", text: messages.save, className: Gantt.styles.primary },\n\t                    { name: "cancel", text: messages.cancel }\n\t                ],\n\t                createButton: proxy(this._createPopupButton, this),\n\t                save: function(e) {\n\t                    that._updateAssignments(e.model.get("id"), e.model.get(resourcesField));\n\t                }\n\t            });\n\n\t            editor.open();\n\t        },\n\n\t        _createPopupButton: function(command) {\n\t            var commandName = command.name || command.text;\n\t            var options = {\n\t                className: Gantt.styles.popup.button + " k-gantt-" + (commandName || "").replace(/\\s/g, ""),\n\t                text: commandName,\n\t                attr: ""\n\t            };\n\n\t            if (!commandName && !(isPlainObject(command) && command.template))  {\n\t                throw new Error("Custom commands should have name specified");\n\t            }\n\n\t            if (isPlainObject(command)) {\n\t                if (command.className) {\n\t                    command.className += " " + options.className;\n\t                }\n\n\t                options = extend(true, options, command);\n\t            }\n\n\t            return kendo.template(COMMAND_BUTTON_TEMPLATE)(options);\n\t        },\n\n\t        view: function(type) {\n\t            return this.timeline.view(type);\n\t        },\n\n\t        range: function (range) {\n\t            var dataSource = this.dataSource;\n\t            var view = this.view();\n\t            var timeline = this.timeline;\n\n\t            if (range) {\n\t                view.options.range = {\n\t                    start: range.start,\n\t                    end: range.end\n\t                };\n\n\t                timeline._render(dataSource.taskTree());\n\t                timeline._renderDependencies(this.dependencies.view());\n\t            }\n\n\t            return {\n\t                start: view.start,\n\t                end: view.end\n\t            };\n\t        },\n\n\t        date: function (date) {\n\t            var view = this.view();\n\n\t            if (date) {\n\t                view.options.date = date;\n\t                view._scrollToDate(date);\n\t            }\n\n\t            return view.options.date;\n\t        },\n\n\t        dataItem: function(value) {\n\t            if (!value) {\n\t                return null;\n\t            }\n\n\t            var list = this.list;\n\t            var element = list.element.find(value);\n\n\t            return list._modelFromElement(element);\n\t        },\n\n\t        setDataSource: function(dataSource) {\n\t            this.options.dataSource = dataSource;\n\n\t            this._dataSource();\n\n\t            this.list.setDataSource(this.dataSource);\n\n\t            if (this.options.autoBind) {\n\t                dataSource.fetch();\n\t            }\n\t        },\n\n\t        setDependenciesDataSource: function(dependencies) {\n\t            this.options.dependencies = dependencies;\n\n\t            this._dependencies();\n\n\t            if (this.options.autoBind) {\n\t                dependencies.fetch();\n\t            }\n\t        },\n\n\t        items: function() {\n\t            return this.wrapper.children(".k-task");\n\t        },\n\n\t        _updateAssignments: function(id, resources) {\n\t            var dataSource = this.assignments.dataSource;\n\t            var taskId = this.assignments.dataTaskIdField;\n\t            var resourceId = this.assignments.dataResourceIdField;\n\t            var hasMatch = false;\n\t            var assignments = new Query(dataSource.view())\n\t                .filter({\n\t                    field: taskId,\n\t                    operator: "eq",\n\t                    value: id\n\t                }).toArray();\n\t            var assignment;\n\t            var resource;\n\t            var value;\n\n\t            while (assignments.length) {\n\t                assignment = assignments[0];\n\n\t                for (var i = 0, length = resources.length; i < length; i++) {\n\t                    resource = resources[i];\n\n\t                    if (assignment.get(resourceId) === resource.get("id")) {\n\t                        value = resources[i].get("value");\n\t                        this._updateAssignment(assignment, value);\n\t                        resources.splice(i, 1);\n\t                        hasMatch = true;\n\t                        break;\n\t                    }\n\t                }\n\n\t                if (!hasMatch) {\n\t                    this._removeAssignment(assignment);\n\t                }\n\n\t                hasMatch = false;\n\n\t                assignments.shift();\n\t            }\n\n\t            for (var j = 0, newLength = resources.length; j < newLength; j++) {\n\t                resource = resources[j];\n\t                this._createAssignment(resource, id);\n\t            }\n\n\t            dataSource.sync();\n\t        },\n\n\t        cancelTask: function() {\n\t            var editor = this._editor;\n\t            var container = editor.container;\n\n\t            if (container) {\n\t                editor.close();\n\t            }\n\t        },\n\n\t        editTask: function(uid) {\n\t            var task = typeof uid === "string" ? this.dataSource.getByUid(uid) : uid;\n\n\t            if (!task) {\n\t                return;\n\t            }\n\n\t            var taskCopy = this.dataSource._createNewModel(task.toJSON());\n\t            taskCopy.uid = task.uid;\n\n\t            this.cancelTask();\n\n\t            this._editTask(taskCopy);\n\t        },\n\n\t        _editTask: function(task) {\n\t            this._editor.editTask(task, this.options.editable.plannedTasks);\n\t        },\n\n\t        saveTask: function(task, updateInfo) {\n\t            var editor = this._editor;\n\t            var container = editor.container;\n\t            var editable = editor.editable;\n\n\t            if (container && editable && editable.end()) {\n\t                this._updateTask(task, updateInfo);\n\t            }\n\t        },\n\n\t        _updateTask: function(task, updateInfo) {\n\t            var that = this;\n\t            var resourcesField = that.resources.field;\n\n\t            if (!that.trigger("save", { task: task, values: updateInfo })) {\n\t                if(updateInfo) {\n\t                    that._preventRefresh = true;\n\n\t                    that.dataSource.update(task, updateInfo);\n\n\t                    if (updateInfo[resourcesField]) {\n\t                        that._updateAssignments(task.get("id"), updateInfo[resourcesField]);\n\t                    }\n\t                }\n\n\t                that._syncDataSource();\n\t            } else if(that.dataSource.hasChanges()) {\n\t                that.dataSource.cancelChanges();\n\t                that._preventRefresh = false;\n\t                that.refresh();\n\t            }\n\t        },\n\n\t        _updateAssignment: function(assignment, value) {\n\t            var resourceValueField = this.assignments.dataValueField;\n\n\t            assignment.set(resourceValueField, value);\n\t        },\n\n\t        removeTask: function(uid) {\n\t            var that = this;\n\t            var task = typeof uid === "string" ? this.dataSource.getByUid(uid) : uid;\n\n\t            if (!task) {\n\t                return;\n\t            }\n\n\t            this._taskConfirm(function(cancel) {\n\t                if (!cancel) {\n\t                    that._removeTask(task);\n\t                }\n\t            }, task);\n\t        },\n\n\t        _createTask: function(task, index) {\n\t            if (!this.trigger("add", {\n\t                task: task,\n\t                dependency: null\n\t            })) {\n\t                var dataSource = this.dataSource;\n\n\t                this._preventRefresh = true;\n\n\t                if (index === undefined) {\n\t                    dataSource.add(task);\n\t                } else {\n\t                    dataSource.insert(index, task);\n\t                }\n\n\t                this._scrollToUid = task.uid;\n\t                this._syncDataSource();\n\t            }\n\t        },\n\n\t        _createDependency: function(dependency) {\n\t            if (!this.trigger("add", {\n\t                task: null,\n\t                dependency: dependency\n\t            })) {\n\t                this._preventDependencyRefresh = true;\n\n\t                this.dependencies.add(dependency);\n\n\t                this._preventDependencyRefresh = false;\n\n\t                this.dependencies.sync();\n\t            }\n\t        },\n\n\t        _createAssignment: function(resource, id) {\n\t            var assignments = this.assignments;\n\t            var dataSource = assignments.dataSource;\n\t            var taskId = assignments.dataTaskIdField;\n\t            var resourceId = assignments.dataResourceIdField;\n\t            var resourceValue = assignments.dataValueField;\n\t            var assignment = dataSource._createNewModel();\n\n\t            assignment[taskId] = id;\n\t            assignment[resourceId] = resource.get("id");\n\t            assignment[resourceValue] = resource.get("value");\n\n\t            dataSource.add(assignment);\n\t        },\n\n\t        removeDependency: function(uid) {\n\t            var that = this;\n\t            var dependency = typeof uid === "string" ? this.dependencies.getByUid(uid) : uid;\n\n\t            if (!dependency) {\n\t                return;\n\t            }\n\n\t            this._dependencyConfirm(function(cancel) {\n\t                if (!cancel) {\n\t                    that._removeDependency(dependency);\n\t                }\n\t            }, dependency);\n\t        },\n\n\t        _removeTaskDependencies: function(task, dependencies) {\n\t            this._preventDependencyRefresh = true;\n\n\t            for (var i = 0, length = dependencies.length; i < length; i++) {\n\t                this.dependencies.remove(dependencies[i]);\n\t            }\n\n\t            this._preventDependencyRefresh = false;\n\n\t            this.dependencies.sync();\n\t        },\n\n\t        _removeTaskAssignments: function(task) {\n\t            var dataSource = this.assignments.dataSource;\n\t            var assignments = dataSource.view();\n\t            var filter = {\n\t                field: this.assignments.dataTaskIdField,\n\t                operator: "eq",\n\t                value: task.get("id")\n\t            };\n\n\t            assignments = new Query(assignments).filter(filter).toArray();\n\n\t            this._preventRefresh = true;\n\n\t            for (var i = 0, length = assignments.length; i < length; i++) {\n\t                dataSource.remove(assignments[i]);\n\t            }\n\n\t            this._preventRefresh = false;\n\n\t            dataSource.sync();\n\t        },\n\n\t        _removeTask: function(task) {\n\t            var dependencies = this.dependencies.dependencies(task.id);\n\n\t            if (!this.trigger("remove", {\n\t                task: task,\n\t                dependencies: dependencies\n\t            })) {\n\t                this._removeTaskDependencies(task, dependencies);\n\t                this._removeTaskAssignments(task);\n\n\t                this._preventRefresh = true;\n\n\t                if (this.dataSource.remove(task)) {\n\t                    this._syncDataSource();\n\t                }\n\n\t                this._preventRefresh = false;\n\t            }\n\t        },\n\n\t        _removeDependency: function(dependency) {\n\t            if (!this.trigger("remove", {\n\t                task: null,\n\t                dependencies: [dependency]\n\t            })) {\n\t                if (this.dependencies.remove(dependency)) {\n\t                    this.dependencies.sync();\n\t                }\n\t            }\n\t        },\n\n\t        _removeAssignment: function(assignment) {\n\t            this.assignments.dataSource.remove(assignment);\n\t        },\n\n\t        _taskConfirm: function(callback, task) {\n\t            var messages = this.options.messages;\n\n\t            this._confirm(callback, {\n\t                model: task,\n\t                text: messages.deleteTaskConfirmation,\n\t                title: messages.deleteTaskWindowTitle\n\t            });\n\t        },\n\n\t        _dependencyConfirm: function(callback, dependency) {\n\t            var messages = this.options.messages;\n\n\t            this._confirm(callback, {\n\t                model: dependency,\n\t                text: messages.deleteDependencyConfirmation,\n\t                title: messages.deleteDependencyWindowTitle\n\t            });\n\t        },\n\n\t        _confirm: function(callback, options) {\n\t            var editable = this.options.editable;\n\t            var messages;\n\t            var buttons;\n\n\t            if (editable === true || editable.confirmation !== false) {\n\t                messages = this.options.messages;\n\t                buttons = [\n\t                    { name: "delete", text: messages.destroy, className: Gantt.styles.primary, click: function() { callback(); } },\n\t                    { name: "cancel", text: messages.cancel, click: function() { callback(true); } }\n\t                ];\n\n\t                this.showDialog(extend(true, {}, options, { buttons: buttons }));\n\t            } else {\n\t                callback();\n\t            }\n\t        },\n\n\t        showDialog: function(options) {\n\t            this._editor.showDialog(options);\n\t        },\n\n\t        refresh: function() {\n\t            if (this._preventRefresh || !this.list || this.list.editor) {\n\t                return;\n\t            }\n\n\t            this._progress(false);\n\n\t            var dataSource = this.dataSource;\n\t            var taskTree = dataSource.taskTree();\n\t            var scrollToUid = this._scrollToUid;\n\t            var current;\n\t            var cachedUid;\n\t            var cachedIndex = -1;\n\n\t            if (this.current) {\n\t                cachedUid = this.current.closest("tr").attr(kendo.attr("uid"));\n\t                cachedIndex = this.current.index();\n\t            }\n\n\t            if (this.trigger("dataBinding")) {\n\t                return;\n\t            }\n\n\t            if (this.resources.dataSource.data().length !== 0) {\n\t                this._assignResources(taskTree);\n\t            }\n\n\t            if (this._editor) {\n\t                this._editor.close();\n\t            }\n\n\t            this.clearSelection();\n\t            this.list._renderTree(taskTree);\n\t            this.timeline._render(taskTree);\n\t            this.timeline._renderDependencies(this.dependencies.view());\n\n\t            if (scrollToUid) {\n\t                this._scrollTo(scrollToUid);\n\t                this.select(selector(scrollToUid));\n\t            }\n\n\t            if ((scrollToUid || cachedUid) && cachedIndex >= 0) {\n\t                current = this.list.element\n\t                    .find("tr" + selector((scrollToUid || cachedUid)) + " > td:eq(" + cachedIndex + ")");\n\n\t                this._current(current);\n\t            }\n\n\t            this._scrollToUid = null;\n\n\t            this.trigger("dataBound");\n\t        },\n\n\t        refreshDependencies: function() {\n\t            if (this._preventDependencyRefresh) {\n\t                return;\n\t            }\n\n\t            if (this.trigger("dataBinding")) {\n\t                return;\n\t            }\n\n\t            this.timeline._renderDependencies(this.dependencies.view());\n\n\t            this.trigger("dataBound");\n\t        },\n\n\t        _assignResources: function(taskTree) {\n\t            var resources = this.resources;\n\t            var assignments = this.assignments;\n\t            var groupAssigments = function() {\n\t                var data = assignments.dataSource.view();\n\t                var group = {\n\t                    field: assignments.dataTaskIdField\n\t                };\n\n\t                data = new Query(data).group(group).toArray();\n\n\t                return data;\n\t            };\n\t            var assigments = groupAssigments();\n\t            var applyTaskResource = function(task, action) {\n\t                var taskId = task.get("id");\n\n\t                kendo.setter(resources.field)(task, new ObservableArray([]));\n\n\t                for (var i = 0, length = assigments.length; i < length; i++) {\n\t                    if (assigments[i].value === taskId) {\n\t                        action(task, assigments[i].items);\n\t                    }\n\t                }\n\t            };\n\t            var wrapTask = function(task, items) {\n\t                for (var j = 0, length = items.length; j < length; j++) {\n\t                    var item = items[j];\n\t                    var resource = resources.dataSource.get(item.get(assignments.dataResourceIdField));\n\t                    var resourceValue = item.get(assignments.dataValueField);\n\t                    var resourcedId = item.get(assignments.dataResourceIdField);\n\t                    var valueFormat = resource.get(resources.dataFormatField) || PERCENTAGE_FORMAT;\n\t                    var formatedValue = kendo.toString(resourceValue, valueFormat);\n\n\t                    task[resources.field].push(new ObservableObject({\n\t                        id: resourcedId,\n\t                        name: resource.get(resources.dataTextField),\n\t                        color: resource.get(resources.dataColorField),\n\t                        value: resourceValue,\n\t                        formatedValue: formatedValue\n\t                    }));\n\t                }\n\t            };\n\n\t            for (var i = 0, length = taskTree.length; i < length; i++) {\n\t                applyTaskResource(taskTree[i], wrapTask);\n\t            }\n\t        },\n\n\t        _wrapResourceData: function(id) {\n\t            var that = this;\n\t            var result = [];\n\t            var resource;\n\t            var resources = this.resources.dataSource.view();\n\t            var assignments = this.assignments.dataSource.view();\n\t            var taskAssignments = new Query(assignments).filter({\n\t                field: that.assignments.dataTaskIdField,\n\t                operator: "eq",\n\t                value: id\n\t            }).toArray();\n\t            var valuePerResource = function(id) {\n\t                var resourceValue = null;\n\n\t                new Query(taskAssignments).filter({\n\t                    field: that.assignments.dataResourceIdField,\n\t                    operator: "eq",\n\t                    value: id\n\t                }).select(function(assignment) {\n\t                    resourceValue += assignment.get(that.assignments.dataValueField);\n\t                });\n\n\t                return resourceValue;\n\t            };\n\n\t            for (var i = 0, length = resources.length; i < length; i++) {\n\t                resource = resources[i];\n\t                result.push({\n\t                    id: resource.get("id"),\n\t                    name: resource.get(that.resources.dataTextField),\n\t                    format: resource.get(that.resources.dataFormatField) || PERCENTAGE_FORMAT,\n\t                    value: valuePerResource(resource.id)\n\t                });\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _syncDataSource: function() {\n\t            this._preventRefresh = false;\n\t            this._requestStart();\n\t            this.dataSource.sync();\n\t        },\n\n\t        _requestStart: function() {\n\t            this._progress(true);\n\t        },\n\n\t        _error: function() {\n\t            this._progress(false);\n\t        },\n\n\t        _progress: function(toggle) {\n\t            kendo.ui.progress(this.element, toggle);\n\t        },\n\n\t        _resizable: function() {\n\t            var that = this;\n\t            var wrapper = this.wrapper;\n\t            var ganttStyles = Gantt.styles;\n\t            var contentSelector = DOT + ganttStyles.gridContent;\n\t            var treeListWrapper = wrapper.find(DOT + ganttStyles.list);\n\t            var timelineWrapper = wrapper.find(DOT + ganttStyles.timeline);\n\t            var treeListWidth;\n\t            var timelineWidth;\n\t            var timelineScroll;\n\n\t            this._resizeDraggable = wrapper\n\t                .find(DOT + ganttStyles.splitBar)\n\t                .height(treeListWrapper.height())\n\t                .hover(function () {\n\t                    $(this).addClass(ganttStyles.splitBarHover);\n\t                }, function () {\n\t                    $(this).removeClass(ganttStyles.splitBarHover);\n\t                })\n\t                .end()\n\t                .kendoResizable({\n\t                    orientation: "horizontal",\n\t                    handle: DOT + ganttStyles.splitBar,\n\t                    "start": function () {\n\t                        treeListWidth = treeListWrapper.width();\n\t                        timelineWidth = timelineWrapper.width();\n\t                        timelineScroll = kendo.scrollLeft(timelineWrapper.find(contentSelector));\n\t                    },\n\t                    "resize": function(e) {\n\t                        var delta = e.x.initialDelta;\n\n\t                        if (kendo.support.isRtl(wrapper)) {\n\t                            delta *= -1;\n\t                        }\n\n\t                        if (treeListWidth + delta < 0 || timelineWidth - delta < 0) {\n\t                            return;\n\t                        }\n\n\t                        treeListWrapper.width(treeListWidth + delta);\n\t                        timelineWrapper.width(timelineWidth - delta);\n\t                        kendo.scrollLeft(timelineWrapper.find(contentSelector), (timelineScroll + delta));\n\n\t                        that.timeline.view()._renderCurrentTime();\n\t                    }\n\t                }).data("kendoResizable");\n\t        },\n\n\t        _scrollable: function() {\n\t            var that = this;\n\t            var ganttStyles = Gantt.styles;\n\t            var contentSelector = DOT + ganttStyles.gridContent;\n\t            var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n\t            var timelineHeader = this.timeline.element.find(headerSelector);\n\t            var timelineContent = this.timeline.element.find(contentSelector);\n\t            var treeListHeader = this.list.element.find(headerSelector);\n\t            var treeListContent = this.list.element.find(contentSelector);\n\n\t            if (mobileOS) {\n\t                treeListContent.css("overflow-y", "auto");\n\t            }\n\n\t            timelineContent.on("scroll", function() {\n\t                that.scrollTop = this.scrollTop;\n\t                kendo.scrollLeft(timelineHeader, this.scrollLeft);\n\t                treeListContent.scrollTop(this.scrollTop);\n\t            });\n\n\t            treeListContent\n\t                .on("scroll", function() {\n\t                    kendo.scrollLeft(treeListHeader, this.scrollLeft);\n\t                })\n\t                .on("DOMMouseScroll" + NS + " mousewheel" + NS, function(e) {\n\t                    var scrollTop = timelineContent.scrollTop();\n\t                    var delta = kendo.wheelDeltaY(e);\n\n\t                    if (delta) {\n\t                        e.preventDefault();\n\t                        //In Firefox DOMMouseScroll event cannot be canceled\n\t                        $(e.currentTarget).one("wheel" + NS, false);\n\n\t                        timelineContent.scrollTop(scrollTop + (-delta));\n\t                    }\n\t                });\n\t        },\n\n\t        _navigatable: function() {\n\t            var that = this;\n\t            var navigatable = this.options.navigatable;\n\t            var editable = this.options.editable;\n\t            var ganttStyles = Gantt.styles;\n\t            var contentSelector = DOT + ganttStyles.gridContent;\n\t            var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n\t            var headerTable = this.list.element.find(headerSelector).find("table");\n\t            var contentTable = this.list.element.find(contentSelector).find("table");\n\t            var isRtl = kendo.support.isRtl(this.wrapper);\n\t            var timelineContent = this.timeline.element.find(DOT + ganttStyles.gridContent);\n\t            var tables = headerTable.add(contentTable);\n\t            var attr = selector();\n\t            var cellIndex;\n\t            var expandState = {\n\t                collapse: false,\n\t                expand: true\n\t            };\n\n\t            var scroll = function(reverse) {\n\t                var width = that.timeline.view()._timeSlots()[0].offsetWidth;\n\t                kendo.scrollLeft(timelineContent, kendo.scrollLeft(timelineContent) + (reverse ? -width : width));\n\t            };\n\n\t            var scrollVertical = function(reverse) {\n\t                var height = that.timeline.view()._rowHeight;\n\t                timelineContent.scrollTop(timelineContent.scrollTop() + (reverse ? -height : height));\n\t            };\n\n\t            var moveVertical = function(method) {\n\t                var parent = that.current.parent("tr" + selector());\n\t                var index = that.current.index();\n\t                var sibling = parent[method](\'tr:visible\').first();\n\n\t                if (that.select().length !== 0) {\n\t                    that.clearSelection();\n\t                }\n\n\t                if (sibling.length !== 0) {\n\t                    that._current(sibling.children("td:eq(" + index + ")"));\n\t                    that._scrollTo(that.current);\n\t                } else {\n\t                    if (that.current.is("td") && method == "prevAll") {\n\t                        focusTable(headerTable);\n\t                    } else if (that.current.is("th") && method == "nextAll") {\n\t                        focusTable(contentTable);\n\t                    }\n\t                }\n\t            };\n\t            var moveHorizontal = function(method) {\n\t                var subling = that.current[method]();\n\n\t                if (subling.length !== 0) {\n\t                    that._current(subling);\n\t                    cellIndex = that.current.index();\n\t                }\n\t            };\n\t            var toggleExpandedState = function(value) {\n\t                var model = that.dataItem(that.current);\n\n\t                if (model.summary && model.expanded !== value) {\n\t                    model.set("expanded", value);\n\t                }\n\t            };\n\t            var deleteAction = function() {\n\t                var editable = that.options.editable;\n\n\t                if (!editable || editable.destroy === false || that.list.editor) {\n\t                    return;\n\t                }\n\n\t                var selectedTask = that.select();\n\t                var uid = kendo.attr("uid");\n\n\t                if (selectedTask.length) {\n\t                    that.removeTask(selectedTask.attr(uid));\n\t                }\n\t            };\n\n\t            $(this.wrapper)\n\t                .on("mousedown" + NS, "tr" + attr + ", div" + attr + ":not(" + DOT + ganttStyles.line + ")", function(e) {\n\t                    var currentTarget = $(e.currentTarget);\n\t                    var isInput = $(e.target).is(":button,a,:input,a>.k-icon,textarea,span.k-icon:not(.k-i-none),span.k-link,.k-input,.k-multiselect-wrap");\n\t                    var current;\n\n\t                    if (e.ctrlKey) {\n\t                        return;\n\t                    }\n\n\t                    if (navigatable) {\n\t                        if (currentTarget.is("tr")) {\n\t                            current = $(e.target).closest("td");\n\t                        } else {\n\t                            current = that.list\n\t                                .content.find("tr" + selector(currentTarget.attr(kendo.attr("uid"))) + " > td:first");\n\t                        }\n\n\t                        that._current(current);\n\t                    }\n\n\t                    if ((navigatable || editable) && !isInput) {\n\t                        that._focusTimeout = setTimeout(function() {\n\t                            focusTable(that.list.content.find("table"), true);\n\t                        }, 2);\n\t                    }\n\t                })\n\n\t                .on("keydown" + NS, function (e) {\n\t                    var key = e.keyCode;\n\t                    var that = this;\n\t                    var focusableItems = $(that._getToolbarItems());\n\t                    var idx = focusableItems.index(that.toolbar.find(DOT + ganttStyles.focused)[0]);\n\t                    if (idx === -1 && $(e.target).closest(DOT + ganttStyles.toolbar.views).length) {\n\t                        idx = focusableItems.index(that.toolbar.find(".k-gantt-views > .k-state-selected:visible, .k-views-dropdown:visible")[0]);\n\t                    }\n\t                    var itemToFocus = e.shiftKey ? focusableItems[idx -  1] : focusableItems[idx +  1];\n\n\t                    if (key === keys.F10) {\n\t                        that.toolbar.find(".k-button:visible:first").addClass(ganttStyles.focused).focus();\n\t                        e.preventDefault();\n\t                    } else if (key == keys.TAB && $(e.target).closest(DOT + ganttStyles.toolbar.toolbar).length) {\n\t                        that.toolbar.find(DOT + ganttStyles.focused).removeClass(ganttStyles.focused).blur();\n\t                        if (itemToFocus) {\n\t                            $(itemToFocus).addClass(ganttStyles.focused).focus();\n\t                            e.preventDefault();\n\t                            return;\n\t                        }\n\t                        if (this.list.element.is(":visible")) {\n\t                            this.list.element.find("table[role=treegrid]").focus();\n\t                        } else {\n\t                            this.element.find(DOT + ganttStyles.tasks)[0].focus();\n\t                        }\n\t                        e.preventDefault();\n\t                    }\n\n\t                }.bind(this));\n\n\t            if (navigatable !== true) {\n\t                contentTable\n\t                    .on("keydown" + NS, function(e) {\n\t                        if (e.keyCode == keys.DELETE) {\n\t                            deleteAction();\n\t                        }\n\t                    });\n\n\t                return;\n\t            }\n\n\t            tables\n\t                .on("focus" + NS, function() {\n\t                    var selector = this === contentTable.get(0) ? "td" : "th";\n\t                    var selection = that.select();\n\t                    var current = that.current || $((selection.length ? selection : this))\n\t                        .find(selector + ":eq(" + (cellIndex || 0) + ")");\n\n\t                    that._current(current);\n\t                    $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n\t                })\n\t                .on("blur" + NS, function() {\n\t                    that._current();\n\n\t                    if (this == headerTable) {\n\t                        $(this).attr(TABINDEX, -1);\n\t                    }\n\t                })\n\t                .on("keydown" + NS, function(e) {\n\t                    var key = e.keyCode;\n\t                    var isCell;\n\n\t                    if (!that.current) {\n\t                        return;\n\t                    }\n\n\t                    isCell = that.current.is("td");\n\n\t                    switch (key) {\n\t                        case keys.RIGHT:\n\t                            e.preventDefault();\n\t                            if (e.altKey) {\n\t                                scroll();\n\t                            } else if (e.ctrlKey) {\n\t                                toggleExpandedState(isRtl ? expandState.collapse : expandState.expand);\n\t                            } else {\n\t                                moveHorizontal(isRtl ? "prev" : "next");\n\t                            }\n\t                            break;\n\t                        case keys.LEFT:\n\t                            e.preventDefault();\n\t                            if (e.altKey) {\n\t                                scroll(true);\n\t                            } else if (e.ctrlKey) {\n\t                                toggleExpandedState(isRtl ? expandState.expand : expandState.collapse);\n\t                            } else {\n\t                                moveHorizontal(isRtl ? "next" : "prev");\n\t                            }\n\t                            break;\n\t                        case keys.UP:\n\t                            e.preventDefault();\n\t                            if (e.altKey) {\n\t                                scrollVertical(true);\n\t                            } else {\n\t                                moveVertical("prevAll");\n\t                            }\n\t                            break;\n\t                        case keys.DOWN:\n\t                            e.preventDefault();\n\t                            if (e.altKey) {\n\t                                scrollVertical();\n\t                            } else {\n\t                                moveVertical("nextAll");\n\t                            }\n\t                            break;\n\t                        case keys.SPACEBAR:\n\t                            e.preventDefault();\n\t                            if (isCell) {\n\t                                that.select(that.current.closest("tr"));\n\t                            }\n\t                            break;\n\t                        case keys.ENTER:\n\t                            e.preventDefault();\n\t                            if (isCell) {\n\t                                if (that.options.editable && that.options.editable.update !== false) {\n\t                                    that.list._startEditHandler(that.current);\n\t                                    $(this).one("keyup", function(e) {\n\t                                        /* Stop the event propagation so that the list widget won\'t close its editor immediately */\n\t                                        e.stopPropagation();\n\t                                    });\n\t                                }\n\t                            } else {\n\t                                /* Sort */\n\t                                that.current\n\t                                    .children("a.k-link")\n\t                                    .click();\n\t                            }\n\t                            break;\n\t                        case keys.DELETE:\n\t                            if (isCell) {\n\t                                deleteAction();\n\t                            }\n\t                            break;\n\t                        default:\n\t                            if (key >= 49 && key <= 57 && e.target.tagName.toLowerCase() !== "input") {\n\t                               that.view(that.timeline._viewByIndex(key - 49));\n\t                            }\n\t                            break;\n\t                    }\n\t                });\n\t        },\n\n\t        _getToolbarItems: function () {\n\t            return this.toolbar.find("> .k-button:visible").toArray().concat(\n\t                this.toolbar.find(".k-views-dropdown:visible").toArray(),\n\t                this.toolbar.find(".k-gantt-views > .k-state-selected:visible").toArray()\n\t            );\n\t        },\n\n\t        _current: function(element) {\n\t            var ganttStyles = Gantt.styles;\n\t            var activeElement;\n\n\t            if (this.current && this.current.length) {\n\t                this.current\n\t                    .removeClass(ganttStyles.focused)\n\t                    .removeAttr("id");\n\t            }\n\n\t            if (element && element.length) {\n\t                this.current = element\n\t                    .addClass(ganttStyles.focused)\n\t                    .attr("id", ACTIVE_CELL);\n\n\t                activeElement = $(kendo._activeElement());\n\n\t                if (activeElement.is("table") && this.wrapper.find(activeElement).length > 0) {\n\t                    activeElement\n\t                        .removeAttr(ARIA_DESCENDANT)\n\t                        .attr(ARIA_DESCENDANT, ACTIVE_CELL);\n\t                }\n\t            } else {\n\t                this.current = null;\n\t            }\n\t        },\n\n\t        _dataBind: function() {\n\t            var that = this;\n\n\t            if (that.options.autoBind) {\n\t                this._preventRefresh = true;\n\t                this._preventDependencyRefresh = true;\n\n\t                var promises = $.map([\n\t                    this.dataSource,\n\t                    this.dependencies,\n\t                    this.resources.dataSource,\n\t                    this.assignments.dataSource\n\t                ],\n\t                function(dataSource) {\n\t                    return dataSource.fetch();\n\t                });\n\n\t                $.when.apply(null, promises)\n\t                    .done(function() {\n\t                        that._preventRefresh = false;\n\t                        that._preventDependencyRefresh = false;\n\t                        that.refresh();\n\t                    });\n\t            }\n\t        },\n\n\t        _resize: function() {\n\t            this._adjustDimensions();\n\t            this.timeline.view()._adjustHeight();\n\t            this.timeline.view()._renderCurrentTime();\n\t            this.list._adjustHeight();\n\t        },\n\n\t        _createPlannedTasksSwitch: function() {\n\t            var that = this;\n\t            var switchLabel = that.options.messages.plannedTasks.switchText;\n\t            var toggeSwitchWrap = $("<span class=\'k-gantt-planned-wrap\'><label>" + switchLabel + "</label></span>");\n\t            var plannedToggle = new kendo.ui.Switch($("<input id=\'planned-switch\' class=\'k-gantt-planned-switch\'>"), {\n\t                checked: that.options.showPlannedTasks,\n\t                change: proxy(that._togglePlannedTasks, that),\n\t                messages: {\n\t                    checked: "",\n\t                    unchecked: ""\n\t                }\n\t            });\n\n\t            toggeSwitchWrap.append(plannedToggle.wrapper);\n\n\t            that.toggeSwitchWrap = toggeSwitchWrap;\n\t            that.toggleSwitch = plannedToggle;\n\t        },\n\n\t        _togglePlannedTasks: function(e) {\n\t            var timeline = this.timeline;\n\n\t            if (!this.trigger("togglePlannedTasks", { showPlannedTasks: !timeline.options.showPlannedTasks })) {\n\t                this.wrapper.toggleClass(ganttStyles.plannedTasks);\n\t                timeline._setPlanned(!timeline.options.showPlannedTasks);\n\t                timeline._render(this.dataSource.taskTree());\n\t                timeline._renderDependencies(this.dependencies.view());\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t        }\n\t    });\n\n\t    if (kendo.PDFMixin) {\n\t        kendo.PDFMixin.extend(Gantt.fn);\n\n\t        Gantt.fn._drawPDF = function() {\n\t            var ganttStyles = Gantt.styles;\n\t            var listTableWidth = this.wrapper.find(DOT + ganttStyles.list + " " + DOT + ganttStyles.gridContent + ">table").width();\n\t            var content = this.wrapper.clone();\n\n\t            content.find(DOT + ganttStyles.list).css("width", listTableWidth);\n\n\t            return this._drawPDFShadow({\n\t                content: content\n\t            }, {\n\t                avoidLinks: this.options.pdf.avoidLinks\n\t            });\n\t        };\n\t    }\n\n\t    kendo.ui.plugin(Gantt);\n\n\t    extend(true, Gantt, { styles: ganttStyles });\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ }),\n\n/***/ 1252:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.switch */ "./node_modules/@progress/kendo-ui/js/kendo.switch.js");\n\n/***/ }),\n\n/***/ 1253:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.gantt.data */ "./node_modules/@progress/kendo-ui/js/kendo.gantt.data.js");\n\n/***/ }),\n\n/***/ 1254:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.gantt.editors */ "./node_modules/@progress/kendo-ui/js/kendo.gantt.editors.js");\n\n/***/ }),\n\n/***/ 1255:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.gantt.list */ "./node_modules/@progress/kendo-ui/js/kendo.gantt.list.js");\n\n/***/ }),\n\n/***/ 1256:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.gantt.timeline */ "./node_modules/@progress/kendo-ui/js/kendo.gantt.timeline.js");\n\n/***/ }),\n\n/***/ 1257:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.pdf */ "./node_modules/@progress/kendo-ui/js/kendo.pdf.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.gantt.js?')}}]);