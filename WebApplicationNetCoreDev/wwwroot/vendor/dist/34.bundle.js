(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{"./node_modules/@progress/kendo-ui/js/kendo.filter.js":
/*!************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.filter.js ***!
  \************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1210);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1210:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018), __webpack_require__(1211)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "filter",\n\t    name: "Filter",\n\t    category: "web",\n\t    depends: [ "core", "buttongroup"]\n\t};\n\n\tvar editors = {\n\t    "number": "<input type=\'text\' title=\'#=field#\' data-#=ns#role=\'numerictextbox\' data-#=ns#bind=\'value: value\'/>",\n\t    "string": "<input type=\'text\' title=\'#=field#\' class=\'k-textbox\' data-#=ns#bind=\'value: value\'/>",\n\t    "boolean": "<input class=\'k-checkbox\' data-role=\'checkbox\' data-#=ns#bind=\'checked: value\' type=\'checkbox\'>",\n\t    "date": "<input type=\'text\' title=\'#=field#\' data-#=ns#role=\'datepicker\' data-#=ns#bind=\'value: value\'/>"\n\t};\n\n\tvar operatorsTemplate =\n\t    "<select data-#=ns#bind=\'value: operator\' title=\'#=operatorsLabel#\' data-#=ns#role=\'dropdownlist\'>" +\n\t        "#for(var op in operators){#"+\n\t            "<option value=\'#=op#\'>#=operators[op].text || operators[op]#</option>" +\n\t        "#}#" +\n\t    "</select>";\n\n\tvar logicTemplate =\n\t    "<div data-#=ns#bind=\'value: logic\' data-#=ns#role=\'filterbuttongroup\'>" +\n\t        "#for(var op in operators){#"+\n\t            "<span value=\'#=op#\'>#=operators[op]#</span>" +\n\t        "#}#" +\n\t    "</div>";\n\n\tvar mainContainer =\n\t    "<ul class=\'k-filter-container\'>" +\n\t        "<li class=\'k-filter-group-main\'></li>" +\n\t    "</ul>";\n\n\tvar mainLogicTemplate =\n\t    "<div class=\'k-filter-toolbar\'>" +\n\t        "<div class=\'k-toolbar\' id=\'#=uid#\'>" +\n\t            "<div class=\'k-filter-toolbar-item\'>" +\n\t                logicTemplate +\n\t            "</div>" +\n\t            "<div class=\'k-filter-toolbar-item\'>" +\n\t                "<button data-role=\'button\' class=\'k-button k-button-icon\' role=\'button\' aria-disabled=\'false\' title=\'#=addExpression#\' aria-label=\'#=addExpression#\' tabindex=\'0\'>" +\n\t                    "<span class=\'k-icon k-i-filter-add-expression\'>" +\n\t                    "</span>" +\n\t                "</button>" +\n\t            "</div>" +\n\t            "<div class=\'k-filter-toolbar-item\'>" +\n\t                "<button data-role=\'button\' class=\'k-button k-button-icon\' role=\'button\' aria-disabled=\'false\' title=\'#=addGroup#\' aria-label=\'#=addGroup#\' tabindex=\'0\'>" +\n\t                    "<span class=\'k-icon k-i-filter-add-group\'>" +\n\t                    "</span>" +\n\t                "</button>" +\n\t            "</div>" +\n\t            "<div class=\'k-filter-toolbar-item\'>" +\n\t                "<button data-role=\'button\' class=\'k-button-flat k-button k-button-icon\' role=\'button\' title=\'#=close#\' aria-label=\'#=close#\' aria-disabled=\'false\' tabindex=\'0\'>" +\n\t                    "<span class=\'k-icon k-i-close\'>" +\n\t                    "</span>" +\n\t                "</button>" +\n\t            "</div>" +\n\t        "</div>" +\n\t    "</div>" ;\n\n\tvar logicItemTemplate =\n\t"<li class=\'k-filter-item\'>" +\n\t    "<div class=\'k-filter-toolbar\'>" +\n\t        "<div class=\'k-toolbar\'>" +\n\t            "<div class=\'k-filter-toolbar-item\'>" +\n\t                logicTemplate +\n\t            "</div>" +\n\t            "<div class=\'k-filter-toolbar-item\'>" +\n\t                "<button data-role=\'button\' class=\'k-button k-button-icon\' role=\'button\' title=\'#=addExpression#\' aria-label=\'#=addExpression#\' aria-disabled=\'false\' tabindex=\'0\'>" +\n\t                    "<span class=\'k-icon k-i-filter-add-expression\'>" +\n\t                    "</span>" +\n\t                "</button>" +\n\t            "</div>" +\n\t            "<div class=\'k-filter-toolbar-item\'>" +\n\t                "<button data-role=\'button\' class=\'k-button k-button-icon\' role=\'button\' title=\'#=addGroup#\' aria-label=\'#=addGroup#\' aria-disabled=\'false\' tabindex=\'0\'>" +\n\t                    "<span class=\'k-icon k-i-filter-add-group\'>" +\n\t                    "</span>" +\n\t                "</button>" +\n\t            "</div>" +\n\t            "<div class=\'k-filter-toolbar-item\'>" +\n\t                "<button data-role=\'button\' class=\'k-button-flat k-button k-button-icon\' role=\'button\' title=\'#=close#\' aria-label=\'#=close#\' aria-disabled=\'false\' tabindex=\'0\'>" +\n\t                    "<span class=\'k-icon k-i-close\'>" +\n\t                    "</span>" +\n\t                "</button>" +\n\t            "</div>" +\n\t        "</div>" +\n\t    "</div>" +\n\t"</li>";\n\n\tvar expressionItemTemplate =\n\t"<li class=\'k-filter-item\'>" +\n\t    "<div class=\'k-filter-toolbar\'>" +\n\t       "<div class=\'k-toolbar\' id=\'#=uid#\'>" +\n\t         "<div class=\'k-filter-toolbar-item k-filter-field\'>" +\n\t            "<select data-#=ns#bind=\'value: field\' title=\'#=fieldsLabel#\' class=\'k-filter-dropdown\' data-auto-width=\'true\' data-#=ns#role=\'dropdownlist\'>" +\n\t                "#for(var current in fields){#" +\n\t                    "<option value=\'#=fields[current].name#\'>#=fields[current].label#</option>" +\n\t                "#}#" +\n\t            "</select>" +\n\t         "</div>" +\n\t         "<div class=\'k-filter-toolbar-item k-filter-operator\'>" +\n\t         "</div>" +\n\t         "<div class=\'k-filter-toolbar-item k-filter-value\'>" +\n\t         "</div>" +\n\t         "<div class=\'k-filter-toolbar-item\'>" +\n\t            "<button data-role=\'button\' class=\'k-button-flat k-button k-button-icon\' role=\'button\' title=\'#=close#\' aria-label=\'#=close#\' aria-disabled=\'false\' tabindex=\'0\'>" +\n\t                "<span class=\'k-icon k-i-close\'>" +\n\t                "</span>" +\n\t            "</button>" +\n\t         "</div>" +\n\t       "</div>" +\n\t    "</div>"+\n\t"</li>";\n\n\n\t(function($) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        Widget = ui.Widget,\n\t        ButtonGroup = ui.ButtonGroup,\n\t        CHANGE = "change",\n\t        NS = ".kendoFilter",\n\t        EQ = "Is equal to",\n\t        NEQ = "Is not equal to",\n\t        proxy = $.proxy;\n\n\t    var FilterButtonGroup = ButtonGroup.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\t            ButtonGroup.fn.init.call(that, element, options);\n\t        },\n\n\t        options: {\n\t            name: "FilterButtonGroup"\n\t        },\n\n\t        value: function (value) {\n\t            if (value === undefined) {\n\t                return this._value;\n\t            }\n\t            this._value = value;\n\t            ButtonGroup.fn.select.call(this, this.wrapper.find("[value=\'" + value + "\']")[0]);\n\t            this.trigger(CHANGE);\n\t        },\n\n\t        select: function (button) {\n\t            if (button !== -1) {\n\t                this.value($(button).attr("value"));\n\t            }\n\t        }\n\t    });\n\n\t    var Filter = Widget.extend( {\n\t        init: function(element, options) {\n\t            var that = this;\n\t            var html;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that.element = $(element).addClass("k-widget k-filter");\n\t            that.dataSource = options.dataSource;\n\t            that.operators = $.extend(that.options.operators, options.operators);\n\n\t            that._getFieldsInfo();\n\t            that._modelChangeHandler = proxy(that._modelChange, that);\n\t            that._renderMain();\n\t            if (options.expression) {\n\t                that._addExpressionTree(that.filterModel);\n\t            }\n\t            that._renderApplyButton();\n\t            if (that.options.expressionPreview) {\n\t                if (!that._previewContainer) {\n\t                    that._previewContainer = $(\'<div class="k-filter-preview"></div>\').insertAfter(that.element.children().eq(0));\n\t                }\n\t                html = that._createPreview(that.filterModel.toJSON());\n\t                that._previewContainer.html(html);\n\t            }\n\t            that._attachEvents();\n\t            that.hasCustomOperators();\n\t        },\n\n\t        events: [\n\t            CHANGE\n\t        ],\n\n\t        options: {\n\t            name: "Filter",\n\t            dataSource: null,\n\t            expression: null,\n\t            applyButton: false,\n\t            fields: [],\n\t            mainLogic: "and",\n\t            messages: {\n\t                and: "And",\n\t                or: "Or",\n\t                apply: "Apply",\n\t                close: "Close",\n\t                addExpression: "Add Expression",\n\t                fields: "Fields",\n\t                operators: "Operators",\n\t                addGroup: "Add Group"\n\t            },\n\t            operators: {\n\t                string: {\n\t                    eq: EQ,\n\t                    neq: NEQ,\n\t                    startswith: "Starts with",\n\t                    contains: "Contains",\n\t                    doesnotcontain: "Does not contain",\n\t                    endswith: "Ends with",\n\t                    isnull: "Is null",\n\t                    isnotnull: "Is not null",\n\t                    isempty: "Is empty",\n\t                    isnotempty: "Is not empty",\n\t                    isnullorempty: "Has no value",\n\t                    isnotnullorempty: "Has value"\n\t                },\n\t                number: {\n\t                    eq: EQ,\n\t                    neq: NEQ,\n\t                    gte: "Is greater than or equal to",\n\t                    gt: "Is greater than",\n\t                    lte: "Is less than or equal to",\n\t                    lt: "Is less than",\n\t                    isnull: "Is null",\n\t                    isnotnull: "Is not null"\n\t                },\n\t                date: {\n\t                    eq: EQ,\n\t                    neq: NEQ,\n\t                    gte: "Is after or equal to",\n\t                    gt: "Is after",\n\t                    lte: "Is before or equal to",\n\t                    lt: "Is before",\n\t                    isnull: "Is null",\n\t                    isnotnull: "Is not null"\n\t                },\n\t                "boolean": {\n\t                    eq: EQ,\n\t                    neq: NEQ\n\t                }\n\t            }\n\t        },\n\n\t        applyFilter: function () {\n\t            var filter = this.filterModel.toJSON();\n\n\t            if(this._hasCustomOperators){\n\t                this._mapOperators(filter);\n\t            }\n\t            if (this._hasFieldsFilter(filter.filters || [])) {\n\t                this._removeEmptyGroups(filter.filters);\n\t                this.dataSource.filter(filter);\n\t            } else {\n\t                this.dataSource.filter({});\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            this.element.off(NS);\n\t            kendo.destroy(this.element.find(".k-filter-group-main"));\n\t            this._previewContainer = null;\n\t            this._applyButton = null;\n\t            this._modelChangeHandler = null;\n\t            Widget.fn.destroy.call(this);\n\t        },\n\n\t        setOptions: function(options) {\n\t            kendo.deepExtend(this.options, options);\n\t            this.destroy();\n\t            this.element.empty();\n\t            this.init(this.element, this.options);\n\t        },\n\n\t        getOptions: function() {\n\t            var result = $.extend(true, {}, this.options);\n\t            delete result.dataSource;\n\t            result.expression = this.filterModel.toJSON();\n\n\t            return result;\n\t        },\n\n\t        _addExpressionTree: function (model) {\n\t            if (model.filters) {\n\t                var parent = this.element.find("[id=" + model.uid + "]");\n\t                for (var i = 0; i < model.filters.length; i++) {\n\t                    if (model.filters[i].logic) {\n\t                        this._addGroup(parent, model.filters[i]);\n\t                    } else {\n\t                        this._addExpression(parent, model.filters[i]);\n\t                    }\n\t                    if (model.filters[i].filters) {\n\t                        this._addExpressionTree(model.filters[i]);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _attachEvents: function () {\n\t            var that = this;\n\n\t            that.element.on("click" + NS, "button.k-button" , function (e) {\n\t                e.preventDefault();\n\n\t                var button  = $(e.currentTarget);\n\t                var icon = button.find("span");\n\t                var command = (icon.length ? icon : button).attr("class").split("-").pop();\n\n\t                if (command == "close") {\n\t                    that._removeExpression(button.closest(".k-toolbar"));\n\t                } else if (command == "expression") {\n\t                    that._addExpression(button.closest(".k-toolbar"));\n\t                } else if (command == "group") {\n\t                    that._addGroup(button.closest(".k-toolbar"));\n\t                } else if (command == "apply") {\n\t                    that.applyFilter();\n\t                }\n\t            });\n\t        },\n\n\t        _addExpression: function (parentContainer, model) {\n\t            var that = this;\n\t            var parentUID = parentContainer.attr("id");\n\t            var itemsContainer  = parentContainer.closest(".k-filter-toolbar").next("ul.k-filter-lines");\n\t            var field = model ? that._fields[model.field] : that._defaultField;\n\t            var expressionModel;\n\t            var itemHTML = "";\n\n\t            if (model) {\n\t                expressionModel = model;\n\t            } else {\n\t                expressionModel = findModel(that.filterModel, parentUID);\n\n\t                if (!expressionModel.filters) {\n\t                    expressionModel.set("filters", []);\n\t                }\n\n\t                expressionModel = that._addNewModel(expressionModel.filters, field);\n\t            }\n\n\t            if (!itemsContainer.length) {\n\t                itemsContainer = $("<ul class=\'k-filter-lines\'></ul>").appendTo(parentContainer.closest("li"));\n\t            }\n\n\t            itemHTML = $(kendo.template(expressionItemTemplate)({\n\t                fields: that._fields,\n\t                operators: that.operators[field.type],\n\t                close: that.options.messages.close,\n\t                fieldsLabel: that.options.messages.fields,\n\t                uid: expressionModel.uid,\n\t                ns: kendo.ns\n\t            })).appendTo(itemsContainer);\n\n\t            that._addExpressionControls(itemHTML.find(".k-toolbar"), field, expressionModel);\n\n\t            if (!model) {\n\t                that._expressionChange();\n\t            }\n\t        },\n\n\t        _addExpressionControls: function (container, field, filterModel) {\n\t            var items = container.find(".k-filter-toolbar-item");\n\t            var operatorsContainer = items.eq(1);\n\t            var editorContainer = items.eq(2);\n\n\t            kendo.destroy(operatorsContainer);\n\t            kendo.destroy(editorContainer);\n\t            operatorsContainer.empty();\n\t            editorContainer.empty();\n\n\t            this._appendOperators(operatorsContainer, field);\n\t            this._appendEditor(editorContainer, field);\n\t            this._bindModel(container, filterModel);\n\t            this._showHideEditor(container, filterModel);\n\t        },\n\n\t        _appendOperators: function (container, field) {\n\t            $(kendo.template(operatorsTemplate)({\n\t                operators: field.operators && field.operators[field.type] ? field.operators[field.type] : this.operators[field.type],\n\t                operatorsLabel: this.options.messages.operators,\n\t                ns: kendo.ns\n\t            })).appendTo(container);\n\t        },\n\n\t        _appendEditor: function (container, field) {\n\t            if (kendo.isFunction(field.editor)) {\n\t                field.editor(container, $.extend(true, {}, { field: field.name }));\n\t            } else {\n\t                $(kendo.template(field.editor)({ns: kendo.ns, field: field.name})).appendTo(container);\n\t            }\n\t        },\n\n\t        _addNewModel: function (parent, field) {\n\t            var filterModel;\n\t            var type = field.type;\n\t            var operators = field.operators;\n\t            var operator;\n\t            if (!operators) {\n\t                operators = this.options.operators;\n\t            }\n\n\t            operator = Object.keys(operators[type])[0];\n\n\t            parent.push({ field: field.name });\n\t            filterModel = parent[parent.length - 1];\n\n\t            filterModel.set("value", field.defaultValue);\n\t            filterModel.set("operator", operator);\n\n\t            return filterModel;\n\t        },\n\n\t        _addGroup: function (parent, model) {\n\t            var that = this;\n\t            var filterModel = that.filterModel;\n\t            var parentUID = parent.attr("id");\n\t            var itemsContainer  = parent.closest(".k-filter-toolbar").next("ul.k-filter-lines");\n\t            var logicHTML;\n\n\t            if (model) {\n\t                filterModel = model;\n\n\t            } else {\n\t                filterModel = findModel(filterModel, parentUID);\n\n\t                if (!filterModel.filters) {\n\t                    filterModel.set("filters", []);\n\t                }\n\t                filterModel.filters.push({ logic: that.options.mainLogic });\n\t                filterModel = filterModel.filters[filterModel.filters.length - 1];\n\t            }\n\n\t            if (!itemsContainer.length) {\n\t                itemsContainer = $("<ul class=\'k-filter-lines\'></ul>").appendTo(parent.closest("li"));\n\t            }\n\n\t            logicHTML = $(kendo.template(logicItemTemplate)({\n\t                operators: {\n\t                    and : that.options.messages.and,\n\t                    or : that.options.messages.or\n\t                },\n\t                addExpression: that.options.messages.addExpression,\n\t                addGroup: that.options.messages.addGroup,\n\t                close: that.options.messages.close,\n\t                ns: kendo.ns\n\t            })).appendTo(itemsContainer);\n\n\t            that._bindModel(logicHTML.find(".k-toolbar"), filterModel);\n\n\t            if (!model) {\n\t                that._expressionChange();\n\t            }\n\t        },\n\n\t        _bindModel: function (container, model) {\n\t            container.attr("id", model.uid);\n\n\t            model.bind("change", this._modelChangeHandler);\n\t            kendo.bind(container, model);\n\n\t            container.parent().attr(kendo.attr("stop"), true);\n\t        },\n\n\t        _createPreview:  function (filter) {\n\t            var html = "";\n\t            var createdField = false;\n\t            var haveFields = this._hasFieldsFilter(filter.filters || []);\n\t            var childhtml = "";\n\t            var current;\n\t            var field;\n\n\t            if (!filter.filters || !filter.filters.length || !haveFields) {\n\t                return "";\n\t            }\n\t            html += \'<span class="k-filter-preview-bracket">(</span>\';\n\t            for (var i = 0 ; i < filter.filters.length; i++) {\n\t                current = filter.filters[i];\n\n\t                if (current.filters) {\n\t                    childhtml = this._createPreview(current);\n\t                    if (childhtml) {\n\t                        if (createdField) {\n\t                            html += \'<span class="k-filter-preview-operator"> \' + filter.logic.toLocaleUpperCase() + \' </span>\';\n\t                        }\n\t                        createdField = true;\n\t                    }\n\t                    html += childhtml;\n\t                }\n\t                if (current.field) {\n\t                    field = this._fields[current.field];\n\t                    if (createdField) {\n\t                        html += \'<span class="k-filter-preview-operator"> \' + filter.logic.toLocaleUpperCase() + \' </span>\';\n\t                    }\n\t                    createdField = true;\n\t                    html += \'<span class="k-filter-preview-field">\' + field.label + \'</span>\';\n\t                    html += \'<span class="k-filter-preview-criteria"> \' + this._getOperatorText(current.field, current.operator);\n\t                    if (current.operator.indexOf("is") < 0) {\n\t                        html += \' </span>\';\n\t                        html += "<span class=\'k-filter-preview-value\'>\'" + kendo.htmlEncode(field.previewFormat ? kendo.toString(current.value, field.previewFormat) : current.value) + "\'</span>";\n\t                    } else {\n\t                        html += \'</span>\';\n\t                    }\n\t                }\n\t            }\n\t            html += \'<span class="k-filter-preview-bracket">)</span>\';\n\t            return html;\n\t        },\n\n\t        _expressionChange: function() {\n\t            var that = this;\n\t            var filter = that.filterModel.toJSON();\n\t            var html = "";\n\n\t            if (that.options.expressionPreview) {\n\t                html = that._createPreview(filter);\n\t                that._previewContainer.html(html);\n\t            }\n\n\t            that.trigger(CHANGE, { expression: filter });\n\t        },\n\n\t        _getOperatorText: function (field, operator) {\n\t            var type = this._fields[field].type;\n\t            var operators = this._fields[field].operators;\n\n\t            if (!operators) {\n\t                operators = this.options.operators;\n\t            }\n\n\t            return operators[type][operator].text || operators[type][operator];\n\t        },\n\n\t        _getFieldsInfo: function () {\n\t            var that = this;\n\t            var fieldsCollection = that.options.fields.length ? that.options.fields : (that.options.dataSource.options.schema.model || {}).fields;\n\t            var fieldInfo;\n\n\t            that._fields = {};\n\n\t            for (var field in fieldsCollection) {\n\t                fieldInfo = fieldsCollection[field];\n\t                fieldInfo = $.extend(true, {}, {\n\t                    name: fieldInfo.name || field,\n\t                    editor : fieldInfo.editorTemplate || editors[fieldInfo.type || "string"],\n\t                    defaultValue : (fieldInfo.defaultValue || fieldInfo.defaultValue === false || fieldInfo.defaultValue === 0) ? fieldInfo.defaultValue : "",\n\t                    type : fieldInfo.type || "string",\n\t                    label : fieldInfo.label || fieldInfo.name || field,\n\t                    operators: fieldInfo.operators,\n\t                    previewFormat: fieldInfo.previewFormat\n\t                });\n\t                that._fields[fieldInfo.name] = fieldInfo;\n\t                if (!that._defaultField) {\n\t                    that._defaultField = fieldInfo;\n\t                }\n\t            }\n\t        },\n\n\t        _hasFieldsFilter: function (filters, haveField) {\n\t            haveField = !!haveField;\n\n\t            for (var i = 0 ; i < filters.length; i++) {\n\t                if (filters[i].filters) {\n\t                    haveField = this._hasFieldsFilter(filters[i].filters, haveField);\n\t                }\n\t                if (filters[i].field) {\n\t                    return true;\n\t                }\n\t            }\n\n\t            return haveField;\n\t        },\n\n\t        _removeEmptyGroups: function (filters) {\n\t            if (!filters) {\n\t                return;\n\t            }\n\t            for (var i = filters.length - 1; i >= 0; i--) {\n\t                if ((filters[i].logic && !filters[i].filters) || (filters[i].filters && !this._hasFieldsFilter(filters[i].filters)) ) {\n\t                    filters.splice(i, 1);\n\t                    continue;\n\t                }\n\n\t                if (filters[i].filters) {\n\t                    this._removeEmptyGroups(filters[i].filters);\n\t                }\n\t            }\n\t        },\n\n\t        _modelChange: function (e) {\n\t            var that = this;\n\t            var container = that.element.find("[id=" + e.sender.uid + "]");\n\n\t            that._showHideEditor(container, e.sender);\n\t            if (e.field !== "field") {\n\t                if (e.field !== "filters") {\n\t                  that._expressionChange();\n\t                }\n\t                return;\n\t            }\n\n\t            var newField = e.sender.field;\n\t            var parent = e.sender.parent();\n\t            var field = that._fields[newField];\n\t            var filterModel = that._addNewModel(parent, field);\n\n\t            e.sender.unbind("change", that._modelChangeHandler);\n\n\t            parent.remove(e.sender);\n\n\t            that._addExpressionControls(container, field, filterModel);\n\n\t            that._expressionChange();\n\t        },\n\n\t        _renderMain: function() {\n\t            var that = this;\n\n\t            $(mainContainer).appendTo(that.element);\n\n\t            if (that.options.expression) {\n\t                that.filterModel = kendo.observable(that.options.expression);\n\t            } else {\n\t                that.filterModel = kendo.observable({\n\t                    logic: that.options.mainLogic\n\t                });\n\t            }\n\n\t            $(kendo.template(mainLogicTemplate)({\n\t                operators: {\n\t                    and : that.options.messages.and,\n\t                    or : that.options.messages.or\n\t                },\n\t                addExpression: that.options.messages.addExpression,\n\t                addGroup: that.options.messages.addGroup,\n\t                close: that.options.messages.close,\n\t                uid: that.filterModel.uid,\n\t                ns: kendo.ns\n\t            })).appendTo(that.element.find("li:first"));\n\n\t            that._bindModel(that.element.find(".k-toolbar:first"), that.filterModel);\n\t        },\n\n\t        _removeExpression: function (parent) {\n\t            var that = this;\n\t            var parentUID = parent.attr("id");\n\t            var itemContainer = parent.closest("li");\n\t            var isMain = itemContainer.hasClass("k-filter-group-main");\n\t            var parentModel;\n\t            var model;\n\n\t            if (isMain) {\n\t                itemContainer = itemContainer.find(".k-filter-lines");\n\t                if (that.filterModel.filters) {\n\t                    that.filterModel.filters.empty();\n\t                    delete that.filterModel.filters;\n\t                }\n\t            } else {\n\t                model = findModel(that.filterModel, parentUID);\n\t                parentModel = model.parent();\n\t                model.unbind("change", that._modelChangeHandler);\n\t                parentModel.remove(model);\n\t                if (!parentModel.length) {\n\t                    delete parentModel.parent().filters;\n\t                }\n\t                if (!itemContainer.siblings().length) {\n\t                    itemContainer = itemContainer.parent();\n\t                }\n\t            }\n\n\t            kendo.destroy(itemContainer);\n\t            itemContainer.remove();\n\t            that._expressionChange();\n\t        },\n\n\t        _renderApplyButton: function() {\n\t            var that = this;\n\n\t            if (!that.options.applyButton) {\n\t                return;\n\t            }\n\n\t            if (!that._applyButton) {\n\t                that._applyButton = $(kendo.format(\'<button type="button" aria-label="{0}" title="{0}" class="k-button k-filter-apply">{0}</button>\', that.options.messages.apply)).appendTo(that.element);\n\t            }\n\t        },\n\n\t        _showHideEditor: function (container, model) {\n\t            if (model.logic) {\n\t                return;\n\t            }\n\n\t            var operator = model.operator;\n\t            var editorContainer = container.find(".k-filter-toolbar-item:eq(2)");\n\t            if (operator == "isnull" || operator == "isnotnull" || operator == "isempty" ||\n\t                operator == "isnotempty" || operator == "isnullorempty" || operator == "isnotnullorempty") {\n\t                editorContainer.hide();\n\t            } else {\n\t                editorContainer.show();\n\t            }\n\t        },\n\n\t        _mapOperators: function (expression) {\n\t            var that = this;\n\t            if (expression.filters) {\n\t                expression.filters.forEach(function (filter) {\n\t                    if (filter.filters) {\n\t                        that._mapOperators(filter);\n\t                    } else {\n\t                        var operator;\n\t                        var field = that._fields[filter.field];\n\t                        var type = field.type;\n\t                        if (field.operators && field.operators[type][filter.operator]) {\n\t                            operator = field.operators[type][filter.operator];\n\t                        } else {\n\t                            operator = that.operators[type][filter.operator];\n\t                        }\n\n\t                        if (operator) {\n\t                            filter.operator = operator.handler || filter.operator;\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        hasCustomOperators: function () {\n\t            var operators = $.extend(true, {}, this.operators);\n\n\t            for (var field in this._fields) {\n\t                operators = $.extend(true, {}, operators, this._fields[field].operators);\n\t            }\n\t            this._hasCustomOperators = findCustomOperators(operators);\n\t        }\n\n\t    });\n\n\t    function findCustomOperators(operators) {\n\t        for (var field in operators) {\n\t            var operator = operators[field];\n\t            if ((operator.handler && typeof operator.handler === "function") ||\n\t                (typeof operator === \'object\' && operator !== null && findCustomOperators(operator))) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\n\t    function findModel(model, uid) {\n\n\t        if (model.uid === uid) {\n\t            return model;\n\t        }\n\n\t        if (model.filters) {\n\t            for(var i = 0; i < model.filters.length; i++) {\n\t                var temp = findModel(model.filters[i], uid);\n\t                if (temp) {\n\t                    return temp;\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    ui.plugin(Filter);\n\t    ui.plugin(FilterButtonGroup);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1211:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.buttongroup */ "./node_modules/@progress/kendo-ui/js/kendo.buttongroup.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.filter.js?')},"./node_modules/@progress/kendo-ui/js/kendo.filtercell.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.filtercell.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1212);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 1021:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.combobox */ "./node_modules/@progress/kendo-ui/js/kendo.combobox.js");\n\n/***/ }),\n\n/***/ 1022:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.dropdownlist */ "./node_modules/@progress/kendo-ui/js/kendo.dropdownlist.js");\n\n/***/ }),\n\n/***/ 1138:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.datepicker */ "./node_modules/@progress/kendo-ui/js/kendo.datepicker.js");\n\n/***/ }),\n\n/***/ 1155:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.numerictextbox */ "./node_modules/@progress/kendo-ui/js/kendo.numerictextbox.js");\n\n/***/ }),\n\n/***/ 1212:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1213), __webpack_require__(1138), __webpack_require__(1155), __webpack_require__(1021), __webpack_require__(1022) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "filtercell",\n\t    name: "Row filter",\n\t    category: "framework",\n\t    depends: [ "autocomplete" ],\n\t    advanced: true\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        DataSource = kendo.data.DataSource,\n\t        Widget = ui.Widget,\n\t        CHANGE = "change",\n\t        BOOL = "boolean",\n\t        ENUM = "enums",\n\t        STRING = "string",\n\t        EQ = "Is equal to",\n\t        NEQ = "Is not equal to",\n\t        proxy = $.proxy,\n\t        nonValueOperators = ["isnull", "isnotnull", "isempty", "isnotempty", "isnullorempty", "isnotnullorempty"];\n\n\t    function isNonValueFilter(filter) {\n\t        var operator = typeof filter === "string" ? filter : filter.operator;\n\t        return $.inArray(operator, nonValueOperators) > -1;\n\t    }\n\n\t    function findFilterForField(filter, field) {\n\t        var filters = [];\n\t        if ($.isPlainObject(filter)) {\n\t            if (filter.hasOwnProperty("filters")) {\n\t                filters = filter.filters;\n\t            } else if(filter.field == field) {\n\t                return filter;\n\t            }\n\t        }\n\t        if (($.isArray(filter))) {\n\t           filters = filter;\n\t        }\n\n\t        for (var i = 0; i < filters.length; i++) {\n\t          var result = findFilterForField(filters[i], field);\n\t          if (result) {\n\t             return result;\n\t          }\n\t        }\n\t    }\n\n\t    function removeFiltersForField(expression, field) {\n\t        if (expression.filters) {\n\t            expression.filters = $.grep(expression.filters, function(filter) {\n\t                removeFiltersForField(filter, field);\n\t                if (filter.filters) {\n\t                    return filter.filters.length;\n\t                } else {\n\t                    return filter.field != field;\n\t                }\n\t            });\n\t        }\n\t    }\n\n\t    function removeDuplicates (dataSelector, dataTextField) {\n\t        var getter = kendo.getter(dataTextField, true);\n\n\t        return function(e) {\n\t            var items = dataSelector(e),\n\t                result = [],\n\t                index = 0,\n\t                seen = {};\n\n\t            while (index < items.length) {\n\t                var item = items[index++],\n\t                    text = getter(item);\n\n\t                if(!seen.hasOwnProperty(text)){\n\t                    result.push(item);\n\t                    seen[text] = true;\n\t                }\n\t            }\n\n\t            return result;\n\t        };\n\t    }\n\n\t    var FilterCell = Widget.extend( {\n\t        init: function(element, options) {\n\t            element = $(element).addClass("k-filtercell");\n\t            var wrapper = this.wrapper = $("<span/>").appendTo(element);\n\t            var that = this,\n\t                dataSource,\n\t                viewModel,\n\t                passedOptions = options,\n\t                first,\n\t                type,\n\t                operators = that.operators = options.operators || {},\n\t                input = that.input = $("<input/>")\n\t                    .attr(kendo.attr("bind"), "value: value")\n\t                    .appendTo(wrapper);\n\n\t            var suggestDataSource = options ? options.suggestDataSource : null;\n\n\t            if (suggestDataSource) {\n\t                // avoid deep cloning the suggest data source\n\t                options = $.extend({}, options, { suggestDataSource: {} });\n\t            }\n\n\t            Widget.fn.init.call(that, element[0], options);\n\n\t            if (suggestDataSource) {\n\t                that.options.suggestDataSource = suggestDataSource;\n\t            }\n\n\t            options = that.options;\n\n\t            dataSource = that.dataSource = options.dataSource;\n\n\t            //gets the type from the dataSource or sets default to string\n\t            that.model = dataSource.reader.model;\n\t            type = options.type = STRING;\n\t            var fields = kendo.getter("reader.model.fields", true)(dataSource) || {};\n\t            var target = fields[options.field];\n\t            if (target && target.type) {\n\t                type = options.type = target.type;\n\t            }\n\t            if (options.values) {\n\t                options.type = type = ENUM;\n\t            }\n\n\t            operators = operators[type] || options.operators[type];\n\n\t            if (!passedOptions.operator) {\n\t                for (first in operators) { // get the first operator\n\t                    options.operator = first;\n\t                    break;\n\t                }\n\t            }\n\n\t            that._parse = function(value) {\n\t                /*jshint eqnull: true */\n\t                return value != null ? (value + "") : value;\n\t            };\n\n\t            if (that.model && that.model.fields) {\n\t                var field = that.model.fields[options.field];\n\n\t                if (field) {\n\t                    if (field.parse) {\n\t                        that._parse = proxy(field.parse, field);\n\t                    }\n\t                }\n\t            }\n\n\t            that.defaultOperator = options.operator;\n\n\t            that.viewModel = viewModel = kendo.observable({\n\t                operator: options.operator,\n\t                value: null,\n\t                operatorVisible: function() {\n\t                    var val = this.get("value");\n\t                    return  (val !== null && val !== undefined && val != "undefined") || (isNonValueFilter(this.get("operator")) && !that._clearInProgress);\n\t                }\n\t            });\n\t            viewModel.bind(CHANGE, proxy(that.updateDsFilter, that));\n\n\t            if (type == STRING) {\n\t                that.initSuggestDataSource(options);\n\t            }\n\n\t            if (options.inputWidth !== null) {\n\t                input.addClass(\'k-sized-input\');\n\t                input.width(options.inputWidth);\n\t            }\n\n\t            input.attr("aria-label", that._getColumnTitle());\n\t            input.attr("title", that._getColumnTitle());\n\n\t            that._setInputType(options, type);\n\n\t            if (type != BOOL && options.showOperators !== false) {\n\t                that._createOperatorDropDown(operators);\n\t            } else {\n\t                $(\'<div unselectable="on" />\')\n\t                    .css("display", "none")\n\t                    .text("eq")\n\t                    .appendTo(wrapper);\n\n\t                wrapper.addClass("k-operator-hidden");\n\t            }\n\n\t            that._createClearIcon();\n\n\t            kendo.bind(this.wrapper, viewModel);\n\n\t            if (type == STRING) {\n\t                if (!options.template) {\n\t                    that.setAutoCompleteSource();\n\t                }\n\t            }\n\n\t            if (type == ENUM) {\n\t                that.setComboBoxSource(that.options.values);\n\t            }\n\n\t            that._refreshUI();\n\n\t            that._refreshHandler = proxy(that._refreshUI, that);\n\n\t            that.dataSource.bind(CHANGE, that._refreshHandler);\n\n\t        },\n\n\t        _setInputType: function(options, type) {\n\t            var that = this,\n\t                input = that.input;\n\n\t            if (typeof (options.template) == "function") {\n\t                options.template.call(that.viewModel, {\n\t                    element: that.input,\n\t                    dataSource: that.suggestDataSource\n\t                });\n\n\t                that._angularItems("compile");\n\n\t            } else if (type == STRING) {\n\t                input.attr(kendo.attr("role"), "autocomplete")\n\t                        .attr(kendo.attr("text-field"), options.dataTextField || options.field)\n\t                        .attr(kendo.attr("filter"), options.suggestionOperator)\n\t                        .attr(kendo.attr("delay"), options.delay)\n\t                        .attr(kendo.attr("min-length"), options.minLength)\n\t                        .attr(kendo.attr("value-primitive"), true);\n\t            } else if (type == "date") {\n\t                input.attr(kendo.attr("role"), "datepicker");\n\t            } else if (type == BOOL) {\n\t                input.remove();\n\t                var radioInput = $("<input type=\'radio\'/>");\n\t                var wrapper = that.wrapper;\n\t                var inputName = kendo.guid();\n\n\t                var labelTrue = $("<label/>").text(options.messages.isTrue).append(radioInput);\n\t                radioInput.attr(kendo.attr("bind"), "checked:value")\n\t                    .attr("name", inputName)\n\t                    .val("true");\n\n\t                var labelFalse = labelTrue.clone().text(options.messages.isFalse);\n\t                radioInput.clone().val("false").appendTo(labelFalse);\n\t                wrapper.append([labelTrue, labelFalse]);\n\n\t            } else if (type == "number") {\n\t                input.attr(kendo.attr("role"), "numerictextbox")\n\t                        .attr("title", that._getColumnTitle());\n\t            } else if (type == ENUM) {\n\t                input.attr(kendo.attr("role"), "combobox")\n\t                        .attr(kendo.attr("text-field"), "text")\n\t                        .attr(kendo.attr("suggest"), true)\n\t                        .attr(kendo.attr("filter"), "contains")\n\t                        .attr(kendo.attr("value-field"), "value")\n\t                        .attr(kendo.attr("value-primitive"), true);\n\t            }\n\t        },\n\n\t        _getColumnTitle: function() {\n\t            var column = this.options.column;\n\t            return column ? column.title || column.field : "";\n\t        },\n\n\t        _createOperatorDropDown: function(operators) {\n\t            var items = [],\n\t                viewModel = this.viewModel;\n\t            for (var prop in operators) {\n\t                items.push({\n\t                    text: operators[prop],\n\t                    value: prop\n\t                });\n\t            }\n\t            var dropdown = $(\'<input class="k-dropdown-operator" \' + kendo.attr("bind") + \'="value: operator"/>\').appendTo(this.wrapper);\n\t            this.operatorDropDown = dropdown.kendoDropDownList({\n\t                dataSource: items,\n\t                dataTextField: "text",\n\t                dataValueField: "value",\n\t                open: function() {\n\t                    //TODO calc this\n\t                    this.popup.element.width(150);\n\t                },\n\t                valuePrimitive: true\n\t            }).data("kendoDropDownList");\n\n\t            viewModel.bind("change", function() {\n\t                var ariaLabel = operators[viewModel.operator];\n\t                dropdown.attr("aria-label", ariaLabel);\n\t            });\n\n\t            this.operatorDropDown.wrapper.find(".k-i-arrow-60-down").removeClass("k-i-arrow-60-down").addClass("k-i-filter");\n\t        },\n\n\t        initSuggestDataSource: function(options) {\n\t            var suggestDataSource = options.suggestDataSource;\n\n\t            if (!(suggestDataSource instanceof DataSource)) {\n\t                if (!options.customDataSource && suggestDataSource) {\n\t                    suggestDataSource.group = undefined;\n\t                }\n\t                suggestDataSource =\n\t                    this.suggestDataSource =\n\t                        DataSource.create(suggestDataSource);\n\n\n\t            }\n\n\t            if (!options.customDataSource) {\n\t                suggestDataSource._pageSize = undefined;\n\t                suggestDataSource.reader.data = removeDuplicates(suggestDataSource.reader.data, this.options.field);\n\t            }\n\n\t            this.suggestDataSource = suggestDataSource;\n\t        },\n\n\t        setAutoCompleteSource: function() {\n\t            var autoComplete = this.input.data("kendoAutoComplete");\n\t            if (autoComplete) {\n\t                autoComplete.setDataSource(this.suggestDataSource);\n\t            }\n\t        },\n\n\t        setComboBoxSource: function(values) {\n\t            var dataSource = DataSource.create({\n\t                data: values\n\t            });\n\t            var comboBox = this.input.data("kendoComboBox");\n\t            if (comboBox && !this.options.template) {\n\t                comboBox.setDataSource(dataSource);\n\t            }\n\t        },\n\n\t        _refreshUI: function() {\n\t            var that = this,\n\t                filter = findFilterForField(that.dataSource.filter(), this.options.field) || {},\n\t                viewModel = that.viewModel;\n\n\t            that.manuallyUpdatingVM = true;\n\t            filter = $.extend(true, {}, filter);\n\t            //MVVM check binding does not update the UI when changing the value to null/undefined\n\t            if (that.options.type == BOOL) {\n\t                if (viewModel.value !== filter.value) {\n\t                    that.wrapper.find(":radio").prop("checked", false);\n\t                }\n\t            }\n\n\t            if (filter.operator) {\n\t                viewModel.set("operator", filter.operator);\n\t            }\n\t            viewModel.set("value", filter.value);\n\t            that.manuallyUpdatingVM = false;\n\t        },\n\n\t        updateDsFilter: function(e) {\n\t            var that = this,\n\t                model = that.viewModel;\n\n\t            if (that.manuallyUpdatingVM || (e.field == "operator" && model.value === undefined && !isNonValueFilter(model)) ||\n\t                (e.field == "operator" && that._clearInProgress && model.value !== null))  {\n\t                return;\n\t            }\n\n\t            var currentFilter = $.extend({}, that.viewModel.toJSON(), { field: that.options.field });\n\n\t            var expression = {\n\t                logic: "and",\n\t                filters: []\n\t            };\n\n\t            var prevented = false;\n\n\t            if ((currentFilter.value !== undefined && currentFilter.value !== null) || (isNonValueFilter(currentFilter) && !this._clearInProgress)) {\n\t                expression.filters.push(currentFilter);\n\n\t                prevented = that.trigger(CHANGE, { filter: expression, field: that.options.field });\n\t            }\n\n\t            if (that._clearInProgress || currentFilter.value === null) {\n\t                prevented = that.trigger(CHANGE, { filter: null, field: that.options.field });\n\t            }\n\n\t            if (prevented) {\n\t                return;\n\t            }\n\n\t            var mergeResult = that._merge(expression);\n\t            if (mergeResult.filters.length) {\n\t                that.dataSource.filter(mergeResult);\n\t            } else {\n\t                that.dataSource.filter({});\n\t            }\n\t        },\n\n\t        _merge: function(expression) {\n\t            var that = this,\n\t                logic = expression.logic || "and",\n\t                filters = expression.filters,\n\t                filter,\n\t                result = that.dataSource.filter() || { filters:[], logic: "and" },\n\t                idx,\n\t                length;\n\n\t            removeFiltersForField(result, that.options.field);\n\n\t            for (idx = 0, length = filters.length; idx < length; idx++) {\n\t                filter = filters[idx];\n\t                filter.value = that._parse(filter.value);\n\t            }\n\n\t            filters = $.grep(filters, function(filter) {\n\t                return (filter.value !== "" && filter.value !== null) || isNonValueFilter(filter);\n\t            });\n\n\t            if (filters.length) {\n\t                if (result.filters.length) {\n\t                    expression.filters = filters;\n\n\t                    if (result.logic !== "and") {\n\t                        result.filters = [ { logic: result.logic, filters: result.filters }];\n\t                        result.logic = "and";\n\t                    }\n\n\t                    if (filters.length > 1) {\n\t                        result.filters.push(expression);\n\t                    } else {\n\t                        result.filters.push(filters[0]);\n\t                    }\n\t                } else {\n\t                    result.filters = filters;\n\t                    result.logic = logic;\n\t                }\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _createClearIcon: function() {\n\t            var that = this;\n\n\t            $("<button type=\'button\' class=\'k-button k-button-icon\' title = " + that.options.messages.clear + "/>")\n\t                .attr("aria-label", that.options.messages.clear)\n\t                .attr(kendo.attr("bind"), "visible:operatorVisible")\n\t                .html("<span class=\'k-icon k-i-filter-clear\'></span>")\n\t                .click(proxy(that.clearFilter, that))\n\t                .appendTo(that.wrapper);\n\t        },\n\n\t        clearFilter: function() {\n\t            this._clearInProgress = true;\n\n\t            if (isNonValueFilter(this.viewModel.operator)) {\n\t                this.viewModel.set("operator", this.defaultOperator);\n\t            }\n\n\t            this.viewModel.set("value", null);\n\t            this._clearInProgress = false;\n\t        },\n\n\t        _angularItems: function(action) {\n\t            var elements = this.wrapper.closest("th").get();\n\t            var column = this.options.column;\n\n\t            this.angular(action, function() {\n\t                return {\n\t                    elements: elements,\n\t                    data: [{ column: column }]\n\t                };\n\t            });\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that.filterModel = null;\n\t            that.operatorDropDown = null;\n\n\t            that._angularItems("cleanup");\n\n\t            if (that._refreshHandler) {\n\t                that.dataSource.bind(CHANGE, that._refreshHandler);\n\t                that._refreshHandler = null;\n\t            }\n\n\t            kendo.unbind(that.element);\n\n\t            Widget.fn.destroy.call(that);\n\n\t            kendo.destroy(that.element);\n\t        },\n\n\t        events: [\n\t            CHANGE\n\t        ],\n\n\t        options: {\n\t            name: "FilterCell",\n\t            delay: 200,\n\t            minLength: 1,\n\t            inputWidth: null,\n\t            values: undefined,\n\t            customDataSource: false,\n\t            field: "",\n\t            dataTextField: "",\n\t            type: "string",\n\t            suggestDataSource: null,\n\t            suggestionOperator: "startswith",\n\t            operator: "eq",\n\t            showOperators: true,\n\t            template: null,\n\t            messages: {\n\t                isTrue: "is true",\n\t                isFalse: "is false",\n\t                filter: "Filter",\n\t                clear: "Clear",\n\t                operator: "Operator"\n\t            },\n\t            operators: {\n\t                string: {\n\t                    eq: EQ,\n\t                    neq: NEQ,\n\t                    startswith: "Starts with",\n\t                    contains: "Contains",\n\t                    doesnotcontain: "Does not contain",\n\t                    endswith: "Ends with",\n\t                    isnull: "Is null",\n\t                    isnotnull: "Is not null",\n\t                    isempty: "Is empty",\n\t                    isnotempty: "Is not empty",\n\t                    isnullorempty: "Has no value",\n\t                    isnotnullorempty: "Has value"\n\t                },\n\t                number: {\n\t                    eq: EQ,\n\t                    neq: NEQ,\n\t                    gte: "Is greater than or equal to",\n\t                    gt: "Is greater than",\n\t                    lte: "Is less than or equal to",\n\t                    lt: "Is less than",\n\t                    isnull: "Is null",\n\t                    isnotnull: "Is not null"\n\t                },\n\t                date: {\n\t                    eq: EQ,\n\t                    neq: NEQ,\n\t                    gte: "Is after or equal to",\n\t                    gt: "Is after",\n\t                    lte: "Is before or equal to",\n\t                    lt: "Is before",\n\t                    isnull: "Is null",\n\t                    isnotnull: "Is not null"\n\t                },\n\t                enums: {\n\t                    eq: EQ,\n\t                    neq: NEQ,\n\t                    isnull: "Is null",\n\t                    isnotnull: "Is not null"\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    ui.plugin(FilterCell);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1213:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.autocomplete */ "./node_modules/@progress/kendo-ui/js/kendo.autocomplete.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.filtercell.js?')},"./node_modules/@progress/kendo-ui/js/kendo.filtermenu.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.filtermenu.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1214);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 1022:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.dropdownlist */ "./node_modules/@progress/kendo-ui/js/kendo.dropdownlist.js");\n\n/***/ }),\n\n/***/ 1076:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.binder */ "./node_modules/@progress/kendo-ui/js/kendo.binder.js");\n\n/***/ }),\n\n/***/ 1138:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.datepicker */ "./node_modules/@progress/kendo-ui/js/kendo.datepicker.js");\n\n/***/ }),\n\n/***/ 1155:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.numerictextbox */ "./node_modules/@progress/kendo-ui/js/kendo.numerictextbox.js");\n\n/***/ }),\n\n/***/ 1214:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1138), __webpack_require__(1155), __webpack_require__(1022), __webpack_require__(1076) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "filtermenu",\n\t    name: "Filtering Menu",\n\t    category: "framework",\n\t    depends: [ "datepicker", "numerictextbox", "dropdownlist", "binder" ],\n\t    advanced: true\n\t};\n\n\t/* jshint eqnull: true */\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        proxy = $.proxy,\n\t        support = kendo.support,\n\t        AUTOCOMPLETEVALUE = support.browser.chrome ? "disabled" : "off",\n\t        POPUP = "kendoPopup",\n\t        INIT = "init",\n\t        OPEN = "open",\n\t        REFRESH = "refresh",\n\t        CHANGE = "change",\n\t        NS = ".kendoFilterMenu",\n\t        EQ = "Is equal to",\n\t        NEQ = "Is not equal to",\n\t        roles = {\n\t            "number": "numerictextbox",\n\t            "date": "datepicker"\n\t        },\n\t        mobileRoles = {\n\t            "string": "text",\n\t            "number": "number",\n\t            "date": "date"\n\t        },\n\t        isFunction = kendo.isFunction,\n\t        Widget = ui.Widget;\n\n\t    var booleanTemplate =\n\t        \'<div class="k-filter-menu-container">\' +\n\t            \'<div class="k-filter-help-text">#=messages.info#</div>\'+\n\t            \'<label>\'+\n\t                \'<input type="radio" data-#=ns#bind="checked: filters[0].value" value="true" name="filters[0].value"/>\' +\n\t                \'#=messages.isTrue#\' +\n\t            \'</label>\' +\n\t            \'<label>\'+\n\t                \'<input type="radio" data-#=ns#bind="checked: filters[0].value" value="false" name="filters[0].value"/>\' +\n\t                \'#=messages.isFalse#\' +\n\t            \'</label>\' +\n\t            \'<div class="k-action-buttons">\' +\n\t                \'<button type="submit" title="#=messages.filter#" class="k-button k-primary">#=messages.filter#</button>\' +\n\t                \'<button type="reset" title="#=messages.clear#" class="k-button">#=messages.clear#</button>\'+\n\t            \'</div>\' +\n\t        \'</div>\';\n\n\t    var customBooleanTemplate =\n\t        \'<div class="k-filter-menu-container">\' +\n\t            \'<div class="k-filter-help-text">#=messages.info#</div>\'+\n\t            \'<label>\'+\n\t                \'<input class="k-textbox" data-#=ns#bind="value: filters[0].value" name="filters[0].value"/>\' +\n\t            \'</label>\' +\n\t            \'<div class="k-action-buttons">\' +\n\t                \'<button type="submit" title="#=messages.filter#" class="k-button k-primary">#=messages.filter#</button>\' +\n\t                \'<button type="reset" title="#=messages.clear#" class="k-button">#=messages.clear#</button>\'+\n\t            \'</div>\' +\n\t        \'</div>\';\n\n\t    var defaultTemplate =\n\t        \'<div class="k-filter-menu-container">\' +\n\t            \'<div class="k-filter-help-text">#=messages.info#</div>\'+\n\t            \'<select title="#=messages.operator#" data-#=ns#bind="value: filters[0].operator" data-#=ns#role="dropdownlist">\'+\n\t                \'#for(var op in operators){#\'+\n\t                    \'<option value="#=op#">#=operators[op]#</option>\' +\n\t                \'#}#\'+\n\t            \'</select>\'+\n\t            \'#if(values){#\' +\n\t                \'<select title="#=messages.value#" data-#=ns#bind="value:filters[0].value" data-#=ns#text-field="text" data-#=ns#value-field="value" data-#=ns#source=\\\'#=kendo.stringify(values).replace(/\\\'/g,"&\\\\#39;")#\\\' data-#=ns#role="dropdownlist" data-#=ns#option-label="#=messages.selectValue#" data-#=ns#value-primitive="true">\' +\n\t                \'</select>\' +\n\t            \'#}else{#\' +\n\t                \'<input title="#=messages.value#" data-#=ns#bind="value:filters[0].value" class="k-textbox" type="text" #=role ? "data-" + ns + "role=\\\'" + role + "\\\'" : ""# />\'+\n\t            \'#}#\' +\n\t            \'#if(extra){#\'+\n\t                \'<select title="#=messages.logic#" class="k-filter-and" data-#=ns#bind="value: logic" data-#=ns#role="dropdownlist">\'+\n\t                    \'<option value="and">#=messages.and#</option>\'+\n\t                    \'<option value="or">#=messages.or#</option>\'+\n\t                \'</select>\'+\n\t                \'<select title="#=messages.additionalOperator#" data-#=ns#bind="value: filters[1].operator" data-#=ns#role="dropdownlist">\'+\n\t                    \'#for(var op in operators){#\'+\n\t                        \'<option value="#=op#">#=operators[op]#</option>\'+\n\t                    \'#}#\'+\n\t                \'</select>\'+\n\t                \'#if(values){#\' +\n\t                    \'<select title="#=messages.additionalValue#" data-#=ns#bind="value:filters[1].value" data-#=ns#text-field="text" data-#=ns#value-field="value" data-#=ns#source=\\\'#=kendo.stringify(values).replace(/\\\'/g,"&\\\\#39;")#\\\' data-#=ns#role="dropdownlist" data-#=ns#option-label="#=messages.selectValue#" data-#=ns#value-primitive="true">\' +\n\t                    \'</select>\'+\n\t                \'#}else{#\' +\n\t                    \'<input title="#=messages.additionalValue#" data-#=ns#bind="value: filters[1].value" class="k-textbox" type="text" #=role ? "data-" + ns + "role=\\\'" + role + "\\\'" : ""#/>\'+\n\t                \'#}#\' +\n\t            \'#}#\'+\n\t            \'<div class="k-action-buttons">\'+\n\t                \'<button type="submit" title="#=messages.filter#" class="k-button k-primary">#=messages.filter#</button>\'+\n\t                \'<button type="reset" title="#=messages.clear#" class="k-button">#=messages.clear#</button>\'+\n\t            \'</div>\'+\n\t        \'</div>\';\n\n\t    var defaultMobileTemplate =\n\t        \'<div data-#=ns#role="view" class="k-grid-filter-menu">\' +\n\t            \'<div data-#=ns#role="header" class="k-header">\' +\n\t                \'<a href="\\\\#" class="k-header-cancel k-link" title="#=messages.cancel#" \' +\n\t                \'aria-label="#=messages.cancel#"><span class="k-icon k-i-arrow-chevron-left"></span></a>\' +\n\t                \'#=messages.filter# #=messages.into# #=title#\' +\n\t                \'<a href="\\\\#" class="k-header-done k-link" title="#=messages.done#" \' +\n\t                \'aria-label="#=messages.done#"><span class="k-icon k-i-check"></span></a>\' +\n\t            \'</div>\' +\n\t            \'<form title="#=messages.title#" class="k-filter-menu">\' +\n\t                \'<ul class="k-reset">\' +\n\t                    \'<li>\' +\n\t                        \'<span class="k-list-title k-filter-help-text">#=messages.info#</span>\' +\n\t                        \'<ul class="k-listgroup k-listgroup-flush">\' +\n\t                            \'<li class="k-item k-listgroup-item">\' +\n\t                                \'<label class="k-listgroup-form-row k-label">\' +\n\t                                    \'<span class="k-listgroup-form-field-label k-filter-operator-text">#=messages.operator#</span>\' +\n\t                                    \'<span class="k-listgroup-form-field-wrapper">\' +\n\t                                        \'<select id="operator_#=filterMenuGuid#" title="#=messages.operator#" class="k-filter-operator" data-#=ns#bind="value: filters[0].operator" autocomplete="\'+AUTOCOMPLETEVALUE+\'" >\' +\n\t                                            \'#for(var op in operators){#\' +\n\t                                                \'<option value="#=op#">#=operators[op]#</option>\' +\n\t                                            \'#}#\' +\n\t                                        \'</select>\' +\n\t                                    \'</span>\' +\n\t                                \'</label>\' +\n\t                            \'</li>\' +\n\t                            \'<li class="k-item k-listgroup-item">\' +\n\t                                \'<label class="k-listgroup-form-row k-label">\' +\n\t                                    \'<span class="k-listgroup-form-field-label k-filter-input-text">#=messages.value#</span>\' +\n\t                                    \'<span class="k-listgroup-form-field-wrapper">\' +\n\t                                        \'#if(values){#\' +\n\t                                            \'<select id="value_#=filterMenuGuid#" title="#=messages.value#" data-#=ns#bind="value:filters[0].value" autocomplete="\'+AUTOCOMPLETEVALUE+\'" >\' +\n\t                                                \'<option value="">#=messages.selectValue#</option>\' +\n\t                                                \'#for(var val in values){#\' +\n\t                                                    \'<option value="#=values[val].value#">#=values[val].text#</option>\' +\n\t                                                \'#}#\' +\n\t                                            \'</select>\' +\n\t                                        \'#}else{#\' +\n\t                                            \'<input id="value_#=filterMenuGuid#" title="#=messages.value#" data-#=ns#bind="value:filters[0].value" class="k-value-input" type="#=inputType#" autocomplete="\'+AUTOCOMPLETEVALUE+\'" />\' +\n\t                                        \'#}#\' +\n\t                                    \'</span>\' +\n\t                                \'</label>\' +\n\t                            \'</li>\' +\n\t                        \'</ul>\' +\n\t                        \'#if(extra){#\' +\n\t                        \'<ul class="k-listgroup k-listgroup-flush">\' +\n\t                            \'<li class="k-item k-listgroup-item">\' +\n\t                                \'<label class="k-listgroup-form-row k-label">\' +\n\t                                    \'<span class="k-listgroup-form-field-label k-filter-logic-and-text">#=messages.and#</span>\' +\n\t                                    \'<span class="k-listgroup-form-field-wrapper">\' +\n\t                                        \'<input id="and_#=filterMenuGuid#" title="#=messages.and#" type="radio" name="logic"data-#=ns#bind="checked: logic" value="and" autocomplete="\'+AUTOCOMPLETEVALUE+\'" />\' +\n\t                                    \'</span>\' +\n\t                                \'</label>\' +\n\t                            \'</li>\' +\n\t                            \'<li class="k-item k-listgroup-item">\' +\n\t                                \'<label class="k-listgroup-form-row k-label">\' +\n\t                                    \'<span class="k-listgroup-form-field-label k-filter-logic-or-text">#=messages.or#</span>\' +\n\t                                    \'<span class="k-listgroup-form-field-wrapper">\' +\n\t                                        \'<input id="or_#=filterMenuGuid#" title="#=messages.or#" type="radio" name="logic" data-#=ns#bind="checked: logic" value="or" autocomplete="\'+AUTOCOMPLETEVALUE+\'" />\' +\n\t                                    \'</span>\' +\n\t                                \'</label>\' +\n\t                            \'</li>\' +\n\t                        \'</ul>\' +\n\t                        \'<ul class="k-listgroup k-listgroup-flush">\' +\n\t                            \'<li class="k-item k-listgroup-item">\' +\n\t                                \'<label class="k-listgroup-form-row k-label">\' +\n\t                                    \'<span class="k-listgroup-form-field-label k-filter-operator-text">#=messages.additionalOperator#</span>\' +\n\t                                    \'<span class="k-listgroup-form-field-wrapper">\' +\n\t                                        \'<select id="additionalOperator_#=filterMenuGuid#" title="#=messages.additionalOperator#" class="k-filter-operator" data-#=ns#bind="value: filters[1].operator" autocomplete="\'+AUTOCOMPLETEVALUE+\'" >\' +\n\t                                            \'#for(var op in operators){#\' +\n\t                                                \'<option value="#=op#">#=operators[op]#</option>\' +\n\t                                            \'#}#\' +\n\t                                        \'</select>\' +\n\t                                    \'</span>\' +\n\t                                \'</label>\' +\n\t                            \'</li>\' +\n\t                            \'<li class="k-item k-listgroup-item">\' +\n\t                                \'<label class="k-listgroup-form-row k-label">\' +\n\t                                    \'<span class="k-listgroup-form-field-label k-filter-input-text">#=messages.additionalValue#</span>\' +\n\t                                    \'<span class="k-listgroup-form-field-wrapper">\' +\n\t                                        \'#if(values){#\' +\n\t                                            \'<select id="additionalValue_#=filterMenuGuid#" title="#=messages.additionalValue#" data-#=ns#bind="value:filters[1].value" autocomplete="\'+AUTOCOMPLETEVALUE+\'" >\' +\n\t                                                \'<option value="">#=messages.selectValue#</option>\' +\n\t                                                \'#for(var val in values){#\' +\n\t                                                    \'<option value="#=values[val].value#">#=values[val].text#</option>\' +\n\t                                                \'#}#\' +\n\t                                            \'</select>\' +\n\t                                        \'#}else{#\' +\n\t                                            \'<input id="additionalValue_#=filterMenuGuid#" title="#=messages.additionalValue#" data-#=ns#bind="value:filters[1].value" class="k-value-input" type="#=inputType#" autocomplete="\'+AUTOCOMPLETEVALUE+\'" />\' +\n\t                                        \'#}#\' +\n\t                                    \'</span>\' +\n\t                                \'</label>\' +\n\t                            \'</li>\' +\n\t                        \'</ul>\' +\n\t                        \'#}#\' +\n\t                    \'</li>\' +\n\t                    \'<li class="k-item k-clear-wrap">\' +\n\t                        \'<span class="k-list-title">&nbsp;</span>\' +\n\t                        \'<ul class="k-listgroup k-listgroup-flush">\' +\n\t                            \'<li class="k-listgroup-item">\' +\n\t                                \'<span class="k-link k-label k-clear" title="#=messages.clear#" aria-label="#=messages.clear#">\' +\n\t                                    \'#=messages.clear#\' +\n\t                                \'</span>\' +\n\t                            \'</li>\' +\n\t                        \'</ul>\' +\n\t                    \'</li>\' +\n\t                \'</ul>\' +\n\t            \'</form>\' +\n\t        \'</div>\';\n\n\t    var booleanMobileTemplate =\n\t        \'<div data-#=ns#role="view" class="k-grid-filter-menu">\' +\n\t            \'<div data-#=ns#role="header" class="k-header">\' +\n\t                \'<a href="\\\\#" class="k-header-cancel k-link" title="#=messages.cancel#" \' +\n\t                \'aria-label="#=messages.cancel#"><span class="k-icon k-i-arrow-chevron-left"></span></a>\' +\n\t                \'#=messages.filter# #=messages.into# #=title#\' +\n\t                \'<a href="\\\\#" class="k-header-done k-link" title="#=messages.done#" \' +\n\t                \'aria-label="#=messages.done#"><span class="k-icon k-i-check"></span></a>\' +\n\t            \'</div>\' +\n\t            \'<form title="#=messages.title#" class="k-filter-menu">\' +\n\t                \'<ul class="k-reset">\' +\n\t                    \'<li>\' +\n\t                        \'<span class="k-list-title k-filter-help-text">#=messages.info#</span>\' +\n\t                        \'<ul class="k-listgroup k-listgroup-flush k-multicheck-bool-wrap">\' +\n\t                            \'<li class="k-item k-listgroup-item">\' +\n\t                                \'<label class="k-listgroup-form-row k-label">\' +\n\t                                    \'<span class="k-listgroup-form-field-label k-item-title">#=messages.isTrue#</span>\' +\n\t                                    \'<span class="k-listgroup-form-field-wrapper"></span>\' +\n\t                                        \'<input id="true_#=filterMenuGuid#" title="#=messages.isTrue#" type="radio" data-#=ns#bind="checked: filters[0].value" value="true" name="filters[0].value" autocomplete="\'+AUTOCOMPLETEVALUE+\'" />\' +\n\t                                    \'</span>\' +\n\t                                \'</label>\' +\n\t                            \'</li>\' +\n\t                            \'<li class="k-item k-listgroup-item">\' +\n\t                                \'<label class="k-listgroup-form-row k-label">\' +\n\t                                    \'<span for="false_#=filterMenuGuid#" class="k-listgroup-form-field-label k-item-title">#=messages.isFalse#</span>\' +\n\t                                    \'<span class="k-listgroup-form-field-wrapper">\' +\n\t                                        \'<input id="false_#=filterMenuGuid#" title="#=messages.isFalse#" type="radio" data-#=ns#bind="checked: filters[0].value" value="false" name="filters[0].value" autocomplete="\'+AUTOCOMPLETEVALUE+\'" />\' +\n\t                                    \'</span>\' +\n\t                                \'</label>\'+\n\t                            \'</li>\' +\n\t                        \'</ul>\'+\n\t                    \'</li>\'+\n\t                    \'<li class="k-item k-clear-wrap">\' +\n\t                        \'<span class="k-list-title">&nbsp;</span>\' +\n\t                        \'<ul class="k-listgroup k-listgroup-flush">\' +\n\t                            \'<li class="k-listgroup-item">\' +\n\t                                \'<span class="k-link k-label k-clear" title="#=messages.clear#" aria-label="#=messages.clear#">\' +\n\t                                    \'#=messages.clear#\' +\n\t                                \'</span>\' +\n\t                            \'</li>\' +\n\t                        \'</ul>\' +\n\t                    \'</li>\' +\n\t                \'</ul>\' +\n\t            \'</form>\' +\n\t        \'</div>\';\n\n\t    function removeFiltersForField(expression, field) {\n\t        if (expression.filters) {\n\t            expression.filters = $.grep(expression.filters, function(filter) {\n\t                removeFiltersForField(filter, field);\n\t                if (filter.filters) {\n\t                    return filter.filters.length;\n\t                } else {\n\t                    return filter.field != field;\n\t                }\n\t            });\n\t        }\n\t    }\n\n\t    function convertItems(items) {\n\t        var idx,\n\t            length,\n\t            item,\n\t            value,\n\t            text,\n\t            result;\n\n\t        if (items && items.length) {\n\t            result = [];\n\t            for (idx = 0, length = items.length; idx < length; idx++) {\n\t                item = items[idx];\n\t                text = item.text !== "" ? item.text || item.value || item : item.text;\n\t                value = item.value == null ? (item.text || item) : item.value;\n\n\t                result[idx] = { text: text, value: value };\n\t            }\n\t        }\n\t        return result;\n\t    }\n\n\n\t    function clearFilter(filters, field) {\n\t        return $.grep(filters, function(expr) {\n\t            if (expr.filters) {\n\t                expr.filters = $.grep(expr.filters, function(nested) {\n\t                    return nested.field != field;\n\t                });\n\n\t                return expr.filters.length;\n\t            }\n\t            return expr.field != field;\n\t        });\n\t    }\n\n\t    var FilterMenu = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this,\n\t                type = "string",\n\t                operators,\n\t                initial,\n\t                link,\n\t                field;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            operators = that.operators = options.operators || {};\n\n\t            element = that.element;\n\t            options = that.options;\n\n\t            if (!options.appendToElement) {\n\t                link = element.addClass("k-with-icon k-filterable").find(".k-grid-filter");\n\n\t                if (!link[0]) {\n\t                    link = element.prepend(\'<a class="k-grid-filter" href="#" title="\' +\n\t                        options.messages.filter + \'" aria-label="\' +\n\t                        options.messages.filter + \'"><span class="k-icon k-i-filter"></span></a>\').find(".k-grid-filter");\n\t                }\n\n\t                link.attr("tabindex", -1).on("click" + NS, proxy(that._click, that));\n\t            }\n\n\t            that.link = link || $();\n\n\t            that.dataSource = DataSource.create(options.dataSource);\n\n\t            that.field = options.field || element.attr(kendo.attr("field"));\n\n\t            that.model = that.dataSource.reader.model;\n\n\t            that._parse = function(value) {\n\t                 return value != null ? (value + "") : value;\n\t            };\n\n\t            if (that.model && that.model.fields) {\n\t                field = that.model.fields[that.field];\n\n\t                if (field) {\n\t                    type = field.type || "string";\n\t                    if (field.parse) {\n\t                        that._parse = proxy(field.parse, field);\n\t                    }\n\t                }\n\t            }\n\n\t            if (options.values) {\n\t                type = "enums";\n\t            }\n\n\t            that.type = type;\n\n\t            operators = operators[type] || options.operators[type];\n\n\t            for (initial in operators) { // get the first operator\n\t                break;\n\t            }\n\n\t            that._defaultFilter = function() {\n\t                return { field: that.field, operator: initial || "eq", value: "" };\n\t            };\n\n\t            that._refreshHandler = proxy(that.refresh, that);\n\n\t            that.dataSource.bind(CHANGE, that._refreshHandler);\n\n\t            if (options.appendToElement) { // force creation if used in column menu\n\t                that._init();\n\t            } else {\n\t                that.refresh(); //refresh if DataSource is fitered before menu is created\n\t            }\n\t        },\n\n\t        _init: function() {\n\t            var that = this,\n\t                ui = that.options.ui,\n\t                setUI = isFunction(ui),\n\t                role;\n\n\t            that.pane = that.options.pane;\n\t            if (that.pane) {\n\t                that._isMobile = true;\n\t            }\n\n\t            if (!setUI) {\n\t                role = ui || roles[that.type];\n\t            }\n\n\t            if (that._isMobile) {\n\t                that._createMobileForm(role);\n\t            } else {\n\t                that._createForm(role);\n\t            }\n\n\t            that.form\n\t                .on("submit" + NS, proxy(that._submit, that))\n\t                .on("reset" + NS, proxy(that._reset, that));\n\n\t            if (setUI) {\n\t                that.form.find(".k-textbox")\n\t                    .removeClass("k-textbox")\n\t                    .each(function() {\n\t                        ui($(this));\n\t                    });\n\t            }\n\n\t            that.form\n\t                 .find("[" + kendo.attr("role") + "=numerictextbox]")\n\t                 .removeClass("k-textbox")\n\t                 .end()\n\t                 .find("[" + kendo.attr("role") + "=datetimepicker]")\n\t                 .removeClass("k-textbox")\n\t                 .end()\n\t                 .find("[" + kendo.attr("role") + "=timepicker]")\n\t                 .removeClass("k-textbox")\n\t                 .end()\n\t                 .find("[" + kendo.attr("role") + "=datepicker]")\n\t                 .removeClass("k-textbox");\n\n\t            that.refresh();\n\n\t            that.trigger(INIT, { field: that.field, container: that.form });\n\n\t            kendo.cycleForm(that.form);\n\t        },\n\n\t        _createForm: function(role) {\n\t            var that = this,\n\t                options = that.options,\n\t                operators = that.operators || {},\n\t                type = that.type,\n\t                hasCustomTemplate = isFunction(that.options.ui);\n\n\t            operators = operators[type] || options.operators[type];\n\n\t            that.form = $(\'<form title="\' + that.options.messages.title + \'" class="k-filter-menu"/>\')\n\t                .html(kendo.template(type === "boolean" ? (hasCustomTemplate ? customBooleanTemplate : booleanTemplate) : defaultTemplate)({\n\t                    field: that.field,\n\t                    format: options.format,\n\t                    ns: kendo.ns,\n\t                    messages: options.messages,\n\t                    extra: options.extra,\n\t                    operators: operators,\n\t                    type: type,\n\t                    role: role,\n\t                    values: convertItems(options.values)\n\t                }));\n\n\t            if (!options.appendToElement) {\n\t                that.popup = that.form[POPUP]({\n\t                    anchor: that.link,\n\t                    open: proxy(that._open, that),\n\t                    activate: proxy(that._activate, that),\n\t                    close: function() {\n\t                        if (that.options.closeCallback) {\n\t                            that.options.closeCallback(that.element);\n\t                        }\n\t                    }\n\t                }).data(POPUP);\n\t            } else {\n\t                that.element.append(that.form);\n\t                that.popup = that.element.closest(".k-popup").data(POPUP);\n\t            }\n\n\t            that.form\n\t                .on("keydown" + NS, proxy(that._keydown, that));\n\t        },\n\n\t        _createMobileForm: function(role) {\n\t            var that = this,\n\t                options = that.options,\n\t                operators = that.operators || {},\n\t                filterMenuGuid = kendo.guid(),\n\t                type = that.type;\n\n\t            operators = operators[type] || options.operators[type];\n\n\t            that.form = $("<div />")\n\t                .html(kendo.template(type === "boolean" ? booleanMobileTemplate : defaultMobileTemplate)({\n\t                    field: that.field,\n\t                    title: options.title || that.field,\n\t                    format: options.format,\n\t                    ns: kendo.ns,\n\t                    messages: options.messages,\n\t                    extra: options.extra,\n\t                    operators: operators,\n\t                    filterMenuGuid: filterMenuGuid,\n\t                    type: type,\n\t                    role: role,\n\t                    inputType: mobileRoles[type],\n\t                    values: convertItems(options.values)\n\t                }));\n\n\t            that.view = that.pane.append(that.form.html());\n\t            that.form = that.view.element.find("form");\n\n\t            that.view.element\n\t                .on("click", ".k-header-done", function(e) {\n\t                    that.form.submit();\n\t                    e.preventDefault();\n\t                })\n\t                .on("click", ".k-header-cancel", function(e) {\n\t                    that._closeForm();\n\t                    e.preventDefault();\n\t                })\n\t                .on("click", ".k-clear", function(e) {\n\t                    that._mobileClear();\n\t                    e.preventDefault();\n\t                });\n\n\t            that.view.bind("showStart", function() {\n\t                that.refresh();\n\t            });\n\t        },\n\n\t        refresh: function() {\n\t            var that = this,\n\t                expression = that.dataSource.filter() || { filters: [], logic: "and" };\n\n\t            var defaultFilters = [ that._defaultFilter() ];\n\t            var defaultOperator = that._defaultFilter().operator;\n\t            if (that.options.extra || (defaultOperator !== "isnull" && defaultOperator !== "isnullorempty" && defaultOperator !== "isnotnullorempty" && defaultOperator !== "isnotnull" && defaultOperator !== "isempty" && defaultOperator !== "isnotempty")) {\n\t                defaultFilters.push(that._defaultFilter());\n\t            }\n\n\t            that.filterModel = kendo.observable({\n\t                logic: "and",\n\t                filters: defaultFilters\n\t            });\n\n\t            if (that.form) {\n\t                //NOTE: binding the form element directly causes weird error in IE when grid is bound through MVVM and column is sorted\n\t                kendo.bind(that.form.children().first(), that.filterModel);\n\t            }\n\n\t            if (that._bind(expression)) {\n\t                that.link.addClass("k-state-active");\n\t            } else {\n\t                that.link.removeClass("k-state-active");\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            if (that.form) {\n\t                kendo.unbind(that.form);\n\t                kendo.destroy(that.form);\n\t                that.form.unbind(NS);\n\t                if (that.popup) {\n\t                    that.popup.destroy();\n\t                    that.popup = null;\n\t                }\n\t                that.form = null;\n\t            }\n\n\t            if (that.view) {\n\t                that.view.purge();\n\t                that.view = null;\n\t            }\n\n\t            that.link.unbind(NS);\n\n\t            if (that._refreshHandler) {\n\t                that.dataSource.unbind(CHANGE, that._refreshHandler);\n\t                that.dataSource = null;\n\t            }\n\n\t            that.element = that.link = that._refreshHandler = that.filterModel = null;\n\t        },\n\n\t        _bind: function(expression) {\n\t            var that = this,\n\t                filters = expression.filters,\n\t                idx,\n\t                length,\n\t                found = false,\n\t                current = 0,\n\t                filterModel = that.filterModel,\n\t                currentFilter,\n\t                filter;\n\n\t            for (idx = 0, length = filters.length; idx < length; idx++) {\n\t                filter = filters[idx];\n\t                if (filter.field == that.field) {\n\t                    filterModel.set("logic", expression.logic);\n\n\t                    currentFilter = filterModel.filters[current];\n\t                    if (!currentFilter) {\n\t                        filterModel.filters.push({ field: that.field });\n\t                        currentFilter = filterModel.filters[current];\n\t                    }\n\t                    currentFilter.set("value", that._parse(filter.value));\n\t                    currentFilter.set("operator", filter.operator);\n\n\t                    current++;\n\t                    found = true;\n\t                } else if (filter.filters) {\n\t                    found = found || that._bind(filter);\n\t                }\n\t            }\n\n\t            return found;\n\t        },\n\n\t        _stripFilters: function(filters) {\n\t           return $.grep(filters, function(filter) {\n\t               return (filter.value !== "" && filter.value != null) ||\n\t               (filter.operator === "isnull" || filter.operator === "isnotnull" ||\n\t                   filter.operator === "isempty" || filter.operator === "isnotempty" ||\n\t                   filter.operator == "isnullorempty" || filter.operator == "isnotnullorempty");\n\t            });\n\t        },\n\n\t        _merge: function(expression) {\n\t            var that = this,\n\t                logic = expression.logic || "and",\n\t                filters = this._stripFilters(expression.filters),\n\t                filter,\n\t                result = that.dataSource.filter() || { filters:[], logic: "and" },\n\t                idx,\n\t                length;\n\n\t            removeFiltersForField(result, that.field);\n\n\t            for (idx = 0, length = filters.length; idx < length; idx++) {\n\t                filter = filters[idx];\n\t                filter.value = that._parse(filter.value);\n\t            }\n\n\t            if (filters.length) {\n\t                if (result.filters.length) {\n\t                    expression.filters = filters;\n\n\t                    if (result.logic !== "and") {\n\t                        result.filters = [ { logic: result.logic, filters: result.filters }];\n\t                        result.logic = "and";\n\t                    }\n\n\t                    if (filters.length > 1) {\n\t                        result.filters.push(expression);\n\t                    } else {\n\t                        result.filters.push(filters[0]);\n\t                    }\n\t                } else {\n\t                    result.filters = filters;\n\t                    result.logic = logic;\n\t                }\n\t            }\n\n\t            return result;\n\t        },\n\n\t        filter: function(expression) {\n\t            var filters = this._stripFilters(expression.filters);\n\t            if (filters.length && this.trigger("change", {\n\t                    filter: { logic: expression.logic, filters: filters },\n\t                    field: this.field\n\t                })) {\n\n\t                return;\n\t            }\n\n\t            expression = this._merge(expression);\n\n\t            if (expression.filters.length) {\n\t                this.dataSource.filter(expression);\n\t            }\n\t        },\n\n\t        clear: function() {\n\t            var that = this,\n\t                expression = that.dataSource.filter() || { filters:[] };\n\n\t            if (this.trigger("change", { filter: null, field: that.field })) {\n\t                return;\n\t            }\n\n\t            that._removeFilter(expression);\n\t        },\n\n\t        _mobileClear: function() {\n\t            var that = this;\n\t            var viewElement = that.view.element;\n\n\t            if (that.type ==="boolean") {\n\t                var booleanRadioButton = viewElement.find("[type=\'radio\']:checked");\n\t                var booleanRadioButtonValue = booleanRadioButton.val();\n\n\t                booleanRadioButton.val("");\n\t                booleanRadioButton.trigger("change");\n\t                booleanRadioButton.val(booleanRadioButtonValue);\n\t                booleanRadioButton.prop("checked", false);\n\t            } else {\n\t                var operatorSelects = viewElement.find("select");\n\n\t                operatorSelects.each(function(i, e) {\n\t                    var input = $(e);\n\n\t                    input.val(input.find("option:first").val());\n\t                    input.trigger("change");\n\t                });\n\n\t                if (that.type ==="string" || that.type ==="date" || that.type ==="number") {\n\t                    var valueInputs = viewElement.find(".k-value-input");\n\n\t                    valueInputs.each(function(i, e) {\n\t                        var input = $(e);\n\n\t                        input.val("");\n\t                        input.trigger("change");\n\t                    });\n\t                }\n\n\t                if (that.options.extra) {\n\t                    var andLogicRadio = viewElement.find("[name=logic]").first();\n\n\t                    andLogicRadio.prop("checked", true);\n\t                    andLogicRadio.trigger("change");\n\t                }\n\t            }\n\t        },\n\n\t        _removeFilter: function(expression) {\n\t            var that = this;\n\t            expression.filters = $.grep(expression.filters, function(filter) {\n\t                if (filter.filters) {\n\t                    filter.filters = clearFilter(filter.filters, that.field);\n\n\t                    return filter.filters.length;\n\t                }\n\n\t                return filter.field != that.field;\n\t            });\n\n\t            if (!expression.filters.length) {\n\t                expression = null;\n\t            }\n\n\t            that.dataSource.filter(expression);\n\t        },\n\n\t        _submit: function(e) {\n\t            e.preventDefault();\n\t            e.stopPropagation();\n\t            var expression = this.filterModel.toJSON();\n\t            var containsFilters = $.grep(expression.filters, function(filter) {\n\t                return filter.value !== "" && filter.value !== null;\n\t            });\n\n\t            if (this._checkForNullOrEmptyFilter(expression) || (containsFilters && containsFilters.length)) {\n\t                this.filter(expression);\n\t            } else {\n\t                var currentExpression = this.dataSource.filter();\n\n\t                if (currentExpression) {\n\t                    currentExpression.filters.push(expression);\n\t                    expression = currentExpression;\n\t                }\n\t                this._removeFilter(expression);\n\t            }\n\n\t            this._closeForm();\n\t        },\n\n\t        _checkForNullOrEmptyFilter: function(expression) {\n\t            if(!expression || !expression.filters || !expression.filters.length) {\n\t                return false;\n\t            }\n\t            var firstNullOrEmpty = false;\n\t            var secondNullOrEmpty = false;\n\t            var operator;\n\n\t            if (expression.filters[0]) {\n\t                operator = expression.filters[0].operator;\n\t                firstNullOrEmpty = operator == "isnull" || operator == "isnotnull" || operator == "isnotempty" ||\n\t                    operator == "isempty" || operator == "isnullorempty" || operator == "isnotnullorempty";\n\t            }\n\t            if (expression.filters[1]) {\n\t                operator = expression.filters[1].operator;\n\t                secondNullOrEmpty = operator == "isnull" || operator == "isnotnull" || operator == "isnotempty" ||\n\t                    operator == "isempty" || operator == "isnullorempty" || operator == "isnotnullorempty";\n\t            }\n\n\t            return (!this.options.extra && firstNullOrEmpty) || (this.options.extra && (firstNullOrEmpty || secondNullOrEmpty));\n\t        },\n\n\t        _reset: function() {\n\t            this.clear();\n\n\t            if (this.options.search && this.container) {\n\t                this.container.find("label").parent().show();\n\t            }\n\t            this._closeForm();\n\t        },\n\n\t        _closeForm: function() {\n\t            if (this._isMobile) {\n\t                this.pane.navigate("", this.options.animations.right);\n\t            } else {\n\t                this.popup.close();\n\t            }\n\t        },\n\n\t        _click: function(e) {\n\t            e.preventDefault();\n\t            e.stopPropagation();\n\n\t            if (!this.popup && !this.pane) {\n\t                this._init();\n\t            }\n\n\t            if (this._isMobile) {\n\t                this.pane.navigate(this.view, this.options.animations.left);\n\t            } else {\n\t                this.popup.toggle();\n\t            }\n\t        },\n\n\t        _open: function() {\n\t            var popup;\n\n\t            $(".k-filter-menu").not(this.form).each(function() {\n\t                popup = $(this).data(POPUP);\n\t                if (popup) {\n\t                    popup.close();\n\t                }\n\t            });\n\t        },\n\n\t        _activate: function() {\n\t            this.form.find(":kendoFocusable:first").focus();\n\n\t            this.trigger(OPEN, { field: this.field, container: this.form });\n\t        },\n\n\t        _keydown: function(e) {\n\t            if (e.keyCode == kendo.keys.ESC) {\n\t                this.popup.close();\n\t            }\n\t        },\n\n\t        events: [ INIT, "change", OPEN ],\n\n\t        options: {\n\t            name: "FilterMenu",\n\t            extra: true,\n\t            appendToElement: false,\n\t            type: "string",\n\t            operators: {\n\t                string: {\n\t                    eq: EQ,\n\t                    neq: NEQ,\n\t                    startswith: "Starts with",\n\t                    contains: "Contains",\n\t                    doesnotcontain: "Does not contain",\n\t                    endswith: "Ends with",\n\t                    isnull: "Is null",\n\t                    isnotnull: "Is not null",\n\t                    isempty: "Is empty",\n\t                    isnotempty: "Is not empty",\n\t                    isnullorempty: "Has no value",\n\t                    isnotnullorempty: "Has value"\n\t                },\n\t                number: {\n\t                    eq: EQ,\n\t                    neq: NEQ,\n\t                    gte: "Is greater than or equal to",\n\t                    gt: "Is greater than",\n\t                    lte: "Is less than or equal to",\n\t                    lt: "Is less than",\n\t                    isnull: "Is null",\n\t                    isnotnull: "Is not null"\n\t                },\n\t                date: {\n\t                    eq: EQ,\n\t                    neq: NEQ,\n\t                    gte: "Is after or equal to",\n\t                    gt: "Is after",\n\t                    lte: "Is before or equal to",\n\t                    lt: "Is before",\n\t                    isnull: "Is null",\n\t                    isnotnull: "Is not null"\n\t                },\n\t                enums: {\n\t                    eq: EQ,\n\t                    neq: NEQ,\n\t                    isnull: "Is null",\n\t                    isnotnull: "Is not null"\n\t                }\n\t            },\n\t            messages: {\n\t                info: "Show items with value that:",\n\t                title: "Show items with value that:",\n\t                isTrue: "is true",\n\t                isFalse: "is false",\n\t                filter: "Filter",\n\t                clear: "Clear",\n\t                and: "And",\n\t                or: "Or",\n\t                selectValue: "-Select value-",\n\t                operator: "Operator",\n\t                value: "Value",\n\t                additionalValue: "Additional value",\n\t                additionalOperator: "Additional operator",\n\t                logic: "Filters logic",\n\t                cancel: "Cancel",\n\t                done: "Done",\n\t                into: "in"\n\t            },\n\t            animations: {\n\t                left: "slide",\n\t                right: "slide:right"\n\t            }\n\t        }\n\t    });\n\n\t    var multiCheckNS = ".kendoFilterMultiCheck";\n\n\t    function filterValuesForField(expression, field) {\n\n\t        if (expression.filters) {\n\t            expression.filters = $.grep(expression.filters, function(filter) {\n\t                filterValuesForField(filter, field);\n\t                if (filter.filters) {\n\t                    return filter.filters.length;\n\t                } else {\n\t                    return filter.field == field && filter.operator == "eq";\n\t                }\n\t            });\n\t        }\n\t    }\n\n\t    function flatFilterValues(expression) {\n\t        if (expression.logic == "and" && expression.filters.length > 1) {\n\t            return [];\n\t        }\n\t        if (expression.filters) {\n\t            return $.map(expression.filters, function(filter) {\n\t                return flatFilterValues(filter);\n\t            });\n\t        } else if (expression.value !== undefined) {\n\t            return [expression.value];\n\t        } else {\n\t            return [];\n\t        }\n\t    }\n\n\t    function distinct(items, field) {\n\t        var getter = kendo.getter(field, true),\n\t            result = [],\n\t            index = 0,\n\t            seen = {};\n\n\t        while (index < items.length) {\n\t            var item = items[index++],\n\t                text = getter(item);\n\n\t            if(text !== undefined && !seen.hasOwnProperty(text)){\n\t                result.push(item);\n\t                seen[text] = true;\n\t            }\n\t        }\n\n\t        return result;\n\t    }\n\n\t    function removeDuplicates (dataSelector, dataTextField) {\n\n\t        return function(e) {\n\t            var items = dataSelector(e);\n\n\t            return distinct(items, dataTextField);\n\t        };\n\t    }\n\n\t    var DataSource = kendo.data.DataSource;\n\n\t    var multiCkeckMobileTemplate =\n\t        \'<div data-#=ns#role="view" class="k-grid-filter-menu">\' +\n\t            \'<div data-#=ns#role="header" class="k-header">\' +\n\t                \'<a href="\\\\#" class="k-header-cancel k-link" title="#=messages.cancel#" \' +\n\t                \'aria-label="#=messages.cancel#"><span class="k-icon k-i-arrow-chevron-left"></span></a>\' +\n\t                \'#=messages.filter# #=messages.into# #=title#\' +\n\t                \'<a href="\\\\#" class="k-header-done k-link" title="#=messages.done#" \' +\n\t                \'aria-label="#=messages.done#"><span class="k-icon k-i-check"></span></a>\' +\n\t            \'</div>\' +\n\t            \'<form class="k-filter-menu">\' +\n\t                \'<ul class="k-reset">\' +\n\t                    \'#if(search){#\' +\n\t                        \'<li class="k-textbox k-space-right">\' +\n\t                            \'<input placeholder="#=messages.search#" title="#=messages.search#" autocomplete="\'+AUTOCOMPLETEVALUE+\'"  />\' +\n\t                            \'<span class="k-icon k-i-zoom"></span>\' +\n\t                        \'</li>\' +\n\t                    \'#}#\' +\n\t                    \'<li class="k-filter-tools">\' +\n\t                        \'<span style="#=checkAll ? "" : "visibility: hidden;" #" class="k-label k-select-all" title="#=messages.checkAll#" \' +\n\t                        \'aria-label="#=messages.checkAll#">#=messages.checkAll#</span>\' +\n\t                        \'<span class="k-label k-clear-all" title="#=messages.clearAll#" \' +\n\t                        \'aria-label="#=messages.clearAll#">#=messages.clearAll#</span>\' +\n\t                    \'</li>\' +\n\t                    \'#if(messages.selectedItemsFormat){#\' +\n\t                        \'<li>\' +\n\t                            \'<div class="k-filter-selected-items"></div>\' +\n\t                        \'</li>\' +\n\t                    \'#}#\' +\n\t                    \'<li>\' +\n\t                        \'<ul class="k-multicheck-wrap k-listgroup k-listgroup-flush"></ul>\' +\n\t                    \'</li>\' +\n\t                \'</ul>\' +\n\t            \'</form>\' +\n\t        \'</div>\';\n\n\t    var FilterMultiCheck = Widget.extend({\n\t        init: function(element, options) {\n\t            Widget.fn.init.call(this, element, options);\n\t            options = this.options;\n\t            this.element = $(element);\n\t            var field = this.field = this.options.field || this.element.attr(kendo.attr("field"));\n\t            var checkSource = options.checkSource;\n\t            if (this._foreignKeyValues()) {\n\t                this.checkSource = DataSource.create(options.values);\n\t                this.checkSource.fetch();\n\t            } else if (options.forceUnique) {\n\t                checkSource = $.extend(true, {}, options.dataSource.options);\n\t                delete checkSource.pageSize;\n\n\t                this.checkSource = DataSource.create(checkSource);\n\t                this.checkSource.reader.data = removeDuplicates(this.checkSource.reader.data, this.field);\n\t            } else {\n\t                this.checkSource = DataSource.create(checkSource);\n\t            }\n\n\t            this.dataSource = options.dataSource;\n\t            this.model = this.dataSource.reader.model;\n\n\t            this._parse = function(value) {\n\t                 return value + "";\n\t            };\n\n\t            if (this.model && this.model.fields) {\n\t                field = this.model.fields[this.field];\n\n\t                if (field) {\n\t                    if (field.type == "number") {\n\t                        this._parse = function (value) {\n\t                            if (typeof value === "string" && value.toLowerCase() === "null") {\n\t                                return null;\n\t                            }\n\t                            return parseFloat(value);\n\t                        };\n\t                    } else if (field.parse) {\n\t                        this._parse = proxy(field.parse, field);\n\t                    }\n\t                    this.type = field.type || "string";\n\t                }\n\t            }\n\t            if (!options.appendToElement) {\n\t                this._createLink();\n\t            } else {\n\t                this._init();\n\t            }\n\n\t            this._refreshHandler = proxy(this.refresh, this);\n\t            this.dataSource.bind(CHANGE, this._refreshHandler);\n\n\t        },\n\t        _createLink: function() {\n\t            var element = this.element;\n\t            var link = element.addClass("k-with-icon k-filterable").find(".k-grid-filter");\n\n\t            if (!link[0]) {\n\t                link = element.prepend(\'<a class="k-grid-filter" href="#" title="\' +\n\t                this.options.messages.filter + \'" aria-label="\' +\n\t                this.options.messages.filter + \'"><span class="k-icon k-i-filter"></span></a>\').find(".k-grid-filter");\n\t            }\n\n\t            this._link = link.attr("tabindex", -1).on("click" + NS, proxy(this._click, this));\n\t        },\n\t        _init: function() {\n\t            var that = this;\n\t            var forceUnique = this.options.forceUnique;\n\n\t            var options = this.options;\n\t            this.pane = options.pane;\n\n\t            if (this.pane) {\n\t                this._isMobile = true;\n\t            }\n\n\t            this._createForm();\n\n\t            if (this._foreignKeyValues()) {\n\t                this.refresh();\n\t            } else if (forceUnique && !this.checkSource.options.serverPaging && this.dataSource.data().length) {\n\t                this.checkSource.data(distinct(this.dataSource.data(),this.field));\n\t                this.refresh();\n\t            } else {\n\t                this._attachProgress();\n\n\t                this.checkSource.fetch(function() {\n\t                    that.refresh.call(that);\n\t                });\n\t            }\n\n\t            if (!this.options.forceUnique) {\n\t                this.checkChangeHandler = function() {\n\t                    that.container.empty();\n\t                    that.refresh();\n\t                };\n\t                this.checkSource.bind(CHANGE, this.checkChangeHandler);\n\t            }\n\n\t            this.form.on("keydown" + multiCheckNS, proxy(this._keydown, this))\n\t                        .on("submit" + multiCheckNS, proxy(this._filter, this))\n\t                        .on("reset" + multiCheckNS, proxy(this._reset, this));\n\n\t            this.trigger(INIT, { field: this.field, container: this.form });\n\t        },\n\n\t        _attachProgress: function() {\n\t            var that = this;\n\n\t            this._progressHandler = function() {\n\t                ui.progress(that.container, true);\n\t            };\n\n\t            this._progressHideHandler = function() {\n\t                ui.progress(that.container, false);\n\t            };\n\n\t            this.checkSource\n\t                .bind("progress", this._progressHandler)\n\t                .bind("change", this._progressHideHandler);\n\t        },\n\n\t        _input: function () {\n\t            var that = this;\n\t            that._clearTypingTimeout();\n\t            that._typingTimeout = setTimeout(function () { that.search(); }, 100);\n\t        },\n\n\t        _clearTypingTimeout: function() {\n\t            if (this._typingTimeout) {\n\t                clearTimeout(this._typingTimeout);\n\t                this._typingTimeout = null;\n\t            }\n\t        },\n\n\t        search: function () {\n\t            var ignoreCase = this.options.ignoreCase;\n\t            var searchString = this.searchTextBox[0].value;\n\t            var labels = this.container.find("label");\n\n\t            if (ignoreCase) {\n\t                searchString = searchString.toLowerCase();\n\t            }\n\t            var i = 0;\n\t            if(this.options.checkAll && labels.length)\n\t            {\n\t                if (!this._isMobile) {\n\t                    labels[0].parentNode.style.display = searchString ? "none" : "";\n\t                    i++;\n\t                } else {\n\t                    this.view.element.find(".k-select-all")[0].style.visibility = searchString ? "hidden" : "";\n\t                }\n\t            }\n\n\t            while (i < labels.length) {\n\t                var label = labels[i];\n\t                var labelText = label.textContent || label.innerText;\n\t                if (ignoreCase) {\n\t                    labelText = labelText.toLowerCase();\n\t                }\n\t                label.parentNode.style.display = labelText.indexOf(searchString) >= 0 ? "" : "none";\n\t                i++;\n\t            }\n\t        },\n\t        _activate: function() {\n\t            this.form.find(":kendoFocusable:first").focus();\n\n\t            this.trigger(OPEN, { field: this.field, container: this.form });\n\t        },\n\t        _createForm: function() {\n\t            var options = this.options;\n\t            var html = "";\n\t            var that = this;\n\n\t            if (!this._isMobile) {\n\t                html+= "<div class=\'k-filter-menu-container\'>";\n\t                if (options.search) {\n\t                    html += "<div class=\'k-textbox k-space-right\'>" +\n\t                    "<input placeholder=\'" + options.messages.search + "\'/>" +\n\t                    "<span class=\'k-icon k-i-zoom\'></span>" +\n\t                    "</div>";\n\t                }\n\t                html += "<ul class=\'k-reset k-multicheck-wrap\'></ul>";\n\t                if (options.messages.selectedItemsFormat) {\n\t                    html += "<div class=\'k-filter-selected-items\'>" + kendo.format(options.messages.selectedItemsFormat, 0) + "</div>";\n\t                }\n\t                html += "<div class=\'k-action-buttons\'>";\n\t                html +="<button type=\'submit\' class=\'k-button k-primary\'>" + options.messages.filter + "</button>";\n\t                html += "<button type=\'reset\' class=\'k-button\'>" + options.messages.clear + "</button>";\n\t                html += "</div>";\n\t                html += "</div>";\n\n\t                this.form = $(\'<form class="k-filter-menu"/>\').html(html);\n\t                this.container = this.form.find(".k-multicheck-wrap");\n\t            }\n\t            if (this._isMobile) {\n\t                that.form = $("<div />")\n\t                    .html(kendo.template(multiCkeckMobileTemplate)({\n\t                        field: that.field,\n\t                        title: options.title || that.field,\n\t                        ns: kendo.ns,\n\t                        messages: options.messages,\n\t                        search: options.search,\n\t                        checkAll: options.checkAll\n\t                    }));\n\n\t                that.view = that.pane.append(that.form.html());\n\t                that.form = that.view.element.find("form");\n\t                var element = this.view.element;\n\t                this.container = element.find(".k-multicheck-wrap");\n\n\t                element\n\t                    .on("click", ".k-header-done", function (e) {\n\t                        that.form.submit();\n\t                        e.preventDefault();\n\t                    })\n\t                    .on("click", ".k-header-cancel", function (e) {\n\t                        that._closeForm();\n\t                        e.preventDefault();\n\t                    })\n\t                    .on("click", ".k-clear-all", function(e) {\n\t                        that._mobileCheckAll(false);\n\t                        e.preventDefault();\n\t                    })\n\t                    .on("click", ".k-select-all", function(e) {\n\t                        that._mobileCheckAll(true);\n\t                        e.preventDefault();\n\t                    });\n\n\t                that.view.bind("showStart", function() {\n\t                    that.refresh();\n\t                });\n\t            } else {\n\t                if (!options.appendToElement) {\n\t                    that.popup = that.form.kendoPopup({\n\t                        anchor: that._link,\n\t                        open: proxy(that._open, that),\n\t                        activate: proxy(that._activate, that),\n\t                        close: function() {\n\t                            if (that.options.closeCallback) {\n\t                                that.options.closeCallback(that.element);\n\t                            }\n\t                        }\n\t                    }).data(POPUP);\n\t                } else {\n\t                    this.popup = this.element.closest(".k-popup").data(POPUP);\n\t                    this.element.append(this.form);\n\t                }\n\t            }\n\n\t            if (options.search) {\n\t                this.searchTextBox = this.form.find(".k-textbox > input");\n\t                this.searchTextBox.on("input", proxy(this._input, this));\n\t            }\n\t        },\n\t        createCheckAllItem: function () {\n\t            var options = this.options;\n\t            var template = kendo.template(options.itemTemplate({ field: "all", mobile: this._isMobile }));\n\t            var checkAllContainer = $(template({ all: options.messages.checkAll}));\n\t            this.container.prepend(checkAllContainer);\n\n\t            this.checkBoxAll = checkAllContainer.find(":checkbox").eq(0).addClass("k-check-all");\n\t            this.checkAllHandler = proxy(this.checkAll, this);\n\t            this.checkBoxAll.on(CHANGE+ multiCheckNS, this.checkAllHandler);\n\t        },\n\t        updateCheckAllState: function() {\n\t            if (this.options.messages.selectedItemsFormat) {\n\t                this.form.find(".k-filter-selected-items").text(kendo.format(this.options.messages.selectedItemsFormat, this.container.find(":checked:not(.k-check-all)").length));\n\t            }\n\t            if (this.checkBoxAll) {\n\t                var state = this.container.find(":checkbox:not(.k-check-all)").length == this.container.find(":checked:not(.k-check-all)").length;\n\t                this.checkBoxAll.prop("checked", state);\n\t            }\n\t        },\n\t        refresh: function(e) {\n\t            var forceUnique = this.options.forceUnique;\n\t            var dataSource = this.dataSource;\n\t            var filters = this.getFilterArray();\n\n\t            if (this._link) {\n\t                this._link.toggleClass("k-state-active", filters.length !== 0);\n\t            }\n\n\t            if (this.form) {\n\t                if (e && forceUnique && e.sender === dataSource && !dataSource.options.serverPaging &&\n\t                     (e.action == "itemchange" || e.action == "add" || e.action == "remove" || (dataSource.options.autoSync && e.action === "sync")) &&\n\t                         !this._foreignKeyValues()) {\n\t                    this.checkSource.data(distinct(this.dataSource.data(),this.field));\n\t                    this.container.empty();\n\t                }\n\n\t                if (this.container.is(":empty")) {\n\t                    this.createCheckBoxes();\n\t                }\n\t                this.checkValues(filters);\n\t                this.trigger(REFRESH);\n\t            }\n\t        },\n\t        getFilterArray: function() {\n\t            var expression = $.extend(true, {}, { filters: [], logic: "and" }, this.dataSource.filter());\n\t            filterValuesForField(expression, this.field);\n\t            var flatValues = flatFilterValues(expression);\n\t            return flatValues;\n\t        },\n\t        createCheckBoxes: function() {\n\t            var options = this.options;\n\t            var data;\n\t            var templateOptions = {\n\t                field: this.field,\n\t                format: options.format,\n\t                mobile: this._isMobile,\n\t                type: this.type\n\t            };\n\n\t            if (!this.options.forceUnique) {\n\t                data = this.checkSource.view();\n\t            } else if (this._foreignKeyValues()) {\n\t                data = this.checkSource.data();\n\t                templateOptions.valueField = "value";\n\t                templateOptions.field = "text";\n\t            } else if (this.checkSource._isServerGrouped()) {\n\t                data = distinct(this.checkSource._flatData(this.checkSource.data()), this.field);\n\t            } else {\n\t                data = this.checkSource.data();\n\t            }\n\n\t            var template = kendo.template(options.itemTemplate(templateOptions));\n\t            var itemsHtml = kendo.render(template, data);\n\t            if (options.checkAll && !this._isMobile) {\n\t                this.createCheckAllItem();\n\t            }\n\t            this.container.on(CHANGE + multiCheckNS, ":checkbox", proxy(this.updateCheckAllState, this));\n\n\t            this.container.append(itemsHtml);\n\n\t        },\n\t        checkAll: function() {\n\t            var state = this.checkBoxAll.is(":checked");\n\t            this.container.find(":checkbox").prop("checked", state);\n\t        },\n\t        checkValues: function(values) {\n\t            var that = this;\n\n\t            $($.grep(this.container.find(":checkbox").prop("checked", false), function(ele) {\n\t                var found = false;\n\t                if ($(ele).is(".k-check-all")) {\n\t                    return;\n\t                }\n\t                var checkBoxVal = that._parse($(ele).val());\n\t                for (var i = 0; i < values.length; i++) {\n\t                    if (that.type == "date") {\n\t                        if (values[i] && checkBoxVal) {\n\t                            found = values[i].getTime() == checkBoxVal.getTime();\n\t                        } else if (values[i] === null && checkBoxVal === null) {\n\t                            found = true;\n\t                        } else {\n\t                            found = false;\n\t                        }\n\t                    } else {\n\t                        found = values[i] == checkBoxVal;\n\t                    }\n\t                    if (found) {\n\t                        return found;\n\t                    }\n\t                }\n\t            })).prop("checked", true);\n\t            this.updateCheckAllState();\n\t        },\n\n\t        _mobileCheckAll: function(state) {\n\t            var that = this;\n\t            var checkboxes = that.container.find(":checkbox");\n\n\t            checkboxes.each(function(i, e) {\n\t                var checkbox = $(e);\n\n\t                checkbox.prop("checked", state);\n\t                checkbox.trigger("change");\n\t            });\n\t        },\n\n\t        _filter: function(e) {\n\t            e.preventDefault();\n\t            e.stopPropagation();\n\n\t            var expression = { logic: "or" };\n\n\t            var that = this;\n\t            expression.filters = $.map(this.form.find(":checkbox:checked:not(.k-check-all)"), function (item) {\n\t                return { value: $(item).val(), operator: "eq", field: that.field };\n\t            });\n\n\t            if (expression.filters.length && this.trigger("change", { filter: expression, field: that.field })) {\n\t                return;\n\t            }\n\n\t            expression = this._merge(expression);\n\t            if (expression.filters.length) {\n\t                this.dataSource.filter(expression);\n\t            } else {\n\t                this.clear();\n\t            }\n\n\t            this._closeForm();\n\t        },\n\n\t        _stripFilters: function(filters) {\n\t           return $.grep(filters, function(filter) {\n\t                return filter.value != null;\n\t            });\n\t        },\n\n\t        _foreignKeyValues: function() {\n\t            var options = this.options;\n\t            return options.values && !options.checkSource;\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            if (that.form) {\n\t                kendo.unbind(that.form);\n\t                kendo.destroy(that.form);\n\t                that.form.unbind(multiCheckNS);\n\t                if (that.popup) {\n\t                    that.popup.destroy();\n\t                    that.popup = null;\n\t                }\n\t                that.form = null;\n\t                if (that.container) {\n\t                    that.container.unbind(multiCheckNS);\n\t                    that.container = null;\n\t                }\n\n\t                if (that.checkBoxAll) {\n\t                    that.checkBoxAll.unbind(multiCheckNS);\n\t                }\n\t            }\n\n\t            if (that.view) {\n\t                that.view.purge();\n\t                that.view = null;\n\t            }\n\n\t            if (that._link) {\n\t                that._link.unbind(NS);\n\t            }\n\n\t            if (that._refreshHandler) {\n\t                that.dataSource.unbind(CHANGE, that._refreshHandler);\n\t                that.dataSource = null;\n\t            }\n\n\t            if (that.checkChangeHandler) {\n\t                that.checkSource.unbind(CHANGE, that.checkChangeHandler);\n\t            }\n\n\t            if (that._progressHandler) {\n\t                that.checkSource.unbind("progress", that._progressHandler);\n\t            }\n\n\t            if (that._progressHideHandler) {\n\t                that.checkSource.unbind("change", that._progressHideHandler);\n\t            }\n\n\t            this._clearTypingTimeout();\n\t            this.searchTextBox = null;\n\n\t            that.element = that.checkSource = that.container = that.checkBoxAll = that._link = that._refreshHandler = that.checkAllHandler = null;\n\t        },\n\t        options: {\n\t            name: "FilterMultiCheck",\n\t            itemTemplate: function(options) {\n\t                var field = options.field;\n\t                var format = options.format;\n\t                var valueField = options.valueField;\n\t                var mobile = options.mobile;\n\t                var valueFormat = "";\n\n\t                if (valueField === undefined) {\n\t                    valueField = field;\n\t                }\n\t                if (options.type == "date") {\n\t                    valueFormat = ":yyyy-MM-ddTHH:mm:sszzz";\n\t                }\n\n\t                if (mobile) {\n\t                    return "<li class=\'k-item k-listgroup-item\'>" +\n\t                            "<label class=\'k-label k-listgroup-form-row\'>" +\n\t                                "<span class=\'k-listgroup-form-field-label k-item-title \'>#:kendo.format(\'" + ( format ?  format  : "{0}" ) + "\', "  + field + ")#</span>" +\n\t                                \'<span class="k-listgroup-form-field-wrapper">\' +\n\t                                    "<input type=\'checkbox\' value=\'#:kendo.format(\'{0"+ valueFormat + "}\'," + valueField + ")#\'/>" +\n\t                                \'</span>\' +\n\t                            "</label>" +\n\t                        "</li>";\n\t                }\n\n\t                return "<li class=\'k-item\'>" +\n\t                        "<label class=\'k-label\'>" +\n\t                            "<input type=\'checkbox\' value=\'#:kendo.format(\'{0"+ valueFormat + "}\'," + valueField + ")#\'/>" +\n\t                            "<span>#:kendo.format(\'" + ( format ?  format  : "{0}" ) + "\', "  + field + ")#</span>" +\n\t                        "</label>" +\n\t                    "</li>";\n\t            },\n\t            checkAll: true,\n\t            search: false,\n\t            ignoreCase: true,\n\t            appendToElement: false,\n\t            messages: {\n\t                checkAll: "Select All",\n\t                clearAll: "Clear All",\n\t                clear: "Clear",\n\t                filter: "Filter",\n\t                search: "Search",\n\t                cancel: "Cancel",\n\t                selectedItemsFormat: "{0} items selected",\n\t                done: "Done",\n\t                into: "in"\n\t            },\n\t            forceUnique: true,\n\t            animations: {\n\t                left: "slide",\n\t                right: "slide:right"\n\t            }\n\t        },\n\t        events: [ INIT, REFRESH, "change", OPEN ]\n\t    });\n\n\t    $.extend(FilterMultiCheck.fn, {\n\t        _click: FilterMenu.fn._click,\n\t        _keydown: FilterMenu.fn._keydown,\n\t        _reset: FilterMenu.fn._reset,\n\t        _closeForm: FilterMenu.fn._closeForm,\n\t        _removeFilter: FilterMenu.fn._removeFilter,\n\t        clear: FilterMenu.fn.clear,\n\n\t        _merge: FilterMenu.fn._merge\n\t    });\n\n\t    ui.plugin(FilterMenu);\n\t    ui.plugin(FilterMultiCheck);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.filtermenu.js?')},"./node_modules/@progress/kendo-ui/js/kendo.floatinglabel.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.floatinglabel.js ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1215);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1215:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (f, define) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1018)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function () {\n\n\tvar __meta__ = {// jshint ignore:line\n\t    id: "floatinglabel",\n\t    name: "FloatingLabel",\n\t    category: "framework",\n\t    depends: ["core"],\n\t    hidden: true\n\t};\n\n\t(function ($, undefined) {\n\t    var kendo = window.kendo,\n\t        Widget = kendo.ui.Widget,\n\t        ui = kendo.ui,\n\t        NS = ".kendoFloatingLabel",\n\t        FLOATINGLABELCONTAINER = "k-floating-label-container",\n\t        EMPTY = "k-state-empty",\n\t        FOCUSED = "k-state-focused",\n\t        STATEDISABLED = "k-state-disabled",\n\t        NOCLICKCLASS = "k-no-click",\n\t        proxy = $.proxy;\n\n\t    var FloatingLabel = Widget.extend({\n\t        init: function (element, options) {\n\t            var that = this;\n\n\t            Widget.fn.init.call(that, element, options);\n\t            options = $.extend(true, {}, options);\n\n\t            that.refresh();\n\t            that._editable({\n\t                readonly: that.options.widget.options.readonly !== undefined ? that.options.widget.options.readonly : false,\n\t                disable: that.options.widget.options.enable !== undefined ? !(that.options.widget.options.enable) : false\n\t            });\n\n\t            that.element.addClass(FLOATINGLABELCONTAINER);\n\n\t            kendo.notify(that);\n\t        },\n\n\t        options: {\n\t            name: \'FloatingLabel\',\n\t            widget: null\n\t        },\n\n\t        readonly: function(readonly) {\n\t            this._editable({\n\t                readonly: readonly === undefined ? true : readonly,\n\t                disable: false\n\t            });\n\t        },\n\n\t        enable: function(enable) {\n\t            this._editable({\n\t                readonly: false,\n\t                disable: !(enable = enable === undefined ? true : enable)\n\t            });\n\t        },\n\n\t        refresh: function () {\n\t            var that = this;\n\t            var element = that.element;\n\n\t            element\n\t                .removeClass(EMPTY)\n\t                .removeClass(FOCUSED);\n\n\n\t            if (!that.options.widget.element.val()) {\n\t                element.addClass(EMPTY);\n\t            }\n\n\t            if (document.activeElement === that.options.widget.element[0]) {\n\t                element.addClass(FOCUSED);\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that.element.off(NS);\n\t            Widget.fn.destroy.call(that);\n\t        },\n\n\t        _editable: function(options) {\n\t            var that = this;\n\t            var element = that.element;\n\t            var disable = options.disable;\n\t            var readonly = options.readonly;\n\n\t            element.off(NS);\n\n\t            if (!readonly && !disable) {\n\t                element\n\t                    .removeClass(STATEDISABLED)\n\t                    .removeClass(NOCLICKCLASS);\n\n\t                element.on("focusin" + NS, proxy(that.refresh, that));\n\t                element.on("focusout" + NS, proxy(that.refresh, that));\n\t            } else {\n\t                element\n\t                    .toggleClass(STATEDISABLED, disable)\n\t                    .toggleClass(NOCLICKCLASS, readonly);\n\t            }\n\t        }\n\t    });\n\t    ui.plugin(FloatingLabel);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.floatinglabel.js?')}}]);