(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{"./node_modules/@progress/kendo-ui/js/spreadsheet/print.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/print.js ***!
  \*****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function($) {module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1569);\n\tmodule.exports = __webpack_require__(1569);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 925:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../util/text-metrics */ "./node_modules/@progress/kendo-ui/js/util/text-metrics.js");\n\n/***/ }),\n\n/***/ 940:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./range */ "./node_modules/@progress/kendo-ui/js/spreadsheet/range.js");\n\n/***/ }),\n\n/***/ 1547:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./sheet */ "./node_modules/@progress/kendo-ui/js/spreadsheet/sheet.js");\n\n/***/ }),\n\n/***/ 1562:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./references */ "./node_modules/@progress/kendo-ui/js/spreadsheet/references.js");\n\n/***/ }),\n\n/***/ 1569:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1570), __webpack_require__(1547), __webpack_require__(940), __webpack_require__(1562), __webpack_require__(1571), __webpack_require__(925) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\t    "use strict";\n\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    var spreadsheet = kendo.spreadsheet;\n\t    var CellRef = spreadsheet.CellRef;\n\t    var kdrw = kendo.drawing;\n\t    var formatting = spreadsheet.formatting;\n\t    var geo = kendo.geometry;\n\n\t    var GUIDELINE_WIDTH = 0.8;\n\n\t    /* jshint eqnull:true, laxbreak:true, shadow:true, -W054 */\n\t    /* jshint latedef: nofunc */\n\n\t    // This takes a list of row heights and the page height, and\n\t    // produces a list of Y coordinates for each row, such that rows\n\t    // are not truncated across pages.  However, the algorithm will\n\t    // decide to truncate a row in the event that more than\n\t    // `maxEmpty` (default 0.2) of the available space would\n\t    // otherwise be left blank.\n\t    //\n\t    // It will be used for horizontal splitting too (will receive\n\t    // column widths and page width, and produce a list of X coords).\n\t    //\n\t    // If the third argument (headerRows) is not null, it specifies a\n\t    // number of rows to repeat on each page.  On pages other than the\n\t    // first, the necessary space will be skipped at the top.  Header\n\t    // coordinates (except for the first page) are pushed in\n\t    // headerCoords.\n\t    function distributeCoords(heights, pageHeight, maxEmpty, headerRows, headerCoords) {\n\t        var curr = 0;\n\t        var out = [];\n\t        var bottom = pageHeight;\n\t        var header = 0;\n\t        if (pageHeight && maxEmpty) {\n\t            maxEmpty *= pageHeight;\n\t        }\n\t        heights.forEach(function(h, i){\n\t            if (headerRows != null && i < headerRows) {\n\t                header += h;\n\t            }\n\t            if (pageHeight && curr + h > bottom) {\n\t                if (bottom - curr < maxEmpty) {\n\t                    // align to next page\n\t                    curr = pageHeight * Math.ceil(curr / pageHeight) + header;\n\t                    if (header > 0) {\n\t                        headerCoords.push(curr - header);\n\t                    }\n\t                }\n\t                // update bottom anyway; don\'t just add pageHeight, as\n\t                // we might need multiple pages for the pathological\n\t                // case of one row higher than the page.\n\t                bottom += pageHeight * Math.ceil(h / pageHeight);\n\t            }\n\t            out.push(curr);\n\t            curr += h;\n\t        });\n\t        out.push(curr);\n\t        return out;\n\t    }\n\n\t    function doLayout(sheet, range, options) {\n\t        // normalize reference so we don\'t have to deal with Infinity here.\n\t        var grid = sheet._grid;\n\t        range = grid.normalize(range);\n\n\t        var wholeRect = grid.rectangle(range);\n\t        var drawings = [];\n\t        sheet._drawings.forEach(function(d) {\n\t            var box = sheet.drawingBoundingBox(d);\n\t            if (box.intersects(wholeRect)) {\n\t                drawings.push({\n\t                    drawing: d,\n\t                    box: box.offset(-wholeRect.left, -wholeRect.top)\n\t                });\n\t            }\n\t        });\n\n\t        // 1. obtain the list of cells that need to be printed, the\n\t        //    row heights and column widths.  Place in each cell row,\n\t        //    col (relative to range, i.e. first is 0,0), rowspan,\n\t        //    colspan and merged.  also place a list of drawings\n\t        //    anchored to that cell.\n\t        var cells = [];\n\t        var rowHeights = [];\n\t        var colWidths = [];\n\t        var mergedCells = sheet._getMergedCells(range);\n\n\t        var maxRow = -1, maxCol = -1;\n\t        sheet.forEach(range, function(row, col, cell){\n\t            var relrow = row - range.topLeft.row;\n\t            var relcol = col - range.topLeft.col;\n\t            var rh = sheet.rowHeight(row);\n\t            var cw = sheet.columnWidth(col);\n\t            if (!options.forScreen) {\n\t                // for printing we\'ll need the list of anchored\n\t                // drawings so that we can adjust them after page\n\t                // splitting.\n\t                cell.drawings = drawings.filter(function(d){\n\t                    var tl = d.drawing.topLeftCell;\n\t                    if (tl && tl.row == row && tl.col == col) {\n\t                        maxRow = Math.max(maxRow, sheet._rows.index(d.box.bottom));\n\t                        maxCol = Math.max(maxCol, sheet._columns.index(d.box.right));\n\t                        return true;\n\t                    }\n\t                });\n\t            }\n\t            if (!relcol) {\n\t                rowHeights.push(rh);\n\t            }\n\t            if (!relrow) {\n\t                colWidths.push(cw);\n\t            }\n\t            if (sheet.isHiddenColumn(col) || sheet.isHiddenRow(row) || !rh || !cw) {\n\t                return;\n\t            }\n\t            var nonEmpty = options.forScreen || shouldDrawCell(cell);\n\t            if (!(options.emptyCells || nonEmpty)) {\n\t                return;\n\t            }\n\t            var id = new CellRef(row, col).print();\n\t            if (mergedCells.secondary[id]) {\n\t                return;\n\t            }\n\t            if (nonEmpty) {\n\t                maxRow = Math.max(maxRow, relrow);\n\t                maxCol = Math.max(maxCol, relcol);\n\t            } else {\n\t                cell.empty = true;\n\t            }\n\t            cell.row = relrow;\n\t            cell.col = relcol;\n\t            var m = mergedCells.primary[id];\n\t            if (m) {\n\t                delete mergedCells.primary[id];\n\t                cell.merged = true;\n\t                cell.rowspan = m.height();\n\t                cell.colspan = m.width();\n\t                if (options.forScreen) {\n\t                    cell.width = sheet._columns.sum(m.topLeft.col, m.bottomRight.col);\n\t                    cell.height = sheet._rows.sum(m.topLeft.row, m.bottomRight.row);\n\t                }\n\t            } else {\n\t                cell.rowspan = 1;\n\t                cell.colspan = 1;\n\t            }\n\t            cells.push(cell);\n\t        });\n\n\t        // keep only the drawable area\n\t        rowHeights = rowHeights.slice(0, maxRow + 1);\n\t        colWidths = colWidths.slice(0, maxCol + 1);\n\n\t        var pageWidth = options.pageWidth;\n\t        var pageHeight = options.pageHeight;\n\t        var scaleFactor = options.scale || 1;\n\n\t        // when fitWidth is requested, we must update the page size\n\t        // with the corresponding scale factor; the algorithm below\n\t        // (2) will continue to work, just drawing on a bigger page.\n\t        if (options.fitWidth) {\n\t            var width = colWidths.reduce(sum, 0);\n\t            if (width > pageWidth) {\n\t                scaleFactor = pageWidth / width;\n\t            }\n\t        }\n\t        pageWidth = Math.ceil(pageWidth / scaleFactor);\n\t        pageHeight = Math.ceil(pageHeight / scaleFactor);\n\n\t        // 2. calculate top, left, bottom, right, width and height for\n\t        //    printable cells.  Merged cells will be split across\n\t        //    pages, unless the first row/col is shifted to next page.\n\t        //    boxWidth and boxHeight get the complete drawing size.\n\t        //    Note that cell coordinates keep increasing, i.e. they\n\t        //    are not reset to zero for a new page.  The print\n\t        //    function translates the view to current page.\n\t        var hyCoords = []; // will receive header Y coordinates, if needed\n\t        var yCoords = distributeCoords(rowHeights, pageHeight || 0, options.maxEmpty,\n\t                                       options.headerRows, hyCoords);\n\t        var xCoords = distributeCoords(colWidths, pageWidth || 0, options.maxEmpty);\n\t        var boxWidth = 0;\n\t        var boxHeight = 0;\n\t        var headerCells = [];\n\t        cells = cells.filter(function(cell){\n\t            if (cell.empty && (cell.row > maxRow || cell.col > maxCol)) {\n\t                return false;\n\t            }\n\t            if (options.headerRows && cell.row < options.headerRows) {\n\t                headerCells.push(cell);\n\t            }\n\t            cell.left = xCoords[cell.col];\n\t            cell.top = yCoords[cell.row];\n\t            if (cell.merged) {\n\t                if (!options.forScreen) {\n\t                    cell.right = orlast(xCoords, cell.col + cell.colspan);\n\t                    cell.bottom = orlast(yCoords, cell.row + cell.rowspan);\n\t                    cell.width = cell.right - cell.left;\n\t                    cell.height = cell.bottom - cell.top;\n\t                } else {\n\t                    cell.right = cell.left + cell.width;\n\t                    cell.bottom = cell.top + cell.height;\n\t                }\n\t            } else {\n\t                cell.width = colWidths[cell.col];\n\t                cell.height = rowHeights[cell.row];\n\t                cell.bottom = cell.top + cell.height;\n\t                cell.right = cell.left + cell.width;\n\t            }\n\t            if (!options.forScreen) {\n\t                // page breaking will shift cell coordinates.  adjust\n\t                // anchored drawings.\n\t                cell.drawings.forEach(function(d){\n\t                    var box = d.box;\n\t                    box.left = cell.left + d.drawing.offsetX;\n\t                    box.top = cell.top + d.drawing.offsetY;\n\t                    box.right = box.left + box.width;\n\t                    box.bottom = box.top + box.height;\n\t                });\n\t            }\n\t            boxWidth = Math.max(boxWidth, cell.right);\n\t            boxHeight = Math.max(boxHeight, cell.bottom);\n\t            return true;\n\t        });\n\n\t        // 3. if any merged cells remain in "primary", they start\n\t        //    outside the printed range and we should still display\n\t        //    them partially.\n\t        Object.keys(mergedCells.primary).forEach(function(id){\n\t            var ref = mergedCells.primary[id];\n\t            sheet.forEach(ref.topLeft.toRangeRef(), function(row, col, cell){\n\t                var relrow = row - range.topLeft.row;\n\t                var relcol = col - range.topLeft.col;\n\t                cell.merged = true;\n\t                cell.colspan = ref.width();\n\t                cell.rowspan = ref.height();\n\t                if (relrow < 0) {\n\t                    cell.top = -sheet._rows.sum(row, row - relrow - 1);\n\t                } else {\n\t                    cell.top = yCoords[relrow];\n\t                }\n\t                if (relcol < 0) {\n\t                    cell.left = -sheet._columns.sum(col, col - relcol - 1);\n\t                } else {\n\t                    cell.left = xCoords[relcol];\n\t                }\n\t                cell.height = sheet._rows.sum(ref.topLeft.row, ref.bottomRight.row);\n\t                cell.width = sheet._columns.sum(ref.topLeft.col, ref.bottomRight.col);\n\t                if (cell.height > 0 && cell.width > 0) {\n\t                    // zero means a fully hidden merged cell (all rows/columns are hidden)\n\t                    // https://github.com/telerik/kendo-ui-core/issues/1794\n\t                    cell.right = cell.left + cell.width;\n\t                    cell.bottom = cell.top + cell.height;\n\t                    cell.row = relrow;\n\t                    cell.col = relcol;\n\t                    cells.push(cell);\n\t                }\n\t            });\n\t        });\n\n\t        // 4. replicate header rows on all pages\n\t        if (options.headerRows) {\n\t            hyCoords.forEach(function(y){\n\t                headerCells.forEach(function(cell){\n\t                    cell = clone(cell);\n\t                    cell.top += y;\n\t                    cell.bottom = cell.top + cell.height;\n\t                    cells.push(cell);\n\t                });\n\t                yCoords.push(y);\n\t            });\n\t            yCoords.sort(orderCoords);\n\t        }\n\n\t        return {\n\t            width    : boxWidth,\n\t            height   : boxHeight,\n\t            cells    : cells.sort(orderCells),\n\t            scale    : scaleFactor,\n\t            xCoords  : xCoords,\n\t            yCoords  : yCoords,\n\t            drawings : drawings\n\t        };\n\t    }\n\n\t    function clone(hash, target) {\n\t        if (!target) {\n\t            target = {};\n\t        }\n\t        if (Object.assign) {\n\t            return Object.assign(target, hash);\n\t        }\n\t        return Object.keys(hash).reduce(function(copy, key){\n\t            copy[key] = hash[key];\n\t            return copy;\n\t        }, target);\n\t    }\n\n\t    function sameBorder(a, b) {\n\t        return a.size === b.size && a.color === b.color;\n\t    }\n\n\t    function sum(a, b) {\n\t        return a + b;\n\t    }\n\n\t    function orlast(a, i) {\n\t        return i < a.length ? a[i] : a[a.length - 1];\n\t    }\n\n\t    function shouldDrawCell(cell) {\n\t        return cell.value != null\n\t            || cell.merged\n\t            || cell.background != null\n\t            || cell.borderRight != null\n\t            || cell.borderBottom != null\n\t            || (cell.validation != null && !cell.validation.value)\n\t            || (cell.drawings && cell.drawings.length);\n\t    }\n\n\t    function orderCells(a, b) {\n\t        if (a.top < b.top) {\n\t            return -1;\n\t        } else if (a.top == b.top) {\n\t            if (a.left < b.left) {\n\t                return -1;\n\t            } else if (a.left == b.left) {\n\t                return 0;\n\t            } else {\n\t                return 1;\n\t            }\n\t        } else {\n\t            return 1;\n\t        }\n\t    }\n\n\t    function orderCoords(a, b) {\n\t        return a < b ? -1 : a > b ? 1 : 0;\n\t    }\n\n\t    function drawLayout(sheet, layout, group, options) {\n\t        // options:\n\t        // - pageWidth\n\t        // - pageHeight\n\t        // - fitWidth\n\t        // - hCenter\n\t        // - vCenter\n\t        var ncols = Math.ceil(layout.width / options.pageWidth);\n\t        var nrows = Math.ceil(layout.height / options.pageHeight);\n\t        var pageWidth = Math.ceil(options.pageWidth / layout.scale);\n\t        var pageHeight = Math.ceil(options.pageHeight / layout.scale);\n\n\t        for (var j = 0; j < nrows; ++j) {\n\t            for (var i = 0; i < ncols; ++i) {\n\t                addPage(j, i);\n\t            }\n\t        }\n\n\t        function addPage(row, col) {\n\t            var left = col * pageWidth;\n\t            var right = left + pageWidth;\n\t            var top = row * pageHeight;\n\t            var bottom = top + pageHeight;\n\t            var endbottom = 0, endright = 0;\n\n\t            function isInside(box) {\n\t                if (box.right <= left || box.left >= right ||\n\t                    box.bottom <= top || box.top >= bottom) {\n\t                    return false;\n\t                }\n\t                endbottom = Math.max(box.bottom, endbottom);\n\t                endright = Math.max(box.right, endright);\n\t                return true;\n\t            }\n\n\t            // XXX: this can be optimized - discard cells that won\'t\n\t            // be used again, and don\'t walk cells that stand no\n\t            // chance to fit.\n\t            var cells = layout.cells.filter(isInside);\n\n\t            var drawings = layout.drawings.filter(function(d){\n\t                return isInside(d.box);\n\t            });\n\n\t            // merged cells might stretch beyond page; limit to that\n\t            endbottom = Math.min(endbottom, bottom);\n\t            endright = Math.min(endright, right);\n\n\t            if (cells.length || drawings.length) {\n\t                var page = new kdrw.Group();\n\t                group.append(page);\n\t                // page.clip(drawing.Path.fromRect(\n\t                //     new geo.Rect([ 0, 0 ],\n\t                //                  [ options.pageWidth, options.pageHeight ])));\n\n\t                var content = new kdrw.Group();\n\t                page.append(content);\n\n\t                content.clip(kdrw.Path.fromRect(\n\t                    new geo.Rect([ left - 1, top - 1 ], [ endright + 1, endbottom + 1 ])\n\t                ));\n\n\t                var matrix = geo.Matrix.scale(layout.scale, layout.scale)\n\t                    .multiplyCopy(geo.Matrix.translate(-left, -top));\n\n\t                if (options.hCenter || options.vCenter) {\n\t                    matrix = matrix.multiplyCopy(\n\t                        geo.Matrix.translate(\n\t                            options.hCenter ? (right - endright) / 2 : 0,\n\t                            options.vCenter ? (bottom - endbottom) / 2 : 0)\n\t                    );\n\t                }\n\n\t                content.transform(matrix);\n\n\t                if (options.guidelines) {\n\t                    var prev = null;\n\t                    layout.xCoords.forEach(function(x){\n\t                        x = Math.min(x, endright);\n\t                        if (x !== prev && x >= left && x <= right) {\n\t                            prev = x;\n\t                            content.append(\n\t                                new kdrw.Path()\n\t                                    .moveTo(x, top)\n\t                                    .lineTo(x, endbottom)\n\t                                    .close()\n\t                                    .stroke(options.guideColor, GUIDELINE_WIDTH)\n\t                            );\n\t                        }\n\t                    });\n\t                    var prev = null;\n\t                    layout.yCoords.forEach(function(y){\n\t                        y = Math.min(y, endbottom);\n\t                        if (y !== prev && y >= top && y <= bottom) {\n\t                            prev = y;\n\t                            content.append(\n\t                                new kdrw.Path()\n\t                                    .moveTo(left, y)\n\t                                    .lineTo(endright, y)\n\t                                    .close()\n\t                                    .stroke(options.guideColor, GUIDELINE_WIDTH)\n\t                            );\n\t                        }\n\t                    });\n\t                }\n\n\t                var borders = Borders(); // jshint ignore: line\n\t                cells.forEach(function(cell){\n\t                    drawCell(cell, content, options);\n\t                    borders.add(cell, sheet);\n\t                });\n\n\t                var bordersGroup = new kdrw.Group();\n\t                borders.vert.forEach(function(a){\n\t                    a.forEach(function(b){\n\t                        if (!b.rendered) {\n\t                            b.rendered = true;\n\t                            bordersGroup.append(\n\t                                new kdrw.Path()\n\t                                    .moveTo(b.x, b.top)\n\t                                    .lineTo(b.x, b.bottom)\n\t                                    .close()\n\t                                    .stroke(b.color, b.size)\n\t                            );\n\t                        }\n\t                    });\n\t                });\n\t                borders.horiz.forEach(function(a){\n\t                    a.forEach(function(b){\n\t                        if (!b.rendered) {\n\t                            b.rendered = true;\n\t                            bordersGroup.append(\n\t                                new kdrw.Path()\n\t                                    .moveTo(b.left, b.y)\n\t                                    .lineTo(b.right, b.y)\n\t                                    .close()\n\t                                    .stroke(b.color, b.size)\n\t                            );\n\t                        }\n\t                    });\n\t                });\n\t                content.append(bordersGroup);\n\n\t                drawings.forEach(function(d){\n\t                    var drawing = d.drawing;\n\t                    var image = drawing.image;\n\t                    if (image != null) {\n\t                        var box = d.box;\n\t                        var url = sheet._workbook.imageUrl(image);\n\t                        content.append(\n\t                            new kdrw.Image(url, new geo.Rect(\n\t                                [ box.left, box.top ],\n\t                                [ box.width, box.height ]\n\t                            )).opacity(drawing.opacity)\n\t                        );\n\t                    }\n\t                });\n\t            }\n\t        }\n\t    }\n\n\t    function drawCell(cell, content, options) {\n\t        var g = new kdrw.Group();\n\t        content.append(g);\n\t        var rect = new geo.Rect([ cell.left, cell.top ],\n\t                                [ cell.width, cell.height ]);\n\t        if (cell.background || cell.merged) {\n\t            var r2d2 = rect;\n\t            if (options.guidelines) {\n\t                r2d2 = rect.clone();\n\t                r2d2.origin.x += GUIDELINE_WIDTH/2 + 0.1;\n\t                r2d2.origin.y += GUIDELINE_WIDTH/2 + 0.1;\n\t                r2d2.size.width -= GUIDELINE_WIDTH + 0.2;\n\t                r2d2.size.height -= GUIDELINE_WIDTH + 0.2;\n\t            }\n\t            g.append(\n\t                new kdrw.Rect(r2d2)\n\t                    .fill(cell.background || "#fff")\n\t                    .stroke(null)\n\t            );\n\t        }\n\t        var val = cell.value;\n\t        if (val != null) {\n\t            var type = typeof val == "number" ? "number" : null;\n\t            var clip = new kdrw.Group();\n\t            clip.clip(kdrw.Path.fromRect(rect));\n\t            g.append(clip);\n\t            var f, format = cell.format;\n\t            if (!format && type == "number" && val != Math.floor(val)) {\n\t                format = "0.##############";\n\t            }\n\t            if (format) {\n\t                f = formatting.textAndColor(val, format);\n\t                val = f.text;\n\t                if (f.type) {\n\t                    type = f.type;\n\t                }\n\t            } else {\n\t                val += "";\n\t            }\n\t            if (!cell.textAlign) {\n\t                switch (type) {\n\t                  case "number":\n\t                  case "date":\n\t                  case "percent":\n\t                  case "currency":\n\t                    cell.textAlign = "right";\n\t                    break;\n\t                  case "boolean":\n\t                    cell.textAlign = "center";\n\t                    break;\n\t                }\n\t            }\n\t            drawText(val, (f && f.color) || cell.color || "#000", cell, clip);\n\t        }\n\t    }\n\n\t    function applyIndent(cell, style) {\n\t        if (cell.indent) {\n\t            // OOXML spec states the indent is "An integer value,\n\t            // where an increment of 1 represents 3 spaces".  This, of\n\t            // course, bears no resemblance to what Excel actually\n\t            // does, so we need magic numbers here.\n\t            var indent = 1.4 * cell.indent;\n\t            switch (style.textAlign) {\n\t              case null:\n\t              case "left":\n\t                style.paddingLeft = indent + "ch";\n\t                break;\n\t              case "right":\n\t                style.paddingRight = indent + "ch";\n\t                break;\n\t              case "center":\n\t                style.paddingLeft = indent/2 + "ch";\n\t                style.paddingRight = indent/2 + "ch";\n\t                break;\n\t            }\n\t        }\n\t    }\n\n\t    var CONT;\n\t    function drawText(text, color, cell, group) {\n\t        if (!CONT) {\n\t            CONT = document.createElement("div");\n\t            CONT.style.position = "fixed";\n\t            CONT.style.left = "0px";\n\t            CONT.style.top = "0px";\n\t            CONT.style.visibility = "hidden";\n\t            CONT.style.overflow = "hidden";\n\t            CONT.style.boxSizing = "border-box";\n\t            CONT.style.lineHeight = "normal";\n\t            document.body.appendChild(CONT);\n\t        }\n\n\t        if (CONT.firstChild) {\n\t            CONT.removeChild(CONT.firstChild);\n\t        }\n\n\t        CONT.style.padding = "2px 4px";\n\t        CONT.style.color = color;\n\t        CONT.style.font = makeFontDef(cell);\n\t        CONT.style.width = cell.width + "px";\n\t        CONT.style.textAlign = cell.textAlign || "left";\n\t        CONT.style.textDecoration = cell.underline ? "underline" : "none";\n\n\t        applyIndent(cell, CONT.style);\n\n\t        if (cell.wrap) {\n\t            CONT.style.whiteSpace = "pre-wrap";\n\t            CONT.style.overflowWrap = CONT.style.wordWrap = "break-word";\n\t        } else {\n\t            CONT.style.whiteSpace = "pre";\n\t            CONT.style.overflowWrap = CONT.style.wordWrap = "normal";\n\t        }\n\n\t        CONT.appendChild(document.createTextNode(text));\n\n\t        var vtrans = 0;\n\t        switch (cell.verticalAlign) {\n\t          case "center":\n\t            vtrans = (cell.height - CONT.offsetHeight) >> 1;\n\t            break;\n\n\t          case undefined:\n\t          case null:\n\t          case "bottom":\n\t            vtrans = (cell.height - CONT.offsetHeight);\n\t            break;\n\t        }\n\t        if (vtrans < 0) { vtrans = 0; }\n\n\t        var text_group  = kendo.drawing.drawDOM.drawText(CONT);\n\t        text_group.transform(geo.Matrix.translate(cell.left, cell.top + vtrans));\n\t        group.append(text_group);\n\t    }\n\n\t    function makeFontDef(cell) {\n\t        var font = [];\n\t        if (cell.italic) {\n\t            font.push("italic");\n\t        }\n\t        if (cell.bold) {\n\t            font.push("bold");\n\t        }\n\t        font.push((cell.fontSize || 12) + "px");\n\t        font.push((cell.fontFamily || "Arial"));\n\t        return font.join(" ");\n\t    }\n\n\t    function draw(sheet, range, options, callback) {\n\t        if (options == null && callback == null) {\n\t            callback = range;\n\t            options = {};\n\t            range = spreadsheet.SHEETREF;\n\t        }\n\t        if (callback == null) {\n\t            callback = options;\n\t            if (range instanceof spreadsheet.Range\n\t                || range instanceof spreadsheet.Ref\n\t                || typeof range == "string") {\n\t                options = {};\n\t            } else {\n\t                options = range;\n\t                range = spreadsheet.SHEETREF;\n\t            }\n\t        }\n\t        options = kendo.jQuery.extend({\n\t            paperSize  : "A4",\n\t            landscape  : true,\n\t            margin     : "1cm",\n\t            guidelines : true,\n\t            guideColor : "#aaa",\n\t            emptyCells : true,\n\t            fitWidth   : false,\n\t            center     : false,\n\t            headerRows : null,\n\t            maxEmpty   : 0.2,\n\t            scale      : 1\n\t        }, options);\n\t        var group = new kdrw.Group();\n\t        var paper = kendo.pdf.getPaperOptions(options);\n\t        group.options.set("pdf", {\n\t            author    : options.author,\n\t            creator   : options.creator,\n\t            date      : options.date,\n\t            keywords  : options.keywords,\n\t            margin    : paper.margin,\n\t            multiPage : true,\n\t            paperSize : paper.paperSize,\n\t            subject   : options.subject,\n\t            title     : options.title\n\t        });\n\t        var pageWidth = paper.paperSize[0];\n\t        var pageHeight = paper.paperSize[1];\n\t        if (paper.margin) {\n\t            pageWidth -= paper.margin.left + paper.margin.right + 1;\n\t            pageHeight -= paper.margin.top + paper.margin.bottom + 1;\n\t        }\n\t        options.pageWidth = pageWidth;\n\t        options.pageHeight = pageHeight;\n\t        var layout = doLayout(sheet, sheet._ref(range), options);\n\t        drawLayout(sheet, layout, group, options);\n\t        callback(group);\n\t    }\n\n\t    spreadsheet.Sheet.prototype.draw = function(range, options, callback) {\n\t        var sheet = this;\n\t        if (sheet._workbook) {\n\t            sheet.recalc(sheet._workbook._context, function(){\n\t                draw(sheet, range, options, callback);\n\t            });\n\t        } else {\n\t            draw(sheet, range, options, callback);\n\t        }\n\t    };\n\n\t    // Hack: since we index the border arrays by relative row/col we\n\t    // could end up with negative indexes, i.e. horiz[-2] = border.\n\t    // Array forEach will ignore these, so we provide a simple\n\t    // container here (outside code only needs forEach at this time).\n\t    function Container() {}\n\t    Container.prototype = {\n\t        forEach: function(f) {\n\t            Object.keys(this).forEach(function(key){\n\t                f(this[key], key, this);\n\t            }, this);\n\t        }\n\t    };\n\n\t    function Borders() {\n\t        var horiz = new Container();\n\t        var vert = new Container();\n\t        function add(cell, sheet) {\n\t            if (sheet) {\n\t                // reset borders here; the propertybag doesn\'t keep track of merged cells :-/ this\n\t                // is ugly, but the inner details of data storage have leaked everywhere anyway.\n\t                var pb = sheet._properties;\n\t                var grid = sheet._grid;\n\t                cell.borderLeft    = pb.get("vBorders", grid.index(cell.row, cell.col));\n\t                cell.borderRight   = pb.get("vBorders", grid.index(cell.row, cell.col + cell.colspan));\n\t                cell.borderTop     = pb.get("hBorders", grid.index(cell.row, cell.col));\n\t                cell.borderBottom  = pb.get("hBorders", grid.index(cell.row + cell.rowspan, cell.col));\n\t            }\n\t            if (cell.borderLeft) {\n\t                addVert(cell.row, cell.col, cell.borderLeft,\n\t                        cell.left, cell.top, cell.bottom);\n\t            }\n\t            if (cell.borderRight) {\n\t                addVert(cell.row, cell.col + cell.colspan, cell.borderRight,\n\t                        cell.right, cell.top, cell.bottom);\n\t            }\n\t            if (cell.borderTop) {\n\t                addHoriz(cell.row, cell.col, cell.borderTop,\n\t                         cell.top, cell.left, cell.right);\n\t            }\n\t            if (cell.borderBottom) {\n\t                addHoriz(cell.row + cell.rowspan, cell.col, cell.borderBottom,\n\t                         cell.bottom, cell.left, cell.right);\n\t            }\n\t        }\n\t        function addVert(row, col, border, x, top, bottom) {\n\t            var a = vert[col] || (vert[col] = new Container());\n\t            var prev = row > 0 && a[row - 1];\n\t            if (prev && sameBorder(prev, border)) {\n\t                a[row] = prev;\n\t                prev.bottom = bottom;\n\t            } else {\n\t                a[row] = {\n\t                    size: border.size,\n\t                    color: border.color,\n\t                    x: x,\n\t                    top: top,\n\t                    bottom: bottom\n\t                };\n\t            }\n\t        }\n\t        function addHoriz(row, col, border, y, left, right) {\n\t            var a = horiz[row] || (horiz[row] = new Container());\n\t            var prev = col > 0 && a[col - 1];\n\t            if (prev && sameBorder(prev, border)) {\n\t                a[col] = prev;\n\t                prev.right = right;\n\t            } else {\n\t                a[col] = {\n\t                    size: border.size,\n\t                    color: border.color,\n\t                    y: y,\n\t                    left: left,\n\t                    right: right\n\t                };\n\t            }\n\t        }\n\t        return { add: add, horiz: horiz, vert: vert };\n\t    }\n\n\t    function drawTabularData(options) {\n\t        var progress = new $.Deferred();\n\t        var promise = progress.promise();\n\n\t        options = clone(options, {\n\t            dataSource       : null,\n\t            guidelines       : true,\n\t            guideColor       : "#000",\n\t            columns          : null,\n\t            headerBackground : "#999",\n\t            headerColor      : "#000",\n\t            oddBackground    : null,\n\t            evenBackground   : null,\n\t            fontFamily       : "Arial",\n\t            fontSize         : 12,\n\t            paperSize        : "A4",\n\t            margin           : "1cm",\n\t            landscape        : true,\n\t            fitWidth         : false,\n\t            scale            : 1,\n\t            rowHeight        : 20,\n\t            maxEmpty         : 1,\n\t            useGridFormat    : true\n\t        });\n\n\t        // retrieve fonts; custom fonts should be already loaded\n\t        kendo.drawing.pdf.defineFont(\n\t            kendo.drawing.drawDOM.getFontFaces(document)\n\t        );\n\n\t        var charWidth = charWidthFunction(options.fontFamily, options.fontSize);\n\n\t        function textWidth(value) {\n\t            if (value != null) {\n\t                var width = 12;         // magic numbers :-/\n\t                for (var i = value.length; --i >= 0;) {\n\t                    width += charWidth(value.charAt(i));\n\t                }\n\t                return width;\n\t            }\n\t            return 0;\n\t        }\n\n\t        var border = options.guidelines ? { size: 1, color: options.guideColor } : null;\n\n\t        function mkCell(data) {\n\t            if (!border) {\n\t                return data;\n\t            }\n\t            return clone(data, {\n\t                borderLeft: border,\n\t                borderTop: border,\n\t                borderRight: border,\n\t                borderBottom: border\n\t            });\n\t        }\n\n\t        options.dataSource.fetch(function(){\n\t            var data = options.dataSource.data();\n\t            if (!data.length) {\n\t                return progress.reject("Empty dataset");\n\t            }\n\n\t            // this really must be present\n\t            var columns = options.columns.map(function(col){\n\t                if (typeof col == "string") {\n\t                    return { title: col, field: col };\n\t                } else {\n\t                    return col;\n\t                }\n\t            });\n\t            var columnTitles = columns.map(function(col){\n\t                return col.title || col.field;\n\t            });\n\t            var columnWidths = columnTitles.map(textWidth);\n\n\t            // prepare data for a Sheet object\'s fromJSON method\n\t            var rows = data.map(function(row, rowIndex){\n\t                return {\n\t                    cells: columns.map(function(col, colIndex){\n\t                        var value = row[col.field];\n\n\t                        // NOTE: value might not be string.  I added option useGridFormat (default\n\t                        // true), which will use a column\'s format, if present, to convert the value\n\t                        // to a string, so that we can measure the width right now.\n\t                        if (options.useGridFormat) {\n\t                            if (value != null) {\n\t                                if (col.format) {\n\t                                    value = kendo.format(col.format, value);\n\t                                } else {\n\t                                    value += "";\n\t                                }\n\t                            }\n\t                            // adjust the column widths while we\'re at it\n\t                            columnWidths[colIndex] = Math.max(\n\t                                textWidth(value),\n\t                                columnWidths[colIndex]\n\t                            );\n\t                        }\n\n\t                        // if options.useGridFormat is false and col.format is present, pass it over\n\t                        // to the spreadsheet.  In that case we should calculate the widths after\n\t                        // the spreadsheet is created (XXX to be implemented when someone needs it).\n\t                        return mkCell({\n\t                            value: value,\n\t                            format: options.useGridFormat ? null : col.format,\n\t                            background: rowIndex % 2 ? options.evenBackground : options.oddBackground\n\t                        });\n\t                    })\n\t                };\n\t            });\n\n\t            // insert header line\n\t            rows.unshift({\n\t                cells: columnTitles.map(function(label){\n\t                    return mkCell({\n\t                        value: label,\n\t                        background: options.headerBackground,\n\t                        color: options.headerColor\n\t                    });\n\t                })\n\t            });\n\n\t            // init a Sheet object.  Note that we have to add one\n\t            // extra-row and column, because the very last ones can\'t\n\t            // have right/bottom borders (known limitation).\n\t            var sheet = new kendo.spreadsheet.Sheet(\n\t                rows.length + 1,        // rows\n\t                columns.length + 1,     // columns\n\t                options.rowHeight,      // row height\n\t                50,                     // column width\n\t                20,                     // header height\n\t                20,                     // header width,\n\t                {                       // default cell style\n\t                    fontFamily: options.fontFamily,\n\t                    fontSize: options.fontSize,\n\t                    verticalAlign: "center"\n\t                }\n\t            );\n\n\t            // load data\n\t            sheet.fromJSON({\n\t                name: "Sheet1",\n\t                rows: rows,\n\t                columns: columnWidths.map(function(w, i){\n\t                    return { index: i, width: w };\n\t                })\n\t            });\n\n\t            sheet.draw({\n\t                paperSize  : options.paperSize,\n\t                landscape  : options.landscape,\n\t                margin     : options.margin,\n\t                guidelines : false, // using borders instead (better contrast)\n\t                scale      : options.scale,\n\t                fitWidth   : options.fitWidth,\n\t                maxEmpty   : options.maxEmpty,\n\t                headerRows : 1\n\t            }, progress.resolve.bind(progress));\n\t        });\n\n\t        return promise;\n\t    }\n\n\t    var CACHE_CHAR_WIDTH = {};\n\n\t    var charWidthFunction = function(fontFamily, fontSize) {\n\t        var id = fontSize + ":" + fontFamily;\n\t        var func = CACHE_CHAR_WIDTH[id];\n\t        if (!func) {\n\t            var span, div = document.createElement("div");\n\t            div.style.position = "fixed";\n\t            div.style.left = "-10000px";\n\t            div.style.top = "-10000px";\n\t            div.style.fontFamily = fontFamily;\n\t            div.style.fontSize = fontSize + "px";\n\t            div.style.whiteSpace = "pre";\n\t            for (var i = 32; i < 128; ++i) {\n\t                span = document.createElement("span");\n\t                span.appendChild(document.createTextNode(String.fromCharCode(i)));\n\t                div.appendChild(span);\n\t            }\n\t            document.body.appendChild(div);\n\t            var widths = {};\n\t            for (i = 32, span = div.firstChild; i < 128 && span; ++i, span = span.nextSibling) {\n\t                widths[i] = span.offsetWidth;\n\t            }\n\t            while ((span = div.firstChild)) {\n\t                div.removeChild(span);\n\t            }\n\t            func = CACHE_CHAR_WIDTH[id] = function(ch) {\n\t                var code = ch.charCodeAt(0);\n\t                var width = widths[code];\n\t                if (width == null) {\n\t                    // probably not an ASCII character, let\'s cache its width as well\n\t                    span = document.createElement("span");\n\t                    span.appendChild(document.createTextNode(String.fromCharCode(code)));\n\t                    div.appendChild(span);\n\t                    width = widths[code] = span.offsetWidth;\n\t                    div.removeChild(span);\n\t                }\n\t                return width;\n\t            };\n\t        }\n\t        return func;\n\t    };\n\n\t    spreadsheet.draw = {\n\t        Borders         : Borders,\n\t        doLayout        : doLayout,\n\t        applyIndent     : applyIndent\n\t    };\n\n\t    spreadsheet.drawTabularData = drawTabularData;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1570:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.pdf */ "./node_modules/@progress/kendo-ui/js/kendo.pdf.js");\n\n/***/ }),\n\n/***/ 1571:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./numformat */ "./node_modules/@progress/kendo-ui/js/spreadsheet/numformat.js");\n\n/***/ })\n\n/******/ });\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/print.js?')},"./node_modules/@progress/kendo-ui/js/spreadsheet/propertybag.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/spreadsheet/propertybag.js ***!
  \***********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1572);\n\tmodule.exports = __webpack_require__(1572);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ../kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1572:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(20) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\t(function(kendo) {\n\t    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n\t        return;\n\t    }\n\n\t    var Property = kendo.Class.extend({\n\t        init: function(list) {\n\t            this.list = list;\n\t        },\n\n\t        get: function(index) {\n\t            return this.parse(this.list.value(index, index));\n\t        },\n\n\t        set: function(start, end, value) {\n\t            if (value === undefined) {\n\t                value = end;\n\t                end = start;\n\t            }\n\n\t            this.list.value(start, end, value);\n\t        },\n\n\t        parse: function(value) {\n\t            return value;\n\t        },\n\n\t        copy: function(start, end, dst) {\n\t            this.list.copy(start, end, dst);\n\t        },\n\n\t        iterator: function(start, end) {\n\t            return this.list.iterator(start, end);\n\t        }\n\t    });\n\n\t    var JsonProperty = Property.extend({\n\t        set: function(start, end, value) {\n\t            this.list.value(start, end, JSON.stringify(value));\n\t        },\n\n\t        parse: function(value) {\n\t            return JSON.parse(value);\n\t        }\n\t    });\n\n\t    var ValueProperty = Property.extend({\n\t        init: function(values, formats) {\n\t            Property.prototype.init.call(this, values);\n\t            this.formats = formats;\n\t        },\n\n\t        set: function(start, end, value) {\n\t            if (value instanceof Date) {\n\t                value = kendo.spreadsheet.dateToNumber(value);\n\t                if (!this.formats.value(start,end)) {\n\t                    this.formats.value(start, end, toExcelFormat(kendo.culture().calendar.patterns.d));\n\t                }\n\t            } else if (typeof value == "number") {\n\t                value = kendo.spreadsheet.calc.runtime.limitPrecision(value);\n\t            }\n\n\t            this.list.value(start, end, value);\n\t        }\n\t    });\n\n\t    function toExcelFormat(format) {\n\t        return format.replace(/M/g, "m").replace(/\'/g, \'"\').replace(/tt/, "am/pm");\n\t    }\n\n\t    kendo.spreadsheet.PropertyBag = kendo.Class.extend({\n\t        specs: [\n\t            { property: Property, name: "format", value: null, sortable: true, serializable: true },\n\t            { property: ValueProperty, name: "value", value: null, sortable: true, serializable: true, depends: "format" },\n\t            { property: Property, name: "formula", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "background", value: null, sortable: true, serializable: true },\n\t            { property: JsonProperty, name: "vBorders", value: null, sortable: false, serializable: false },\n\t            { property: JsonProperty, name: "hBorders", value: null, sortable: false, serializable: false },\n\t            { property: Property, name: "color", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "fontFamily", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "underline", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "fontSize", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "italic", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "bold", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "textAlign", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "indent", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "verticalAlign", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "wrap", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "validation", value: null, sortable: false, serializable: true },\n\t            { property: Property, name: "enable", value: null, sortable: false, serializable: true },\n\t            { property: Property, name: "link", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "editor", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "comment", value: null, sortable: true, serializable: true },\n\t            { property: Property, name: "html", value: null, sortable: true, serializable: true }\n\t        ],\n\n\t        init: function(rowCount, columnCount, defaultValues) {\n\t            defaultValues = defaultValues || {};\n\t            var cellCount = rowCount * columnCount - 1;\n\n\t            this.rowCount = rowCount;\n\t            this.columnCount = columnCount;\n\t            this.cellCount = cellCount;\n\t            this.properties = {};\n\t            this.lists = {};\n\n\t            this.specs.forEach(function(spec) {\n\t                var name = spec.name;\n\t                var value = defaultValues[name];\n\t                if (value === undefined) {\n\t                    value = spec.value;\n\t                }\n\t                this.lists[name] = new kendo.spreadsheet.SparseRangeList(0, cellCount, value);\n\t                var prop = this.properties[name] = new spec.property(this.lists[name], this.lists[spec.depends]);\n\t                prop.spec = spec;\n\t            }, this);\n\n\t            // XXX: this is a hack but I have no better ideas at this\n\t            // point.  The getState() method in a SparseRangeList\n\t            // clones the tree (which just copies values over), but\n\t            // formulas are objects maintaining complex state.\n\t            // https://github.com/telerik/kendo-ui-core/issues/2816\n\t            this.lists.formula.tree.clone = cloneFormulaTree;\n\t            this.lists.validation.tree.clone = cloneFormulaTree;\n\t        },\n\n\t        getState: function() {\n\t            var state = {};\n\n\t            this.specs.forEach(function(spec) {\n\t               state[spec.name] = this.lists[spec.name].getState();\n\t            }, this);\n\n\t            return state;\n\t        },\n\n\t        setState: function(state) {\n\t            this.specs.forEach(function(spec) {\n\t                this.lists[spec.name].setState(state[spec.name]);\n\t            }, this);\n\t        },\n\n\t        get: function(name, index) {\n\t            if (index === undefined) {\n\t                return this.lists[name];\n\t            }\n\n\t            switch (name) {\n\t              case "borderRight":\n\t                index += this.rowCount;\n\t                /* falls through */\n\t              case "borderLeft":\n\t                name = "vBorders";\n\t                break;\n\n\t              case "borderBottom":\n\t                index++;\n\t                /* falls through */\n\t              case "borderTop":\n\t                name = "hBorders";\n\t                break;\n\t            }\n\t            return index > this.cellCount ? null : this.properties[name].get(index);\n\t        },\n\n\t        set: function(name, start, end, value) {\n\t            switch (name) {\n\t              case "borderRight":\n\t                start += this.rowCount;\n\t                end += this.rowCount;\n\t                /* falls through */\n\t              case "borderLeft":\n\t                name = "vBorders";\n\t                break;\n\n\t              case "borderBottom":\n\t                start++;\n\t                end++;\n\t                /* falls through */\n\t              case "borderTop":\n\t                name = "hBorders";\n\t                break;\n\t            }\n\t            if (start <= end && end <= this.cellCount) {\n\t                this.properties[name].set(start, end, value);\n\t            }\n\t        },\n\n\t        fromJSON: function(index, value) {\n\t            for (var si = 0; si < this.specs.length; si++) {\n\t                var spec = this.specs[si];\n\n\t                if (spec.serializable) {\n\t                    if (value[spec.name] !== undefined) {\n\t                        this.set(spec.name, index, index, value[spec.name], false);\n\t                    }\n\t                }\n\t            }\n\n\t            [ "borderLeft", "borderRight", "borderTop", "borderBottom" ].forEach(function(b){\n\t                if (value[b] !== undefined) {\n\t                    this.set(b, index, index, value[b]);\n\t                }\n\t            }, this);\n\t        },\n\n\t        copy: function(sourceStart, sourceEnd, targetStart) {\n\t            this.specs.forEach(function(spec) {\n\t                this.properties[spec.name].copy(sourceStart, sourceEnd, targetStart);\n\t            }, this);\n\t        },\n\n\t        iterator: function(name, start, end) {\n\t            var prop = this.properties[name];\n\t            var iter = prop.iterator(start, end), at = iter.at;\n\t            var cellCount = this.cellCount;\n\t            iter.at = function(index) {\n\t                return index > cellCount ? null : prop.parse(at.call(iter, index));\n\t            };\n\t            iter.name = name;\n\t            iter.value = prop.spec.value;\n\t            return iter;\n\t        },\n\n\t        sortable: function() {\n\t            return this.specs.filter(function(spec) { return spec.sortable; })\n\t                .map(function(spec) {\n\t                    return this.lists[spec.name];\n\t                }, this);\n\t        },\n\n\t        iterators: function(start, end) {\n\t            return this.specs.reduce(function(ret, spec) {\n\t                if (spec.serializable) {\n\t                    ret.push(this.iterator(spec.name, start, end));\n\t                }\n\t                return ret;\n\t            }.bind(this), []);\n\t        },\n\n\t        forEach: function(start, end, callback) {\n\t            var iterators = this.iterators(start, end);\n\t            var hBorders = this.iterator("hBorders", start, end + 1);\n\t            var leftBorders = this.iterator("vBorders", start, end);\n\t            var rightBorders = this.iterator("vBorders", start + this.rowCount, end + this.rowCount);\n\t            var values, index;\n\n\t            function addBorder(name, iterator, index) {\n\t                var val = iterator.at(index);\n\t                if (val !== iterator.value) {\n\t                    values[name] = val;\n\t                }\n\t            }\n\n\t            for (index = start; index <= end; index++) {\n\t                values = {};\n\n\t                for (var i = 0; i < iterators.length; i++) {\n\t                    var iterator = iterators[i];\n\t                    var value = iterator.at(index);\n\n\t                    if (value !== iterator.value) {\n\t                        values[iterator.name] = value;\n\t                    }\n\t                }\n\n\t                addBorder("borderLeft", leftBorders, index);\n\t                addBorder("borderRight", rightBorders, index + this.rowCount);\n\t                addBorder("borderTop", hBorders, index);\n\t                if ((index + 1) % this.rowCount) {\n\t                    addBorder("borderBottom", hBorders, index + 1);\n\t                }\n\n\t                callback(values);\n\t            }\n\t        },\n\n\t        forEachProperty: function(callback) {\n\t            for (var name in this.properties) {\n\t                callback(this.properties[name]);\n\t            }\n\t        }\n\t    });\n\n\t    function cloneFormulaValue(x) {\n\t        x = x.clone();\n\t        x.value = x.value.deepClone(); // x.value is Formula or Validation\n\t        return x;\n\t    }\n\n\t    function cloneFormulaTree() {\n\t        var tree = this.map(cloneFormulaValue);\n\t        tree.clone = cloneFormulaTree; // because it\'s a new RangeTree now\n\t        return tree;\n\t    }\n\n\t    kendo.spreadsheet.ALL_PROPERTIES = kendo.spreadsheet.PropertyBag.prototype.specs.reduce(function(a, spec) {\n\t        if (spec.serializable) {\n\t            a.push(spec.name);\n\t        }\n\t        return a;\n\t    }, [ "borderTop", "borderRight", "borderBottom", "borderLeft" ]);\n\n\t})(window.kendo);\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/spreadsheet/propertybag.js?')}}]);