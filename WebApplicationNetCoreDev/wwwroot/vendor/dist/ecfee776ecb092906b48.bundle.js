(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{"./node_modules/@progress/kendo-ui/js/kendo.timepicker.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.timepicker.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1430);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1086:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.popup */ "./node_modules/@progress/kendo-ui/js/kendo.popup.js");\n\n/***/ }),\n\n/***/ 1167:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.dateinput */ "./node_modules/@progress/kendo-ui/js/kendo.dateinput.js");\n\n/***/ }),\n\n/***/ 1430:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1086), __webpack_require__(1167) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "timepicker",\n\t    name: "TimePicker",\n\t    category: "web",\n\t    description: "The TimePicker widget allows the end user to select a value from a list of predefined values or to type a new value.",\n\t    depends: [ "popup" ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        keys = kendo.keys,\n\t        parse = kendo.parseDate,\n\t        activeElement = kendo._activeElement,\n\t        extractFormat = kendo._extractFormat,\n\t        support = kendo.support,\n\t        browser = support.browser,\n\t        ui = kendo.ui,\n\t        Widget = ui.Widget,\n\t        OPEN = "open",\n\t        CLOSE = "close",\n\t        CHANGE = "change",\n\t        ns = ".kendoTimePicker",\n\t        CLICK = "click" + ns,\n\t        DEFAULT = "k-state-default",\n\t        DISABLED = "disabled",\n\t        READONLY = "readonly",\n\t        LI = "li",\n\t        SPAN = "<span></span>",\n\t        FOCUSED = "k-state-focused",\n\t        HOVER = "k-state-hover",\n\t        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,\n\t        MOUSEDOWN = "mousedown" + ns,\n\t        MS_PER_MINUTE = 60000,\n\t        MS_PER_DAY = 86400000,\n\t        SELECTED = "k-state-selected",\n\t        STATEDISABLED = "k-state-disabled",\n\t        ARIA_SELECTED = "aria-selected",\n\t        ARIA_EXPANDED = "aria-expanded",\n\t        ARIA_HIDDEN = "aria-hidden",\n\t        ARIA_DISABLED = "aria-disabled",\n\t        ARIA_READONLY = "aria-readonly",\n\t        ARIA_ACTIVEDESCENDANT = "aria-activedescendant",\n\t        ID = "id",\n\t        isArray = $.isArray,\n\t        extend = $.extend,\n\t        proxy = $.proxy,\n\t        DATE = Date,\n\t        dateFormatRegExp = /d{1,2}|E{1,6}|e{1,6}|c{3,6}|c{1}|M{1,5}|L{1,5}|y{1,4}|H{1,2}|h{1,2}|k{1,2}|K{1,2}|m{1,2}|a{1,5}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|x{1,5}|X{1,5}|G{1,5}|q{1,5}|Q{1,5}|"[^"]*"|\'[^\']*\'/g,\n\t        LITERAL = "literal",\n\t        MONTH = "month",\n\t        HOUR = "hour",\n\t        ZONE = "zone",\n\t        WEEKDAY = "weekday",\n\t        QUARTER = "quarter",\n\t        DATE_FIELD_MAP = {\n\t            "G": "era",\n\t            "y": "year",\n\t            "q": QUARTER,\n\t            "Q": QUARTER,\n\t            "M": MONTH,\n\t            "L": MONTH,\n\t            "d": "day",\n\t            "E": WEEKDAY,\n\t            "c": WEEKDAY,\n\t            "e": WEEKDAY,\n\t            "h": HOUR,\n\t            "H": HOUR,\n\t            "k": HOUR,\n\t            "K": HOUR,\n\t            "m": "minute",\n\t            "s": "second",\n\t            "a": "dayperiod",\n\t            "x": ZONE,\n\t            "X": ZONE,\n\t            "z": ZONE,\n\t            "Z": ZONE\n\t        },\n\t        NAME_TYPES = {\n\t            month: {\n\t                type: "months",\n\t                minLength: 3,\n\t                standAlone: "L"\n\t            },\n\n\t            quarter: {\n\t                type: "quarters",\n\t                minLength: 3,\n\t                standAlone: "q"\n\t            },\n\n\t            weekday: {\n\t                type: "days",\n\t                minLength: {\n\t                    E: 0,\n\t                    c: 3,\n\t                    e: 3\n\t                },\n\t                standAlone: "c"\n\t            },\n\n\t            dayperiod: {\n\t                type: "dayPeriods",\n\t                minLength: 0\n\t            },\n\n\t            era: {\n\t                type: "eras",\n\t                minLength: 0\n\t            }\n\t        },\n\t        TODAY = new DATE(),\n\t        MODERN_RENDERING_TEMPLATE = \'<div tabindex="0" class="k-timeselector">\' +\n\t            \'<div class="k-time-header">\' +\n\t                \'<span class="k-title"></span>\' +\n\t                \'<button class="k-button k-flat k-time-now" title="Select now" aria-label="Select now">#=messages.now#</button>\' +\n\t            \'</div>\' +\n\t            \'<div class="k-time-list-container">\' +\n\t                \'<span class="k-time-highlight"></span>\' +\n\t            \'</div>\' +\n\t        \'</div>\',\n\t        NEW_RENDERING_FOOTER = \'<div class="k-time-footer k-action-buttons">\' +\n\t            \'<button class="k-button k-time-cancel" title="Cancel changes" aria-label="Cancel changes">#=messages.cancel#</button>\' +\n\t            \'<button class="k-time-accept k-button k-primary" title="Set time" aria-label="Set time">#=messages.set#</button>\' +\n\t            \'</div>\',\n\t        HIGHLIGHTCONTAINER = \'<span class="k-time-highlight"></span>\';\n\n\t        TODAY = new Date(TODAY.getFullYear(), TODAY.getMonth(), TODAY.getDate(), 0, 0, 0);\n\n\t    var TimeView = function(options) {\n\t        var that = this,\n\t        id = options.id;\n\n\t        that.options = options;\n\t        that._dates = [];\n\n\t        that._createList(options.timeView && options.timeView.list === "scroll");\n\n\t        if (id) {\n\t            that._timeViewID = id + "_timeview";\n\t            that._optionID = id + "_option_selected";\n\n\t            that.ul.attr(ID, that._timeViewID);\n\t        }\n\n\t        that._heightHandler = proxy(that._height, that);\n\n\t        that._popup();\n\t    };\n\n\t    TimeView.prototype = {\n\t        _createList: function (scroll) {\n\t            if (scroll) {\n\t                this._createScrollList();\n\t            } else {\n\t                this._createClassicRenderingList();\n\t            }\n\t        },\n\t        _createScrollList: function () {\n\t            this.list = $(kendo.template(MODERN_RENDERING_TEMPLATE)(this.options))\n\t                .on(MOUSEDOWN, preventDefault);\n\n\t            if (!this.options.omitPopup) {\n\t                this.list.append(kendo.template(NEW_RENDERING_FOOTER)(this.options));\n\t            }\n\n\t            this.ul = this.list.find(".k-time-list-container");\n\t            this.list.on("click"+ns, ".k-time-header button.k-time-now", proxy(this._nowClickHandler, this));\n\t            this.list.on("click"+ns, ".k-time-footer button.k-time-cancel", proxy(this._cancelClickHandler, this));\n\t            this.list.on("click"+ns, ".k-time-footer button.k-time-accept", proxy(this._setClickHandler, this));\n\t            this.list.on("mouseover"+ns, ".k-time-list-wrapper", proxy(this._mouseOverHandler, this));\n\t            this.list.on("keydown"+ns, proxy(this._scrollerKeyDownHandler, this));\n\t        },\n\n\t        _scrollerKeyDownHandler: function (e) {\n\t            var that = this,\n\t                key = e.keyCode,\n\t                list = $(e.currentTarget).find(".k-time-list-wrapper.k-state-focused"),\n\t                lists = that.list.find(".k-time-list-wrapper"),\n\t                length = lists.length,\n\t                index = lists.index(list),\n\t                isRtl = kendo.support.isRtl(that.wrapper),\n\t                itemHeight = getItemHeight(list.find(".k-item:visible:eq(0)")),\n\t                container = list.find(".k-time-container.k-content.k-scrollable");\n\n\t            if (!list.length) {\n\t                return;\n\t            }\n\n\t            if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {\n\t                if (index + 1 < length) {\n\t                    that._focusList(lists.eq(index + 1));\n\t                }\n\n\t            } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {\n\t                if (index - 1 >= 0) {\n\t                    that._focusList(lists.eq(index - 1));\n\t                }\n\t            } else if (key == keys.UP) {\n\t                container.scrollTop(container.scrollTop() - itemHeight);\n\t                e.preventDefault();\n\t            } else if (key == keys.DOWN) {\n\t                container.scrollTop(container.scrollTop() + itemHeight);\n\t                e.preventDefault();\n\t            } else if (key === keys.ENTER) {\n\t                that._setClickHandler();\n\t            } else if (key === keys.ESC) {\n\t                that._cancelClickHandler();\n\t            }\n\t        },\n\n\t        _mouseOverHandler: function (e) {\n\t            this._focusList($(e.currentTarget));\n\t        },\n\n\t        _focusList: function(list){\n\t            this.list.find(".k-time-list-wrapper").removeClass(FOCUSED);\n\t            list.addClass(FOCUSED);\n\t            this.list.focus();\n\t            this._scrollTop = list.find(\'.k-scrollable\').scrollTop();\n\t        },\n\t        _createClassicRenderingList: function () {\n\t            var that = this;\n\n\t            that.ul = $(\'<ul tabindex="-1" role="listbox" aria-hidden="true" unselectable="on" class="k-list k-reset"/>\')\n\t                .css({\n\t                    overflow: support.kineticScrollNeeded ? "" : "auto"\n\t                })\n\t                .on(CLICK, LI, proxy(that._click, that))\n\t                .on("mouseenter" + ns, LI, function () {\n\t                    $(this).addClass(HOVER);\n\t                })\n\t                .on("mouseleave" + ns, LI, function () {\n\t                    $(this).removeClass(HOVER);\n\t                });\n\n\t            that.list = $("<div class=\'k-list-container k-list-scroller\' unselectable=\'on\'/>")\n\t                .append(that.ul)\n\t                .on(MOUSEDOWN, preventDefault);\n\n\t            that.template = kendo.template(\'<li tabindex="-1" role="option" class="k-item" unselectable="on">#=data#</li>\', {\n\t                useWithBlock: false\n\t            });\n\n\t        },\n\t        current: function(candidate) {\n\t            var that = this,\n\t                active = that.options.active;\n\n\t            if (candidate !== undefined) {\n\t                if (that._current) {\n\t                    that._current\n\t                        .removeClass(SELECTED);\n\t                        if(that._current && that._current.length) {\n\t                            that._current[0].removeAttribute(ID);\n\t                            that._current[0].removeAttribute(ARIA_SELECTED);\n\t                        }\n\t                }\n\n\t                if (candidate) {\n\t                    candidate = $(candidate).addClass(SELECTED)\n\t                                            .attr(ID, that._optionID)\n\t                                            .attr(ARIA_SELECTED, true);\n\n\t                    that.scroll(candidate[0]);\n\t                }\n\n\t                that._current = candidate;\n\n\t                if (active) {\n\t                    active(candidate);\n\t                }\n\t            } else {\n\t                return that._current;\n\t            }\n\t        },\n\n\t        _updateTitle: function () {\n\t            this.list.find(".k-time-header > .k-title").html(kendo.toString(this._value, this.options.format, this.options.culture));\n\t        },\n\n\t        applyValue: function (value) {\n\t            if (!value) {\n\t                return;\n\t            }\n\n\t            var is12hourFormat = includes(this.options.format.toLowerCase(), "t");\n\t            var hours = value.getHours();\n\t            var minutes = value.getMinutes();\n\t            var seconds = value.getSeconds();\n\t            var designator;\n\t            var hoursList = this.ul.find(\'[data-index="1"]\');\n\t            var minutessList = this.ul.find(\'[data-index="2"]\');\n\t            var secondsList = this.ul.find(\'[data-index="3"]\');\n\t            var designatorList = this.ul.find(\'[data-index="4"]\');\n\n\t            if (is12hourFormat) {\n\t                if (hours >= 12) {\n\t                    designator = "PM";\n\t                    if (hours > 12) {\n\t                        hours -= 12;\n\t                    }\n\t                } else {\n\t                    designator = "AM";\n\t                    if (hours === 0) {\n\t                        hours = 12;\n\t                    }\n\t                }\n\t            }\n\n\t            if (hoursList.length) {\n\t                this._scrollListToPosition(hoursList, hours);\n\t            }\n\n\t            if (minutessList.length) {\n\t                this._scrollListToPosition(minutessList, minutes);\n\t            }\n\n\t            if (secondsList.length) {\n\t                this._scrollListToPosition(secondsList, seconds);\n\t            }\n\n\t            if (designatorList.length) {\n\t                this._scrollListToPosition(designatorList, designator);\n\t            }\n\t        },\n\n\t        _scrollListToPosition: function(list, value) {\n\t            var item = list.find(\'.k-item[data-value="\' + pad(value) + \'"]\');\n\t            var itemHeight = getItemHeight(item);\n\n\t            list.scrollTop(list.find(".k-item:visible").index(item) * itemHeight);\n\t        },\n\n\t        close: function() {\n\t            this.popup.close();\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that.ul.off(ns);\n\t            that.list.off(ns);\n\t            if (this.popup) {\n\t                that.popup.destroy();\n\t            }\n\t        },\n\n\t        open: function() {\n\t            var that = this;\n\t            var popupHovered;\n\n\t            if (!that.ul[0].firstChild || (that.ul.find("li").length < 1)) {\n\t                that.bind();\n\t            }\n\n\t            // In some cases when the popup is opened resize is triggered which will cause it to close\n\t            // Setting the below flag will prevent this from happening\n\t            // Reference: https://github.com/telerik/kendo/pull/7553\n\t            popupHovered = that.popup._hovered;\n\t            that.popup._hovered = true;\n\n\t            that.popup.open();\n\n\t            setTimeout(function() {\n\t                that.popup._hovered = popupHovered;\n\t            }, 1);\n\n\t            if (that._current) {\n\t                that.scroll(that._current[0]);\n\t            }\n\t        },\n\n\t        dataBind: function(dates) {\n\t            var that = this,\n\t                options = that.options,\n\t                format = options.format,\n\t                toString = kendo.toString,\n\t                template = that.template,\n\t                length = dates.length,\n\t                idx = 0,\n\t                date,\n\t                html = "";\n\n\t            for (; idx < length; idx++) {\n\t                date = dates[idx];\n\n\t                if (isInRange(date, options.min, options.max)) {\n\t                    html += template(toString(date, format, options.culture));\n\t                }\n\t            }\n\n\t            that._html(html);\n\t        },\n\n\t        refresh: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                format = options.format,\n\t                offset = dst(),\n\t                ignoreDST = offset < 0,\n\t                value = kendo.parseDate(that._value),\n\t                parsedValue = value ? mergeDateAndTime(value, options.min) : mergeDateAndTime(new Date(), options.min),\n\t                min = options.min,\n\t                max = options.max,\n\t                msMin = getMilliseconds(min),\n\t                msMax = getMilliseconds(max),\n\t                msLastTime = getMilliseconds(lastTimeOption(options.interval)),\n\t                msInterval = options.interval * MS_PER_MINUTE,\n\t                toString = kendo.toString,\n\t                template = that.template,\n\t                start = options.useValueToRender ? parsedValue : new Date(+options.min),\n\t                startDate = new DATE(start),\n\t                msStart,\n\t                length,\n\t                html = "";\n\n\t            if (ignoreDST) {\n\t                length = (MS_PER_DAY + (offset * MS_PER_MINUTE)) / msInterval;\n\t            } else {\n\t                length = MS_PER_DAY / msInterval;\n\t            }\n\n\t            if (msMin != msMax || msLastTime === msMax) {\n\t                if (msMin > msMax) {\n\t                    msMax += MS_PER_DAY;\n\t                }\n\n\t                length = ((msMax - msMin) / msInterval) + 1;\n\t            }\n\n\t            if (options.timeView && options.timeView.list === "scroll") {\n\t                html = that._createListContent(splitDateFormat(format));\n\t            } else {\n\t                that.getDatesInRange(msStart, msMax, startDate, max, msInterval, start).forEach(function (date) {\n\t                    html += template(toString(date, format, options.culture));\n\t                });\n\t            }\n\n\t            that._html(html);\n\t        },\n\n\t        _updateListBottomOffset: function (list) {\n\t            var itemHeight = getItemHeight(list.find(".k-item:visible:eq(0)"));\n\t            var listHeight = list.outerHeight();\n\t            var bottomOffset = listHeight - itemHeight;\n\t            list.find(".k-scrollable-placeholder").css({\n\t                height: list.find("ul").height() + bottomOffset\n\t            });\n\t        },\n\n\t        _updateHoursRange: function () {\n\t            var that = this;\n\t            var hoursList = this.ul.find(\'[data-index="1"]\');\n\t            var minHours = this._minHours;\n\t            var maxHours = this._maxHours;\n\t            var is12hourFormat = includes(this.options.format.toLowerCase(), "t");\n\t            var useMax;\n\t            var useMin;\n\t            var selectedDesignator = this._findSelectedValue(this.ul.find(\'[data-index="4"]\'));\n\n\t            if (!hoursList.length) {\n\t                return;\n\t            }\n\n\t            if (is12hourFormat && selectedDesignator) {\n\n\t                if (selectedDesignator === "AM") {\n\t                    if (minHours < 12) {\n\t                        useMin = true;\n\t                    }\n\n\t                    if (maxHours < 12) {\n\t                        useMax = true;\n\t                    }\n\t                } else if (selectedDesignator === "PM") {\n\n\t                    if (minHours > 12) {\n\t                        useMin = true;\n\t                        minHours -= 12;\n\t                    }\n\n\t                    if (maxHours > 12) {\n\t                        useMax = true;\n\t                        maxHours -= 12;\n\t                    }\n\t                }\n\n\t                hoursList.find(".k-item").each(function (_, item) {\n\t                    item = $(item);\n\t                    var value = +item.attr("data-value");\n\t                    if ((that._validateMin && useMin && value < minHours) || (that._validateMax && useMax && value > maxHours)) {\n\t                        item.hide();\n\t                    } else {\n\t                        item.show();\n\t                    }\n\t                });\n\t            } else {\n\t                hoursList.find(".k-item").each(function (_, item) {\n\t                    item = $(item);\n\t                    var value = +item.attr("data-value");\n\t                    if ((that._validateMin && value < minHours) ||\n\t                        (that._validateMax && value > maxHours)) {\n\t                        item.hide();\n\t                    } else {\n\t                        item.show();\n\t                    }\n\t                });\n\t            }\n\n\t            this._updateListBottomOffset(hoursList);\n\t        },\n\n\t        _updateMinutesRange: function () {\n\t            var that = this;\n\t            var minutesList = this.ul.find(\'[data-index="2"]\');\n\t            var minHours = this._minHours;\n\t            var maxHours = this._maxHours;\n\t            var minMinutes = this._minMinutes;\n\t            var maxMinutes = this._maxMinutes;\n\t            var selectedHour = +this._findSelectedValue(this.ul.find(\'[data-index="1"]\'));\n\t            var is12hourFormat = includes(this.options.format.toLowerCase(), "t");\n\t            var selectedDesignator = this._findSelectedValue(this.ul.find(\'[data-index="4"]\'));\n\n\t            if (is12hourFormat && selectedDesignator === "PM") {\n\t                selectedHour += 12;\n\t            }\n\n\t            if (!minutesList.length) {\n\t                return;\n\t            }\n\n\t            minutesList.find(".k-item").each(function (_, item) {\n\t                item = $(item);\n\t                var value = +item.attr("data-value");\n\t                if ((that._validateMin && value < minMinutes && minHours && selectedHour === minHours) ||\n\t                    (that._validateMax && value > maxMinutes && maxHours && selectedHour === maxHours)) {\n\t                    item.hide();\n\t                } else {\n\t                    item.show();\n\t                }\n\t            });\n\n\t            this._updateListBottomOffset(minutesList);\n\t        },\n\n\t        _updateSecondsRange: function () {\n\t            var that = this;\n\t            var secondsList = this.ul.find(\'[data-index="3"]\');\n\t            var minSeconds = this._minSeconds;\n\t            var maxSeconds = this._minSeconds;\n\t            var minMinutes = this._minMinutes;\n\t            var maxMinutes = this._maxMinutes;\n\t            var selectedMinutes = +this._findSelectedValue(this.ul.find(\'[data-index="2"]\'));\n\n\t            if (!secondsList.length) {\n\t                return;\n\t            }\n\n\t            secondsList.find(".k-item").each(function (_, item) {\n\t                item = $(item);\n\t                var value = +item.attr("data-value");\n\t                if ((that._validateMin && value < minSeconds && minMinutes && selectedMinutes === minMinutes) ||\n\t                    (that._validateMax && value > maxSeconds && maxMinutes && selectedMinutes === maxMinutes)) {\n\t                    item.hide();\n\t                } else {\n\t                    item.show();\n\t                }\n\t            });\n\n\t            this._updateListBottomOffset(secondsList);\n\t        },\n\n\t        _updateDesignatorRange: function () {\n\t            var minHours = this._minHours;\n\t            var maxHours = this._maxHours;\n\t            var designatorList = this.ul.find(\'[data-index="4"]\');\n\n\t            if (!designatorList.length) {\n\t               return;\n\t            }\n\n\t            if (this._validateMin && minHours >= 12) {\n\t                designatorList.find(\'.k-item[data-value="AM"]\').hide();\n\t            } else {\n\t                designatorList.find(\'.k-item[data-value="AM"]\').show();\n\t            }\n\n\t            if (this._validateMax && maxHours < 12) {\n\t                designatorList.find(\'.k-item[data-value="PM"]\').hide();\n\t            } else {\n\t                designatorList.find(\'.k-item[data-value="PM"]\').show();\n\t            }\n\t        },\n\n\n\t        _updateRanges: function () {\n\t            if (!this.options.specifiedRange) {\n\t                return;\n\t            }\n\t            if (!this._currentlySelected) {\n\t                this._currentlySelected = new Date();\n\t            }\n\n\t            var max = this.options.max;\n\t            var min = this.options.min;\n\n\t            if (this.options.validateDate) {\n\t                if (max.getFullYear() === this._currentlySelected.getFullYear() &&\n\t                    max.getMonth() === this._currentlySelected.getMonth() &&\n\t                    max.getDate() === this._currentlySelected.getDate()) {\n\t                    this._validateMax = true;\n\t                } else {\n\t                    this._validateMax = false;\n\t                }\n\n\t                if (min.getFullYear() === this._currentlySelected.getFullYear() &&\n\t                    min.getMonth() === this._currentlySelected.getMonth() &&\n\t                    min.getDate() === this._currentlySelected.getDate()) {\n\t                    this._validateMin = true;\n\t                } else {\n\t                    this._validateMin = false;\n\t                }\n\n\t                if (!this._validateMax && !this._validateMin) {\n\t                    return;\n\t                }\n\t            } else {\n\t                this._validateMax = true;\n\t                this._validateMin = true;\n\t            }\n\n\t            this._minMinutes = min.getMinutes();\n\t            this._maxMinutes = max.getMinutes();\n\t            this._minHours = min.getHours();\n\t            this._maxHours = max.getHours();\n\t            this._minSeconds = min.getSeconds();\n\t            this._maxSeconds = max.getSeconds();\n\n\t            this._updateDesignatorRange();\n\t            this._updateHoursRange();\n\t            this._updateMinutesRange();\n\t            this._updateSecondsRange();\n\t        },\n\n\t        addTranslate: function () {\n\t            var lists = this.ul.find(".k-time-container.k-content.k-scrollable");\n\t            var length = lists.length;\n\t            var list;\n\t            var itemHeight;\n\t            var listHeight;\n\t            var topOffset;\n\t            var translate;\n\t            var bottomOffset;\n\n\t            for (var i = 0; i < length; i++) {\n\t                list = lists.eq(i);\n\t                itemHeight = getItemHeight(list.find(".k-item:visible:eq(0)"));\n\t                listHeight = list.outerHeight();\n\t                topOffset = (listHeight - itemHeight) / 2;\n\t                translate = "translateY(" + topOffset + "px)";\n\t                bottomOffset = listHeight - itemHeight;\n\t                list.find("ul").css({\n\t                    transform: translate,\n\t                    "-ms-transform": translate\n\t                });\n\t                list.find(".k-scrollable-placeholder").css({\n\t                    height: list.find("ul").height() + bottomOffset\n\t                });\n\t                list.off(ns)\n\t                    .on("click" + ns, ".k-item", proxy(this._itemClickHandler, this))\n\t                    .on("scroll" + ns, proxy(this._listScrollHandler, this));\n\t            }\n\t        },\n\n\t        _nowClickHandler: function () {\n\t            var now = new Date();\n\t            this.value(now);\n\t            this.options.change(kendo.toString(now, this.options.format, this.options.culture));\n\t        },\n\n\t        _cancelClickHandler: function () {\n\t            this.value(this._value);\n\t            this.popup.close();\n\t        },\n\n\t        _setClickHandler: function () {\n\t            this._value = new Date(this._currentlySelected);\n\n\t            this.options.change(kendo.toString(this._currentlySelected, this.options.format, this.options.culture), true);\n\t            this.popup.close();\n\t        },\n\n\t        _listScrollHandler: function (e) {\n\t            var that = this;\n\t            var itemHeight = getItemHeight($(e.currentTarget).find(".k-item:visible:eq(0)"));\n\n\t            if (that._scrollingTimeout) {\n\t                clearTimeout(that._scrollingTimeout);\n\t            }\n\n\t            that._scrollingTimeout = setTimeout(function () {\n\t                if (e.currentTarget.scrollTop % itemHeight > 1) {\n\t                    e.currentTarget.scrollTop += itemHeight - e.currentTarget.scrollTop % itemHeight;\n\t                }\n\t                that._scrollTop = e.currentTarget.scrollTop;\n\t                that._updateCurrentlySelected();\n\t                that._updateRanges();\n\t            }, 100);\n\t        },\n\n\t        _updateCurrentlySelected: function () {\n\t            var is12hourFormat = includes(this.options.format.toLowerCase(), "t");\n\t            var hoursList = this.ul.find(\'[data-index="1"]\');\n\t            var minutesList = this.ul.find(\'[data-index="2"]\');\n\t            var secondsList = this.ul.find(\'[data-index="3"]\');\n\t            var designatorList = this.ul.find(\'[data-index="4"]\');\n\t            var selectedHour;\n\t            var selectedMinutes;\n\t            var selectedSeconds;\n\t            var selectedDesignator;\n\n\t            if (!this.ul.is(":visible")) {\n\t                return;\n\t            }\n\n\t            if (!this._currentlySelected) {\n\t                this._currentlySelected = this._value ? new Date(this._value) : new Date();\n\t            }\n\n\t            if (hoursList.length) {\n\t                selectedHour = +this._findSelectedValue(hoursList);\n\t            }\n\n\t            if (minutesList.length) {\n\t                selectedMinutes = +this._findSelectedValue(minutesList);\n\t            }\n\n\t            if (secondsList.length) {\n\t                selectedSeconds = +this._findSelectedValue(secondsList);\n\t            }\n\n\t            if (designatorList.length) {\n\t                selectedDesignator = this._findSelectedValue(designatorList);\n\t            }\n\n\t            if (is12hourFormat) {\n\t                if (selectedDesignator == "PM") {\n\t                    selectedHour += 12;\n\t                    if (selectedHour == 24) {\n\t                        selectedHour = 12;\n\t                    }\n\t                }\n\n\t                if (selectedDesignator === "AM" && selectedHour === 12) {\n\t                    selectedHour = 0;\n\t                }\n\t            }\n\n\t            if (selectedHour !== undefined) {\n\t                this._currentlySelected.setHours(selectedHour);\n\t            }\n\n\t            if (selectedMinutes !== undefined) {\n\t                this._currentlySelected.setMinutes(selectedMinutes);\n\t            }\n\n\t            if (selectedSeconds !== undefined) {\n\t                this._currentlySelected.setSeconds(selectedSeconds);\n\t            }\n\t        },\n\n\t        _findSelectedValue: function(list) {\n\t           var firstOccurence = firstItemIndex(list.scrollTop(), getItemHeight(list.find(".k-item:visible:eq(0)")));\n\t           return list.find(".k-item:visible").eq(firstOccurence).attr("data-value");\n\t        },\n\n\t        _itemClickHandler: function (e) {\n\t            var list = $(e.originalEvent.currentTarget);\n\t            var index = list.find(".k-item:visible").index($(e.currentTarget));\n\t            var itemHeight = getItemHeight(list.find(".k-item:visible:eq(0)"));\n\n\t            list.scrollTop(index * itemHeight);\n\t        },\n\n\t        getDatesInRange: function (msStart, msMax, startDate, max, msInterval, start) {\n\t            var result = [];\n\n\t            while (true) {\n\t                if (msMax && (getMilliseconds(start) >= msMax || startDate.getDate() != start.getDate())) {\n\t                    msStart = getMilliseconds(start);\n\t                    if (startDate < start) {\n\t                        msStart += MS_PER_DAY;\n\t                    }\n\t                    if (msStart > msMax) {\n\t                        start = new DATE(+max);\n\t                    }\n\t                    if (getMilliseconds(start) > 0) {\n\t                        result.push(new Date(start));\n\t                    }\n\t                    break;\n\t                }\n\t                if (startDate.getDate() != start.getDate()) {\n\t                    break;\n\t                }\n\t                result.push(new Date(start));\n\t                start.setTime(start.getTime() + msInterval);\n\t                if (!msMax && this.options.maxSet){\n\t                    break;\n\t                }\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _createListContent: function (parts) {\n\t            var length = parts.length;\n\t            var result = "";\n\t            var part;\n\t            var values;\n\n\t            for (var i = 0; i < length; i++) {\n\t                part = parts[i];\n\n\t                if (part.type === "literal") {\n\t                    result += this._literalTemplate(part);\n\t                } else {\n\t                    values = this._getValues(part, true);\n\t                    result += this._itemTemplate(values.values, part, this.options.messages[part.type], values.index);\n\t                }\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _itemTemplate: function (values, part, title, index) {\n\t            var result ="";\n\t            var length = values.length;\n\n\t            result += \'<div class="k-time-list-wrapper" role="presentation">\' +\n\t                        \'<span class="k-title">\' + (title || part.type) + \'</span>\' +\n\t                        \'<div class="k-time-list">\' +\n\t                            \'<div class="k-time-container k-content k-scrollable" role="presentation" data-index="\' + index + \'">\' +\n\t                                \'<ul class="k-reset">\';\n\n\t            for( var i = 0;i < length; i++){\n\t                result += \'<li class="k-item" data-value="\' + values[i] + \'">\' +\n\t                                \'<span>\' + values[i] + \'</span>\' +\n\t                           \'</li>\';\n\t            }\n\n\t            result += \'</ul>\' +\n\t                      \'<div class="k-scrollable-placeholder"></div>\' +\n\t                    \'</div>\' +\n\t                \'</div>\' +\n\t            \'</div>\';\n\n\t            return result;\n\t        },\n\n\t        _getValues: function (part, shouldPad) {\n\t            var result = [];\n\t            var index;\n\t            var start = 0;\n\t            var end;\n\n\t            if (part.type === "hour") {\n\t                start = 1;\n\t                index = 1;\n\t                end = part.hour12 ? 12 : 24;\n\t            } else if (part.type === "minute") {\n\t                index = 2;\n\t                end = 59;\n\t            } else if (part.type === "second") {\n\t                index = 3;\n\t                end = 59;\n\t            }\n\n\t            for (; start <= end; start++) {\n\t                result.push(shouldPad ? pad(start) : start);\n\t            }\n\n\t            return {\n\t                values: result,\n\t                index: index\n\t            };\n\t        },\n\n\t        _literalTemplate: function (part) {\n\t            var result = \'<div class="k-time-separator">\' +\n\t                (part.pattern === " tt" ? \':\' : part.pattern) +\n\t                \'</div>\';\n\n\t            if (part.pattern === " tt") {\n\t                result += this._itemTemplate(["AM", "PM"], part, "AM/PM", 4);\n\t            }\n\n\t            return result;\n\t        },\n\n\t        bind: function() {\n\t            var that = this,\n\t                dates = that.options.dates;\n\n\t            if (dates && dates[0]) {\n\t                that.dataBind(dates);\n\t            } else {\n\t                that.refresh();\n\t            }\n\t        },\n\n\t        _html: function(html) {\n\t            var that = this;\n\n\t            if (that.options.timeView && that.options.timeView.list === "scroll") {\n\t                html = HIGHLIGHTCONTAINER + html;\n\t                that.ul.html(html);\n\t            } else {\n\t                that.ul[0].innerHTML = html;\n\t                that.popup.unbind(OPEN, that._heightHandler);\n\t                that.popup.one(OPEN, that._heightHandler);\n\n\t                that.current(null);\n\t                that.select(that._value);\n\t            }\n\t        },\n\n\t        scroll: function(item) {\n\t            if (!item) {\n\t                return;\n\t            }\n\n\t            var content = this.list[0],\n\t                itemOffsetTop = item.offsetTop,\n\t                itemOffsetHeight = item.offsetHeight,\n\t                contentScrollTop = content.scrollTop,\n\t                contentOffsetHeight = content.clientHeight,\n\t                bottomDistance = itemOffsetTop + itemOffsetHeight;\n\n\t                if (contentScrollTop > itemOffsetTop) {\n\t                    contentScrollTop = itemOffsetTop;\n\t                } else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {\n\t                    contentScrollTop = (bottomDistance - contentOffsetHeight);\n\t                }\n\n\t                content.scrollTop = contentScrollTop;\n\t        },\n\n\t        select: function(li) {\n\t            var that = this,\n\t                options = that.options,\n\t                current = that._current,\n\t                selection;\n\n\t            if (li instanceof Date) {\n\t                li = kendo.toString(li, options.format, options.culture);\n\t            }\n\n\t            if (typeof li === "string") {\n\t                if (!current || current.text() !== li) {\n\t                    li = $.grep(that.ul[0].childNodes, function(node) {\n\t                        return (node.textContent || node.innerText) == li;\n\t                    });\n\n\t                    li = li[0] ? li : null;\n\t                } else {\n\t                    li = current;\n\t                }\n\t            }\n\t            selection = that._distinctSelection(li);\n\t            that.current(selection);\n\t        },\n\n\t        _distinctSelection: function(selection) {\n\t            var that = this,\n\t                currentValue,\n\t                selectionIndex;\n\n\t            if (selection && selection.length > 1) {\n\t                currentValue = getMilliseconds(that._value);\n\t                selectionIndex = $.inArray(currentValue, that._dates);\n\t                selection = that.ul.children()[selectionIndex];\n\t            }\n\n\t            return selection;\n\t        },\n\n\t        setOptions: function(options) {\n\t            var old = this.options;\n\n\t            options.min = parse(options.min);\n\t            options.max = parse(options.max);\n\n\t            this.options = extend(old, options, {\n\t                active: old.active,\n\t                change: old.change,\n\t                close: old.close,\n\t                open: old.open\n\t            });\n\n\t            this.bind();\n\t        },\n\n\t        toggle: function() {\n\t            var that = this;\n\n\t            if (that.popup.visible()) {\n\t                that.close();\n\t            } else {\n\t                that.open();\n\t            }\n\t        },\n\n\t        value: function(value) {\n\t            var that = this;\n\n\t            that._value = value;\n\t            if (that.ul[0].firstChild) {\n\t                if (that.options.timeView && that.options.timeView.list === "scroll") {\n\t                    that.applyValue(value);\n\t                } else {\n\t                    that.select(value);\n\t                }\n\t            }\n\t        },\n\n\t        _click: function(e) {\n\t            var that = this,\n\t                li = $(e.currentTarget),\n\t                date = li.text(),\n\t                dates = that.options.dates;\n\n\t            if (dates && dates.length > 0) {\n\t                date = dates[li.index()];\n\t            }\n\n\t            if (!e.isDefaultPrevented()) {\n\t                that.select(li);\n\t                that.options.change(date, true);\n\t                that.close();\n\t            }\n\t        },\n\n\t        _height: function() {\n\t            var that = this;\n\t            var list = that.list;\n\t            var parent = list.parent(".k-animation-container");\n\t            var height = that.options.height;\n\n\t            if (that.ul[0].children.length) {\n\t                list.add(parent)\n\t                    .show()\n\t                    .height(that.ul[0].scrollHeight > height ? height : "auto")\n\t                    .hide();\n\t            }\n\t        },\n\n\t        _parse: function(value) {\n\t            var that = this,\n\t                options = that.options,\n\t                min = getMilliseconds(options.min) != getMilliseconds(TODAY) ? options.min : null,\n\t                max = getMilliseconds(options.max) != getMilliseconds(TODAY) ? options.max : null,\n\t                current = that._value || min || max || TODAY;\n\n\t            if (value instanceof DATE) {\n\t                return value;\n\t            }\n\n\t            value = parse(value, options.parseFormats, options.culture);\n\n\t            if (value) {\n\t                value = new DATE(current.getFullYear(),\n\t                                 current.getMonth(),\n\t                                 current.getDate(),\n\t                                 value.getHours(),\n\t                                 value.getMinutes(),\n\t                                 value.getSeconds(),\n\t                                 value.getMilliseconds());\n\t            }\n\n\t            return value;\n\t        },\n\n\t        _adjustListWidth: function() {\n\t            var list = this.list,\n\t                width = list[0].style.width,\n\t                wrapper = this.options.anchor,\n\t                computedStyle, computedWidth,\n\t                outerWidth = kendo._outerWidth;\n\n\t            if (!list.data("width") && width) {\n\t                return;\n\t            }\n\n\t            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;\n\t            computedWidth = computedStyle ? parseFloat(computedStyle.width) : outerWidth(wrapper);\n\n\t            if (computedStyle && (browser.mozilla || browser.msie)) { // getComputedStyle returns different box in FF and IE.\n\t                computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);\n\t            }\n\n\t            width = computedWidth - (outerWidth(list) - list.width());\n\n\t            list.css({\n\t                fontFamily: wrapper.css("font-family"),\n\t                width: width\n\t            })\n\t            .data("width", width);\n\t        },\n\n\t        _popup: function() {\n\t            var that = this,\n\t                list = that.list,\n\t                options = that.options,\n\t                anchor = options.anchor;\n\n\t            if(!this.options.omitPopup){\n\n\t                that.popup = new ui.Popup(list, extend(options.popup, {\n\t                    anchor: anchor,\n\t                    open: options.open,\n\t                    close: options.close,\n\t                    animation: options.animation,\n\t                    isRtl: support.isRtl(options.anchor),\n\t                    activate: function () {\n\t                        if (that.options.timeView && that.options.timeView.list === "scroll") {\n\t                            that.addTranslate();\n\t                            if (that._value) {\n\t                                that.applyValue(that._value);\n\t                            } else {\n\t                                that._updateCurrentlySelected();\n\t                            }\n\t                            that._updateRanges();\n\t                            that._focusList(that.list.find(".k-time-list-wrapper:eq(0)"));\n\t                        }\n\t                    }\n\t                }));\n\t            } else {\n\t                list.appendTo(options.timeDiv);\n\t            }\n\t        },\n\n\t        move: function(e) {\n\t            var that = this,\n\t                key = e.keyCode,\n\t                ul = that.ul[0],\n\t                current = that._current,\n\t                down = key === keys.DOWN;\n\n\t            if (key === keys.UP || down) {\n\t                if (e.altKey) {\n\t                    that.toggle(down);\n\t                    return;\n\t                } else if (down) {\n\t                    current = current ? current[0].nextSibling : ul.firstChild;\n\t                } else {\n\t                    current = current ? current[0].previousSibling : ul.lastChild;\n\t                }\n\n\t                if (current) {\n\t                    that.select(current);\n\t                }\n\n\t                that.options.change(that._current.text());\n\t                e.preventDefault();\n\n\t            } else if (key === keys.ENTER || key === keys.TAB || key === keys.ESC) {\n\t                e.preventDefault();\n\t                if (current) {\n\t                    that.options.change(current.text(), true);\n\t                }\n\t                that.close();\n\t            }\n\t        }\n\t    };\n\n\t    function dst() {\n\t        var today = new DATE(),\n\t            midnight = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0),\n\t            noon = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0, 0);\n\n\t        return -1 * (midnight.getTimezoneOffset() - noon.getTimezoneOffset());\n\t    }\n\n\t    function getMilliseconds(date) {\n\t        return date.getHours() * 60 * MS_PER_MINUTE + date.getMinutes() * MS_PER_MINUTE + date.getSeconds() * 1000 + date.getMilliseconds();\n\t    }\n\n\t    function lastTimeOption(interval) {\n\t        var date = new Date(2100, 0, 1);\n\t        date.setMinutes(-interval);\n\t        return date;\n\t    }\n\n\t    function isInRange(value, min, max) {\n\t        var msMin = getMilliseconds(min),\n\t            msMax = getMilliseconds(max),\n\t            msValue;\n\n\t        if (!value || msMin == msMax) {\n\t            return true;\n\t        }\n\n\t        msValue = getMilliseconds(value);\n\n\t        if (msMin > msValue) {\n\t            msValue += MS_PER_DAY;\n\t        }\n\n\t        if (msMax < msMin) {\n\t            msMax += MS_PER_DAY;\n\t        }\n\n\t        return msValue >= msMin && msValue <= msMax;\n\t    }\n\n\t    TimeView.getMilliseconds = getMilliseconds;\n\n\t    kendo.TimeView = TimeView;\n\n\t    var TimePicker = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this, ul, timeView, disabled;\n\n\t            options = options || {};\n\t            options.componentType = options.componentType || "classic";\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            element = that.element;\n\t            options = that.options;\n\n\t            options.min = parse(element.attr("min")) || parse(options.min);\n\t            options.max = parse(element.attr("max")) || parse(options.max);\n\n\t            if (+options.max != +TODAY || +options.min != +TODAY) {\n\t                this._specifiedRange = true;\n\t            }\n\n\t            normalize(options);\n\n\t            that._initialOptions = extend({}, options);\n\n\t            that._wrapper();\n\n\t            if (that.options.timeView && that.options.timeView.list === "scroll") {\n\t                that.options.height = null;\n\t            }\n\n\t            that.timeView = timeView = new TimeView(extend({}, options, {\n\t                id: element.attr(ID),\n\t                anchor: that.wrapper,\n\t                format: options.format,\n\t                change: function(value, trigger) {\n\t                    if (trigger) {\n\t                        that._change(value);\n\t                    } else {\n\t                        element.val(value);\n\t                    }\n\t                },\n\t                open: function(e) {\n\t                    if (that.options.timeView && that.options.timeView.list !== "scroll") {\n\t                        that.timeView._adjustListWidth();\n\t                    } else {\n\t                        that.timeView._updateTitle();\n\t                    }\n\n\t                    if (that.trigger(OPEN)) {\n\t                        e.preventDefault();\n\t                    } else {\n\t                        element.attr(ARIA_EXPANDED, true);\n\t                        ul.attr(ARIA_HIDDEN, false);\n\t                    }\n\t                },\n\t                close: function(e) {\n\t                    if (that.trigger(CLOSE)) {\n\t                        e.preventDefault();\n\t                    } else {\n\t                        element.attr(ARIA_EXPANDED, false);\n\t                        ul.attr(ARIA_HIDDEN, true);\n\t                    }\n\t                },\n\t                active: function(current) {\n\t                    if(element && element.length) {\n\t                        element[0].removeAttribute(ARIA_ACTIVEDESCENDANT);\n\t                    }\n\t                    if (current) {\n\t                        element.attr(ARIA_ACTIVEDESCENDANT, timeView._optionID);\n\t                    }\n\t                },\n\t                specifiedRange: that._specifiedRange,\n\t                maxSet: +options.max != +TODAY\n\t            }));\n\t            ul = timeView.ul;\n\n\t            that._icon();\n\t            that._reset();\n\n\t            try {\n\t                element[0].setAttribute("type", "text");\n\t            } catch(e) {\n\t                element[0].type = "text";\n\t            }\n\n\t            element.addClass("k-input")\n\t                   .attr({\n\t                        "role": "combobox",\n\t                        "aria-expanded": false,\n\t                        "aria-owns": timeView._timeViewID,\n\t                        "autocomplete": "off"\n\t                   });\n\n\t            disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(\':disabled\');\n\t            if (disabled) {\n\t                that.enable(false);\n\t            } else {\n\t                that.readonly(element.is("[readonly]"));\n\t            }\n\t            if (options.dateInput) {\n\t                var min = options.min;\n\t                var max = options.max;\n\t                var today = new DATE();\n\t                if (getMilliseconds(min) == getMilliseconds(max)) {\n\t                    min = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);\n\t                    max = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 24, 0, 0);\n\t                }\n\n\t                that._dateInput = new ui.DateInput(element, {\n\t                    culture: options.culture,\n\t                    format: options.format,\n\t                    min: min,\n\t                    max: max,\n\t                    value: options.value,\n\t                    interval: options.interval\n\t                });\n\t            }\n\t            that._old = that._update(options.value || that.element.val());\n\t            that._oldText = element.val();\n\n\t            kendo.notify(that);\n\t        },\n\n\t        options: {\n\t            name: "TimePicker",\n\t            min: TODAY,\n\t            max: TODAY,\n\t            format: "",\n\t            dates: [],\n\t            parseFormats: [],\n\t            value: null,\n\t            interval: 30,\n\t            height: 200,\n\t            animation: {},\n\t            dateInput: false,\n\t            messages: {\n\t                set: "Set",\n\t                cancel: "Cancel",\n\t                hour: "hour",\n\t                minute: "minute",\n\t                second: "second",\n\t                millisecond: "millisecond",\n\t                now: "Now"\n\t            },\n\t            componentType: "classic"\n\t        },\n\n\t        events: [\n\t         OPEN,\n\t         CLOSE,\n\t         CHANGE\n\t        ],\n\n\t        componentTypes: {\n\t            "classic": {\n\t                timeView: {\n\t                    list: "list"\n\t                }\n\t            },\n\t            "modern": {\n\t                timeView: {\n\t                    list: "scroll"\n\t                }\n\t            }\n\t        },\n\n\t        setOptions: function(options) {\n\t            var that = this;\n\t            var value = that._value;\n\n\t            Widget.fn.setOptions.call(that, options);\n\t            options = that.options;\n\n\t            normalize(options);\n\n\t            that.timeView.setOptions(options);\n\n\t            if (value) {\n\t                that.element.val(kendo.toString(value, options.format, options.culture));\n\t            }\n\t        },\n\n\t        dataBind: function(dates) {\n\t            if (isArray(dates)) {\n\t                this.timeView.dataBind(dates);\n\t            }\n\t        },\n\n\t        _editable: function(options) {\n\t            var that = this,\n\t                disable = options.disable,\n\t                readonly = options.readonly,\n\t                arrow = that._arrow.off(ns),\n\t                element = that.element.off(ns),\n\t                wrapper = that._inputWrapper.off(ns);\n\n\t            if (that._dateInput) {\n\t                that._dateInput._unbindInput();\n\t            }\n\n\t            if (!readonly && !disable) {\n\t                wrapper\n\t                    .addClass(DEFAULT)\n\t                    .removeClass(STATEDISABLED)\n\t                    .on(HOVEREVENTS, that._toggleHover);\n\n\t                if(element && element.length) {\n\t                    element[0].removeAttribute(DISABLED);\n\t                    element[0].removeAttribute(READONLY);\n\t                }\n\t                element.attr(ARIA_DISABLED, false)\n\t                       .attr(ARIA_READONLY, false)\n\t                       .on("keydown" + ns, proxy(that._keydown, that))\n\t                       .on("focusout" + ns, proxy(that._blur, that))\n\t                       .on("focus" + ns, function() {\n\t                           that._inputWrapper.addClass(FOCUSED);\n\t                       });\n\n\t                if (that._dateInput) {\n\t                    that._dateInput._bindInput();\n\t                }\n\t               arrow.on(CLICK, proxy(that._click, that))\n\t                   .on(MOUSEDOWN, preventDefault);\n\t            } else {\n\t                wrapper\n\t                    .addClass(disable ? STATEDISABLED : DEFAULT)\n\t                    .removeClass(disable ? DEFAULT : STATEDISABLED);\n\n\t                element.attr(DISABLED, disable)\n\t                       .attr(READONLY, readonly)\n\t                       .attr(ARIA_DISABLED, disable)\n\t                       .attr(ARIA_READONLY, readonly);\n\t            }\n\t        },\n\n\t        readonly: function(readonly) {\n\t            this._editable({\n\t                readonly: readonly === undefined ? true : readonly,\n\t                disable: false\n\t            });\n\t        },\n\n\t        enable: function(enable) {\n\t            this._editable({\n\t                readonly: false,\n\t                disable: !(enable = enable === undefined ? true : enable)\n\t            });\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            that.timeView.destroy();\n\n\t            that.element.off(ns);\n\t            that._arrow.off(ns);\n\t            that._inputWrapper.off(ns);\n\n\t            if (that._form) {\n\t                that._form.off("reset", that._resetHandler);\n\t            }\n\t        },\n\n\t        close: function() {\n\t            this.timeView.close();\n\t        },\n\n\t        open: function() {\n\t            this.timeView.open();\n\t        },\n\n\t        min: function (value) {\n\t            return this._option("min", value);\n\t        },\n\n\t        max: function (value) {\n\t            if (value && this.timeView) {\n\t                this.timeView.options.maxSet = true;\n\t            } else if (this.timeView) {\n\t                this.timeView.options.maxSet = false;\n\t            }\n\t            return this._option("max", value);\n\t        },\n\n\t        value: function(value) {\n\t            var that = this;\n\n\t            if (value === undefined) {\n\t                return that._value;\n\t            }\n\n\t            that._old = that._update(value);\n\n\t            if (that._old === null) {\n\t                that.element.val("");\n\t            }\n\n\t            that._oldText = that.element.val();\n\t        },\n\n\t        _blur: function() {\n\t            var that = this,\n\t                value = that.element.val();\n\n\t           if (!(that.options.timeView && that.options.timeView.list === "scroll")) {\n\t               that.close();\n\t           }\n\n\t            if (value !== that._oldText) {\n\t                that._change(value);\n\t            }\n\t            that._inputWrapper.removeClass(FOCUSED);\n\t        },\n\n\t        _click: function() {\n\t            var that = this,\n\t                element = that.element;\n\n\t            that.timeView.toggle();\n\n\t            if (!support.touch && element[0] !== activeElement()) {\n\t                element.trigger("focus");\n\t            }\n\t        },\n\n\t        _change: function(value) {\n\t            var that = this,\n\t            oldValue = that.element.val(),\n\t            dateChanged;\n\n\t            value = that._update(value);\n\t            dateChanged = !kendo.calendar.isEqualDate(that._old, value);\n\n\t            var valueUpdated = dateChanged && !that._typing;\n\t            var textFormatted = oldValue !== that.element.val();\n\n\t            if (valueUpdated || textFormatted) {\n\t                that.element.trigger(CHANGE);\n\t            }\n\n\t            if (dateChanged) {\n\t                that._old = value;\n\t                that._oldText = that.element.val();\n\n\t                that.trigger(CHANGE);\n\t            }\n\n\t            that._typing = false;\n\t        },\n\n\t        _icon: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                arrow;\n\n\t            arrow = element.next("span.k-select");\n\n\t            if (!arrow[0]) {\n\t                arrow = $(\'<span unselectable="on" class="k-select" aria-label="select"><span class="k-icon k-i-clock"></span></span>\').insertAfter(element);\n\t            }\n\n\t            that._arrow = arrow.attr({\n\t                "role": "button",\n\t                "aria-controls": that.timeView._timeViewID\n\t            });\n\t        },\n\n\t        _keydown: function(e) {\n\t            var that = this,\n\t                key = e.keyCode,\n\t                timeView = that.timeView,\n\t                value = that.element.val();\n\n\t            if (timeView.popup.visible() || e.altKey) {\n\t                timeView.move(e);\n\t                if (that._dateInput && e.stopImmediatePropagation) {\n\t                    e.stopImmediatePropagation();\n\t                }\n\t            } else if (key === keys.ENTER && value !== that._oldText) {\n\t                that._change(value);\n\t            } else {\n\t                that._typing = true;\n\t            }\n\t        },\n\n\t        _option: function(option, value) {\n\t            var that = this,\n\t                options = that.options;\n\n\t            if (value === undefined) {\n\t                return options[option];\n\t            }\n\n\t            value = that.timeView._parse(value);\n\n\t            if (!value) {\n\t                return;\n\t            }\n\n\t            value = new DATE(+value);\n\n\t            options[option] = value;\n\t            that.timeView.options[option] = value;\n\t            that.timeView.bind();\n\t        },\n\n\t        _toggleHover: function(e) {\n\t            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");\n\t        },\n\n\t        _update: function(value) {\n\t            var that = this,\n\t                options = that.options,\n\t                timeView = that.timeView,\n\t                date = timeView._parse(value);\n\n\t            if (!isInRange(date, options.min, options.max)) {\n\t                date = null;\n\t            }\n\n\t            that._value = date;\n\t            that._currentlySelected = date;\n\t            if (that._dateInput && date) {\n\t                that._dateInput.value(date || value);\n\t            } else {\n\t                that.element.val(kendo.toString(date || value, options.format, options.culture));\n\t            }\n\t            timeView.value(date);\n\n\t            return date;\n\t        },\n\n\t        _wrapper: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                wrapper;\n\n\t            wrapper = element.parents(".k-timepicker");\n\n\t            if (!wrapper[0]) {\n\t                wrapper = element.wrap(SPAN).parent().addClass("k-picker-wrap k-state-default");\n\t                wrapper = wrapper.wrap(SPAN).parent();\n\t            }\n\n\t            wrapper[0].style.cssText = element[0].style.cssText;\n\t            that.wrapper = wrapper.addClass("k-widget k-timepicker")\n\t                .addClass(element[0].className);\n\n\t            element.css({\n\t                width: "100%",\n\t                height: element[0].style.height\n\t            });\n\n\t            that._inputWrapper = $(wrapper[0].firstChild);\n\t        },\n\n\t        _reset: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                formId = element.attr("form"),\n\t                form = formId ? $("#" + formId) : element.closest("form");\n\n\t            if (form[0]) {\n\t                that._resetHandler = function() {\n\t                    that.value(element[0].defaultValue);\n\t                    that.max(that._initialOptions.max);\n\t                    that.min(that._initialOptions.min);\n\t                };\n\n\t                that._form = form.on("reset", that._resetHandler);\n\t            }\n\t        }\n\t    });\n\n\t    function normalize(options) {\n\t        var parseFormats = options.parseFormats;\n\n\t        options.format = extractFormat(options.format || kendo.getCulture(options.culture).calendars.standard.patterns.t);\n\n\t        parseFormats = isArray(parseFormats) ? parseFormats : [parseFormats];\n\t        parseFormats.splice(0, 0, options.format);\n\t        options.parseFormats = parseFormats;\n\t    }\n\n\t    function preventDefault(e) {\n\t        e.preventDefault();\n\t    }\n\n\t    function mergeDateAndTime(date, time) {\n\t        return new Date(date.getFullYear(),\n\t            date.getMonth(),\n\t            date.getDate(),\n\t            time.getHours(),\n\t            time.getMinutes(),\n\t            time.getSeconds(),\n\t            time.getMilliseconds());\n\t    }\n\n\t    function datePattern(format, info) {\n\t        var calendar = info.calendar;\n\t        var result;\n\t        if (typeof format === "string") {\n\t            if (calendar.patterns[format]) {\n\t                result = calendar.patterns[format];\n\t            } else {\n\t                result = format;\n\t            }\n\t        }\n\n\t        if (!result) {\n\t            result = calendar.patterns.d;\n\t        }\n\n\t        return result;\n\t    }\n\n\t    function addLiteral(parts, value) {\n\t        var lastPart = parts[parts.length - 1];\n\t        if (lastPart && lastPart.type === "LITERAL") {\n\t            lastPart.pattern += value;\n\t        } else {\n\t            parts.push({\n\t                type: LITERAL,\n\t                pattern: value\n\t            });\n\t        }\n\t    }\n\n\t    function isHour12(pattern) {\n\t        return pattern === "h" || pattern === "K";\n\t    }\n\n\t    function dateNameType(formatLength) {\n\t        var nameType;\n\t        if (formatLength <= 3) {\n\t            nameType = "abbreviated";\n\t        } else if (formatLength === 4) {\n\t            nameType = "wide";\n\t        } else if (formatLength === 5) {\n\t            nameType = "narrow";\n\t        } else if (formatLength === 6) {\n\t            nameType = "short";\n\t        }\n\n\t        return nameType;\n\t    }\n\n\t    function startsWith(text, searchString, position) {\n\t        position = position || 0;\n\t        return text.indexOf(searchString, position) === position;\n\t    }\n\n\t    function includes(text, subStr) {\n\t        var returnValue = false;\n\n\t        if (text.indexOf(subStr) !== -1) {\n\t            returnValue = true;\n\t        }\n\n\t        return returnValue;\n\t    }\n\n\t    function splitDateFormat(format) {\n\t        var info = kendo.culture();\n\t        var pattern = datePattern(format, info);\n\t        var parts = [];\n\t        var lastIndex = dateFormatRegExp.lastIndex = 0;\n\t        var match = dateFormatRegExp.exec(pattern);\n\t        var specifier;\n\t        var type;\n\t        var part;\n\t        var names;\n\t        var minLength;\n\t        var patternLength;\n\n\t        while (match) {\n\t            var value = match[0];\n\n\t            if (lastIndex < match.index) {\n\t                addLiteral(parts, pattern.substring(lastIndex, match.index));\n\t            }\n\n\t            if (startsWith(value, \'"\') || startsWith(value, "\'")) {\n\t                addLiteral(parts, value);\n\t            } else {\n\t                specifier = value[0];\n\t                type = DATE_FIELD_MAP[specifier];\n\t                part = {\n\t                    type: type,\n\t                    pattern: value\n\t                };\n\n\t                if (type === "hour") {\n\t                    part.hour12 = isHour12(value);\n\t                }\n\n\t                names = NAME_TYPES[type];\n\n\t                if (names) {\n\t                    minLength = typeof names.minLength === "number" ? names.minLength : names.minLength[specifier];\n\t                    patternLength = value.length;\n\n\t                    if (patternLength >= minLength) {\n\t                        part.names = {\n\t                            type: names.type,\n\t                            nameType: dateNameType(patternLength),\n\t                            standAlone: names.standAlone === specifier\n\t                        };\n\t                    }\n\t                }\n\n\t                parts.push(part);\n\t            }\n\n\t            lastIndex = dateFormatRegExp.lastIndex;\n\t            match = dateFormatRegExp.exec(pattern);\n\t        }\n\n\t        if (lastIndex < pattern.length) {\n\t            addLiteral(parts, pattern.substring(lastIndex));\n\t        }\n\n\t        return parts;\n\t    }\n\n\t    function pad(value, size) {\n\t        var s = String(value);\n\t        while (s.length < (size || 2)) {\n\t            s = "0" + s;\n\t        }\n\t        return s;\n\t    }\n\n\t    function firstItemIndex(scrollTop, itemHeight) {\n\t        return Math.max(Math.round(scrollTop / itemHeight), 0);\n\t    }\n\n\t    function getItemHeight (item){\n\t        return item.length && item[0].getBoundingClientRect().height;\n\t    }\n\n\t    ui.plugin(TimePicker);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.timepicker.js?')}}]);