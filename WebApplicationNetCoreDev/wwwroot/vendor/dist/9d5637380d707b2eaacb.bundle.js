(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{"./node_modules/@progress/kendo-ui/js/kendo.badge.js":
/*!***********************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.badge.js ***!
  \***********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1071);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ }),\n\n/***/ 1049:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ \"./node_modules/@progress/kendo-ui/js/kendo.core.js\");\n\n/***/ }),\n\n/***/ 1071:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (f, define) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1049)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function () {\n\n\tvar __meta__ = {// jshint ignore:line\n\t    id: \"badge\",\n\t    name: \"Badge\",\n\t    category: \"web\", // suite\n\t    description: \"The Badge decorates avatars, navigation menus, or other components in the application when visual notification is needed\",\n\t    depends: [\"core\"] // dependencies\n\t};\n\n\t(function ($, undefined) {\n\t    var kendo = window.kendo;\n\t    var Widget = kendo.ui.Widget;\n\t    var ui = kendo.ui;\n\t    var HIDDEN = 'k-hidden';\n\n\t    var iconTemplate = '<span class=\\'k-badge-icon k-icon k-i-#= icon #\\'></span>';\n\t    var svgIconTemplate = '<span class=\\'k-badge-icon k-svg-icon\\'>#= icon #</span>';\n\n\t    var Badge = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that._content();\n\n\t            that._appearance();\n\n\t            kendo.notify(that);\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(that);\n\t        },\n\n\t        options: {\n\t            name: 'Badge',\n\t            cutoutBorder: false,\n\t            data: {},\n\t            fill: 'solid',\n\t            icon: '',\n\t            max: Infinity,\n\t            position: 'inline',\n\t            align: '',\n\t            sizes: {\n\t                'small': 'sm',\n\t                'medium': 'md',\n\t                'large': 'lg'\n\t            },\n\t            size: 'medium',\n\t            shape: 'rounded',\n\t            template: null,\n\t            text: '',\n\t            themeColor: 'secondary',\n\t            visible: true,\n\t            _classNames: []\n\t        },\n\n\t        _content: function() {\n\t            var that = this;\n\t            var text = that.options.text;\n\t            var template = that.options.template;\n\t            var data = that.options.data;\n\t            var icon = that.options.icon;\n\n\t            // Order of precedence\n\t            // 1) template\n\t            // 2) icon\n\t            // 3) text\n\t            // 4) content\n\n\t            if (template !== null) {\n\t                that._text = text;\n\t                that._template = kendo.template(template).bind(that);\n\t                that.element.html( that._template(data) );\n\n\t                return;\n\t            }\n\n\t            if (icon !== '') {\n\t                that.icon(icon);\n\n\t                return;\n\t            }\n\n\t            if (text !== '') {\n\t                that.text(text);\n\n\t                return;\n\t            }\n\n\t            that.text(that.element.html());\n\t        },\n\n\t        _appearance: function() {\n\t            var that = this;\n\t            that._themeColor = that.options.themeColor;\n\t            that._shape = that.options.shape;\n\t            that._sizes = that.options.sizes;\n\t            that._size = that.options.size;\n\t            that._fill = that.options.fill;\n\t            that._cutoutBorder = that.options.cutoutBorder;\n\t            that._align = that.options.align;\n\t            that._position = that.options.position;\n\t            that._visible = that.options.visible;\n\n\t            that._updateClassNames();\n\t        },\n\n\t        _updateClassNames: function() {\n\t            var that = this;\n\t            var classNames = ['k-badge'];\n\t            var keepClassNames = that.options._classNames;\n\t            var themeColor = that._themeColor;\n\t            var shape = that._shape;\n\t            var sizes = that._sizes;\n\t            var size = that._size;\n\t            var sizeAbbr = sizes[size] === undefined ? size : sizes[size];\n\t            var fill = that._fill;\n\t            var cutoutBorder = that._cutoutBorder;\n\t            var align = that._align;\n\t            var position = that._position;\n\t            var visible = that._visible;\n\n\t            // Remove all class names\n\t            that.element.removeClass(function(index, className) {\n\t                if (className.indexOf('k-') === 0 && keepClassNames.indexOf(className) === -1) {\n\t                    that.element.removeClass(className);\n\t                }\n\t            });\n\n\t            // Fill\n\t            if (typeof fill === 'string' && fill !== '') {\n\t                classNames.push('k-badge-' + fill);\n\t            }\n\n\t            // Color\n\t            if (typeof themeColor === 'string' && themeColor !== '') {\n\t                classNames.push('k-badge-' + themeColor);\n\t            }\n\n\t            // Size\n\t            if (typeof size === 'string' && size !== '') {\n\t                classNames.push('k-badge-' + sizeAbbr);\n\t            }\n\n\t            // Shape\n\t            if (typeof shape === 'string' && shape !== '') {\n\t                classNames.push('k-badge-' + shape);\n\t            }\n\n\t            // Cutout border\n\t            if (typeof cutoutBorder === 'boolean' && cutoutBorder === true) {\n\t                classNames.push('k-badge-border-cutout');\n\t            }\n\n\t            // Position\n\t            if (typeof position === 'string' && position !== '') {\n\t                classNames.push('k-badge-' + position);\n\t            }\n\n\t            // Align\n\t            if (typeof position === 'string' && position !== '' && position !== 'inline' && typeof align === 'string' && align.split(' ').length == 2) {\n\t                classNames.push('k-' + align.replace(' ', '-'));\n\t            }\n\n\t            // Visibility\n\t            if (visible === false) {\n\t                classNames.push(HIDDEN);\n\t            }\n\n\t            // Apply classnames\n\t            that.element.addClass(classNames.join(' '));\n\t        },\n\n\t        setOptions: function(options) {\n\t            var that = this;\n\n\t            that.element.removeClass(function(index, className) {\n\t                if (className.indexOf('k-') >= 0) {\n\t                    that.element.removeClass(className);\n\t                }\n\t            });\n\n\t            Widget.fn.setOptions.call(that, options);\n\n\t            that._content();\n\n\t            that._appearance();\n\t        },\n\n\t        text: function(text) {\n\t            var that = this;\n\t            var max = that.options.max;\n\n\t            // handle badge.text()\n\t            if (arguments.length === 0 || text === undefined) {\n\t                return that._text;\n\t            }\n\n\t            that._text = text;\n\n\t            // handle badge.text(true|false|null)\n\t            if (text === true || text === false || text === null) {\n\t                that.element.html('');\n\n\t                return;\n\t            }\n\n\t            // handle badge.text('string')\n\t            if (typeof text === 'string') {\n\t                that.element.html(text);\n\n\t                return;\n\t            }\n\n\t            // handle badge.text(1)\n\t            if (typeof text === 'number') {\n\t                if (text > max) {\n\t                    that.element.html(max + '+');\n\t                } else {\n\t                    that.element.html(text);\n\t                }\n\n\t                return;\n\t            }\n\n\t            // handle other objects\n\t            if (typeof text === 'object' && 'toString' in text) {\n\t                that.element.html(text.toString());\n\n\t                return;\n\t            }\n\n\t        },\n\n\t        icon: function(icon) {\n\t            var that = this;\n\t            var iconTemplateFunction;\n\n\t            // handle badge.icon()\n\t            if (arguments.length === 0 || icon === undefined) {\n\t                return that._icon;\n\t            }\n\n\t            that._icon = icon;\n\n\t            // Handle badge.icon(<SVG />)\n\t            if (icon.indexOf('<svg') === 0) {\n\t                iconTemplateFunction = kendo.template(svgIconTemplate);\n\t                that.element.html(iconTemplateFunction({ icon: icon }));\n\n\t                return;\n\t            }\n\n\t            // Handle badge.icon(ICON_NAME)\n\t            iconTemplateFunction = kendo.template(iconTemplate);\n\t            that.element.html(iconTemplateFunction({ icon: icon }));\n\t        },\n\n\t        themeColor: function(color) {\n\t            var that = this;\n\n\t            // handle badge.color()\n\t            if (arguments.length === 0 || color === undefined) {\n\t                return that._themeColor;\n\t            }\n\n\t            that._themeColor = color;\n\t            that._updateClassNames();\n\t        },\n\n\t        shape: function(shape) {\n\t            var that = this;\n\n\t            // handle badge.shape()\n\t            if (arguments.length === 0 || shape === undefined) {\n\t                return that._shape;\n\t            }\n\n\t            that._shape = shape;\n\t            that._updateClassNames();\n\t        },\n\n\t        hide: function() {\n\t            var that = this;\n\t            that._visible = false;\n\n\t            that._updateClassNames();\n\t        },\n\n\t        show: function() {\n\t            var that = this;\n\t            that._visible = true;\n\n\t            that._updateClassNames();\n\t        }\n\t    });\n\n\t    ui.plugin(Badge);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.badge.js?")},"./node_modules/@progress/kendo-ui/js/kendo.binder.js":
/*!************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.binder.js ***!
  \************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1072);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1049:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1059:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ "./node_modules/@progress/kendo-ui/js/kendo.data.js");\n\n/***/ }),\n\n/***/ 1072:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1049), __webpack_require__(1059) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "binder",\n\t    name: "MVVM",\n\t    category: "framework",\n\t    description: "Model View ViewModel (MVVM) is a design pattern which helps developers separate the Model (the data) from the View (the UI).",\n\t    depends: [ "core", "data" ]\n\t};\n\n\t/*jshint eqnull: true */\n\t(function ($, undefined) {\n\t    var kendo = window.kendo,\n\t        Observable = kendo.Observable,\n\t        ObservableObject = kendo.data.ObservableObject,\n\t        ObservableArray = kendo.data.ObservableArray,\n\t        toString = {}.toString,\n\t        binders = {},\n\t        Class = kendo.Class,\n\t        proxy = $.proxy,\n\t        VALUE = "value",\n\t        SOURCE = "source",\n\t        EVENTS = "events",\n\t        CHECKED = "checked",\n\t        CSS = "css",\n\t        deleteExpando = true,\n\t        FUNCTION = "function",\n\t        CHANGE = "change";\n\n\t    (function() {\n\t        var a = document.createElement("a");\n\n\t        try {\n\t            delete a.test;\n\t        } catch(e) {\n\t            deleteExpando = false;\n\t        }\n\t    })();\n\n\t    var Binding = Observable.extend( {\n\t        init: function(parents, path) {\n\t            var that = this;\n\n\t            Observable.fn.init.call(that);\n\n\t            that.source = parents[0];\n\t            that.parents = parents;\n\t            that.path = path;\n\t            that.dependencies = {};\n\t            that.dependencies[path] = true;\n\t            that.observable = that.source instanceof Observable;\n\n\t            that._access = function(e) {\n\t                that.dependencies[e.field] = true;\n\t            };\n\n\t            if (that.observable) {\n\t                that._change = function(e) {\n\t                    that.change(e);\n\t                };\n\n\t                that.source.bind(CHANGE, that._change);\n\t            }\n\t        },\n\n\t        _parents: function() {\n\t            var parents = this.parents;\n\t            var value = this.get();\n\n\t            if (value && typeof value.parent == "function") {\n\t                var parent = value.parent();\n\n\t                if ($.inArray(parent, parents) < 0) {\n\t                    parents = [parent].concat(parents);\n\t                }\n\t            }\n\n\t            return parents;\n\t        },\n\n\t        change: function(e) {\n\t            var dependency,\n\t                ch,\n\t                field = e.field,\n\t                that = this;\n\n\t            if (that.path === "this") {\n\t                that.trigger(CHANGE, e);\n\t            } else {\n\t                for (dependency in that.dependencies) {\n\t                    if (dependency.indexOf(field) === 0) {\n\t                       ch = dependency.charAt(field.length);\n\n\t                       if (!ch || ch === "." || ch === "[") {\n\t                            that.trigger(CHANGE, e);\n\t                            break;\n\t                       }\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        start: function(source) {\n\t            source.bind("get", this._access);\n\t        },\n\n\t        stop: function(source) {\n\t            source.unbind("get", this._access);\n\t        },\n\n\t        get: function() {\n\n\t            var that = this,\n\t                source = that.source,\n\t                index = 0,\n\t                path = that.path,\n\t                result = source;\n\n\t            if (!that.observable) {\n\t                return result;\n\t            }\n\n\t            that.start(that.source);\n\n\t            result = source.get(path);\n\n\t            // Traverse the observable hierarchy if the binding is not resolved at the current level.\n\t            while (result === undefined && source) {\n\n\t                source = that.parents[++index];\n\n\t                if (source instanceof ObservableObject) {\n\t                    result = source.get(path);\n\t                }\n\t            }\n\n\t            // second pass try to get the parent from the object hierarchy\n\t            if (result === undefined) {\n\t                source = that.source; //get the initial source\n\n\t                while (result === undefined && source) {\n\t                    source = source.parent();\n\n\t                    if (source instanceof ObservableObject) {\n\t                        result = source.get(path);\n\t                    }\n\t                }\n\t            }\n\n\t            // If the result is a function - invoke it\n\t            if (typeof result === "function") {\n\t                index = path.lastIndexOf(".");\n\n\t                // If the function is a member of a nested observable object make that nested observable the context (this) of the function\n\t                if (index > 0) {\n\t                    source = source.get(path.substring(0, index));\n\t                }\n\n\t                // Invoke the function\n\t                that.start(source);\n\n\t                if (source !== that.source) {\n\t                    result = result.call(source, that.source);\n\t                } else {\n\t                    result = result.call(source);\n\t                }\n\n\t                that.stop(source);\n\t            }\n\n\t            // If the binding is resolved by a parent object\n\t            if (source && source !== that.source) {\n\n\t                that.currentSource = source; // save parent object\n\n\t                // Listen for changes in the parent object\n\t                source.unbind(CHANGE, that._change)\n\t                      .bind(CHANGE, that._change);\n\t            }\n\n\t            that.stop(that.source);\n\n\t            return result;\n\t        },\n\n\t        set: function(value) {\n\t            var source = this.currentSource || this.source;\n\n\t            var field = kendo.getter(this.path)(source);\n\n\t            if (typeof field === "function") {\n\t                if (source !== this.source) {\n\t                    field.call(source, this.source, value);\n\t                } else {\n\t                    field.call(source, value);\n\t                }\n\t            } else {\n\t                source.set(this.path, value);\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            if (this.observable) {\n\t                this.source.unbind(CHANGE, this._change);\n\t                if(this.currentSource) {\n\t                    this.currentSource.unbind(CHANGE, this._change);\n\t                }\n\t            }\n\n\t            this.unbind();\n\t        }\n\t    });\n\n\t    var EventBinding = Binding.extend( {\n\t        get: function() {\n\t            var source = this.source,\n\t                path = this.path,\n\t                index = 0,\n\t                handler;\n\n\t            handler = source.get(path);\n\n\t            while (!handler && source) {\n\t                source = this.parents[++index];\n\n\t                if (source instanceof ObservableObject) {\n\t                    handler = source.get(path);\n\t                }\n\t            }\n\n\t            return proxy(handler, source);\n\t        }\n\t    });\n\n\t    var TemplateBinding = Binding.extend( {\n\t        init: function(source, path, template) {\n\t            var that = this;\n\n\t            Binding.fn.init.call(that, source, path);\n\n\t            that.template = template;\n\t        },\n\n\t        render: function(value) {\n\t            var html;\n\n\t            this.start(this.source);\n\n\t            html = kendo.render(this.template, value);\n\n\t            this.stop(this.source);\n\n\t            return html;\n\t        }\n\t    });\n\n\t    var Binder = Class.extend({\n\t        init: function(element, bindings, options) {\n\t            this.element = element;\n\t            this.bindings = bindings;\n\t            this.options = options;\n\t        },\n\n\t        bind: function(binding, attribute) {\n\t            var that = this;\n\n\t            binding = attribute ? binding[attribute] : binding;\n\n\t            binding.bind(CHANGE, function(e) {\n\t                that.refresh(attribute || e);\n\t            });\n\n\t            that.refresh(attribute);\n\t        },\n\n\t        destroy: function() {\n\t        }\n\t    });\n\n\t    var TypedBinder = Binder.extend({\n\t        dataType: function() {\n\t            var dataType = this.element.getAttribute("data-" + kendo.ns + "type") || this.element.type || "text";\n\t            return dataType.toLowerCase();\n\t        },\n\n\t        parsedValue: function() {\n\t            return this._parseValue(this.element.value, this.dataType());\n\t        },\n\n\t        _parseValue: function (value, dataType){\n\t            if (dataType == "date") {\n\t                value = kendo.parseDate(value, "yyyy-MM-dd");\n\t            } else if (dataType == "datetime-local") {\n\t                value = kendo.parseDate(value, ["yyyy-MM-ddTHH:mm:ss", "yyyy-MM-ddTHH:mm"] );\n\t            } else if (dataType == "number") {\n\t                value = kendo.parseFloat(value);\n\t            } else if (dataType == "boolean"){\n\t                value = value.toLowerCase();\n\t                if(kendo.parseFloat(value) !== null){\n\t                    value = Boolean(kendo.parseFloat(value));\n\t                }else{\n\t                    value = (value.toLowerCase() === "true");\n\t                }\n\t            }\n\t            return value;\n\t        }\n\t    });\n\n\t    binders.attr = Binder.extend({\n\t        refresh: function(key) {\n\t            this.element.setAttribute(key, this.bindings.attr[key].get());\n\t        }\n\t    });\n\n\t    binders.css = Binder.extend({\n\t        init: function(element, bindings, options) {\n\t            Binder.fn.init.call(this, element, bindings, options);\n\t            this.classes = {};\n\t        },\n\t        refresh: function(className) {\n\t            var element = $(this.element),\n\t                binding = this.bindings.css[className],\n\t                hasClass = this.classes[className] = binding.get();\n\t            if(hasClass){\n\t                element.addClass(className);\n\t            }else{\n\t                element.removeClass(className);\n\t            }\n\t        }\n\t    });\n\n\t    binders.style = Binder.extend({\n\t        refresh: function(key) {\n\t            this.element.style[key] = this.bindings.style[key].get() || "";\n\t        }\n\t    });\n\n\t    binders.enabled = Binder.extend({\n\t        refresh: function() {\n\t            if (this.bindings.enabled.get()) {\n\t                this.element.removeAttribute("disabled");\n\t            } else {\n\t                this.element.setAttribute("disabled", "disabled");\n\t            }\n\t        }\n\t    });\n\n\t    binders.readonly = Binder.extend({\n\t       refresh: function() {\n\t            if (this.bindings.readonly.get()) {\n\t                this.element.setAttribute("readonly", "readonly");\n\t            } else {\n\t                this.element.removeAttribute("readonly");\n\t            }\n\t       }\n\t    });\n\n\t    binders.disabled = Binder.extend({\n\t        refresh: function() {\n\t            if (this.bindings.disabled.get()) {\n\t                this.element.setAttribute("disabled", "disabled");\n\t            } else {\n\t                this.element.removeAttribute("disabled");\n\t            }\n\t        }\n\t    });\n\n\t    binders.events = Binder.extend({\n\t        init: function(element, bindings, options) {\n\t            Binder.fn.init.call(this, element, bindings, options);\n\t            this.handlers = {};\n\t        },\n\n\t        refresh: function(key) {\n\t            var element = $(this.element),\n\t                binding = this.bindings.events[key],\n\t                handler = this.handlers[key];\n\n\t            if (handler) {\n\t                element.off(key, handler);\n\t            }\n\n\t            handler = this.handlers[key] = binding.get();\n\n\t            element.on(key, binding.source, handler);\n\t        },\n\n\t        destroy: function() {\n\t            var element = $(this.element),\n\t                handler;\n\n\t            for (handler in this.handlers) {\n\t                element.off(handler, this.handlers[handler]);\n\t            }\n\t        }\n\t    });\n\n\t    binders.text = Binder.extend({\n\t        refresh: function() {\n\t            var text = this.bindings.text.get();\n\t            var dataFormat = this.element.getAttribute("data-" + kendo.ns + "format") || "";\n\t            if (text == null) {\n\t                text = "";\n\t            }\n\n\t            $(this.element).text(kendo.toString(text, dataFormat));\n\t        }\n\t    });\n\n\t    binders.visible = Binder.extend({\n\t        refresh: function() {\n\t            if (this.bindings.visible.get()) {\n\t                this.element.style.display = "";\n\t            } else {\n\t                this.element.style.display = "none";\n\t            }\n\t        }\n\t    });\n\n\t    binders.invisible = Binder.extend({\n\t        refresh: function() {\n\t            if (!this.bindings.invisible.get()) {\n\t                this.element.style.display = "";\n\t            } else {\n\t                this.element.style.display = "none";\n\t            }\n\t        }\n\t  });\n\n\t    binders.html = Binder.extend({\n\t        refresh: function() {\n\t            this.element.innerHTML = this.bindings.html.get();\n\t        }\n\t    });\n\n\t    binders.value = TypedBinder.extend({\n\t        init: function(element, bindings, options) {\n\t            TypedBinder.fn.init.call(this, element, bindings, options);\n\n\t            this._change = proxy(this.change, this);\n\t            this.eventName = options.valueUpdate || CHANGE;\n\n\t            $(this.element).on(this.eventName, this._change);\n\n\t            this._initChange = false;\n\t        },\n\n\t        change: function() {\n\t            this._initChange = this.eventName != CHANGE;\n\n\t            this.bindings[VALUE].set(this.parsedValue());\n\n\t            this._initChange = false;\n\t        },\n\n\t        refresh: function() {\n\t            if (!this._initChange) {\n\t                var value = this.bindings[VALUE].get();\n\n\t                if (value == null) {\n\t                    value = "";\n\t                }\n\n\t                var type = this.dataType();\n\n\t                if (type == "date") {\n\t                    value = kendo.toString(value, "yyyy-MM-dd");\n\t                } else if (type == "datetime-local") {\n\t                    value = kendo.toString(value, "yyyy-MM-ddTHH:mm:ss");\n\t                }\n\n\t                this.element.value = value;\n\t            }\n\n\t            this._initChange = false;\n\t        },\n\n\t        destroy: function() {\n\t            $(this.element).off(this.eventName, this._change);\n\t        }\n\t    });\n\n\t    binders.source = Binder.extend({\n\t        init: function(element, bindings, options) {\n\t            Binder.fn.init.call(this, element, bindings, options);\n\n\t            var source = this.bindings.source.get();\n\n\t            if (source instanceof kendo.data.DataSource && options.autoBind !== false) {\n\t                source.fetch();\n\t            }\n\t        },\n\n\t        refresh: function(e) {\n\t            var that = this,\n\t                source = that.bindings.source.get();\n\n\t            if (source instanceof ObservableArray || source instanceof kendo.data.DataSource) {\n\t                e = e || {};\n\n\t                if (e.action == "add") {\n\t                    that.add(e.index, e.items);\n\t                } else if (e.action == "remove") {\n\t                    that.remove(e.index, e.items);\n\t                } else if (e.action != "itemchange") {\n\t                    that.render();\n\t                }\n\t            } else {\n\t                that.render();\n\t            }\n\t        },\n\n\t        container: function() {\n\t            var element = this.element;\n\n\t            if (element.nodeName.toLowerCase() == "table") {\n\t                if (!element.tBodies[0]) {\n\t                    element.appendChild(document.createElement("tbody"));\n\t                }\n\t                element = element.tBodies[0];\n\t            }\n\n\t            return element;\n\t        },\n\n\t        template: function() {\n\t            var options = this.options,\n\t                template = options.template,\n\t                nodeName = this.container().nodeName.toLowerCase();\n\n\t            if (!template) {\n\t                if (nodeName == "select") {\n\t                    if (options.valueField || options.textField) {\n\t                        template = kendo.format(\'<option value="#:{0}#">#:{1}#</option>\',\n\t                            options.valueField || options.textField, options.textField || options.valueField);\n\t                    } else {\n\t                        template = "<option>#:data#</option>";\n\t                    }\n\t                } else if (nodeName == "tbody") {\n\t                    template = "<tr><td>#:data#</td></tr>";\n\t                } else if (nodeName == "ul" || nodeName == "ol") {\n\t                    template = "<li>#:data#</li>";\n\t                } else {\n\t                    template = "#:data#";\n\t                }\n\t                template = kendo.template(template);\n\t            }\n\n\t            return template;\n\t        },\n\n\t        add: function(index, items) {\n\t            var element = this.container(),\n\t                parents,\n\t                idx,\n\t                length,\n\t                child,\n\t                clone = element.cloneNode(false),\n\t                reference = element.children[index];\n\n\t            $(clone).html(kendo.render(this.template(), items));\n\n\t            if (clone.children.length) {\n\t                parents = this.bindings.source._parents();\n\n\t                for (idx = 0, length = items.length; idx < length; idx++) {\n\t                    child = clone.children[0];\n\t                    element.insertBefore(child, reference || null);\n\t                    bindElement(child, items[idx], this.options.roles, [items[idx]].concat(parents));\n\t                }\n\t            }\n\t        },\n\n\t        remove: function(index, items) {\n\t            var idx, element = this.container();\n\n\t            for (idx = 0; idx < items.length; idx++) {\n\t                var child = element.children[index];\n\t                unbindElementTree(child, true);\n\t                if (child.parentNode == element) {\n\t                    element.removeChild(child);\n\t                }\n\t            }\n\t        },\n\n\t        render: function() {\n\t            var source = this.bindings.source.get(),\n\t                parents,\n\t                idx,\n\t                length,\n\t                element = this.container(),\n\t                template = this.template();\n\n\t            if (source == null) {\n\t                return;\n\t            }\n\n\t            if (source instanceof kendo.data.DataSource) {\n\t                source = source.view();\n\t            }\n\n\t            if (!(source instanceof ObservableArray) && toString.call(source) !== "[object Array]") {\n\t                source = [source];\n\t            }\n\n\t            if (this.bindings.template) {\n\t                unbindElementChildren(element, true);\n\n\t                $(element).html(this.bindings.template.render(source));\n\n\t                if (element.children.length) {\n\t                    parents = this.bindings.source._parents();\n\n\t                    for (idx = 0, length = source.length; idx < length; idx++) {\n\t                        bindElement(element.children[idx], source[idx], this.options.roles, [source[idx]].concat(parents));\n\t                    }\n\t                }\n\t            } else {\n\t                $(element).html(kendo.render(template, source));\n\t            }\n\t        }\n\t    });\n\n\t    binders.input = {\n\t        checked: TypedBinder.extend({\n\t            init: function(element, bindings, options) {\n\t                TypedBinder.fn.init.call(this, element, bindings, options);\n\t                this._change = proxy(this.change, this);\n\n\t                $(this.element).change(this._change);\n\t            },\n\n\t            change: function() {\n\t                var element = this.element;\n\t                var value = this.value();\n\n\t                if (element.type == "radio") {\n\t                    value = this.parsedValue();\n\t                    this.bindings[CHECKED].set(value);\n\t                } else if (element.type == "checkbox") {\n\t                    var source = this.bindings[CHECKED].get();\n\t                    var index;\n\n\t                    if (source instanceof ObservableArray) {\n\t                        value = this.parsedValue();\n\t                        if (value instanceof Date) {\n\t                            for(var i = 0; i < source.length; i++){\n\t                                if(source[i] instanceof Date && +source[i] === +value){\n\t                                    index = i;\n\t                                    break;\n\t                                }\n\t                            }\n\t                        }else{\n\t                            index = source.indexOf(value);\n\t                        }\n\t                        if (index > -1) {\n\t                            source.splice(index, 1);\n\t                        } else {\n\t                            source.push(value);\n\t                        }\n\t                    } else {\n\t                        this.bindings[CHECKED].set(value);\n\t                    }\n\t                }\n\t            },\n\n\t            refresh: function() {\n\t                var value = this.bindings[CHECKED].get(),\n\t                    source = value,\n\t                    type = this.dataType(),\n\t                    element = this.element;\n\n\t                if (element.type == "checkbox") {\n\t                    if (source instanceof ObservableArray) {\n\t                        var index = -1;\n\t                        value = this.parsedValue();\n\t                        if(value instanceof Date){\n\t                            for(var i = 0; i < source.length; i++){\n\t                                if(source[i] instanceof Date && +source[i] === +value){\n\t                                    index = i;\n\t                                    break;\n\t                                }\n\t                            }\n\t                        }else{\n\t                            index = source.indexOf(value);\n\t                        }\n\t                        element.checked = (index >= 0);\n\t                    }else{\n\t                        element.checked = source;\n\t                    }\n\t                } else if (element.type == "radio") {\n\t                    if (type == "date") {\n\t                        value = kendo.toString(value, "yyyy-MM-dd");\n\t                    } else if (type == "datetime-local") {\n\t                        value = kendo.toString(value, "yyyy-MM-ddTHH:mm:ss");\n\t                    }\n\n\t                    if (value !== null && typeof(value) !== "undefined" && element.value === value.toString()) {\n\t                        element.checked = true;\n\t                    } else {\n\t                        element.checked = false;\n\t                    }\n\t                }\n\t            },\n\n\t            value: function() {\n\t                var element = this.element,\n\t                    value = element.value;\n\n\t                if (element.type == "checkbox") {\n\t                    value = element.checked;\n\t                }\n\n\t                return value;\n\t            },\n\t            destroy: function() {\n\t                $(this.element).off(CHANGE, this._change);\n\t            }\n\t        })\n\t    };\n\n\t    binders.select = {\n\t        source: binders.source.extend({\n\t            refresh: function(e) {\n\t                var that = this,\n\t                    source = that.bindings.source.get();\n\n\t                if (source instanceof ObservableArray || source instanceof kendo.data.DataSource) {\n\t                    e = e || {};\n\t                    if (e.action == "add") {\n\t                        that.add(e.index, e.items);\n\t                    } else if (e.action == "remove") {\n\t                        that.remove(e.index, e.items);\n\t                    } else if (e.action == "itemchange" || e.action === undefined) {\n\t                        that.render();\n\t                        if(that.bindings.value){\n\t                            if (that.bindings.value) {\n\t                                var val = retrievePrimitiveValues(that.bindings.value.get(), $(that.element).data("valueField"));\n\t                                if(val === null) {\n\t                                    that.element.selectedIndex = -1;\n\t                                } else {\n\t                                    that.element.value = val;\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                } else {\n\t                    that.render();\n\t                }\n\t            }\n\t        }),\n\t        value: TypedBinder.extend({\n\t            init: function(target, bindings, options) {\n\t                TypedBinder.fn.init.call(this, target, bindings, options);\n\n\t                this._change = proxy(this.change, this);\n\t                $(this.element).change(this._change);\n\t            },\n\n\t            parsedValue : function() {\n\t                var dataType = this.dataType();\n\t                var values = [];\n\t                var value, option, idx, length;\n\t                for (idx = 0, length = this.element.options.length; idx < length; idx++) {\n\t                    option = this.element.options[idx];\n\n\t                    if (option.selected) {\n\t                        value = option.attributes.value;\n\n\t                        if (value && value.specified) {\n\t                            value = option.value;\n\t                        } else {\n\t                            value = option.text;\n\t                        }\n\n\t                        values.push(this._parseValue(value, dataType));\n\t                    }\n\t                }\n\t                return values;\n\t            },\n\n\t            change: function() {\n\t                var values = [],\n\t                    element = this.element,\n\t                    source,\n\t                    field = this.options.valueField || this.options.textField,\n\t                    valuePrimitive = this.options.valuePrimitive,\n\t                    option,\n\t                    valueIndex,\n\t                    value,\n\t                    idx,\n\t                    length;\n\n\t                for (idx = 0, length = element.options.length; idx < length; idx++) {\n\t                    option = element.options[idx];\n\n\t                    if (option.selected) {\n\t                        value = option.attributes.value;\n\n\t                        if (value && value.specified) {\n\t                            value = option.value;\n\t                        } else {\n\t                            value = option.text;\n\t                        }\n\n\t                        if (field) {\n\t                            values.push(value);\n\t                        } else {\n\t                            values.push(this._parseValue(value, this.dataType()));\n\t                        }\n\n\t                    }\n\t                }\n\n\t                if (field) {\n\t                    source = this.bindings.source.get();\n\t                    if (source instanceof kendo.data.DataSource) {\n\t                        source = source.view();\n\t                    }\n\n\t                    for (valueIndex = 0; valueIndex < values.length; valueIndex++) {\n\t                        for (idx = 0, length = source.length; idx < length; idx++) {\n\t                            var sourceValue = source[idx].get(field);\n\t                            var match = (String(sourceValue) === values[valueIndex]);\n\t                            if (match) {\n\t                                values[valueIndex] = source[idx];\n\t                                break;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\n\t                value = this.bindings[VALUE].get();\n\t                if (value instanceof ObservableArray) {\n\t                    value.splice.apply(value, [0, value.length].concat(values));\n\t                } else if (!valuePrimitive && (value instanceof ObservableObject || value === null || value === undefined || !field)) {\n\t                    this.bindings[VALUE].set(values[0]);\n\t                } else {\n\t                    this.bindings[VALUE].set(values[0].get(field));\n\t                }\n\t            },\n\t            refresh: function() {\n\t                var optionIndex,\n\t                    element = this.element,\n\t                    options = element.options,\n\t                    value = this.bindings[VALUE].get(),\n\t                    values = value,\n\t                    field = this.options.valueField || this.options.textField,\n\t                    found = false,\n\t                    type = this.dataType(),\n\t                    optionValue;\n\n\t                if (!(values instanceof ObservableArray)) {\n\t                    values = new ObservableArray([value]);\n\t                }\n\n\t                element.selectedIndex = -1;\n\n\t                for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {\n\t                    value = values[valueIndex];\n\n\n\t                    if (field && value instanceof ObservableObject) {\n\t                        value = value.get(field);\n\t                    }\n\n\t                    if (type == "date") {\n\t                        value = kendo.toString(values[valueIndex], "yyyy-MM-dd");\n\t                    } else if (type == "datetime-local") {\n\t                        value = kendo.toString(values[valueIndex], "yyyy-MM-ddTHH:mm:ss");\n\t                    }\n\n\t                    for (optionIndex = 0; optionIndex < options.length; optionIndex++) {\n\t                        optionValue = options[optionIndex].value;\n\n\t                        if (optionValue === "" && value !== "") {\n\t                            optionValue = options[optionIndex].text;\n\t                        }\n\n\t                        if (value != null && optionValue == value.toString()) {\n\t                            options[optionIndex].selected = true;\n\t                            found = true;\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            destroy: function() {\n\t                $(this.element).off(CHANGE, this._change);\n\t            }\n\t        })\n\t    };\n\n\t    function dataSourceBinding(bindingName, fieldName, setter) {\n\t        return Binder.extend({\n\t            init: function(widget, bindings, options) {\n\t                var that = this;\n\n\t                Binder.fn.init.call(that, widget.element[0], bindings, options);\n\n\t                that.widget = widget;\n\t                that._dataBinding = proxy(that.dataBinding, that);\n\t                that._dataBound = proxy(that.dataBound, that);\n\t                that._itemChange = proxy(that.itemChange, that);\n\t            },\n\n\t            itemChange: function(e) {\n\t                bindElement(e.item[0], e.data, this._ns(e.ns), [e.data].concat(this.bindings[bindingName]._parents()));\n\t            },\n\n\t            dataBinding: function(e) {\n\t                var idx,\n\t                    length,\n\t                    widget = this.widget,\n\t                    items = e.removedItems || widget.items();\n\n\t                for (idx = 0, length = items.length; idx < length; idx++) {\n\t                    unbindElementTree(items[idx], false);\n\t                }\n\t            },\n\n\t            _ns: function(ns) {\n\t                ns = ns || kendo.ui;\n\t                var all = [ kendo.ui, kendo.dataviz.ui, kendo.mobile.ui ];\n\t                all.splice($.inArray(ns, all), 1);\n\t                all.unshift(ns);\n\n\t                return kendo.rolesFromNamespaces(all);\n\t            },\n\n\t            dataBound: function(e) {\n\t                var idx,\n\t                    length,\n\t                    widget = this.widget,\n\t                    items = e.addedItems || widget.items(),\n\t                    dataSource = widget[fieldName],\n\t                    view,\n\t                    parents,\n\t                    hds = kendo.data.HierarchicalDataSource;\n\n\t                if (hds && dataSource instanceof hds) {\n\t                    // suppress binding of HDS items, because calling view() on root\n\t                    // will return only root items, and widget.items() returns all items\n\t                    return;\n\t                }\n\n\t                if (items.length) {\n\t                    view = e.addedDataItems || dataSource.flatView();\n\t                    parents = this.bindings[bindingName]._parents();\n\n\t                    for (idx = 0, length = view.length; idx < length; idx++) {\n\t                        if (items[idx]) {\n\t                            bindElement(items[idx], view[idx], this._ns(e.ns), [view[idx]].concat(parents));\n\t                        }\n\t                    }\n\t                }\n\t            },\n\n\t            refresh: function(e) {\n\t                var that = this,\n\t                    source,\n\t                    widget = that.widget,\n\t                    select, multiselect, dropdowntree;\n\n\t                e = e || {};\n\n\t                if (!e.action) {\n\t                    that.destroy();\n\n\t                    widget.bind("dataBinding", that._dataBinding);\n\t                    widget.bind("dataBound", that._dataBound);\n\t                    widget.bind("itemChange", that._itemChange);\n\n\t                    source = that.bindings[bindingName].get();\n\n\t                    if (widget[fieldName] instanceof kendo.data.DataSource && widget[fieldName] != source) {\n\t                        if (source instanceof kendo.data.DataSource) {\n\t                            widget[setter](source);\n\t                        } else if (source && source._dataSource) {\n\t                            widget[setter](source._dataSource);\n\t                        } else {\n\t                            select = kendo.ui.Select && widget instanceof kendo.ui.Select;\n\t                            multiselect = kendo.ui.MultiSelect && widget instanceof kendo.ui.MultiSelect;\n\t                            dropdowntree = kendo.ui.DropDownTree && widget instanceof kendo.ui.DropDownTree;\n\n\t                            if(!dropdowntree){\n\t                                widget[fieldName].data(source);\n\t                            }else{\n\t                                widget.treeview[fieldName].data(source);\n\t                            }\n\n\t                            if (that.bindings.value && (select || multiselect)) {\n\t                                widget.value(retrievePrimitiveValues(that.bindings.value.get(), widget.options.dataValueField));\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            },\n\n\t            destroy: function() {\n\t                var widget = this.widget;\n\n\t                widget.unbind("dataBinding", this._dataBinding);\n\t                widget.unbind("dataBound", this._dataBound);\n\t                widget.unbind("itemChange", this._itemChange);\n\t            }\n\t        });\n\t    }\n\n\t    binders.widget = {\n\t        events : Binder.extend({\n\t            init: function(widget, bindings, options) {\n\t                Binder.fn.init.call(this, widget.element[0], bindings, options);\n\t                this.widget = widget;\n\t                this.handlers = {};\n\t            },\n\n\t            refresh: function(key) {\n\t                var binding = this.bindings.events[key],\n\t                    handler = this.handlers[key];\n\n\t                if (handler) {\n\t                    this.widget.unbind(key, handler);\n\t                }\n\n\t                handler = binding.get();\n\n\t                this.handlers[key] = function(e) {\n\t                    e.data = binding.source;\n\n\t                    handler(e);\n\n\t                    if (e.data === binding.source) {\n\t                        delete e.data;\n\t                    }\n\t                };\n\n\t                this.widget.bind(key, this.handlers[key]);\n\t            },\n\n\t            destroy: function() {\n\t                var handler;\n\n\t                for (handler in this.handlers) {\n\t                    this.widget.unbind(handler, this.handlers[handler]);\n\t                }\n\t            }\n\t        }),\n\n\t        checked: Binder.extend({\n\t            init: function(widget, bindings, options) {\n\t                Binder.fn.init.call(this, widget.element[0], bindings, options);\n\n\t                this.widget = widget;\n\t                this._change = proxy(this.change, this);\n\t                this.widget.bind(CHANGE, this._change);\n\t            },\n\t            change: function() {\n\t                this.bindings[CHECKED].set(this.value());\n\t            },\n\n\t            refresh: function() {\n\t                this.widget.check(this.bindings[CHECKED].get() === true);\n\t            },\n\n\t            value: function() {\n\t                var element = this.element,\n\t                    value = element.value;\n\n\t                if (value == "on" || value == "off" || this.element.type == "checkbox") {\n\t                    value = element.checked;\n\t                }\n\n\t                return value;\n\t            },\n\n\t            destroy: function() {\n\t                this.widget.unbind(CHANGE, this._change);\n\t            }\n\t        }),\n\n\t        start: Binder.extend({\n\t            init: function(widget, bindings, options) {\n\t                Binder.fn.init.call(this, widget.element[0], bindings, options);\n\t                this._change = proxy(this.change, this);\n\t                this.widget = widget;\n\t                this.widget.bind(CHANGE, this._change);\n\t            },\n\n\t            change: function() {\n\t                this.bindings.start.set(this.widget.range().start);\n\t            },\n\n\t            refresh: function() {\n\t                var that = this;\n\t                var start = this.bindings.start.get();\n\t                var end = that.widget._range ? that.widget._range.end: null;\n\t                this.widget.range({start: start, end: end});\n\t            },\n\n\t            destroy: function() {\n\t                this.widget.unbind(CHANGE, this._change);\n\t            }\n\t        }),\n\n\t        end: Binder.extend({\n\t            init: function(widget, bindings, options) {\n\t                Binder.fn.init.call(this, widget.element[0], bindings, options);\n\t                this._change = proxy(this.change, this);\n\t                this.widget = widget;\n\t                this.widget.bind(CHANGE, this._change);\n\t            },\n\n\t            change: function() {\n\t                this.bindings.end.set(this.widget.range().end);\n\t            },\n\n\t            refresh: function() {\n\t                var that = this;\n\t                var end = this.bindings.end.get();\n\t                var start = that.widget._range ? that.widget._range.start: null;\n\t                this.widget.range({start: start, end: end});\n\t            },\n\n\t            destroy: function() {\n\t                this.widget.unbind(CHANGE, this._change);\n\t            }\n\t        }),\n\n\t        visible: Binder.extend({\n\t            init: function(widget, bindings, options) {\n\t                Binder.fn.init.call(this, widget.element[0], bindings, options);\n\n\t                this.widget = widget;\n\t            },\n\n\t            refresh: function() {\n\t                var visible = this.bindings.visible.get();\n\t                this.widget.wrapper[0].style.display = visible ? "" : "none";\n\t            }\n\t        }),\n\n\t        invisible: Binder.extend({\n\t            init: function(widget, bindings, options) {\n\t                Binder.fn.init.call(this, widget.element[0], bindings, options);\n\n\t                this.widget = widget;\n\t            },\n\n\t            refresh: function() {\n\t                var invisible = this.bindings.invisible.get();\n\t                this.widget.wrapper[0].style.display = invisible ? "none" : "";\n\t            }\n\t        }),\n\n\t        enabled: Binder.extend({\n\t            init: function(widget, bindings, options) {\n\t                Binder.fn.init.call(this, widget.element[0], bindings, options);\n\n\t                this.widget = widget;\n\t            },\n\n\t            refresh: function() {\n\t                if (this.widget.enable) {\n\t                    this.widget.enable(this.bindings.enabled.get());\n\t                }\n\t            }\n\t        }),\n\n\t        disabled: Binder.extend({\n\t            init: function(widget, bindings, options) {\n\t                Binder.fn.init.call(this, widget.element[0], bindings, options);\n\n\t                this.widget = widget;\n\t            },\n\n\t            refresh: function() {\n\t                if (this.widget.enable) {\n\t                    this.widget.enable(!this.bindings.disabled.get());\n\t                }\n\t            }\n\t        }),\n\n\t        source: dataSourceBinding("source", "dataSource", "setDataSource"),\n\n\t        value: Binder.extend({\n\t            init: function(widget, bindings, options) {\n\t                Binder.fn.init.call(this, widget.element[0], bindings, options);\n\n\t                this.widget = widget;\n\t                this._change = $.proxy(this.change, this);\n\t                this.widget.first(CHANGE, this._change);\n\n\t                var value = this.bindings.value.get();\n\n\t                this._valueIsObservableObject = !options.valuePrimitive && (value == null || value instanceof ObservableObject);\n\t                this._valueIsObservableArray = value instanceof ObservableArray;\n\t                this._initChange = false;\n\t            },\n\n\t            _source: function() {\n\t                var source;\n\n\t                if (this.widget.dataItem) {\n\t                    source = this.widget.dataItem();\n\t                    if (source && source instanceof ObservableObject) {\n\t                        return [source];\n\t                    }\n\t                }\n\n\t                if (this.bindings.source) {\n\t                    source = this.bindings.source.get();\n\t                }\n\n\t                if (!source || source instanceof kendo.data.DataSource) {\n\t                    source = this.widget.dataSource.flatView();\n\t                }\n\n\t                return source;\n\t            },\n\n\t            change: function() {\n\t                var value = this.widget.value(),\n\t                    field = this.options.dataValueField || this.options.dataTextField,\n\t                    isArray = toString.call(value) === "[object Array]",\n\t                    isObservableObject = this._valueIsObservableObject,\n\t                    valueIndex, valueLength, values = [],\n\t                    sourceItem, sourceValue,\n\t                    idx, length, source;\n\n\t                this._initChange = true;\n\n\t                if (field) {\n\n\t                    if (value === "" && (isObservableObject || this.options.valuePrimitive)) {\n\t                        value = null;\n\t                    } else {\n\t                        source = this._source();\n\n\t                        if (isArray) {\n\t                            valueLength = value.length;\n\t                            values = value.slice(0);\n\t                        }\n\n\t                        for (idx = 0, length = source.length; idx < length; idx++) {\n\t                            sourceItem = source[idx];\n\t                            sourceValue = sourceItem.get(field);\n\n\t                            if (isArray) {\n\t                                for (valueIndex = 0; valueIndex < valueLength; valueIndex++) {\n\t                                    if (sourceValue == values[valueIndex]) {\n\t                                        values[valueIndex] = sourceItem;\n\t                                        break;\n\t                                    }\n\t                                }\n\t                            } else if (sourceValue == value) {\n\t                                value = isObservableObject ? sourceItem : sourceValue;\n\t                                break;\n\t                            }\n\t                        }\n\n\t                        if (values[0]) {\n\t                            if (this._valueIsObservableArray) {\n\t                                value = values;\n\t                            } else if (isObservableObject || !field) {\n\t                                value = values[0];\n\t                            } else {\n\t                                value = values[0].get(field);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\n\t                this.bindings.value.set(value);\n\t                this._initChange = false;\n\t            },\n\n\t            refresh: function() {\n\t                if (!this._initChange) {\n\t                    var widget = this.widget;\n\t                    var options = widget.options;\n\t                    var textField = options.dataTextField;\n\t                    var valueField = options.dataValueField || textField;\n\t                    var value = this.bindings.value.get();\n\t                    var text = options.text || "";\n\t                    var idx = 0, length;\n\t                    var values = [];\n\n\t                    if (value === undefined) {\n\t                        value = null;\n\t                    }\n\n\t                    if (valueField) {\n\t                        if (value instanceof ObservableArray) {\n\t                            for (length = value.length; idx < length; idx++) {\n\t                                values[idx] = value[idx].get(valueField);\n\t                            }\n\t                            value = values;\n\t                        } else if (value instanceof ObservableObject) {\n\t                            text = value.get(textField);\n\t                            value = value.get(valueField);\n\t                        }\n\t                    }\n\n\t                    if (options.autoBind === false && !options.cascadeFrom && widget.listView && !widget.listView.bound()) {\n\t                        if (textField === valueField && !text) {\n\t                            text = value;\n\t                        }\n\n\t                        if (!text && (value || value === 0) && options.valuePrimitive) {\n\t                            widget.value(value);\n\t                        } else {\n\t                            widget._preselect(value, text);\n\t                        }\n\t                    } else {\n\t                        widget.value(value);\n\t                    }\n\t                }\n\n\t                this._initChange = false;\n\t            },\n\n\t            destroy: function() {\n\t                this.widget.unbind(CHANGE, this._change);\n\t            }\n\t        }),\n\t        dropdowntree: {\n\t            value: Binder.extend({\n\t                init: function(widget, bindings, options) {\n\t                    Binder.fn.init.call(this, widget.element[0], bindings, options);\n\n\t                    this.widget = widget;\n\t                    this._change = $.proxy(this.change, this);\n\t                    this.widget.first(CHANGE, this._change);\n\t                    this._initChange = false;\n\t                },\n\n\t                change: function() {\n\t                    var that = this,\n\t                        oldValues = that.bindings[VALUE].get(),\n\t                        valuePrimitive = that.options.valuePrimitive,\n\t                        selectedNode = that.widget.treeview.select(),\n\t                        nonPrimitiveValues = that.widget._isMultipleSelection() ? that.widget._getAllChecked(): (that.widget.treeview.dataItem(selectedNode) || that.widget.value()),\n\t                        newValues = (valuePrimitive || that.widget.options.autoBind === false) ? that.widget.value() : nonPrimitiveValues;\n\n\t                    var field = this.options.dataValueField || this.options.dataTextField;\n\n\t                    newValues = newValues.slice ? newValues.slice(0): newValues;\n\n\t                    that._initChange = true;\n\n\t                    if (oldValues instanceof ObservableArray) {\n\t                        var remove = [];\n\t                        var newLength = newValues.length;\n\t                        var i = 0, j = 0;\n\t                        var old = oldValues[i];\n\t                        var same = false;\n\t                        var removeIndex;\n\t                        var newValue;\n\t                        var found;\n\n\t                        while (old !== undefined) {\n\t                            found = false;\n\t                            for (j = 0; j < newLength; j++) {\n\t                                if (valuePrimitive) {\n\t                                    same = newValues[j] == old;\n\t                                } else {\n\t                                    newValue = newValues[j];\n\n\t                                    newValue = newValue.get ? newValue.get(field) : newValue;\n\t                                    same = newValue == (old.get ? old.get(field) : old);\n\t                                }\n\n\t                                if (same) {\n\t                                    newValues.splice(j, 1);\n\t                                    newLength -= 1;\n\t                                    found = true;\n\t                                    break;\n\t                                }\n\t                            }\n\n\t                            if (!found) {\n\t                                remove.push(old);\n\t                                arraySplice(oldValues, i, 1);\n\t                                removeIndex = i;\n\t                            } else {\n\t                                i += 1;\n\t                            }\n\n\t                            old = oldValues[i];\n\t                        }\n\n\t                        arraySplice(oldValues, oldValues.length, 0, newValues);\n\n\t                        if (remove.length) {\n\t                            oldValues.trigger("change", {\n\t                                action: "remove",\n\t                                items: remove,\n\t                                index: removeIndex\n\t                            });\n\t                        }\n\n\t                        if (newValues.length) {\n\t                            oldValues.trigger("change", {\n\t                                action: "add",\n\t                                items: newValues,\n\t                                index: oldValues.length - 1\n\t                            });\n\t                        }\n\t                    } else {\n\t                        that.bindings[VALUE].set(newValues);\n\t                    }\n\n\t                    that._initChange = false;\n\t                },\n\n\t                refresh: function() {\n\t                    if (!this._initChange) {\n\t                        var options = this.options,\n\t                            widget = this.widget,\n\t                            field = options.dataValueField || options.dataTextField,\n\t                            value = this.bindings.value.get(),\n\t                            data = value,\n\t                            idx = 0, length,\n\t                            values = [],\n\t                            selectedValue;\n\n\t                        if (field) {\n\t                            if (value instanceof ObservableArray) {\n\t                                for (length = value.length; idx < length; idx++) {\n\t                                    selectedValue = value[idx];\n\t                                    values[idx] = selectedValue.get ? selectedValue.get(field) : selectedValue;\n\t                                }\n\t                                value = values;\n\t                            } else if (value instanceof ObservableObject) {\n\t                                value = value.get(field);\n\t                            }\n\t                        }\n\t                        if (options.autoBind === false && options.valuePrimitive !== true) {\n\t                            widget._preselect(data, value);\n\t                        } else {\n\t                            widget.value(value);\n\t                        }\n\t                   }\n\t                },\n\n\t                destroy: function() {\n\t                    this.widget.unbind(CHANGE, this._change);\n\t                }\n\t            })\n\t        },\n\t        gantt: {\n\t            dependencies: dataSourceBinding("dependencies", "dependencies", "setDependenciesDataSource")\n\t        },\n\n\t        multiselect: {\n\t            value: Binder.extend({\n\t                init: function(widget, bindings, options) {\n\t                    Binder.fn.init.call(this, widget.element[0], bindings, options);\n\n\t                    this.widget = widget;\n\t                    this._change = $.proxy(this.change, this);\n\t                    this.widget.first(CHANGE, this._change);\n\t                    this._initChange = false;\n\t                },\n\n\t                change: function() {\n\t                    var that = this,\n\t                        oldValues = that.bindings[VALUE].get(),\n\t                        valuePrimitive = that.options.valuePrimitive,\n\t                        newValues = valuePrimitive ? that.widget.value() : that.widget.dataItems();\n\n\t                    var field = this.options.dataValueField || this.options.dataTextField;\n\n\t                    newValues = newValues.slice(0);\n\n\t                    that._initChange = true;\n\n\t                    if (oldValues instanceof ObservableArray) {\n\t                        var remove = [];\n\n\t                        var newLength = newValues.length;\n\n\t                        var i = 0, j = 0;\n\t                        var old = oldValues[i];\n\t                        var same = false;\n\t                        var removeIndex;\n\t                        var newValue;\n\t                        var found;\n\n\t                        while (old !== undefined) {\n\t                            found = false;\n\t                            for (j = 0; j < newLength; j++) {\n\t                                if (valuePrimitive) {\n\t                                    same = newValues[j] == old;\n\t                                } else {\n\t                                    newValue = newValues[j];\n\n\t                                    newValue = newValue.get ? newValue.get(field) : newValue;\n\t                                    same = newValue == (old.get ? old.get(field) : old);\n\t                                }\n\n\t                                if (same) {\n\t                                    newValues.splice(j, 1);\n\t                                    newLength -= 1;\n\t                                    found = true;\n\t                                    break;\n\t                                }\n\t                            }\n\n\t                            if (!found) {\n\t                                remove.push(old);\n\t                                arraySplice(oldValues, i, 1);\n\t                                removeIndex = i;\n\t                            } else {\n\t                                i += 1;\n\t                            }\n\n\t                            old = oldValues[i];\n\t                        }\n\n\t                        arraySplice(oldValues, oldValues.length, 0, newValues);\n\n\t                        if (remove.length) {\n\t                            oldValues.trigger("change", {\n\t                                action: "remove",\n\t                                items: remove,\n\t                                index: removeIndex\n\t                            });\n\t                        }\n\n\t                        if (newValues.length) {\n\t                            oldValues.trigger("change", {\n\t                                action: "add",\n\t                                items: newValues,\n\t                                index: oldValues.length - 1\n\t                            });\n\t                        }\n\t                    } else {\n\t                        that.bindings[VALUE].set(newValues);\n\t                    }\n\n\t                    that._initChange = false;\n\t                },\n\n\t                refresh: function() {\n\t                    if (!this._initChange) {\n\t                        var options = this.options,\n\t                            widget = this.widget,\n\t                            field = options.dataValueField || options.dataTextField,\n\t                            value = this.bindings.value.get(),\n\t                            data = value,\n\t                            idx = 0, length,\n\t                            values = [],\n\t                            selectedValue;\n\n\t                        if (value === undefined) {\n\t                            value = null;\n\t                        }\n\n\t                        if (field) {\n\t                            if (value instanceof ObservableArray) {\n\t                                for (length = value.length; idx < length; idx++) {\n\t                                    selectedValue = value[idx];\n\t                                    values[idx] = selectedValue.get ? selectedValue.get(field) : selectedValue;\n\t                                }\n\t                                value = values;\n\t                            } else if (value instanceof ObservableObject) {\n\t                                value = value.get(field);\n\t                            }\n\t                        }\n\n\t                        if (options.autoBind === false && options.valuePrimitive !== true && !widget._isBound()) {\n\t                            widget._preselect(data, value);\n\t                        } else {\n\t                            widget.value(value);\n\t                        }\n\t                    }\n\t                },\n\n\t                destroy: function() {\n\t                    this.widget.unbind(CHANGE, this._change);\n\t                }\n\n\t            })\n\t        },\n\t        scheduler: {\n\t            source: dataSourceBinding("source", "dataSource", "setDataSource").extend({\n\t                dataBound: function(e) {\n\t                    var idx;\n\t                    var length;\n\t                    var widget = this.widget;\n\t                    var elements = e.addedItems || widget.items();\n\t                    var data, parents;\n\n\t                    if (elements.length) {\n\t                        data = e.addedDataItems || widget.dataItems();\n\t                        parents = this.bindings.source._parents();\n\n\t                        for (idx = 0, length = data.length; idx < length; idx++) {\n\t                            bindElement(elements[idx], data[idx], this._ns(e.ns), [data[idx]].concat(parents));\n\t                        }\n\t                    }\n\t                }\n\t            })\n\t        },\n\n\t        grid: {\n\t            source: dataSourceBinding("source", "dataSource", "setDataSource").extend({\n\t                dataBound: function(e) {\n\t                    var idx,\n\t                    length,\n\t                    widget = this.widget,\n\t                    elements = e.addedItems || widget.items(),\n\t                    parents,\n\t                    data;\n\n\t                    if (elements.length) {\n\t                        data = e.addedDataItems || widget.dataItems();\n\t                        parents = this.bindings.source._parents();\n\n\t                        for (idx = 0, length = data.length; idx < length; idx++) {\n\t                            bindElement(elements[idx], data[idx], this._ns(e.ns), [data[idx]].concat(parents));\n\t                        }\n\t                    }\n\t                }\n\t            })\n\t        },\n\n\t        badge: {\n\t            text: Binder.extend({\n\t                init: function(widget, bindings, options) {\n\t                    Binder.fn.init.call(this, widget.element[0], bindings, options);\n\n\t                    this.widget = widget;\n\t                },\n\t                refresh: function() {\n\t                    var text = this.bindings.text.get();\n\n\t                    if (text == null) {\n\t                        text = "";\n\t                    }\n\t                    this.widget.text(text);\n\t                }\n\t            })\n\t        }\n\t    };\n\n\t    var arraySplice = function(arr, idx, remove, add) {\n\t        add = add || [];\n\t        remove = remove || 0;\n\n\t        var addLength = add.length;\n\t        var oldLength = arr.length;\n\n\t        var shifted = [].slice.call(arr, idx + remove);\n\t        var shiftedLength = shifted.length;\n\t        var index;\n\n\t        if (addLength) {\n\t            addLength = idx + addLength;\n\t            index = 0;\n\n\t            for (; idx < addLength; idx++) {\n\t                arr[idx] = add[index];\n\t                index++;\n\t            }\n\n\t            arr.length = addLength;\n\t        } else if (remove) {\n\t            arr.length = idx;\n\n\t            remove += idx;\n\t            while (idx < remove) {\n\t                delete arr[--remove];\n\t            }\n\t        }\n\n\t        if (shiftedLength) {\n\t            shiftedLength = idx + shiftedLength;\n\t            index = 0;\n\n\t            for (; idx < shiftedLength; idx++) {\n\t                arr[idx] = shifted[index];\n\t                index++;\n\t            }\n\n\t            arr.length = shiftedLength;\n\t        }\n\n\t        idx = arr.length;\n\n\t        while (idx < oldLength) {\n\t            delete arr[idx];\n\t            idx++;\n\t        }\n\t    };\n\n\t    var BindingTarget = Class.extend( {\n\t        init: function(target, options) {\n\t            this.target = target;\n\t            this.options = options;\n\t            this.toDestroy = [];\n\t        },\n\n\t        bind: function(bindings) {\n\t            var key,\n\t                hasValue,\n\t                hasSource,\n\t                hasEvents,\n\t                hasChecked,\n\t                hasCss,\n\t                widgetBinding = this instanceof WidgetBindingTarget,\n\t                specificBinders = this.binders();\n\n\t            for (key in bindings) {\n\t                if (key == VALUE) {\n\t                    hasValue = true;\n\t                } else if (key == SOURCE) {\n\t                    hasSource = true;\n\t                } else if (key == EVENTS && !widgetBinding) {\n\t                    hasEvents = true;\n\t                } else if (key == CHECKED) {\n\t                    hasChecked = true;\n\t                } else if (key == CSS) {\n\t                    hasCss = true;\n\t                } else {\n\t                    this.applyBinding(key, bindings, specificBinders);\n\t                }\n\t            }\n\t            if (hasSource) {\n\t                this.applyBinding(SOURCE, bindings, specificBinders);\n\t            }\n\n\t            if (hasValue) {\n\t                this.applyBinding(VALUE, bindings, specificBinders);\n\t            }\n\n\t            if (hasChecked) {\n\t                this.applyBinding(CHECKED, bindings, specificBinders);\n\t            }\n\n\t            if (hasEvents && !widgetBinding) {\n\t                this.applyBinding(EVENTS, bindings, specificBinders);\n\t            }\n\n\t            if (hasCss && !widgetBinding) {\n\t                this.applyBinding(CSS, bindings, specificBinders);\n\t            }\n\t        },\n\n\t        binders: function() {\n\t            return binders[this.target.nodeName.toLowerCase()] || {};\n\t        },\n\n\t        applyBinding: function(name, bindings, specificBinders) {\n\t            var binder = specificBinders[name] || binders[name],\n\t                toDestroy = this.toDestroy,\n\t                attribute,\n\t                binding = bindings[name];\n\n\t            if (binder) {\n\t                binder = new binder(this.target, bindings, this.options);\n\n\t                toDestroy.push(binder);\n\n\t                if (binding instanceof Binding) {\n\t                    binder.bind(binding);\n\t                    toDestroy.push(binding);\n\t                } else {\n\t                    for (attribute in binding) {\n\t                        binder.bind(binding, attribute);\n\t                        toDestroy.push(binding[attribute]);\n\t                    }\n\t                }\n\t            } else if (name !== "template") {\n\t                throw new Error("The " + name + " binding is not supported by the " + this.target.nodeName.toLowerCase() + " element");\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            var idx,\n\t                length,\n\t                toDestroy = this.toDestroy;\n\n\t            for (idx = 0, length = toDestroy.length; idx < length; idx++) {\n\t                toDestroy[idx].destroy();\n\t            }\n\t        }\n\t    });\n\n\t    var WidgetBindingTarget = BindingTarget.extend( {\n\t        binders: function() {\n\t            return binders.widget[this.target.options.name.toLowerCase()] || {};\n\t        },\n\n\t        applyBinding: function(name, bindings, specificBinders) {\n\t            var binder = specificBinders[name] || binders.widget[name],\n\t                toDestroy = this.toDestroy,\n\t                attribute,\n\t                binding = bindings[name];\n\n\t            if (binder) {\n\t                binder = new binder(this.target, bindings, this.target.options);\n\n\t                toDestroy.push(binder);\n\n\n\t                if (binding instanceof Binding) {\n\t                    binder.bind(binding);\n\t                    toDestroy.push(binding);\n\t                } else {\n\t                    for (attribute in binding) {\n\t                        binder.bind(binding, attribute);\n\t                        toDestroy.push(binding[attribute]);\n\t                    }\n\t                }\n\t            } else {\n\t                throw new Error("The " + name + " binding is not supported by the " + this.target.options.name + " widget");\n\t            }\n\t        }\n\t    });\n\n\t    function bindingTargetForRole(element, roles) {\n\t        var widget = kendo.initWidget(element, {}, roles);\n\n\t        if (widget) {\n\t            return new WidgetBindingTarget(widget);\n\t        }\n\t    }\n\n\t    var keyValueRegExp = /[A-Za-z0-9_\\-]+:(\\{([^}]*)\\}|[^,}]+)/g,\n\t        whiteSpaceRegExp = /\\s/g;\n\n\t    function parseBindings(bind) {\n\t        var result = {},\n\t            idx,\n\t            length,\n\t            token,\n\t            colonIndex,\n\t            key,\n\t            value,\n\t            tokens;\n\n\t        tokens = bind.match(keyValueRegExp);\n\n\t        for (idx = 0, length = tokens.length; idx < length; idx++) {\n\t            token = tokens[idx];\n\t            colonIndex = token.indexOf(":");\n\n\t            key = token.substring(0, colonIndex);\n\t            value = token.substring(colonIndex + 1);\n\n\t            if (value.charAt(0) == "{") {\n\t                value = parseBindings(value);\n\t            }\n\n\t            result[key] = value;\n\t        }\n\n\t        return result;\n\t    }\n\n\t    function createBindings(bindings, source, type) {\n\t        var binding,\n\t            result = {};\n\n\t        for (binding in bindings) {\n\t            result[binding] = new type(source, bindings[binding]);\n\t        }\n\n\t        return result;\n\t    }\n\n\t    function bindElement(element, source, roles, parents) {\n\n\t        if(!element || element.getAttribute("data-" + kendo.ns + "stop")){\n\t            return;\n\t        }\n\n\t        var role = element.getAttribute("data-" + kendo.ns + "role"),\n\t            idx,\n\t            bind = element.getAttribute("data-" + kendo.ns + "bind"),\n\t            childrenCopy = [],\n\t            deep = true,\n\t            bindings,\n\t            options = {},\n\t            target;\n\n\t        parents = parents || [source];\n\n\t        if (role || bind) {\n\t            unbindElement(element, false);\n\t        }\n\n\t        if (role) {\n\t            target = bindingTargetForRole(element, roles);\n\t        }\n\n\t        if (bind) {\n\t            bind = parseBindings(bind.replace(whiteSpaceRegExp, ""));\n\n\t            if (!target) {\n\t                options = kendo.parseOptions(element, {textField: "", valueField: "", template: "", valueUpdate: CHANGE, valuePrimitive: false, autoBind: true}, source);\n\t                options.roles = roles;\n\t                target = new BindingTarget(element, options);\n\t            }\n\n\t            target.source = source;\n\n\t            bindings = createBindings(bind, parents, Binding);\n\n\t            if (options.template) {\n\t                bindings.template = new TemplateBinding(parents, "", options.template);\n\t            }\n\n\t            if (bindings.click) {\n\t                bind.events = bind.events || {};\n\t                bind.events.click = bind.click;\n\t                bindings.click.destroy();\n\t                delete bindings.click;\n\t            }\n\n\t            if (bindings.source) {\n\t                deep = false;\n\t            }\n\n\t            if (bind.attr) {\n\t                bindings.attr = createBindings(bind.attr, parents, Binding);\n\t            }\n\n\t            if (bind.style) {\n\t                bindings.style = createBindings(bind.style, parents, Binding);\n\t            }\n\n\t            if (bind.events) {\n\t                bindings.events = createBindings(bind.events, parents, EventBinding);\n\t            }\n\n\t            if (bind.css) {\n\t                bindings.css = createBindings(bind.css, parents, Binding);\n\t            }\n\n\t            target.bind(bindings);\n\t        }\n\n\t        if (target) {\n\t            element.kendoBindingTarget = target;\n\t        }\n\n\t        var children = element.children;\n\t        if (deep && children && !element.getAttribute("data-" + kendo.ns + "stop")) {\n\t            // https://github.com/telerik/kendo/issues/1240 for the weirdness.\n\t            for (idx = 0; idx < children.length; idx++) {\n\t                childrenCopy[idx] = children[idx];\n\t            }\n\n\t            for (idx = 0; idx < childrenCopy.length; idx++) {\n\t                bindElement(childrenCopy[idx], source, roles, parents);\n\t            }\n\t        }\n\t    }\n\n\t    function bind(dom, object) {\n\t        var idx,\n\t            length,\n\t            node,\n\t            roles = kendo.rolesFromNamespaces([].slice.call(arguments, 2));\n\n\t        object = kendo.observable(object);\n\t        dom = $(dom);\n\n\t        for (idx = 0, length = dom.length; idx < length; idx++) {\n\t            node = dom[idx];\n\t            if (node.nodeType === 1) {\n\t                bindElement(node, object, roles);\n\t            }\n\t        }\n\t    }\n\n\t    function unbindElement(element, destroyWidget) {\n\t        var bindingTarget = element.kendoBindingTarget;\n\n\t        if (bindingTarget) {\n\t            bindingTarget.destroy();\n\n\t            if (deleteExpando) {\n\t                delete element.kendoBindingTarget;\n\t            } else if (element.removeAttribute) {\n\t                element.removeAttribute("kendoBindingTarget");\n\t            } else {\n\t                element.kendoBindingTarget = null;\n\t            }\n\t        }\n\n\t        if(destroyWidget) {\n\t            var widget = kendo.widgetInstance($(element));\n\t            if (widget && typeof widget.destroy === FUNCTION) {\n\t                widget.destroy();\n\t            }\n\t        }\n\t    }\n\n\t    function unbindElementTree(element, destroyWidgets) {\n\t        unbindElement(element, destroyWidgets);\n\n\t        unbindElementChildren(element, destroyWidgets);\n\t    }\n\n\t    function unbindElementChildren(element, destroyWidgets) {\n\t        var children = element.children;\n\n\t        if (children) {\n\t            for (var idx = 0, length = children.length; idx < length; idx++) {\n\t                unbindElementTree(children[idx], destroyWidgets);\n\t            }\n\t        }\n\t    }\n\n\t    function unbind(dom) {\n\t        var idx, length;\n\n\t        dom = $(dom);\n\n\t        for (idx = 0, length = dom.length; idx < length; idx++ ) {\n\t            unbindElementTree(dom[idx], false);\n\t        }\n\t    }\n\n\t    function notify(widget, namespace) {\n\t        var element = widget.element,\n\t            bindingTarget = element[0].kendoBindingTarget;\n\n\t        if (bindingTarget) {\n\t            bind(element, bindingTarget.source, namespace);\n\t        }\n\t    }\n\n\t    function retrievePrimitiveValues(value, valueField) {\n\t        var values = [];\n\t        var idx = 0;\n\t        var length;\n\t        var item;\n\n\t        if (!valueField) {\n\t            return value;\n\t        }\n\n\t        if (value instanceof ObservableArray) {\n\t            for (length = value.length; idx < length; idx++) {\n\t                item = value[idx];\n\t                values[idx] = item.get ? item.get(valueField) : item[valueField];\n\t            }\n\t            value = values;\n\t        } else if (value instanceof ObservableObject) {\n\t            value = value.get(valueField);\n\t        }\n\n\t        return value;\n\t    }\n\n\t    kendo.unbind = unbind;\n\t    kendo.bind = bind;\n\t    kendo.data.binders = binders;\n\t    kendo.data.Binder = Binder;\n\t    kendo.notify = notify;\n\n\t    kendo.observable = function(object) {\n\t        if (!(object instanceof ObservableObject)) {\n\t            object = new ObservableObject(object);\n\t        }\n\n\t        return object;\n\t    };\n\n\t    kendo.observableHierarchy = function(array) {\n\t        var dataSource = kendo.data.HierarchicalDataSource.create(array);\n\n\t        function recursiveRead(data) {\n\t            var i, children;\n\n\t            for (i = 0; i < data.length; i++) {\n\t                data[i]._initChildren();\n\n\t                children = data[i].children;\n\n\t                children.fetch();\n\n\t                data[i].items = children.data();\n\n\t                recursiveRead(data[i].items);\n\t            }\n\t        }\n\n\t        dataSource.fetch();\n\n\t        recursiveRead(dataSource.data());\n\n\t        dataSource._data._dataSource = dataSource;\n\n\t        return dataSource._data;\n\t    };\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.binder.js?')},"./node_modules/@progress/kendo-ui/js/kendo.breadcrumb.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.breadcrumb.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1073);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1049:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1073:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1049) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "breadcrumb",\n\t    name: "Breadcrumb",\n\t    category: "web",\n\t    description: "The Breadcrumb widget displays navigation breadcrumb.",\n\t    depends: [ "core" ]\n\t};\n\n\t(function ($, undefined) {\n\t    var kendo = window.kendo,\n\t        Widget = kendo.ui.Widget,\n\t        extend = $.extend,\n\t        isPlainObject = $.isPlainObject,\n\n\t        proxy = $.proxy,\n\n\t        BREADCRUMB = ".kendoBreadcrumb",\n\n\t        ARIA_HIDDEN = "aria-hidden",\n\t        ARIA_LABEL = "aria-label",\n\n\t        CLICK = "click",\n\t        FOCUS = "focus",\n\t        BLUR = "blur",\n\t        KEYDOWN = "keydown",\n\t        CHANGE = "change",\n\t        DOT = ".";\n\n\t    var breadcrumbStyles = {\n\t        widget: "k-widget k-breadcrumb",\n\t        overlay: "k-breadcrumb-container",\n\t        textbox: "k-textbox",\n\t        link: "k-breadcrumb-link",\n\t        item: "k-breadcrumb-item",\n\t        delimiter: "k-breadcrumb-delimiter-icon",\n\t        rootItem: "k-breadcrumb-root-item",\n\t        rootLink: "k-breadcrumb-root-link",\n\t        overflowIcon: "k-breadcrumb-overflow-icon",\n\t        focused: "k-state-focused",\n\t        hidden: "k-hidden",\n\t        inputWrapper: "k-breadcrumb-input-container"\n\t    };\n\n\t    var Breadcrumb = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            options = options || {};\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that._wrapper();\n\n\t            if(options.editable) {\n\t                that._editable();\n\t                that._tabindex();\n\t            }\n\n\t            that.wrapper.on(CLICK + BREADCRUMB, "a:not(.k-state-disabled)", proxy(that._click, that));\n\n\t            if(options.value || options.bindToLocation || !options.items) {\n\t                that._value();\n\t            } else if (options.items) {\n\t                that.items(options.items);\n\t            }\n\n\t            that._resizeHandler = kendo.onResize(function() {\n\t                that.resize(true);\n\t            });\n\t        },\n\n\t        options: {\n\t            editable: false,\n\t            navigational: false,\n\t            bindToLocation: false,\n\t            items: null,\n\t            name: "Breadcrumb",\n\t            gap: 0,\n\t            rootIcon: "home",\n\t            delimiterIcon: "arrow-chevron-right",\n\t            messages: {\n\t                rootTitle: "Go to root"\n\t            }\n\t        },\n\n\t        events: [ CHANGE, CLICK ],\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            kendo.unbindResize(that._resizeHandler);\n\n\t            that.wrapper\n\t                .add(that.wrapper.find("input"))\n\t                .add(that.wrapper.find("a"))\n\t                .off(BREADCRUMB);\n\t        },\n\n\t        items: function(items) {\n\t            var that = this;\n\n\t            if(items === undefined) {\n\t                return that.options.items;\n\t            }\n\n\t            that.options.items = items;\n\t            that._segments = items;\n\t            that.refresh();\n\t        },\n\n\t        _update: function(val) {\n\t            var that = this;\n\n\t            if (val !== that.value()) {\n\t                that._generateSegments(val);\n\t                that.refresh();\n\t                that.trigger(CHANGE, { sender: this, value: val });\n\t            }\n\t        },\n\n\t        _generateSegments: function (value) {\n\t            var that = this,\n\t                options = that.options,\n\t                items = options.items,\n\t                path, segments;\n\n\t            segments = that._split(value);\n\n\t            if(!items) {\n\t                that.options.items = that._segments = segments;\n\t                return;\n\t            }\n\n\t            that._segments = [];\n\n\t            for (var i = 0; i < segments.length; i++) {\n\t                path = that._path(items.slice(0, i + 1));\n\n\t                if (path !== "" && value.indexOf(path) > -1 && items[i] && items[i].text === segments[i]) {\n\t                    that._segments.push(items[i]);\n\t                } else {\n\t                    that._segments.push(segments[i]);\n\t                }\n\t            }\n\t        },\n\n\t        _click: function(e) {\n\t            var that = this,\n\t                options = that.options,\n\t                item = $(e.target).closest(DOT + breadcrumbStyles.item),\n\t                previousDomItems = item.prevAll().addBack(),\n\t                previousItems = that._getItems(previousDomItems),\n\t                path = that._path(previousItems),\n\t                segment = that._segments[item.index()];\n\n\t            if(!options.navigational) {\n\t                e.preventDefault();\n\t            }\n\n\t            if(!that.trigger(CLICK, { sender: that, originalEvent: e, isRoot: segment.type === "rootitem", item: segment})) {\n\t                that._update(path);\n\t            }\n\t        },\n\n\t        _getItems: function(items) {\n\t            var that = this;\n\n\t            return $.map(items, function(item) {\n\t                return that._segments[$(item).index()] || item.innerText;\n\t            });\n\t        },\n\n\t        _edit: function() {\n\t            var that = this,\n\t                input = that.input;\n\n\t            that.oldValue = that.value();\n\t            that.inputWrapper.css("height", that.wrapper.height());\n\t            that.overlay.hide();\n\t            that.input.val(that.value());\n\t            that.input.attr(ARIA_HIDDEN, false);\n\t            that.inputWrapper.show();\n\n\t            setTimeout(function() {\n\t                input.select();\n\t            });\n\t        },\n\n\t        _blur: function(shouldRestoreValue) {\n\t            var that = this,\n\t                input = that.input,\n\t                inputWrapper = that.inputWrapper,\n\t                wrapper = that.wrapper,\n\t                overlay = that.overlay,\n\t                val = input.val().replace(/\\/{2,}/g, "/");\n\n\t            if (overlay.is(":visible")) {\n\t                return;\n\t            }\n\n\t            if (shouldRestoreValue) {\n\t                val = that.oldValue;\n\t            }\n\n\t            input.attr(ARIA_HIDDEN, true);\n\t            inputWrapper.hide();\n\t            overlay.show();\n\t            input.val("");\n\t            that._update(val);\n\t            wrapper.removeClass(breadcrumbStyles.focused);\n\t        },\n\n\t        _keydown: function(e) {\n\t            var that = this,\n\t                key = e.keyCode,\n\t                isEnter = key === kendo.keys.ENTER,\n\t                isEsc = key === kendo.keys.ESC;\n\n\t            if (isEnter || isEsc) {\n\t                that._blur(isEsc);\n\n\t                setTimeout(function() {\n\t                    that.overlay.find("a:first").focus();\n\t                });\n\t            }\n\t        },\n\n\t        isNavigational: function(target) {\n\t            var canNavigate =\n\t                target.hasClass(breadcrumbStyles.textbox) ||\n\t                target.closest(DOT + breadcrumbStyles.item);\n\n\t            if(target[0] === this.wrapper[0]) {\n\t                return false;\n\t            }\n\n\t            return canNavigate && !target.hasClass("k-breadcrumb-last-item");\n\t        },\n\n\t        _wrapperKeydown: function (ev) {\n\t            var that = this,\n\t                target = $(ev.target),\n\t                isNavigational = that.isNavigational(target);\n\n\t            if (ev.keyCode === kendo.keys.ENTER && !isNavigational) {\n\t                that._edit();\n\t            }\n\t        },\n\n\t        _wrapperClick: function (ev) {\n\t            var that = this,\n\t                target = $(ev.target),\n\t                isNavigational = that.isNavigational(target);\n\n\t            if(!isNavigational) {\n\t                this._edit();\n\t            }\n\t        },\n\n\t        _wrapperFocus: function(ev) {\n\t            $(ev.target).addClass(breadcrumbStyles.focused);\n\t        },\n\n\t        _wrapperBlur: function(ev) {\n\t            $(ev.target).removeClass(breadcrumbStyles.focused);\n\t        },\n\n\t        _wrapper: function() {\n\t            var that = this,\n\t                element = this.element,\n\t                elementIsInput = element.is("input");\n\n\t            that.wrapper = elementIsInput ? element\n\t                .wrap($("<nav />"))\n\t                .parent() : element;\n\n\t            if (elementIsInput) {\n\t                that.element\n\t                    .wrap($("<div />").addClass(breadcrumbStyles.inputWrapper))\n\t                    .addClass(breadcrumbStyles.textbox)\n\t                    .parent()\n\t                    .hide();\n\n\t                that.inputWrapper = that.wrapper.find(DOT + breadcrumbStyles.inputWrapper);\n\t            } else {\n\t                that.inputWrapper = that.wrapper\n\t                    .append($("<div />").addClass(breadcrumbStyles.inputWrapper))\n\t                    .find(DOT + breadcrumbStyles.inputWrapper).hide();\n\t            }\n\n\t            that.wrapper.addClass(breadcrumbStyles.widget);\n\t            that.wrapper.attr(ARIA_LABEL, "Breadcrumb");\n\n\t            that.overlay = that.wrapper\n\t                .append($("<ol />").addClass(breadcrumbStyles.overlay))\n\t                .find(DOT + breadcrumbStyles.overlay);\n\t        },\n\n\n\t        _editable: function(){\n\t            var that = this,\n\t                element = that.element,\n\t                elementIsInput = element.is("input");\n\n\t            if(elementIsInput) {\n\t                that.input = that.element;\n\t            } else {\n\t                that.input = $("<input />");\n\t            }\n\n\t            that.inputWrapper.append(that.input);\n\n\t            that.input\n\t                .addClass(breadcrumbStyles.textbox)\n\t                .attr(ARIA_HIDDEN, true);\n\n\t            that.input\n\t                .on(BLUR + BREADCRUMB, proxy(that._blur, that, false))\n\t                .on(KEYDOWN + BREADCRUMB, proxy(that._keydown, that));\n\n\t            that.wrapper\n\t                .on(FOCUS + BREADCRUMB, proxy(that._wrapperFocus, that))\n\t                .on(BLUR + BREADCRUMB, proxy(that._wrapperBlur, that))\n\t                .on(KEYDOWN + BREADCRUMB, proxy(that._wrapperKeydown, that))\n\t                .on(CLICK + BREADCRUMB, proxy(that._wrapperClick, that));\n\t        },\n\n\t        _value: function () {\n\t            var that = this,\n\t                options = that.options;\n\n\t            if (options.value) {\n\t                that.value(options.value);\n\t            } else if (options.bindToLocation) {\n\t                that.value(window.location.href.replace(/http(s?):\\/\\//,"").replace(/\\/$/, ""));\n\t            } else {\n\t                that.value("");\n\t            }\n\t        },\n\n\t        _split: function(value) {\n\t            return value.split("/").filter(function (item, index) {\n\t                if(index > 0 && item === "") {\n\t                    return false;\n\t                }\n\n\t                return true;\n\t            });\n\t        },\n\n\t        isRtl: function() {\n\t            return kendo.support.isRtl(this.wrapper);\n\t        },\n\n\t        refresh: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                messages = options.messages,\n\t                delimiterIcon = that.options.delimiterIcon,\n\t                html = "",\n\t                href = "",\n\t                isOnlyRoot = that.value() === "",\n\t                segments = that._segments,\n\t                segment,\n\t                idx,\n\t                length, isLastSegment;\n\n\t            if (delimiterIcon == "arrow-chevron-right" && that.isRtl()) {\n\t                delimiterIcon = "arrow-chevron-left";\n\t            }\n\n\t            for (idx = 0, length = segments.length; idx < length; idx++) {\n\t                segment = segments[idx];\n\t                isLastSegment = idx === segments.length - 1;\n\n\t                if (segment !== undefined) {\n\t                    if(!html) {\n\t                        href = "/";\n\t                    } else {\n\t                        href += segment.text || segment || "";\n\t                    }\n\n\t                    if(typeof segment === "string") {\n\t                        segment = {\n\t                            type: !html ? "rootitem" : "item",\n\t                            href: options.navigational ? href : "#",\n\t                            text: segment,\n\t                            showIcon: !html,\n\t                            showText: !!html,\n\t                            icon: !html ? options.rootIcon : "",\n\t                            itemClass: !html ? "k-breadcrumb-root-item" : "",\n\t                            linkClass: !html ? breadcrumbStyles.rootLink : "",\n\t                            delimiterIcon: delimiterIcon,\n\t                            renderDelimiter: !isLastSegment && !isOnlyRoot,\n\t                            lastSegment: isLastSegment,\n\t                            iconClass: ""\n\t                        };\n\n\t                        that._segments.splice(idx, 1, segment);\n\t                    } else if (isPlainObject(segment)) {\n\t                        segment = extend({}, segment, {\n\t                            type: segment.type ? segment.type.toLowerCase() : "item"\n\t                        });\n\n\t                        segment = extend({}, segment, {\n\t                            text: segment.text || "",\n\t                            title: segment.text || "",\n\t                            icon: segment.icon || (segment.type === "rootitem" ? options.rootIcon : ""),\n\t                            iconClass: segment.iconClass || "",\n\t                            lastSegment: isLastSegment,\n\t                            renderDelimiter: !isLastSegment && segments.length > 1,\n\t                            href: options.navigational ? segment.href : "#",\n\t                            delimiterIcon: delimiterIcon,\n\t                            itemClass: segment.itemClass || "",\n\t                            linkClass: segment.linkClass || "",\n\t                            showIcon: segment.showIcon === undefined ? segment.type === "rootitem" && segment.type !== "item" : segment.showIcon,\n\t                            showText: segment.showText === undefined ? segment.type === "item" && segment.type !== "rootitem" : segment.showText\n\t                        });\n\n\t                        if(segment.type === "rootitem") {\n\t                            segment.itemClass += " k-breadcrumb-root-item";\n\t                            segment.linkClass += " " +  breadcrumbStyles.rootLink;\n\t                        }\n\t                    }\n\n\t                    if(segment.type === "rootitem" && segment.text === "") {\n\t                        segment.title = messages.rootTitle;\n\t                    }\n\n\t                    href += href.match(/\\/$/) ? "" : "/";\n\n\t                    html += kendo.template(this.itemTemplate)(segment);\n\t                }\n\t            }\n\n\t            this.overlay\n\t                .empty()\n\t                .append($(html));\n\n\t            this.resize(true);\n\t        },\n\n\t        itemTemplate: \'<li class="k-breadcrumb-item #:itemClass# #if(lastSegment){#k-breadcrumb-last-item#}#">\' +\n\t            \'<a href="#:href#" class="#:linkClass# \' +\n\t                                     \'#if(type !== "rootitem"){# k-breadcrumb-link#}#\' +\n\t                                     \'#if(showText && showIcon){# k-breadcrumb-icontext-link#}#\' +\n\t                                     \'#if(showIcon && !showText){# k-breadcrumb-icon-link#}#\' +\n\t                                     \'#if(lastSegment && type !== "rootitem"){# k-state-disabled#}#"\' +\n\t                                     \'#if(lastSegment){# aria-current="page"#}# title="#:text || title#">\' +\n\t                \'#if(showIcon) {#\' +\n\t                    \'<span class="#if(icon){#k-icon k-i-#:icon##}# #:iconClass#"></span>\' +\n\t                \'#}#\' +\n\t                \'#if(showText) {#\' +\n\t                    \'#:text#\' +\n\t                \'#}#\' +\n\t            \'</a>\' +\n\t            \'#if(renderDelimiter) {#\' +\n\t                \'<span class="k-breadcrumb-delimiter-icon k-icon k-i-#:delimiterIcon#" aria-hidden="true"></span>\' +\n\t            \'#}#\' +\n\t            \'#if(type === "rootitem" && renderDelimiter) {#\' +\n\t                \'<span class="k-breadcrumb-delimiter-icon k-hidden k-icon k-i-#:delimiterIcon#" aria-hidden="true"></span>\' +\n\t            \'#}#\' +\n\t        \'</li>\',\n\n\t        _displayOverflowIcons: function(visible) {\n\t            var that = this,\n\t                rootItem = that.wrapper.find(DOT + breadcrumbStyles.rootItem);\n\n\t            if (visible) {\n\t                rootItem.find(DOT + breadcrumbStyles.delimiter)\n\t                    .addClass(breadcrumbStyles.overflowIcon)\n\t                    .removeClass(breadcrumbStyles.hidden);\n\t            } else {\n\t                rootItem.find(DOT + breadcrumbStyles.overflowIcon)\n\t                    .removeClass(breadcrumbStyles.overflowIcon)\n\t                    .last().addClass(breadcrumbStyles.hidden);\n\t            }\n\t        },\n\n\t        _shrinkItems: function() {\n\t            var that = this,\n\t                wrapper = that.wrapper,\n\t                overlay = that.overlay,\n\t                items = that.overlay.find(DOT + breadcrumbStyles.item + ":visible:not(.k-breadcrumb-root-item)"),\n\t                availableWidth = wrapper.width() - that.options.gap,\n\t                item;\n\n\t            if (items.length == 1) {\n\t                return;\n\t            }\n\n\t            for (var i = 0; i < items.length; i += 1) {\n\t                item = $(items[i]);\n\n\t                if (kendo._outerWidth(overlay) >= availableWidth) {\n\t                    if (i == items.length - 1) {\n\t                        break;\n\t                    }\n\n\t                    item.hide();\n\t                    that._displayOverflowIcons(true);\n\t                }\n\t            }\n\t        },\n\n\t        _showItem: function(item, overlayWidth, availableWidth) {\n\t            if (item.length && availableWidth > overlayWidth + kendo._outerWidth(item, true)) {\n\t                item.show();\n\n\t                return true;\n\t            }\n\n\t            return false;\n\t        },\n\n\t        _stretchItems: function() {\n\t            var that = this,\n\t                wrapper = that.wrapper,\n\t                overlay = that.overlay,\n\t                items = that.overlay.find(DOT + breadcrumbStyles.item + ":hidden:not(.k-breadcrumb-root-item)"),\n\t                availableWidth = wrapper.width() - that.options.gap,\n\t                item, overlayWidth;\n\n\t            if (!items.length) {\n\t                that._displayOverflowIcons(false);\n\t            }\n\n\t            for (var i = items.length - 1; i >= 0; i--) {\n\t                item = $(items[i]);\n\n\t                overlayWidth = kendo._outerWidth(overlay);\n\n\t                if (overlayWidth > availableWidth || !this._showItem(item, overlayWidth, availableWidth)) {\n\t                    break;\n\t                }\n\t            }\n\t        },\n\n\t        _resize: function() {\n\t            this._shrinkItems();\n\t            this._stretchItems();\n\t        },\n\n\t        getSize: function() {\n\t            return kendo.dimensions(this.wrapper);\n\t        },\n\n\t        value: function(val) {\n\t            var that = this;\n\n\t            if (val !== undefined) {\n\t                that._generateSegments(val);\n\t                that.refresh();\n\t                return;\n\t            }\n\n\t            return that._path(that._segments);\n\t        },\n\n\t        _path: function(trail) {\n\t            return $.map(trail, function(b) {\n\t                var text = isPlainObject(b) ? b.text : b;\n\t                return text === "/" ? "" : text;\n\t            }).join("/");\n\t        }\n\t    });\n\n\t    kendo.ui.plugin(Breadcrumb);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.breadcrumb.js?')}}]);