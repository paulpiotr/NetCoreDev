(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{"./node_modules/@progress/kendo-ui/js/kendo.maskedtextbox.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.maskedtextbox.js ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1246);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1246:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018), __webpack_require__(1247) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "maskedtextbox",\n\t    name: "MaskedTextBox",\n\t    category: "web",\n\t    description: "The MaskedTextBox widget allows to specify a mask type on an input field.",\n\t    depends: ["core", "floatinglabel"]\n\t};\n\n\t(function($, undefined) {\n\t    var global = window;\n\t    var min = global.Math.min;\n\t    var kendo = global.kendo;\n\t    var caret = kendo.caret;\n\t    var keys = kendo.keys;\n\t    var ui = kendo.ui;\n\t    var Widget = ui.Widget;\n\t    var NS = ".kendoMaskedTextBox";\n\t    var isPlainObject = $.isPlainObject;\n\t    var proxy = $.proxy;\n\t    var setTimeout = window.setTimeout;\n\n\t    var LABELCLASSES = "k-label k-input-label";\n\t    var STATEDISABLED = "k-state-disabled";\n\t    var STATEINVALID = "k-state-invalid";\n\t    var DISABLED = "disabled";\n\t    var READONLY = "readonly";\n\t    var CHANGE = "change";\n\t    var MOUSEUP = "mouseup";\n\t    var DROP = "drop";\n\t    var KEYDOWN = "keydown";\n\t    var PASTE = "paste";\n\t    var INPUT = "input";\n\n\t    function ns(name) { return name + NS; }\n\n\t    var INPUT_EVENT_NAME = ns(kendo.support.propertyChangeEvent ? "propertychange" : INPUT);\n\n\t    function stringDiffStart(str1, str2) {\n\t        var i = 0;\n\t        while (i < str2.length) {\n\t            if (str1[i] !== str2[i]) {\n\t                break;\n\t            }\n\t            i++;\n\t        }\n\n\t        return i;\n\t    }\n\t    var MaskedTextBox = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\t            var DOMElement;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            that._rules = $.extend({}, that.rules, that.options.rules);\n\n\t            element = that.element;\n\t            DOMElement = element[0];\n\n\t            that._wrapper();\n\t            that._tokenize();\n\t            that._form();\n\n\t            that.element\n\t                .addClass("k-textbox")\n\t                .attr("autocomplete", "off")\n\t                .on("focus" + NS, function() {\n\t                    var value = DOMElement.value;\n\n\t                    if (!value) {\n\t                        DOMElement.value = that._old = that._emptyMask;\n\t                    } else {\n\t                        that._togglePrompt(true);\n\t                    }\n\n\t                    that._oldValue = value;\n\n\t                    that._timeoutId = setTimeout(function() {\n\t                        caret(element, 0, value ? that._maskLength : 0);\n\t                    });\n\t                })\n\t                .on("focusout" + NS, function() {\n\t                    var value = element.val();\n\n\t                    clearTimeout(that._timeoutId);\n\t                    DOMElement.value = that._old = "";\n\n\t                    if (value !== that._emptyMask) {\n\t                        DOMElement.value = that._old = value;\n\t                    }\n\n\t                    that._change();\n\t                    that._togglePrompt();\n\t                });\n\n\t            var disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(\':disabled\');\n\n\t            if (disabled) {\n\t                that.enable(false);\n\t            } else {\n\t                that.readonly(element.is("[readonly]"));\n\t            }\n\n\t            that.value(that.options.value || element.val());\n\n\t            that._validationIcon = $("<span class=\'k-icon k-i-warning\'></span>")\n\t                .insertAfter(element);\n\t            that._label();\n\n\t            kendo.notify(that);\n\t        },\n\n\t        options: {\n\t            name: "MaskedTextBox",\n\t            clearPromptChar: false,\n\t            unmaskOnPost: false,\n\t            promptChar: "_",\n\t            culture: "",\n\t            rules: {},\n\t            value: "",\n\t            mask: "",\n\t            label: null\n\t        },\n\n\t        events: [\n\t            CHANGE\n\t        ],\n\n\t        rules: {\n\t            "0": /\\d/,\n\t            "9": /\\d|\\s/,\n\t            "#": /\\d|\\s|\\+|\\-/,\n\t            "L": /[a-zA-Z]/,\n\t            "?": /[a-zA-Z]|\\s/,\n\t            "&": /\\S/,\n\t            "C": /./,\n\t            "A": /[a-zA-Z0-9]/,\n\t            "a": /[a-zA-Z0-9]|\\s/\n\t        },\n\n\t        setOptions: function(options) {\n\t            var that = this;\n\n\t            Widget.fn.setOptions.call(that, options);\n\n\t            that._rules = $.extend({}, that.rules, that.options.rules);\n\n\t            that._tokenize();\n\n\t            this._unbindInput();\n\t            this._bindInput();\n\n\t            that.value(that.element.val());\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            if (that.floatingLabel) {\n\t                that.floatingLabel.destroy();\n\t            }\n\n\t            that.element.off(NS);\n\n\t            if (that._formElement) {\n\t                that._formElement.off("reset", that._resetHandler);\n\t                that._formElement.off("submit", that._submitHandler);\n\t            }\n\n\t            Widget.fn.destroy.call(that);\n\t        },\n\n\t        raw: function() {\n\t            var unmasked = this._unmask(this.element.val(), 0);\n\t            return unmasked.replace(new RegExp(escapeRegExp(this.options.promptChar), "g"), "");\n\t        },\n\n\t        value: function(value) {\n\t            var element = this.element;\n\t            var emptyMask = this._emptyMask;\n\n\t            if (value === undefined) {\n\t                return this.element.val();\n\t            }\n\n\t            if (value === null) {\n\t                value = "";\n\t            }\n\n\t            if (!emptyMask) {\n\t                this._oldValue = value;\n\t                element.val(value);\n\t                return;\n\t            }\n\n\t            value = this._unmask(value + "");\n\n\t            element.val(value ? emptyMask : "");\n\n\t            this._mask(0, this._maskLength, value);\n\t            this._unmaskedValue = null;\n\n\t            value = element.val();\n\t            this._oldValue = value;\n\n\t            if (kendo._activeElement() !== element) {\n\t                if (value === emptyMask) {\n\t                    element.val("");\n\t                } else {\n\t                    this._togglePrompt();\n\t                }\n\t            }\n\t        },\n\n\t        _togglePrompt: function(show) {\n\t            var DOMElement = this.element[0];\n\t            var value = DOMElement.value;\n\n\t            if (this.options.clearPromptChar) {\n\t                if (!show) {\n\t                    value = value.replace(new RegExp(escapeRegExp(this.options.promptChar), "g"), " ");\n\t                } else {\n\t                    value = this._oldValue;\n\t                }\n\n\t                DOMElement.value = this._old = value;\n\t            }\n\t        },\n\n\t        readonly: function(readonly) {\n\t            var that = this;\n\n\t            this._editable({\n\t                readonly: readonly === undefined ? true : readonly,\n\t                disable: false\n\t            });\n\n\t            if (that.floatingLabel) {\n\t                that.floatingLabel.readonly(readonly === undefined ? true : readonly);\n\t            }\n\t        },\n\n\t        enable: function(enable) {\n\t            var that = this;\n\n\t            this._editable({\n\t                readonly: false,\n\t                disable: !(enable = enable === undefined ? true : enable)\n\t            });\n\n\t            if (that.floatingLabel) {\n\t                that.floatingLabel.enable(enable = enable === undefined ? true : enable);\n\t            }\n\t        },\n\n\t        _bindInput: function() {\n\t            var that = this;\n\n\t            if (that._maskLength) {\n\t                if(that.options.$angular) {//detach "input" event in angular scenario to keep the ng-model consistent and updated only when the change event of the textbox is raised.\n\t                    that.element.off(INPUT);\n\t                }\n\t                that.element\n\t                    .on(ns(KEYDOWN), proxy(that._keydown, that))\n\t                    .on(ns(DROP), proxy(that._drop, that))\n\t                    .on(ns(CHANGE), proxy(that._trackChange, that))\n\t                    .on(INPUT_EVENT_NAME, proxy(that._inputHandler, that));\n\n\n\t                if (kendo.support.browser.msie) {\n\t                    var version = kendo.support.browser.version;\n\t                    if (version > 8 && version < 11) {\n\t                        var events = [ns(MOUSEUP), ns(DROP), ns(KEYDOWN), ns(PASTE)].join(" ");\n\t                        that.element.on(events, proxy(that._legacyIEInputHandler, that));\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _unbindInput: function() {\n\t            var events = [INPUT_EVENT_NAME, ns(KEYDOWN), ns(MOUSEUP), ns(DROP), ns(PASTE)].join(" ");\n\n\t            this.element.off(events);\n\t        },\n\n\t        _editable: function(options) {\n\t            var that = this;\n\t            var element = that.element;\n\t            var wrapper = that.wrapper;\n\t            var disable = options.disable;\n\t            var readonly = options.readonly;\n\n\t            that._unbindInput();\n\n\t            if (!readonly && !disable) {\n\t                element.removeAttr(DISABLED)\n\t                       .removeAttr(READONLY);\n\n\t                wrapper.removeClass(STATEDISABLED);\n\n\t                that._bindInput();\n\t            } else {\n\t                element.attr(DISABLED, disable)\n\t                       .attr(READONLY, readonly);\n\n\t                wrapper.toggleClass(STATEDISABLED, disable);\n\t            }\n\t        },\n\n\t        _change: function() {\n\t            var that = this;\n\t            var value = that.value();\n\n\t            if (value !== that._oldValue) {\n\t                that._oldValue = value;\n\n\t                that.trigger(CHANGE);\n\t                that.element.trigger(CHANGE);\n\t            }\n\t            else if (value === "" && that.__changing) {//ensure change is raised when empty value (mask is stripped from input content) for consistent ngjs model update\n\t                that.element.trigger(CHANGE);\n\t            }\n\t        },\n\n\t        inputChange: function(backward) {\n\t            var that = this;\n\t            var old = that._old;\n\t            var element = that.element[0];\n\t            var value = element.value;\n\t            var selection = caret(element);\n\t            var cursor = selection[1];\n\t            var lengthDiff = value.length - old.length;\n\t            var mobile = kendo.support.mobileOS;\n\n\t            if (that.__dropping && lengthDiff < 0) {//dropping in same input on WebKit is raised once for the removal phase and once for the adding phase\n\t                return;\n\t            }\n\n\t            if (lengthDiff === -1 && mobile.android && mobile.browser === "chrome") {\n\t                backward = true;\n\t            }\n\n\t            var contentStart = min(cursor, stringDiffStart(value, old));\n\t            var content = value.substring(contentStart, cursor);\n\n\t            element.value = value.substring(0, contentStart) + that._emptyMask.substring(contentStart);\n\n\t            var caretPos = that._mask(contentStart, cursor, content);\n\t            var endContent = that._trimStartPromptChars(value.substring(cursor), min(lengthDiff, caretPos - contentStart));\n\n\t            var unmasked = that._unmask(endContent, old.length - endContent.length);\n\t            that._mask(caretPos, caretPos, unmasked);\n\n\t            if (backward) {\n\t                caretPos = that._findCaretPosBackwards(contentStart);\n\t            }\n\n\t            caret(element, caretPos);\n\n\t            //clean-up flags\n\t            that.__dropping = false;\n\t        },\n\n\t        _trimStartPromptChars: function(content, count) {\n\t            var promptChar = this.options.promptChar;\n\n\t            while (count-- > 0 && content.indexOf(promptChar) === 0) {\n\t                content = content.substring(1);\n\t            }\n\n\t            return content;\n\t        },\n\n\t        _findCaretPosBackwards: function(pos) {\n\t            var caretStart = this._find(pos, true);\n\t            if (caretStart < pos) {\n\t                caretStart += 1;\n\t            }\n\n\t            return caretStart;\n\t        },\n\n\t        _inputHandler: function() {\n\t            if (kendo._activeElement() !== this.element[0]) {\n\t                return;\n\t            }\n\n\t            this.inputChange(this.__backward);\n\t        },\n\n\t        _legacyIEInputHandler: function(e) {\n\t            var that = this;\n\t            var input = that.element[0];\n\t            var value = input.value;\n\t            var type = e.type;\n\n\t            that.__pasting = (type === "paste");\n\n\t            setTimeout(function() {\n\t                if(type === "mouseup" && that.__pasting) {\n\t                    return;\n\t                }\n\t                if (input.value && input.value !== value) {\n\t                    that.inputChange(that.__backward);\n\t                }\n\t            });\n\t        },\n\n\t        _trackChange: function() {\n\t            var that = this;\n\n\t            that.__changing = true;\n\t            setTimeout(function() { that.__changing = false; });\n\t        },\n\n\t        _form: function() {\n\t            var that = this;\n\t            var element = that.element;\n\t            var formId = element.attr("form");\n\t            var form = formId ? $("#" + formId) : element.closest("form");\n\n\t            if (form[0]) {\n\t                that._resetHandler = function() {\n\t                    setTimeout(function() {\n\t                        that.value(element[0].value);\n\t                    });\n\t                };\n\n\t                that._submitHandler = function() {\n\t                    that.element[0].value = that._old = that.raw();\n\t                };\n\n\t                if (that.options.unmaskOnPost) {\n\t                    form.on("submit", that._submitHandler);\n\t                }\n\n\t                that._formElement = form.on("reset", that._resetHandler);\n\t            }\n\t        },\n\n\t        _keydown: function(e) {\n\t            var key = e.keyCode;\n\n\t            this.__backward = key === keys.BACKSPACE;\n\n\t            if (key === keys.ENTER) {\n\t                this._change();\n\t            }\n\t        },\n\n\t        _drop: function() {\n\t            this.__dropping = true;\n\t        },\n\n\t        _find: function(idx, backward) {\n\t            var value = this.element.val() || this._emptyMask;\n\t            var step = 1;\n\n\t            if (backward === true) {\n\t                step = -1;\n\t            }\n\n\t            while (idx > -1 || idx <= this._maskLength) {\n\t                if (value.charAt(idx) !== this.tokens[idx]) {\n\t                    return idx;\n\t                }\n\n\t                idx += step;\n\t            }\n\n\t            return -1;\n\t        },\n\n\t        _mask: function(start, end, value, backward) {\n\t            var element = this.element[0];\n\t            var current = element.value || this._emptyMask;\n\t            var empty = this.options.promptChar;\n\t            var valueLength;\n\t            var chrIdx = 0;\n\t            var unmasked;\n\t            var chr;\n\t            var idx;\n\n\t            start = this._find(start, backward);\n\n\t            if (start > end) {\n\t                end = start;\n\t            }\n\n\t            unmasked = this._unmask(current.substring(end), end);\n\t            value = this._unmask(value, start);\n\t            valueLength = value.length;\n\n\t            if (value) {\n\t                unmasked = unmasked.replace(new RegExp("^_{0," + valueLength + "}"), "");\n\t            }\n\n\t            value += unmasked;\n\t            current = current.split("");\n\t            chr = value.charAt(chrIdx);\n\n\t            while (start < this._maskLength) {\n\t                current[start] = chr || empty;\n\t                chr = value.charAt(++chrIdx);\n\n\t                if (idx === undefined && chrIdx > valueLength) {\n\t                    idx = start;\n\t                }\n\n\t                start = this._find(start + 1);\n\t            }\n\n\t            element.value = this._old = current.join("");\n\n\t            if (kendo._activeElement() === element) {\n\t                if (idx === undefined) {\n\t                    idx = this._maskLength;\n\t                }\n\n\t                caret(element, idx);\n\t            }\n\n\t            return idx;\n\t        },\n\n\t        _unmask: function(value, idx) {\n\t            if (!value) {\n\t                return "";\n\t            }\n\n\t            if (this._unmaskedValue === value) {\n\t                return this._unmaskedValue;\n\t            }\n\t            value = (value + "").split("");\n\n\t            var chr;\n\t            var token;\n\t            var chrIdx = 0;\n\t            var tokenIdx = idx || 0;\n\n\t            var empty = this.options.promptChar;\n\n\t            var valueLength = value.length;\n\t            var tokensLength = this.tokens.length;\n\n\t            var result = "";\n\n\t            while (tokenIdx < tokensLength) {\n\t                chr = value[chrIdx];\n\t                token = this.tokens[tokenIdx];\n\n\t                if (chr === token || chr === empty) {\n\t                    result += chr === empty ? empty : "";\n\n\t                    chrIdx += 1;\n\t                    tokenIdx += 1;\n\t                } else if (typeof token !== "string") {\n\t                    if ((token && token.test && token.test(chr)) || ($.isFunction(token) && token(chr))) {\n\t                        result += chr;\n\t                        tokenIdx += 1;\n\t                    } else {\n\t                        if (valueLength === 1) {\n\t                            this._blinkInvalidState();\n\t                        }\n\t                    }\n\n\t                    chrIdx += 1;\n\t                } else {\n\t                    tokenIdx += 1;\n\t                }\n\n\t                if (chrIdx >= valueLength) {\n\t                    break;\n\t                }\n\t            }\n\t            this._unmaskedValue = result;\n\t            return result;\n\t        },\n\n\t        _label: function() {\n\t            var that = this;\n\t            var element = that.element;\n\t            var options = that.options;\n\t            var id = element.attr("id");\n\t            var floating;\n\t            var labelText;\n\n\t            if (options.label !== null) {\n\t                floating = isPlainObject(options.label) ? options.label.floating : false;\n\t                labelText = isPlainObject(options.label) ? options.label.content : options.label;\n\n\t                if (floating) {\n\t                    that._floatingLabelContainer = that.wrapper.wrap("<span></span>").parent();\n\t                    that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });\n\t                }\n\n\t                if (kendo.isFunction(labelText)) {\n\t                    labelText = labelText.call(that);\n\t                }\n\n\t                if (!labelText) {\n\t                    labelText = "";\n\t                }\n\n\t                if (!id) {\n\t                    id = options.name + "_" + kendo.guid();\n\t                    element.attr("id", id);\n\t                }\n\n\t                that._inputLabel = $("<label class=\'" + LABELCLASSES + "\' for=\'" + id + "\'>" + labelText + "</label>\'").insertBefore(that.wrapper);\n\t            }\n\t        },\n\n\t        _wrapper: function () {\n\t            var that = this;\n\t            var element = that.element;\n\t            var DOMElement = element[0];\n\n\t            var wrapper = element.wrap("<span class=\'k-widget k-maskedtextbox\'></span>").parent();\n\t            wrapper[0].style.cssText = DOMElement.style.cssText;\n\t            DOMElement.style.width = "100%";\n\t            that.wrapper = wrapper.addClass(DOMElement.className).removeClass(\'input-validation-error\');\n\t        },\n\n\t        _blinkInvalidState: function () {\n\t            var that = this;\n\n\t            that.wrapper.addClass(STATEINVALID);\n\t            clearTimeout(that._invalidStateTimeout);\n\t            that._invalidStateTimeout = setTimeout(proxy(that._removeInvalidState, that), 100);\n\t        },\n\n\t        _removeInvalidState: function () {\n\t            var that = this;\n\n\t            that.wrapper.removeClass(STATEINVALID);\n\t            that._invalidStateTimeout = null;\n\t        },\n\n\t        _tokenize: function() {\n\t            var tokens = [];\n\t            var tokenIdx = 0;\n\n\t            var mask = this.options.mask || "";\n\t            var maskChars = mask.split("");\n\t            var length = maskChars.length;\n\t            var idx = 0;\n\t            var chr;\n\t            var rule;\n\n\t            var emptyMask = "";\n\t            var promptChar = this.options.promptChar;\n\t            var numberFormat = kendo.getCulture(this.options.culture).numberFormat;\n\t            var rules = this._rules;\n\n\t            for (; idx < length; idx++) {\n\t                chr = maskChars[idx];\n\t                rule = rules[chr];\n\n\t                if (rule) {\n\t                    tokens[tokenIdx] = rule;\n\t                    emptyMask += promptChar;\n\t                    tokenIdx += 1;\n\t                } else {\n\t                    if (chr === "." || chr === ",") {\n\t                        chr = numberFormat[chr];\n\t                    } else if (chr === "$") {\n\t                        chr = numberFormat.currency.symbol;\n\t                    } else if (chr === "\\\\") {\n\t                        idx += 1;\n\t                        chr = maskChars[idx];\n\t                    }\n\n\t                    chr = chr.split("");\n\n\t                    for (var i = 0, l = chr.length; i < l; i++) {\n\t                        tokens[tokenIdx] = chr[i];\n\t                        emptyMask += chr[i];\n\t                        tokenIdx += 1;\n\t                    }\n\t                }\n\t            }\n\n\t            this.tokens = tokens;\n\n\t            this._emptyMask = emptyMask;\n\t            this._maskLength = emptyMask.length;\n\t        }\n\t    });\n\n\t    function escapeRegExp(text) {\n\t        return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \'\\\\$&\');\n\t    }\n\n\t    ui.plugin(MaskedTextBox);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1247:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.floatinglabel */ "./node_modules/@progress/kendo-ui/js/kendo.floatinglabel.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.maskedtextbox.js?')},"./node_modules/@progress/kendo-ui/js/kendo.mediaplayer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.mediaplayer.js ***!
  \*****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1248);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1022:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.dropdownlist */ "./node_modules/@progress/kendo-ui/js/kendo.dropdownlist.js");\n\n/***/ }),\n\n/***/ 1055:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.slider */ "./node_modules/@progress/kendo-ui/js/kendo.slider.js");\n\n/***/ }),\n\n/***/ 1071:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.tooltip */ "./node_modules/@progress/kendo-ui/js/kendo.tooltip.js");\n\n/***/ }),\n\n/***/ 1248:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (f, define) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1055), __webpack_require__(1249), __webpack_require__(1022), __webpack_require__(1071)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function () {\n\n\t    var __meta__ = { // jshint ignore:line\n\t        id: "mediaplayer",\n\t        name: "MediaPlayer",\n\t        category: "web",\n\t        description: "",\n\t        depends: ["slider", "toolbar", "dropdownlist", "tooltip"]\n\t    };\n\n\t    (function ($, undefined) {\n\t        var kendo = window.kendo,\n\t            END = "end",\n\t            PAUSE = "pause",\n\t            PLAY = "play",\n\t            READY = "ready",\n\t            TIMECHANGE = "timeChange",\n\t            VOLUMECHANGE = "volumeChange",\n\t            FULLSCREEN_ENTER = "k-i-full-screen",\n\t            FULLSCREEN_EXIT = "k-i-full-screen-exit",\n\t            MUTE = "k-i-volume-off",\n\t            LOW_VOLUME = "k-i-volume-down",\n\t            HIGH_VOLUME = "k-i-volume-up",\n\t            VIDEO_QUALITY = "k-mediaplayer-quality",\n\t            STATE_PLAY = "k-i-play",\n\t            STATE_PAUSE = "k-i-pause",\n\t            TITLEBAR = "k-mediaplayer-titlebar",\n\t            TITLE = "k-title",\n\t            TOOLBARWRAP = "k-mediaplayer-toolbar-wrap",\n\t            TOOLBAR = "k-mediaplayer-toolbar",\n\t            SLIDER = "k-mediaplayer-seekbar",\n\t            VOLUME_SLIDER = "k-mediaplayer-volume",\n\t            MEDIA = "k-mediaplayer-media",\n\t            OVERLAY = "k-mediaplayer-overlay",\n\t            YTPLAYER = "k-mediaplayer-yt",\n\t            DOT = ".",\n\t            ui = kendo.ui,\n\t            ns = ".kendoMediaPlayer",\n\t            baseTime = new Date(1970, 0, 1),\n\t            timeZoneSec = baseTime.getTimezoneOffset() * 60,\n\t            Widget = kendo.ui.Widget,\n\t            isArray = $.isArray,\n\t            timeFormats = {\n\t                shortTime: "mm:ss",\n\t                longTime: "HH:mm:ss"\n\t            },\n\t            template = kendo.template,\n\t            proxy = $.proxy,\n\t            keys = kendo.keys,\n\t            templates = {\n\t                htmlPlayer: "<video class=\'" + MEDIA + "\'> </video>",\n\t                titleBar: template("<div class=\'" + TITLEBAR + "\' role=\'heading\'><span class=\'" + TITLE + "\'>Video Title</span></div>"),\n\t                toolBar: "<div class=\'" + TOOLBARWRAP + "\'><div class=\'" + TOOLBAR + "\'></div></div>",\n\t                youtubePlayer: "<div class=\'" + YTPLAYER + "\'> </div>",\n\t                toolBarTime: "<span class=\'k-mediaplayer-currenttime\'>00:00:00</span> / <span class=\'k-mediaplayer-duration\'>00:00:00</span>",\n\t                slider: "<input class=\'" + SLIDER + "\' value=\'0\' title=\'seekbar\' />",\n\t                volumeSlider: "<input class=\'" + VOLUME_SLIDER + "\' title=\'volume\'/>",\n\t                qualityDropDown: "<input class=\'" + VIDEO_QUALITY + "\' title=\'video quality\' />",\n\t                toolTip: "#= kendo.toString(new Date(value), \'HH:mm:ss\') #"\n\t            };\n\n\t        var MediaPlayer = Widget.extend({\n\t            init: function (element, options) {\n\t                this.wrapper = $(element);\n\n\t                Widget.fn.init.call(this, element, options);\n\n\t                this.wrapper.addClass("k-mediaplayer k-widget");\n\n\t                options = this.options;\n\n\t                this._currentIndex = 0;\n\n\t                this._createTitlebar();\n\n\t                this._createToolbar();\n\n\t                this._createDropDown();\n\n\t                this._createSlider();\n\n\t                this._createVolumeSlider();\n\n\t                this._timers = {};\n\n\t                this._aria();\n\n\t                this._navigatable();\n\n\t                if (options.fullScreen) {\n\t                    this.fullScreen(true);\n\t                }\n\n\t                if (options.media) {\n\t                    this.media(this.options.media);\n\t                }\n\n\t                kendo.notify(this);\n\t            },\n\n\t            events: [\n\t                END,\n\t                PAUSE,\n\t                PLAY,\n\t                READY,\n\t                TIMECHANGE,\n\t                VOLUMECHANGE\n\t            ],\n\n\t            options: {\n\t                name: "MediaPlayer",\n\t                autoPlay: false,\n\t                autoRepeat: false,\n\t                volume: 100,\n\t                fullScreen: false,\n\t                mute: false,\n\t                navigatable: false,\n\t                forwardSeek: true,\n\t                media: null,\n\t                messages: {\n\t                    "pause": "Pause",\n\t                    "play": "Play",\n\t                    "mute": "Mute",\n\t                    "unmute": "Unmute",\n\t                    "quality": "Quality",\n\t                    "fullscreen": "Full Screen"\n\t                }\n\t            },\n\n\t            _msToTime: function (ms) {\n\t                var time = new Date(baseTime.getTime());\n\t                time.setSeconds(ms);\n\t                return time;\n\t            },\n\n\t            _timeToSec: function (time) {\n\t                var curTime = new Date(time).getTime();\n\t                return curTime / 1000;\n\t            },\n\n\t            _createTitlebar: function () {\n\t                this._titleBar = this.wrapper.find(DOT + TITLEBAR);\n\t                if (this._titleBar.length === 0) {\n\t                    this.wrapper.append(templates.titleBar);\n\t                    this._titleBar = this.wrapper.find(DOT + TITLEBAR);\n\t                }\n\t            },\n\n\t            _createSlider: function () {\n\t                var sliderElement = this.wrapper.find(DOT + SLIDER);\n\t                if (!this._slider) {\n\t                    this._sliderDragChangeHandler = proxy(this._sliderDragChange, this);\n\t                    this._sliderDraggingHandler = proxy(this._sliderDragging, this);\n\t                    sliderElement = this.wrapper.find(DOT + SLIDER);\n\n\t                    this._slider = new ui.Slider(sliderElement[0], {\n\t                        smallStep: 1000,\n\t                        tickPlacement: "none",\n\t                        showButtons: false,\n\t                        change: this._sliderDragChangeHandler,\n\t                        slide: this._sliderDraggingHandler,\n\t                        tooltip: {\n\t                            template: templates.toolTip\n\t                        },\n\t                        dragHandleTitle: ""\n\t                    });\n\t                }\n\t            },\n\n\t            _createVolumeSlider: function () {\n\t                var volumeSliderElement = this.wrapper.find(DOT + VOLUME_SLIDER);\n\t                if (!this._volumeSlider) {\n\t                    this._volumeDraggingHandler = proxy(this._volumeDragging, this);\n\t                    this._volumeChangeHandler = proxy(this._volumeChange, this);\n\t                    volumeSliderElement.width(87);\n\t                    this._volumeSlider = new ui.Slider(volumeSliderElement[0], {\n\t                        smallStep: 1,\n\t                        min: 0,\n\t                        max: 100,\n\t                        value: this.options.volume,\n\t                        slide: this._volumeDraggingHandler,\n\t                        change: this._volumeChangeHandler,\n\t                        tickPlacement: "none",\n\t                        showButtons: false,\n\t                        tooltip: { enabled: false },\n\t                        dragHandleTitle: ""\n\t                    });\n\t                }\n\t            },\n\n\t            _resetTime: function () {\n\t                if (this._youTubeVideo) {\n\t                    this._ytmedia.seekTo(0, true);\n\t                } else {\n\t                    this._media.currentTime = 0;\n\t                }\n\n\t                this._mediaTimeUpdate();\n\t                $.grep(this._toolBar.options.items, function (e) { return !!e.template; }).template = templates.toolBarTime;\n\t            },\n\n\t            _currentUrl: function () {\n\t                var media = this.media();\n\t                return isArray(media.source) ? media.source[this._currentIndex].url : media.source;\n\t            },\n\n\t            _isYouTubeUrl: function () {\n\t                return !!this._currentUrl().match("youtube.com/|youtu.be/");\n\t            },\n\n\t            _setPlayerUrl: function () {\n\t                var oldPlayer = this._youTubeVideo;\n\t                this.stop();\n\n\t                this._youTubeVideo = this._isYouTubeUrl();\n\n\t                if (oldPlayer !== this._youTubeVideo) {\n\t                    this.wrapper.find(DOT + YTPLAYER).toggle();\n\t                    this.wrapper.find(DOT + MEDIA).toggle();\n\t                }\n\n\t                var initialized = this._media || this._ytmedia;\n\n\t                this._initializePlayer();\n\n\t                if (initialized) { //mute and volume settings should be persisted when switching between html and youtube players\n\t                    this.mute(this.mute());\n\t                    this.volume(this.volume());\n\t                }\n\n\t                if (!this._youTubeVideo) {\n\t                    this._videoOverlay.show();\n\t                    this.wrapper.find(DOT + MEDIA + " > source").remove();\n\t                    this.wrapper.find(DOT + MEDIA).attr("src", this._currentUrl());\n\n\t                    if (this.options.autoPlay) {\n\t                        this.play();\n\t                    }\n\t                }\n\t                else if (this._ytmedia) {\n\t                    if (this._videoOverlay) {\n\t                        this._videoOverlay.hide();\n\t                    }\n\t                    if (this.options.autoPlay) {\n\t                        this._ytmedia.loadVideoById(this._getMediaId());\n\t                        this._playStateToggle(true);\n\t                    }\n\t                    else {\n\t                        this._ytmedia.cueVideoById(this._getMediaId());\n\t                        this._playStateToggle(true);\n\t                    }\n\t                }\n\t            },\n\n\t            _createToolbar: function () {\n\t                var toolBarElement = this.wrapper.find(DOT + TOOLBAR);\n\t                if (toolBarElement.length === 0) {\n\t                    this._toolbarClickHandler = proxy(this._toolbarClick, this);\n\t                    this.wrapper.append(templates.toolBar);\n\t                    toolBarElement = this.wrapper.find(DOT + TOOLBAR);\n\t                    toolBarElement.width(this.wrapper.find(DOT + MEDIA).width());\n\t                    this._toolBar = new ui.ToolBar(toolBarElement, {\n\t                        click: this._toolbarClickHandler,\n\t                        resizable: false,\n\t                        items: [\n\t                            {\n\t                                type: "button",\n\t                                attributes: { "class": "k-play-button" },\n\t                                icon: "play"\n\t                            },\n\t                            {\n\t                                template: templates.toolBarTime,\n\t                                attributes: { "class": "k-mediaplayer-currenttime-wrap" }\n\t                            },\n\t                            {\n\t                                type: "separator",\n\t                                attributes: { "class": "k-toolbar-spacer" }\n\t                            },\n\t                            {\n\t                                type: "button",\n\t                                attributes: { "class": "k-volume-button" },\n\t                                icon: "volume-up"\n\t                            },\n\t                            {\n\t                                template: templates.volumeSlider,\n\t                                attributes: { "class": "k-mediaplayer-volume-wrap" }\n\t                            },\n\t                            {\n\t                                template: templates.qualityDropDown,\n\t                                attributes: { "class": "k-mediaplayer-quality-wrap" }\n\t                            },\n\t                            {\n\t                                type: "button",\n\t                                attributes: { "class": "k-fullscreen-button" },\n\t                                icon: "full-screen"\n\t                            }\n\t                        ]\n\t                    });\n\n\t                    this._toolBar.wrapper.off("keydown");\n\t                    toolBarElement.before(templates.slider);\n\n\t                    this._volumeButton = toolBarElement.find(".k-volume-button");\n\t                    this._fullscreenButton = toolBarElement.find(".k-fullscreen-button");\n\t                    this._volumeButton.attr("title", this.options.mute ? this.options.messages.unmute : this.options.messages.mute);\n\t                    this._volumeButton.attr("aria-label", this.options.mute ? this.options.messages.unmute : this.options.messages.mute);\n\t                    this._fullscreenButton.attr("title", this.options.messages.fullscreen);\n\t                    this._fullscreenButton.attr("aria-label", this.options.messages.fullscreen);\n\n\t                    toolBarElement.width("auto");\n\t                    this._currentTimeElement = toolBarElement.find(".k-mediaplayer-currenttime");\n\t                    this._durationElement = toolBarElement.find(".k-mediaplayer-duration");\n\t                    this._playButton = toolBarElement.find(".k-play-button");\n\t                    this._playButtonSpan = this._playButton.find(".k-i-play");\n\n\t                    if (this.options.autoPlay) {\n\t                        this._playStateToggle(true);\n\t                    }\n\n\t                    $([\n\t                        this._volumeButton[0],\n\t                        toolBarElement.find(".k-mediaplayer-volume-wrap")[0],\n\t                        toolBarElement.find(".k-mediaplayer-quality-wrap")[0],\n\t                        this._fullscreenButton[0]\n\t                    ]).wrapAll("<div class=\'k-align-right\' />");\n\t                    toolBarElement.find(".k-button").addClass("k-flat");\n\t                }\n\t            },\n\n\t            _createDropDown: function () {\n\t                var dropDownElement = this.wrapper.find(DOT + VIDEO_QUALITY);\n\t                var media = this.media();\n\t                if (typeof dropDownElement.data("kendoDropDownList") === "undefined") {\n\t                    this._dropDownSelectHandler = proxy(this._dropDownSelect, this);\n\t                    this._dropDown = new ui.DropDownList(dropDownElement, {\n\t                        dataTextField: "quality",\n\t                        dataValueField: "url",\n\t                        popup: {\n\t                            position: "bottom",\n\t                            origin: "top",\n\t                            appendTo: this.wrapper\n\t                        },\n\t                        animation: {\n\t                            open: {\n\t                                effects: "slideIn:up",\n\t                                duration: 1\n\t                            }\n\t                        },\n\t                        select: this._dropDownSelectHandler\n\t                    });\n\n\t                    if (media && isArray(media.source)) {\n\t                        this._dropDown.setDataSource(media.source);\n\t                        this._dropDown.select(0);\n\t                    }\n\n\t                    this._dropDown.wrapper.addClass("k-button k-flat");\n\t                    this._dropDown.wrapper.attr("title", this.options.messages.quality).hide();\n\t                    this._dropDown.wrapper.find("span.k-i-arrow-60-down")\n\t                        .removeClass(\'k-i-arrow-60-down\')\n\t                        .addClass(\'k-icon k-i-hd\');\n\t                    this._dropDown.list.addClass("k-quality-list");\n\t                }\n\t            },\n\n\t            _dropDownSelect: function (e) {\n\t                if (this._currentIndex !== e.item.index()) {\n\t                    this._currentIndex = e.item.index();\n\t                    this._setPlayerUrl();\n\t                }\n\t            },\n\n\t            _toolbarClick: function (e) {\n\t                var target = $(e.target).children().first();\n\t                var isPaused = target.hasClass(STATE_PLAY);\n\n\t                if (!this.media()) {\n\t                    return;\n\t                }\n\n\t                if (target.hasClass(STATE_PLAY) || target.hasClass(STATE_PAUSE)) {\n\t                    if (isPaused) {\n\t                        this.play();\n\t                    }\n\t                    else {\n\t                        this.pause();\n\t                    }\n\t                }\n\n\t                if (target.hasClass(FULLSCREEN_ENTER) || target.hasClass(FULLSCREEN_EXIT)) {\n\t                    if (this._isInFullScreen) {\n\t                        target\n\t                            .removeClass(FULLSCREEN_EXIT)\n\t                            .addClass(FULLSCREEN_ENTER);\n\t                        this.fullScreen(false);\n\t                    } else {\n\t                        target\n\t                            .removeClass(FULLSCREEN_ENTER)\n\t                            .addClass(FULLSCREEN_EXIT);\n\t                        this.fullScreen(true);\n\t                    }\n\t                }\n\n\t                if (target.hasClass(MUTE) || target.hasClass(LOW_VOLUME) || target.hasClass(HIGH_VOLUME)) {\n\t                    var muted = this.mute();\n\t                    this.mute(!muted);\n\t                }\n\t            },\n\n\t            _sliderDragging: function () {\n\t                if (!this.media()) {\n\t                    return;\n\t                }\n\n\t                this._isDragging = true;\n\t            },\n\n\t            _sliderDragChange: function (e) {\n\t                var that = this;\n\t                var slider = e.sender;\n\t                var tzOffset = timeZoneSec * 1000;\n\n\t                if (!this.media()) {\n\t                    return;\n\t                }\n\n\t                that._sliderChangeFired = true;\n\t                that._isDragging = false;\n\n\t                if (!this.options.forwardSeek && slider.value() > this._seekBarLastPosition) {\n\t                    setTimeout(function () {\n\t                        slider.value(that._seekBarLastPosition);\n\t                    }, 1);\n\t                } else if (this._youTubeVideo) {\n\t                    that._ytmedia.seekTo(that._timeToSec(e.value - tzOffset));\n\t                } else {\n\t                    that._media.currentTime = that._timeToSec(e.value - tzOffset);\n\t                }\n\t                that.trigger(TIMECHANGE);\n\t                that._preventPlay = true;\n\t            },\n\n\t            _changeVolumeButtonImage: function (volume) {\n\t                var volumeButton = this._volumeButton;\n\t                var volumeElement = volumeButton.find("span");\n\t                var cssClass = volumeElement.attr("class");\n\t                cssClass = cssClass.substring(0, cssClass.lastIndexOf(" "));\n\n\t                if (volume === 0) {\n\t                    volumeElement.attr("class", cssClass + " " + MUTE);\n\t                    volumeButton.attr("title", this.options.messages.unmute);\n\t                    volumeButton.attr("aria-label", this.options.messages.unmute);\n\t                } else if (volume > 0 && volume < 51) {\n\t                    volumeElement.attr("class", cssClass + " " + LOW_VOLUME);\n\t                    volumeButton.attr("title", this.options.messages.mute);\n\t                    volumeButton.attr("aria-label", this.options.messages.mute);\n\t                } else {\n\t                    volumeElement.attr("class", cssClass + " " + HIGH_VOLUME);\n\t                    volumeButton.attr("title", this.options.messages.mute);\n\t                    volumeButton.attr("aria-label", this.options.messages.mute);\n\t                }\n\t            },\n\n\t            _volumeDragging: function (e) {\n\t                if (!this.media()) {\n\t                    return;\n\t                }\n\t                this.volume(e.value);\n\t                this._changeVolumeButtonImage(e.value);\n\t                this.trigger(VOLUMECHANGE);\n\t            },\n\n\t            _volumeChange: function (e) {\n\t                if (!this.media()) {\n\t                    return;\n\t                }\n\t                this.volume(e.value);\n\t                this._changeVolumeButtonImage(e.value);\n\t                this.trigger(VOLUMECHANGE);\n\t            },\n\n\t            _mediaTimeUpdate: function () {\n\t                var currentTime = (this._youTubeVideo) ? this._ytmedia.getCurrentTime() : this._media.currentTime;\n\t                currentTime = currentTime ? currentTime : 0;\n\t                var timeInMs = this._msToTime(currentTime);\n\t                this._currentTimeElement.text(kendo.toString(timeInMs, this._timeFormat));\n\t                if (!this._isDragging) {\n\t                    this._seekBarLastPosition = (currentTime + timeZoneSec) * 1000;\n\t                    this._slider.value(this._seekBarLastPosition);\n\t                }\n\n\t                return this.isPlaying();\n\t            },\n\n\t            _playStateToggle: function (play) {\n\t                if (typeof play === "undefined") {\n\t                    play = this._playButtonSpan.is(DOT + STATE_PLAY);\n\t                }\n\n\t                if (play) {\n\t                    this._playButtonSpan\n\t                        .removeClass(STATE_PLAY)\n\t                        .addClass(STATE_PAUSE);\n\t                    this._playButton.attr("title", this.options.messages.pause);\n\t                    this._playButton.attr("aria-label", this.options.messages.pause);\n\t                }\n\t                else {\n\t                    this._playButtonSpan\n\t                        .removeClass(STATE_PAUSE)\n\t                        .addClass(STATE_PLAY);\n\t                    this._playButton.attr("title", this.options.messages.play);\n\t                    this._playButton.attr("aria-label", this.options.messages.play);\n\t                }\n\t            },\n\n\t            _mediaEnded: function () {\n\t                this._playStateToggle(false);\n\t                this._currentTimeElement.text(kendo.toString(this._msToTime(0), this._timeFormat));\n\t                this._slider.value((0 + timeZoneSec) * 1000);\n\t                this.trigger(END);\n\t            },\n\n\t            _mediaPlay: function () {\n\t                this.trigger(PLAY);\n\t            },\n\n\t            _mediaReady: function () {\n\t                this.trigger(READY);\n\t            },\n\n\t            _mediaDurationChange: function () {\n\t                var durationTime = this._msToTime((this._youTubeVideo) ? this._ytmedia.getDuration() : this._media.duration);\n\n\t                this._timeFormat = durationTime.getHours() === 0 ? timeFormats.shortTime : timeFormats.longTime;\n\n\t                this._durationElement.text(kendo.toString(durationTime, this._timeFormat));\n\t                this._slider.setOptions({\n\t                    min: baseTime.getTime(),\n\t                    max: durationTime.getTime()\n\t                });\n\n\t                if (!this._isFirstRun) {\n\t                    this._resetTime();\n\t                    this._isFirstRun = true;\n\t                }\n\t            },\n\n\t            _createYoutubePlayer: function () {\n\t                this._mediaTimeUpdateHandler = proxy(this._mediaTimeUpdate, this);\n\t                this._mediaDurationChangeHandler = proxy(this._mediaDurationChange, this);\n\n\t                this.wrapper.prepend(templates.youtubePlayer);\n\t                this._ytPlayer = this.wrapper.find(DOT + YTPLAYER)[0];\n\t                $(this._ytPlayer)\n\t                    .css({\n\t                        width: this.wrapper.width(),\n\t                        height: this.wrapper.height()\n\t                    });\n\n\t                if (!window.YT || !window.YT.Player) {\n\t                    if (!window.onYouTubeIframeAPIReadyRegister) {\n\t                        window.onYouTubeIframeAPIReadyRegister = [];\n\t                        $.getScript("https://www.youtube.com/iframe_api");\n\t                        window.onYouTubeIframeAPIReady =\n\t                            function () {\n\t                                if (window.onYouTubeIframeAPIReadyRegister) {\n\t                                    for (var i = 0; i < window.onYouTubeIframeAPIReadyRegister.length; i++) {\n\t                                        window.onYouTubeIframeAPIReadyRegister[i]._youtubeApiReady();\n\t                                    }\n\t                                }\n\t                                window.onYouTubeIframeAPIReadyRegister.length = 0;\n\t                                window.onYouTubeIframeAPIReadyRegister = undefined;\n\t                            };\n\t                    }\n\t                    window.onYouTubeIframeAPIReadyRegister[window.onYouTubeIframeAPIReadyRegister.length] = this;\n\t                }\n\t                else {\n\t                    this._configurePlayer();\n\t                }\n\t            },\n\n\t            _poll: function (name, callback, interval, context) {\n\t                var that = this;\n\n\t                if (that._timers[name] !== null) {\n\t                    clearTimeout(that._timers[name]);\n\t                }\n\n\t                that._timers[name] = setTimeout((function (context) {\n\t                    return function callLater() {\n\t                        if (callback.call(context)) {\n\t                            that._timers[name] = setTimeout(callLater, interval);\n\t                        }\n\t                    };\n\t                })(context), interval);\n\n\t                return that._timers[name];\n\t            },\n\n\t            _youtubeApiReady: function () {\n\t                this._configurePlayer();\n\t            },\n\n\t            _configurePlayer: function () {\n\t                var vars = {\n\t                    \'autoplay\': +this.options.autoPlay,\n\t                    \'wmode\': \'transparent\',\n\t                    \'controls\': 0,\n\t                    \'rel\': 0,\n\t                    \'showinfo\': 0\n\t                };\n\n\t                this._onYouTubePlayerReady = proxy(this._onYouTubePlayerReady, this);\n\t                window.onYouTubePlayerReady = this._onYouTubePlayerReady;\n\t                this._onPlayerStateChangeHandler = proxy(this._onPlayerStateChange, this);\n\t                window.onPlayerStateChange = this._onPlayerStateChange;\n\n\t                /*jshint unused:false */\n\t                var player = new window.YT.Player(this.wrapper.find(DOT + YTPLAYER)[0], {\n\t                    height: this.wrapper.height(),\n\t                    width: this.wrapper.width(),\n\t                    videoId: this._getMediaId(),\n\t                    playerVars: vars,\n\t                    events: {\n\t                        \'onReady\': this._onYouTubePlayerReady,\n\t                        \'onStateChange\': this._onPlayerStateChangeHandler\n\t                    }\n\t                });\n\t            },\n\n\t            _onYouTubePlayerReady: function (event) {\n\t                this._ytmedia = event.target;\n\t                this._ytmedia.getIframe().style.width = "100%";\n\t                this._ytmedia.getIframe().style.height = "100%";\n\t                this._youTubeVideo = true;\n\t                this._mediaDurationChangeHandler();\n\n\t                if (this.options.autoPlay) {\n\t                    this._playStateToggle(true);\n\t                    this._ytmedia.loadVideoById(this._getMediaId());\n\t                }\n\t                else {\n\t                    this._ytmedia.cueVideoById(this._getMediaId());\n\t                }\n\n\t                if (this.options.mute) {\n\t                    this.mute(true);\n\t                }\n\n\t                this.trigger(READY);\n\t            },\n\n\t            _updateTitle: function () {\n\t                this.titlebar().text(this.media().title || this.media().source);\n\t            },\n\n\t            _onPlayerStateChange: function (event) {\n\n\t                if (event.data === 0) {\n\t                    this._slider.value(0);\n\t                    this._paused = false;\n\t                    this._playStateToggle(true);\n\t                    this.trigger(END);\n\t                    if (this.options.autoRepeat) {\n\t                        this.play();\n\t                    }\n\t                }\n\t                else if (event.data === 1) {\n\t                    this._mediaDurationChange();\n\t                    this._ytmedia.setVolume(this.volume());\n\t                    if (this._sliderChangeFired) {\n\t                        this._sliderChangeFired = false;\n\t                    } else {\n\t                        this._uiDisplay(false);\n\t                    }\n\t                    this.trigger(PLAY);\n\t                    this._playStateToggle(true);\n\n\t                    this._poll("progress", this._mediaTimeUpdate, 500, this);\n\t                    this._paused = false;\n\t                }\n\t                else if (event.data === 2) {\n\t                    if (!this._paused) {\n\t                        this._uiDisplay(true);\n\t                        this._playStateToggle(false);\n\t                        this.trigger(PAUSE);\n\t                        this._paused = true;\n\t                    }\n\t                }\n\t            },\n\n\t            _getMediaId: function () {\n\t                var result = this._currentUrl();\n\t                var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n\t                var match = result.match(regExp);\n\n\t                if (match && match[7].length === 11) {\n\t                    result = match[7];\n\t                }\n\n\t                return result;\n\t            },\n\n\t            _mouseClick: function () {\n\t                if (this.isPaused()) {\n\t                    this.play();\n\t                } else {\n\t                    this.pause();\n\t                }\n\t            },\n\n\t            _initializePlayer: function () {\n\t                if (!this._mouseMoveHandler) {\n\t                    this._mouseMoveHandler = proxy(this._mouseMove, this);\n\t                    this._mouseInHandler = proxy(this._mouseIn, this);\n\t                    this._mouseOutHandler = proxy(this._mouseOut, this);\n\n\t                    $(this.wrapper)\n\t                        .on("mouseenter" + ns, this._mouseInHandler)\n\t                        .on("mouseleave" + ns, this._mouseOutHandler)\n\t                        .on("mousemove" + ns, this._mouseMoveHandler);\n\t                }\n\n\t                if (!this._ytmedia && this._youTubeVideo) {\n\t                    this._createYoutubePlayer();\n\t                }\n\t                else if (!this._media && !this._youTubeVideo) {\n\t                    this._createHtmlPlayer();\n\t                }\n\t            },\n\n\t            _createHtmlPlayer: function () {\n\t                if (!this._videoOverlay) {\n\t                    this._mouseClickHanlder = proxy(this._mouseClick, this);\n\t                    this.wrapper.append("<div class=\'" + OVERLAY + "\'></div>");\n\t                    this._videoOverlay = this.wrapper.find(".k-mediaplayer-overlay")\n\t                        .on("click" + ns, this._mouseClickHanlder);\n\t                }\n\n\t                this._mediaTimeUpdateHandler = proxy(this._mediaTimeUpdate, this);\n\t                this._mediaDurationChangeHandler = proxy(this._mediaDurationChange, this);\n\t                this._mediaEndedHandler = proxy(this._mediaEnded, this);\n\t                this._mediaCanPlayHandler = proxy(this._mediaReady, this);\n\t                this._mediaPlayHandler = proxy(this._mediaPlay, this);\n\t                this._videoOverlay.after(templates.htmlPlayer);\n\t                this._media = this.wrapper.find(DOT + MEDIA)[0];\n\t                $(this._media)\n\t                    .css({\n\t                        width: "100%",\n\t                        height: "100%"\n\t                    });\n\n\t                if (this.options.mute) {\n\t                    this.mute(true);\n\t                }\n\n\t                this._media.ontimeupdate = this._mediaTimeUpdateHandler;\n\t                this._media.ondurationchange = this._mediaDurationChangeHandler;\n\t                this._media.oncanplay = this._mediaCanPlayHandler;\n\t                this._media.onplay = this._mediaPlayHandler;\n\t                this._media.onended = this._mediaEndedHandler;\n\t                this._media.loop = this.options.autoRepeat;\n\t            },\n\n\t            _mouseIn: function () {\n\t                this._uiDisplay(true);\n\t            },\n\n\t            _mouseOut: function () {\n\t                this._poll("mouseIdle", this._mouseIdle, 3000, this);\n\t            },\n\n\t            _mouseIdle: function () {\n\t                this._uiDisplay(false);\n\t                return false;\n\t            },\n\n\t            _mouseMove: function () {\n\t                if (!(this._titleBar.is(\':animated\') || this._toolBar.element.is(\':animated\') || this._slider.wrapper.is(\':animated\'))) {\n\t                    this._uiDisplay(true);\n\t                }\n\t                this._poll("mouseIdle", this._mouseIdle, 3000, this);\n\t            },\n\n\t            _uiDisplay: function (state) {\n\t                var animationSpeed = \'slow\';\n\t                var uiElements = this._titleBar\n\t                    .add(this._toolBar.element.parent());\n\n\t                if (state) {\n\t                    uiElements.fadeIn(animationSpeed);\n\t                }\n\t                else {\n\t                    uiElements.fadeOut(animationSpeed);\n\t                    if (this.options.navigatable) {\n\t                        this.wrapper.focus();\n\t                    }\n\t                }\n\t            },\n\n\t            setOptions: function (options) {\n\t                Widget.fn.setOptions.call(this, options);\n\t            },\n\n\t            destroy: function () {\n\t                Widget.fn.destroy.call(this);\n\n\t                if (!this.isPaused()) {\n\t                    this.pause();\n\t                }\n\n\t                this.element.off(ns);\n\t                this.element.find(DOT + OVERLAY).off(ns);\n\t                this._timers = null;\n\t                this._mouseMoveHandler = null;\n\t                this._mouseOutHandler = null;\n\t                this._mouseInHandler = null;\n\t                this._mouseClickHanlder = null;\n\t                this._keyDownHandler = null;\n\t                this._fullscreenHandler = null;\n\n\t                this._toolbarClickHandler = null;\n\t                this._sliderDragChangeHandler = null;\n\t                this._sliderDraggingHandler = null;\n\t                this._volumeDraggingHandler = null;\n\t                this._volumeChangeHandler = null;\n\t                this._youtubeApiReadyHandler = null;\n\t                this._onYouTubePlayerReady = null;\n\t                this._onPlayerStateChangeHandler = null;\n\t                this._dropDownSelectHandler = null;\n\n\t                if (this._youTubeVideo) {\n\t                    this._ytmedia.destroy();\n\t                }\n\t                else {\n\t                    this._media.ontimeupdate = this._mediaTimeUpdateHandler = null;\n\t                    this._media.ondurationchange = this._mediaDurationChangeHandler = null;\n\t                    this._media.oncanplay = this._mediaCanPlayHandler = null;\n\t                    this._media.onplay = this._mediaPlayHandler = null;\n\t                    this._media.onended = this._mediaEndedHandler = null;\n\t                    this._media.src = "";\n\t                    this._media.remove();\n\t                }\n\n\t                this._mouseMoveTimer = null;\n\t                clearTimeout(this._mouseMoveTimer);\n\n\t                kendo.destroy(this.element);\n\t            },\n\n\t            seek: function (ms) {\n\t                if (typeof ms === \'undefined\') {\n\t                    return 1000 * (this._youTubeVideo) ? this._ytmedia.getCurrentTime() : (this._media ? this._media.currentTime : 0);\n\t                }\n\t                var seconds = ms / 1000;\n\t                if (this._youTubeVideo) {\n\t                    if (seconds + 3 >= this._ytmedia.getDuration() | 0) {\n\t                        //avoid infinite bad request loop in youtube player.\n\t                        this._ytmedia.seekTo(this._ytmedia.getDuration() - 3 | 0, true);\n\t                    } else {\n\t                        this._ytmedia.seekTo(seconds, true);\n\t                    }\n\t                } else {\n\t                    this._media.currentTime = seconds;\n\t                }\n\n\t                return this;\n\t            },\n\n\t            play: function () {\n\t                if (this._youTubeVideo) {\n\t                    this._ytmedia.playVideo();\n\t                } else {\n\t                    if (kendo.support.mobileOS) {\n\t                        this._uiDisplay(false);\n\t                    }\n\t                    this._media.play();\n\t                }\n\t                this._paused = false;\n\n\t                this._playStateToggle(true);\n\n\t                return this;\n\t            },\n\n\t            stop: function () {\n\t                if (this._youTubeVideo && this._ytmedia) {\n\t                    this._ytmedia.stopVideo();\n\t                } else if (this._media && !this._youTubeVideo) {\n\t                    if (kendo.support.mobileOS) {\n\t                        this._uiDisplay(true);\n\t                    }\n\t                    this._media.pause();\n\t                    this._media.currentTime = 0;\n\t                }\n\t                this._paused = true;\n\n\t                this._playStateToggle(false);\n\t                return this;\n\t            },\n\n\t            pause: function () {\n\t                if (this._youTubeVideo) {\n\t                    this._ytmedia.pauseVideo();\n\t                } else {\n\t                    if (kendo.support.mobileOS) {\n\t                        this._uiDisplay(true);\n\t                    }\n\t                    this._media.pause();\n\t                }\n\t                this._paused = true;\n\t                this._playStateToggle(false);\n\t                this.trigger(PAUSE);\n\t                return this;\n\t            },\n\n\t            toolbar: function () {\n\t                return this._toolBar;\n\t            },\n\n\t            dropdown: function () {\n\t                return this._dropDown;\n\t            },\n\n\t            titlebar: function () {\n\t                return this._titleBar;\n\t            },\n\n\t            fullScreen: function (enterFullScreen) {\n\t                if (typeof enterFullScreen === \'undefined\') {\n\t                    return this._isInFullScreen || false;\n\t                }\n\t                var element = this.element.get(0);\n\t                if (enterFullScreen) {\n\t                    // Handles the case when the action is triggered by code and not by user iteraction\n\t                    this.element.addClass("k-mediaplayer-fullscreen");\n\t                    if (element.requestFullscreen) {\n\t                        element.requestFullscreen();\n\t                    } else if (element.webkitRequestFullscreen) {\n\t                        element.webkitRequestFullscreen();\n\t                    } else if (element.mozRequestFullScreen) {\n\t                        element.mozRequestFullScreen();\n\t                    } else if (element.msRequestFullscreen) {\n\t                        element.msRequestFullscreen();\n\t                    }\n\t                    this._isInFullScreen = true;\n\t                } else {\n\n\t                    if (document.cancelFullscreen) {\n\t                        document.cancelFullscreen();\n\t                    } else if (document.webkitCancelFullScreen) {\n\t                        document.webkitCancelFullScreen();\n\t                    } else if (document.mozCancelFullScreen) {\n\t                        document.mozCancelFullScreen();\n\t                    } else if (document.msCancelFullscreen) {\n\t                        document.msCancelFullscreen();\n\t                    } else if (document.exitFullscreen) {\n\t                        document.exitFullscreen();\n\t                    } else if (document.msExitFullscreen) {\n\t                        document.msExitFullscreen();\n\t                    }\n\t                    // Handles the case when the action is triggered by code and not by user iteraction\n\t                    this.element.removeClass("k-mediaplayer-fullscreen");\n\t                    this._isInFullScreen = false;\n\t                }\n\t                this._slider.resize();\n\t            },\n\n\t            volume: function (value) {\n\t                if (typeof value === \'undefined\') {\n\t                    return (typeof this._volume !== \'undefined\') ? this._volume : this._volume = this.options.volume;\n\t                }\n\t                this._volume = value;\n\t                this.mute(value <= 0);\n\n\t                if (this._youTubeVideo) {\n\t                    this._ytmedia.setVolume(this._volume);\n\t                } else {\n\t                    this._media.volume = this._volume / 100;\n\t                }\n\n\t                this._volumeSlider.value(value);\n\t            },\n\n\t            mute: function (muted) {\n\t                var currentState = this._youTubeVideo ? (this._ytmedia && this._ytmedia.isMuted()) : (this._media && this._media.muted);\n\t                if (typeof muted === \'undefined\' || muted === currentState) {\n\t                    return currentState;\n\t                }\n\t                if (this._youTubeVideo) {\n\t                    if (muted) {\n\t                        this._ytmedia.mute();\n\t                    }\n\t                    else {\n\t                        this._ytmedia.unMute();\n\t                    }\n\t                }\n\t                else {\n\t                    this._media.muted = muted;\n\t                }\n\n\t                if (muted) {\n\t                    this._volumeSlider.value(0);\n\t                }\n\t                else {\n\t                    this._volumeSlider.value((this._media && this._media.volume * 100) || (this._ytmedia && this._ytmedia.getVolume()));\n\t                }\n\t                this.trigger(VOLUMECHANGE);\n\t                this._changeVolumeButtonImage(this._volumeSlider.value());\n\t            },\n\n\t            isEnded: function () {\n\t                if (this._youTubeVideo) {\n\t                    return this._ytmedia.getPlayerState() === 0;\n\t                } else {\n\t                    return this._media.ended;\n\t                }\n\t            },\n\n\t            media: function (value) {\n\t                var dropdown = this.dropdown();\n\t                if (typeof value === \'undefined\') {\n\t                    return (typeof this._mediaData !== \'undefined\') ? this._mediaData : this._mediaData = this.options.media;\n\t                }\n\n\t                if (isArray(value.source)) {\n\t                    dropdown.setDataSource(value.source);\n\t                    dropdown.wrapper.show();\n\t                }\n\t                else {\n\t                    dropdown.wrapper.hide();\n\t                }\n\n\t                this._mediaData = value;\n\n\t                this._updateTitle();\n\n\t                this._setPlayerUrl();\n\t            },\n\n\t            isPaused: function () {\n\t                return this._paused;\n\t            },\n\n\t            isPlaying: function () {\n\t                return !this.isEnded() && !this._paused;\n\t            },\n\n\t            _aria: function () {\n\t                this.wrapper.attr("role", "region");\n\t                //this.wrapper.attr("aria-labelledby", "mediaplayerTitleBar");\n\t                //add onfocus with aria active descendant\n\t            },\n\n\t            _navigatable: function () {\n\t                this._fullscreenHandler = proxy(this._fullscreen, this);\n\t                $(document)\n\t                    .on("webkitfullscreenchange mozfullscreenchange fullscreenchange" + ns, this._fullscreenHandler);\n\n\t                if (this.options.navigatable) {\n\t                    this.wrapper.attr("tabIndex", 0);\n\t                    this._keyDownHandler = proxy(this._keyDown, this);\n\t                    this.wrapper\n\t                        .on("keydown" + ns, this._keyDownHandler);\n\t                }\n\t            },\n\n\t            _fullscreen: function () {\n\t                var isFullScreen = document.fullScreen ||\n\t                    document.mozFullScreen ||\n\t                    document.webkitIsFullScreen;\n\n\t                this._uiDisplay(true);\n\t                this._slider.resize();\n\n\t                if (!isFullScreen) {\n\t                    this.wrapper.find(\'span[class*="k-i-fullscreen"]\')\n\t                        .removeClass(FULLSCREEN_EXIT)\n\t                        .addClass(FULLSCREEN_ENTER);\n\t                    this.fullScreen(false);\n\t                }\n\t            },\n\n\t            _keyDown: function (e) {\n\t                e.preventDefault();\n\t                var fsButton = this.wrapper.find(\'span[class*="k-i-fullscreen"]\');\n\t                if (e.keyCode === keys.SPACEBAR) {\n\t                    if (this.isPlaying()) {\n\t                        this.pause();\n\t                    }\n\t                    else {\n\t                        this.play();\n\t                    }\n\t                }\n\t                else if (e.keyCode === keys.ENTER && !this._isInFullScreen) {\n\t                    fsButton\n\t                        .removeClass(FULLSCREEN_ENTER)\n\t                        .addClass(FULLSCREEN_EXIT);\n\t                    this.fullScreen(true);\n\t                }\n\t                else if (e.keyCode === 77) {\n\t                    var muted = this.mute();\n\t                    this.mute(!muted);\n\t                }\n\t                else if (e.keyCode === keys.ESC && this._isInFullScreen) {\n\t                    fsButton\n\t                        .removeClass(FULLSCREEN_EXIT)\n\t                        .addClass(FULLSCREEN_ENTER);\n\t                    this.fullScreen(false);\n\t                }\n\t            },\n\n\t            _error: function () {\n\t            },\n\n\t            _progress: function () {\n\t            }\n\n\t        });\n\n\t        ui.plugin(MediaPlayer);\n\n\t    })(window.kendo.jQuery);\n\n\t    return window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1249:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.toolbar */ "./node_modules/@progress/kendo-ui/js/kendo.toolbar.js");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.mediaplayer.js?')}}]);