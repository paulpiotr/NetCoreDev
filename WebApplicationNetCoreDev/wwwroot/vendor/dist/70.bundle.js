(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{"./node_modules/@progress/kendo-ui/js/kendo.tilelayout.js":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.tilelayout.js ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1385);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1077:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.draganddrop */ "./node_modules/@progress/kendo-ui/js/kendo.draganddrop.js");\n\n/***/ }),\n\n/***/ 1158:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.resizable */ "./node_modules/@progress/kendo-ui/js/kendo.resizable.js");\n\n/***/ }),\n\n/***/ 1385:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018), __webpack_require__(1077), __webpack_require__(1158)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "tilelayout",\n\t    name: "TileLayout",\n\t    category: "web",\n\t    depends: [ "core"]\n\t};\n\n\t(function($) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        Widget = ui.Widget,\n\t        Draggable = ui.Draggable,\n\t        selector = kendo.selectorFromClasses,\n\t        RESIZE = "resize",\n\t        REORDER = "reorder",\n\t        NS = ".kendoTileLayout",\n\t        DOWNCURSOR = "k-cursor-ns-resize",\n\t        RIGHTCURSOR = "k-cursor-ew-resize",\n\t        DIAGONALCURSOR = "k-cursor-nwse-resize",\n\t        RTLDIAGONALCURSOR = "k-cursor-nesw-resize",\n\t        GRABCURSOR = "k-cursor-grab",\n\t        GRABBINGCURSOR = "k-cursor-grabbing",\n\t        MINIMALSPAN = 1,\n\t        CURSORCLASSES = "k-cursor-nesw-resize k-cursor-nwse-resize k-cursor-ew-resize k-cursor-ns-resize";\n\n\t    var tileLayoutStyles = {\n\t        wrapper: "k-widget k-tilelayout",\n\t        item: "k-tilelayout-item k-card",\n\t        itemHeader: "k-tilelayout-item-header k-card-header",\n\t        itemHeaderTitle: "k-card-title",\n\t        itemBody: "k-tilelayout-item-body k-card-body",\n\t        reorderHint: "k-layout-item-hint k-layout-item-hint-reorder",\n\t        resizeHint: "k-layout-item-hint k-layout-item-hint-resize"\n\t    };\n\n\t    var TileLayout = Widget.extend( {\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            $.cssNumber.gridColumnStart = true;\n\t            $.cssNumber.gridColumnEnd = true;\n\t            $.cssNumber.gridRowStart = true;\n\t            $.cssNumber.gridRowEnd = true;\n\n\t            that.element = $(element).addClass(TileLayout.styles.wrapper);\n\n\t            that._setWrapperStyles();\n\t            that._initContainers();\n\t            that._resizable();\n\t            that._reorderable();\n\t        },\n\n\t        events: [\n\t            RESIZE,\n\t            REORDER\n\t        ],\n\n\t        options: {\n\t            name: "TileLayout",\n\t            columns: null,\n\t            gap : {\n\t                columns: 16,\n\t                rows: 16\n\t            },\n\t            containers: [],\n\t            resizable: false,\n\t            reorderable: false,\n\t            columnsWidth: "1fr",\n\t            rowsHeight: "1fr",\n\t            height: "",\n\t            width: ""\n\t        },\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\n\t            if (this._draggableInstance) {\n\n\t                this.element.find(".k-tilelayout-item").each(function() {\n\t                    var item = $(this);\n\t                    if (item.data("kendoDropTarget")) {\n\t                        item.data("kendoDropTarget").destroy();\n\t                    }\n\t                });\n\n\t                this._draggableInstance.destroy();\n\t                this._draggableInstance.element = this._draggableInstance.draggable = null;\n\t            }\n\n\t            if (this.resizable) {\n\t                this.resizable.destroy();\n\t                this.resizable = null;\n\t            }\n\n\t            this.element.off(NS);\n\t        },\n\n\t        setOptions: function(options) {\n\t            this.destroy();\n\t            kendo.deepExtend(this.options, options);\n\t            this.element.empty();\n\t            this.init(this.element, this.options);\n\t        },\n\n\t        getOptions: function() {\n\t            var result = $.extend(true, {}, this.options);\n\t            result.containers = kendo.deepExtend([], this.items);\n\n\t            return result;\n\t        },\n\n\t        _initContainers: function() {\n\t            var that = this;\n\t            var containers = that.options.containers;\n\t            var containerElements = that.element.children();\n\t            var hasElements = !!containerElements.length;\n\t            var id;\n\t            var container;\n\t            var header;\n\t            var headerSettings;\n\t            var body;\n\t            var containerSettings;\n\t            var headerContent;\n\n\t            that.items = [];\n\t            that.itemsMap = {};\n\n\t            if (hasElements) {\n\t                containerElements.each(function(i ,element) {\n\t                    id = kendo.guid();\n\t                    var current = $(element)\n\t                                    .addClass(TileLayout.styles.item)\n\t                                    .attr("id", id);\n\n\t                    that._addContainer(current, containers[i], i, id);\n\t                });\n\t            } else {\n\t                for (var i = 0; i < containers.length; i++) {\n\t                    id = kendo.guid();\n\t                    containerSettings = containers[i];\n\t                    container = $("<div></div>")\n\t                                        .addClass(TileLayout.styles.item)\n\t                                        .attr("id", id);\n\n\t                    headerSettings = containerSettings.header;\n\t                    if (headerSettings && (headerSettings.template || headerSettings.text)) {\n\t                        header = $("<div></div>").addClass(TileLayout.styles.itemHeader);\n\t                        if (that.options.reorderable) {\n\t                            header.addClass(GRABCURSOR);\n\t                        }\n\t                        if (headerSettings.text) {\n\t                            headerContent = "<h5 class=\'" + TileLayout.styles.itemHeaderTitle + "\'>" + headerSettings.text + "</h5>";\n\t                        }\n\t                        header.append(headerContent || kendo.template(headerSettings.template)({}));\n\t                        header.appendTo(container);\n\t                    }\n\t                    body = $("<div></div>").addClass(TileLayout.styles.itemBody);\n\t                    body.append(kendo.template(containerSettings.bodyTemplate)({}));\n\t                    body.appendTo(container);\n\t                    container.appendTo(that.element);\n\n\t                    that._addContainer(container, containerSettings, i, id);\n\t                }\n\t            }\n\t        },\n\n\t        _addContainer: function (element, item, index, id) {\n\t            var that = this;\n\t            item.order = typeof item.order == \'number\' ? item.order : index;\n\t            element.attr(kendo.attr("index"), item.order);\n\t            item.id = id;\n\t            that._setContainerCoordinates(element, item);\n\t            that.itemsMap[id] = item;\n\t            that.items.push(that.itemsMap[id]);\n\t        },\n\n\t        _setWrapperStyles: function () {\n\t            var that = this;\n\t            var options = that.options;\n\t            that.element.css({\n\t                "grid-template-columns": kendo.format("repeat({0}, minmax(0, {1}))", options.columns, typeof options.columnsWidth === "string" ? options.columnsWidth : options.columnsWidth + "px"),\n\t                "grid-auto-rows":  kendo.format("minmax(0, {0})", typeof options.rowsHeight === "string" ? options.rowsHeight : options.rowsHeight + "px"),\n\t                "column-gap": options.gap.columns,\n\t                "width": typeof options.width === "string" ? options.width : options.width + "px",\n\t                "height": typeof options.height === "string" ? options.height : options.height + "px",\n\t                "padding": options.gap.rows + "px " +options.gap.columns + "px ",\n\t                "row-gap": options.gap.rows\n\t            });\n\t        },\n\n\t        _setContainerCoordinates: function (element, settings) {\n\t            if (!settings) {\n\t                return;\n\t            }\n\t            element.css({\n\t                "order": settings.order,\n\t\t\t\t\t"grid-column-end": kendo.format("span {0}",settings.colSpan),\n\t\t\t\t\t"grid-row-end": kendo.format("span {0}",settings.rowSpan)\n\t            })\n\t            .attr(kendo.attr("index"), settings.order);\n\t        },\n\n\t        _updateContainers: function () {\n\t            var that = this;\n\n\t            for (var i = 0; i < that.items.length; i++) {\n\t                that._setContainerCoordinates(that.element.find("#" + that.items[i].id) , that.items[i]);\n\t            }\n\t        },\n\n\t        _createResizeHandle: function(container, side, down) {\n\t            var that = this;\n\n\t            if (that._isresizing) {\n\t                return;\n\t            }\n\n\t            if (that.resizeHandle &&  that.resizeHandle.data("div")[0] !== container[0]) {\n\t                that.resizeHandle.off(NS).remove();\n\t                that.resizeHandle = null;\n\t            }\n\n\t            if (!that.resizeHandle) {\n\t                that.resizeHandle = $(\n\t                    \'<div class="k-resize-handle"></div>\'\n\t                );\n\t                that.resizeHandle.appendTo(container);\n\t            }\n\n\t            that._positionResizeHandle(container, side, down);\n\t        },\n\n\t        _positionResizeHandle: function(container, side, down) {\n\t            var that = this;\n\t            var leftBorderWidth = parseFloat(container.css("borderRightWidth"));\n\t            var bottomBorderWidth = parseFloat(container.css("borderBottomWidth"));\n\t            var containerHeight = container.height();\n\t            var containerWidth = container.width();\n\t            var top = down ? containerHeight -6.5 -bottomBorderWidth : 0;\n\t            var left = side ? containerWidth -4.5 -leftBorderWidth: 0;\n\t            var width = 9;\n\t            var height = 9;\n\t            var cursorClass;\n\n\t            if (side && down) {\n\t                height = width = 25;\n\t                top-=12.5;\n\t                left-=12.5;\n\t                cursorClass = kendo.support.isRtl(that.element) ? RTLDIAGONALCURSOR : DIAGONALCURSOR;\n\t            } else if (side && !down) {\n\t                height = containerHeight;\n\t                cursorClass = RIGHTCURSOR;\n\t            } else if(!side && down) {\n\t                width = containerWidth;\n\t                cursorClass = DOWNCURSOR;\n\t            }\n\n\t            that.resizeHandle\n\t                .css({\n\t                    top: top,\n\t                    left: left,\n\t                    height: height,\n\t                    width: width\n\t                })\n\t                .attr("side", side)\n\t                .attr("down", down)\n\t                .removeClass(CURSORCLASSES)\n\t                .addClass(cursorClass)\n\t                .data("div", container)\n\t                .show();\n\t        },\n\n\t        _createResizeHint: function (container) {\n\t            var that = this;\n\n\t            if (that.hint) {\n\t                return;\n\t            }\n\n\t            var colSpan = container.css("grid-column-end");\n\t            var rowSpan = container.css("grid-row-end");\n\t            var order = container.css("order");\n\n\t            that.hint = $("<div class=\'" + TileLayout.styles.resizeHint + "\'></div>")\n\t            .css({\n\t                "order": order,\n\t\t\t\t    "grid-column-end": colSpan,\n\t                "grid-row-end": rowSpan\n\t            })\n\t            .insertAfter(container);\n\t        },\n\n\t        _removeResizeHint: function () {\n\t            if (this._isresizing) {\n\t                return;\n\t            }\n\n\t            if (this.hint) {\n\t                this.hint.remove();\n\t                this.hint = null;\n\t            }\n\t        },\n\n\t        _positionHint: function (colSpan, rowSpan) {\n\t            var that = this;\n\n\t            if (colSpan) {\n\t                that.hint.css("grid-column-end", kendo.format("span {0}", colSpan));\n\t            }\n\n\t            if (rowSpan) {\n\t                that.hint.css("grid-row-end", kendo.format("span {0}", rowSpan));\n\t            }\n\t        },\n\n\t        _removeAbsoluteStyles: function (container) {\n\t            container.css("position", "");\n\t            container.css("left", "");\n\t            container.css("top", "");\n\t            container.css("width", "");\n\t            container.css("height", "");\n\t            container.css("z-index", "");\n\t        },\n\n\t        _positionAbsolutely: function (container) {\n\t            if (container.css("position") ==  "absolute") {\n\t                return;\n\t            }\n\t            var position = container.position();\n\t            var width = container.outerWidth();\n\t            var height = container.outerHeight();\n\n\t            container.css("position", "absolute");\n\t            container.css("left", position.left);\n\t            container.css("top", position.top);\n\t            container.css("width", width);\n\t            container.css("height", height);\n\t            container.css("z-index", 2);\n\t        },\n\n\t        _resizable: function () {\n\t            var that = this;\n\t            var side;\n\t            var down;\n\t            var id;\n\t            var fractionWidth;\n\t            var fractionHeight;\n\t            var currentContainer;\n\t            var lastXLocation = 0;\n\t            var lastYLocation = 0;\n\t            var initialWidth = 0;\n\t            var initialHeight = 0;\n\t            var startColSpan = 0;\n\t            var startRowSpan = 0;\n\t            var itemsMaxSpace = 0;\n\t            var rowsCount;\n\n\t            if (that.options.resizable) {\n\t                that.element.on("mousemove" + NS, selector(TileLayout.styles.item), function (e) {\n\t                    var rightPosition;\n\t                    var downPosition;\n\t                    var container = $(this);\n\t                    var rectPosition = container[0].getBoundingClientRect();\n\n\t                    rightPosition = Math.abs(rectPosition.right - e.clientX) < 16;\n\t                    downPosition = Math.abs(rectPosition.bottom - e.clientY) < 16;\n\n\t                    if (rightPosition && downPosition) {\n\t                        that._createResizeHandle(container, true, true);\n\t                    } else if (rightPosition) {\n\t                        that._createResizeHandle(container, true, false);\n\t                    } else  if (downPosition) {\n\t                        that._createResizeHandle(container, false, true);\n\t                    }\n\t                });\n\n\t                that.resizable = new ui.Resizable(that.element, {\n\t                    handle: ".k-resize-handle",\n\t                    start: function(e) {\n\t                        var resizeHandle = $(e.currentTarget);\n\t                        currentContainer = resizeHandle.data("div");\n\t                        id = currentContainer.attr("id");\n\t                        side = resizeHandle.attr("side");\n\t                        down = resizeHandle.attr("down");\n\t                        rowsCount = that.element.css("grid-template-rows").split(" ").length;\n\n\t                        if (side) {\n\t                            fractionWidth = that._calculateFractionWidth();\n\t                            itemsMaxSpace = that._calculateRightEndSide(fractionWidth);\n\t                            lastXLocation = e.x.location;\n\t                            initialWidth = currentContainer.width();\n\t                            startColSpan = parseInt(currentContainer.css("grid-column-end").replace(\'span\',\'\'), 10);\n\t                        }\n\n\t                        if (down) {\n\t                            fractionHeight = (that.element[0].scrollHeight - (rowsCount + 1)*that.options.gap.rows)/rowsCount;\n\t                            lastYLocation = e.y.location;\n\t                            initialHeight = currentContainer.height();\n\t                            startRowSpan = parseInt(currentContainer.css("grid-row-end").replace(\'span\',\'\'), 10);\n\t                        }\n\n\t                        that._isresizing = true;\n\t                    },\n\t                    resize: function(e) {\n\t                        var hintColumns = 0;\n\t                        var hintRows = 0;\n\t                        var mouseDeltaX = 0;\n\t                        var mouseDeltaY = 0;\n\t                        var overflowsLayout;\n\t                        var isBeyondMinimum;\n\t                        var deltaFromStart = 0;\n\t                        var resizeRowsCount = 0;\n\t                        var resizeColumnsCount = 0;\n\t                        var clientRect = that.element[0].getBoundingClientRect();\n\n\t                        that._positionAbsolutely(currentContainer);\n\t                        that._createResizeHint(currentContainer);\n\n\t                        if (side == "true") {\n\t                            mouseDeltaX = e.x.location - lastXLocation;\n\t                            overflowsLayout = (clientRect.left + itemsMaxSpace - window.scrollX - e.x.location) < that.options.gap.columns;\n\t                            isBeyondMinimum = (initialWidth + mouseDeltaX) < fractionWidth;\n\n\t                            if (!overflowsLayout && !isBeyondMinimum) {\n\t                                resizeColumnsCount = (mouseDeltaX)/(fractionWidth + that.options.gap.columns);\n\t                                deltaFromStart = mouseDeltaX -(Math.floor(resizeColumnsCount)*(fractionWidth + that.options.gap.columns));\n\t                                hintColumns = startColSpan + Math.floor(resizeColumnsCount) + ((deltaFromStart >= (fractionWidth/2))? 1: 0);\n\t                                that.itemsMap[id].colSpan = Math.max(hintColumns, MINIMALSPAN);\n\t                            } else {\n\t                                mouseDeltaX = 0;\n\t                            }\n\t                        }\n\n\t                        if (down == "true") {\n\t                            mouseDeltaY = e.y.location - lastYLocation;\n\t                            overflowsLayout = (clientRect.bottom + window.scrollY - e.y.location) < that.options.gap.rows;\n\t                            isBeyondMinimum = (initialHeight + mouseDeltaY) <= fractionHeight;\n\n\t                            if (!overflowsLayout && !isBeyondMinimum) {\n\t                                resizeRowsCount = (mouseDeltaY)/(fractionHeight + that.options.gap.rows);\n\t                                deltaFromStart = mouseDeltaY - (Math.floor(resizeRowsCount)*(fractionHeight + that.options.gap.rows));\n\t                                hintRows = startRowSpan + Math.floor(resizeRowsCount) + ((deltaFromStart >= (fractionHeight/2))? 1: 0);\n\t                                that.itemsMap[id].rowSpan = Math.max(hintRows, MINIMALSPAN);\n\t                            } else {\n\t                                mouseDeltaY = 0;\n\t                            }\n\t                        }\n\n\t                        that._positionHint(hintColumns, hintRows);\n\t                        that._positionResizeHandle(currentContainer, side == "true", down == "true");\n\t                        if (mouseDeltaY) {\n\t                            currentContainer.css("height", initialHeight + mouseDeltaY);\n\t                        }\n\t                        if (mouseDeltaX) {\n\t                            currentContainer.css("width", initialWidth + mouseDeltaX);\n\t                        }\n\t                    },\n\t                    resizeend: function() {\n\t                        that._isresizing = false;\n\t                        that._setContainerCoordinates(currentContainer, that.itemsMap[id]);\n\t                        that._removeAbsoluteStyles(currentContainer);\n\t                        that._removeResizeHint();\n\t                        that.trigger(RESIZE, {\n\t                            container: currentContainer\n\t                        });\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        _calculateFractionWidth: function () {\n\t            var that = this;\n\t            var container = that.element.children().first();\n\t            var colSpan = that.itemsMap[container.attr("id")].colSpan;\n\t            var totalWidth = container.outerWidth();\n\n\t            return (totalWidth - (colSpan -1)*(that.options.gap.columns))/colSpan;\n\t        },\n\n\t        _calculateRightEndSide: function (fractionWidth) {\n\t            var that = this;\n\t            var columns = that.options.columns;\n\t            var columnGap = that.options.gap.columns;\n\n\t            return columns*(fractionWidth + columnGap) + columnGap;\n\t        },\n\t        \n\t        _createDropHint: function (settings) {\n\t            this.dropHint = $("<div class=\'" + TileLayout.styles.reorderHint + "\'></div>")\n\t                .css({\n\t                    "order": settings.order,\n\t                    "grid-column-end": settings.columnEnd,\n\t                    "grid-row-end": settings.rowEnd\n\t                })\n\t                .attr(kendo.attr("index"), settings.order)\n\t                .attr("direction", settings.direction);\n\t        },\n\n\t        _insertDropHint: function (container, direction) {\n\t            if (direction == "right") {\n\t                this.dropHint.insertAfter(container);\n\t            } else {\n\t                this.dropHint.insertBefore(container);\n\t            }\n\t        },\n\n\t        _removeDropHint: function () {\n\t            if (this.dropHint) {\n\t                this.dropHint.remove();\n\t                this.dropHint = null;\n\t            }\n\t        },\n\n\t        _reorderable: function () {\n\t            if (!this.options.reorderable) {\n\t                return;\n\t            }\n\n\t            var that = this;\n\t            var element = that.element;\n\t            var originalElement;\n\t            var itemSelector = selector(TileLayout.styles.item);\n\t            var headerSelector = selector(TileLayout.styles.itemHeader);\n\n\t            this._draggableInstance = new Draggable(this.element, {\n\t                filter: headerSelector,\n\t                autoScroll: true,\n\t                hint: function(target) {\n\t                    var item = target.closest(itemSelector);\n\t                    var width = item.width();\n\t                    var height= item.height();\n\t                    var clone = item.clone();\n\t                    clone.find(headerSelector)\n\t                        .removeClass(GRABCURSOR)\n\t                        .addClass(GRABBINGCURSOR);\n\t                    return clone.width(width).height(height);\n\t                },\n\t                dragstart: function (e) {\n\t                    originalElement = $(e.currentTarget).closest(itemSelector);\n\t                },\n\t                drag: function (e) {\n\t                    var elementUnderCursor = kendo.elementUnderCursor(e);\n\t                    var hint = e.sender.hint;\n\t                    var dropContainer;\n\t                    var containerBoundaries;\n\t                    var pixelsToLeftBorder;\n\t                    var pixelsToRightBorder;\n\t                    var direction;\n\t                    \n\t                    var draggedItem = that._draggableInstance.currentTarget.closest(itemSelector);\n\t                    var newOrder;\n\n\t                    if (containsOrEqualTo(hint[0], elementUnderCursor)) {\n\t                        hint.hide();\n\n\t                        elementUnderCursor = kendo.elementUnderCursor(e);\n\n\t                        if (!containsOrEqualTo(originalElement[0], elementUnderCursor)) {\n\n\t                            if (that.dropHint && that.dropHint[0] == elementUnderCursor[0]) {\n\t                                hint.show();\n\t                                return;\n\t                            }\n\n\t                            dropContainer = $(elementUnderCursor);\n\t                            dropContainer = dropContainer.hasClass(TileLayout.styles.item) ? dropContainer : dropContainer.closest(itemSelector);\n\n\t                            if (dropContainer.hasClass(TileLayout.styles.item)) {\n\t                                containerBoundaries = dropContainer[0].getBoundingClientRect();\n\t                                pixelsToLeftBorder = e.clientX - containerBoundaries.left;\n\t                                pixelsToRightBorder = containerBoundaries.right - e.clientX;\n\t                                direction = pixelsToLeftBorder > pixelsToRightBorder ? "right" : "left";\n\t                                newOrder = dropContainer.css("order");\n\n\t                                if (that.dropHint && that.dropHint.attr("direction") !== direction) {\n\t                                    var clone = that.dropHint.clone();\n\t                                    clone.css("order", newOrder);\n\t                                    that.dropHint.remove();\n\t                                    that.dropHint = clone;\n\n\t                                    that._insertDropHint(dropContainer ,direction);\n\n\t                                    that.dropHint\n\t                                        .attr("direction", direction)\n\t                                        .attr(kendo.attr("index"), newOrder);\n\t                                } else if (!that.dropHint) {\n\n\t                                    var futureContainer = direction == "right" ? dropContainer.next() : dropContainer.prev();\n\n\t                                    if (futureContainer[0] != originalElement[0]) {\n\t                                        that._createDropHint({ order: newOrder, columnEnd: draggedItem.css("grid-column-end"), rowEnd: draggedItem.css("grid-row-end"), direction: direction });\n\t                                        originalElement.hide();\n\t                                        that._insertDropHint(dropContainer ,direction);\n\t                                    }\n\t                                }\n\t                            }\n\t                        }\n\t                        hint.show();\n\t                    }\n\t                },\n\t                dragend: function (e) {\n\t                    if (!that.dropHint) {\n\t                        e.sender.hint.remove();\n\t                        that._removeDropHint();\n\t                        return;\n\t                    }\n\t                    var newOrder = parseInt(that.dropHint.css("order"), 10);\n\t                    var container = e.currentTarget.closest(itemSelector);\n\t                    var items = that.element.find(itemSelector);\n\t                    var oldOrder = parseInt(container.css("order"), 10);\n\t                    var itemId = container.attr("id");\n\t                    var containers = that.element.children(":visible");\n\t                    var indexAttr = kendo.attr("index");\n\t                    var start;\n\t                    var end;\n\t                    var item;\n\t                    var direction;\n\t                    \n\t                    containers.sort(function(a, b) {\n\t                        a = $(a);\n\t                        b = $(b);\n\t                    \n\t                        var indexA = a.attr(indexAttr);\n\t                        var indexB = b.attr(indexAttr);\n\t                    \n\t                        if (indexA === undefined) {\n\t                            indexA = $(a).index();\n\t                        }\n\t                        if (indexB === undefined) {\n\t                            indexB = $(b).index();\n\t                        }\n\t                    \n\t                        indexA = parseInt(indexA, 10);\n\t                        indexB = parseInt(indexB, 10);\n\t                        return indexA > indexB ? 1 : (indexA < indexB ? -1 : 0);\n\t                    });\n\n\t                    newOrder = containers.index(that.dropHint[0]);\n\t                    end = Math.max(newOrder, oldOrder);\n\t                    start = Math.min(newOrder, oldOrder);\n\n\t                    that.itemsMap[itemId].order = newOrder;\n\n\t                    direction = newOrder > oldOrder ? "right" : "left"; //this is direction of movement\n\n\t                    if (direction == "left") {\n\t                        end--;\n\t                    } else {\n\t                        start++;\n\t                    }\n\n\t                    for (var i = start; i <= end ; i++) {\n\t                        item = items.filter("["+kendo.attr("index") + "=\'" +i + "\']");\n\t                        that.itemsMap[item.attr("id")].order += direction == "left" ? 1 : -1;\n\t                    }\n\n\t                    container.show();\n\n\t                    that._updateContainers();\n\n\t                    e.sender.hint.remove();\n\t                    that._removeDropHint();\n\t                    that.trigger(REORDER, {\n\t                        newIndex: newOrder,\n\t                        oldIndex: oldOrder,\n\t                        container: container\n\t                    });\n\t                }\n\t            });\n\n\t            element.find(itemSelector).kendoDropTarget({\n\t                dragenter: function(e) {\n\t                    if (that._isresizing) {\n\t                        return;\n\t                    }\n\t                    var dropContainer = $(e.dropTarget);\n\t                    var target = that._draggableInstance.currentTarget.closest(itemSelector);\n\t                    var dropContainerBoundaries;\n\t                    var pixelsToLeftBorder;\n\t                    var pixelsToRightBorder;\n\t                    var futureContainer;\n\t                    var direction;\n\n\t                    if (originalElement[0] != dropContainer[0]) {\n\n\t                        dropContainerBoundaries = dropContainer[0].getBoundingClientRect();\n\t                        pixelsToLeftBorder = e.clientX - dropContainerBoundaries.left;\n\t                        pixelsToRightBorder = dropContainerBoundaries.right - e.clientX;\n\t                        direction = pixelsToLeftBorder > pixelsToRightBorder ? "right" : "left";\n\n\t                        futureContainer = direction == "right" ? dropContainer.next() : dropContainer.prev();\n\n\t                        //handle the case when the container will be shown over the original one\n\t                        if (futureContainer[0] == originalElement[0]) {\n\t                            return;\n\t                        }\n\n\t                        that._removeDropHint();\n\n\t                        originalElement.hide();\n\n\t                        that._createDropHint({ order: dropContainer.css("order"), columnEnd: target.css("grid-column-end"), rowEnd: target.css("grid-row-end"), direction: direction});\n\n\t                        originalElement.hide();\n\t                        that._insertDropHint(dropContainer, direction);\n\t                    }\n\t                }\n\t            });\n\t        }\n\t    });\n\n\t    function containsOrEqualTo(parent, child) {\n\t        try {\n\t            return $.contains(parent, child) || parent == child;\n\t        } catch (e) {\n\t            return false;\n\t        }\n\t    }\n\n\t    ui.plugin(TileLayout);\n\n\t    $.extend(true, TileLayout, { styles: tileLayoutStyles });\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.tilelayout.js?')},"./node_modules/@progress/kendo-ui/js/kendo.timeline.js":
/*!**************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.timeline.js ***!
  \**************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1386);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\r\n\n\n/***/ }),\n\n/***/ 1027:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ "./node_modules/@progress/kendo-ui/js/kendo.data.js");\n\n/***/ }),\n\n/***/ 1072:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.fx */ "./node_modules/@progress/kendo-ui/js/kendo.fx.js");\n\n/***/ }),\n\n/***/ 1077:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.draganddrop */ "./node_modules/@progress/kendo-ui/js/kendo.draganddrop.js");\n\n/***/ }),\n\n/***/ 1386:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1072), __webpack_require__(1027), __webpack_require__(1077) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "timeline",\n\t    name: "Timeline",\n\t    category: "web",\n\t    description: "The Kendo Timeline widget display events over time",\n\t    depends: [ "userevents" ]\n\t};\n\n\t(function ($, undefined) {\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        Widget = ui.Widget,\n\t        DataSource = kendo.data.DataSource,\n\t        Transition = kendo.effects.Transition,\n\t        proxy = $.proxy,\n\t        isArray = $.isArray,\n\n\t        LEFT_PAGE = -1,\n\t        CETER_PAGE = 0,\n\t        RIGHT_PAGE = 1,\n\t        VERTICAL = "vertical",\n\t        TRANSITION_END = "transitionEnd",\n\t        VIRTUAL_PAGE_COUNT = 3,\n\t        VIRTUAL_PAGE_CLASS = "timeline-event",\n\t        FLAGWRAPCLASS = "k-timeline-flag-wrap",\n\t        TRACKITEMCLASS = "k-timeline-track-item",\n\t        SCROLLABLEWRAPCLASS = "k-timeline-scrollable-wrap",\n\t        NS = ".kendoTimeline",\n\t        CHANGE = "change",\n\t        DEFAULTHORIZONTALCARDTEMPLATE =\n\t        \'# var titleField = data.titleField, subtitleField = data.subtitleField, descriptionField = data.descriptionField, imagesField = data.imagesField, actionsField = data.actionsField, data = data.data; #\' +\n\t        \'<div class="k-card-header">\' +\n\t            \'# if(data[titleField]) { #\' +\n\t                \'<h5 class="k-card-title">#= data[titleField] #</h5>\' +\n\t            \'# }\' +\n\t            \'if(data[subtitleField]) { #\' +\n\t                \'<h6 class="k-card-subtitle">#= data[subtitleField] #</h6>\' +\n\t            \'# } #\' +\n\t        \'</div>\' +\n\t        \'<div class="k-card-body">\' +\n\t            \'<div class="k-card-description">\' +\n\t                \'# if(data[descriptionField]) { #\' +\n\t                    \'<p>#= data[descriptionField] #</p>\' +\n\t                \'# }\' +\n\t                \'if(data[imagesField] && data[imagesField].length > 0) { #\' +\n\t                    \'<img src="#= data[imagesField][0].src #" class="k-card-image" />\' +\n\t                \'# } #\' +\n\t            \'</div>\' +\n\t        \'</div>\' +\n\t        \'# if(data[actionsField] && data[actionsField].length > 0) { #\' +\n\t            \'<div class="k-card-actions">\' +\n\t                \'# for (var i = 0; i < data[actionsField].length; i++) { #\' +\n\t                    \'<a class="k-button k-flat k-primary" href="#= data[actionsField][i].url ? data[actionsField][i].url : "\\\\#" #">#= data[actionsField][i].text #</a>\' +\n\t                \'# } #\' +\n\t            \'</div>\' +\n\t        \'# } #\',\n\t        DEFAULTVERTICALCARDTEMPLATE =\n\t        \'# var titleField = data.titleField, subtitleField = data.subtitleField, descriptionField = data.descriptionField, imagesField = data.imagesField, actionsField = data.actionsField, data = data.data; #\' +\n\t        \'<div class="k-card-header">\' +\n\t            \'<h5 class="k-card-title">\' +\n\t                \'# if(data[titleField]) { #\' +\n\t                    \'<span class="k-event-title">#= data[titleField] #</span>\' +\n\t                \'# } #\' +\n\t            \'<span class="k-event-collapse k-button k-button-icon k-flat">\' +\n\t                \'<span class="k-icon k-i-arrow-chevron-right"></span>\' +\n\t            \'</span></h5>\'+\n\t            \'# if(data[subtitleField]) { #\' +\n\t                \'<h6 class="k-card-subtitle">#= data[subtitleField] #</h6>\' +\n\t            \'# } #\' +\n\t        \'</div>\' +\n\t        \'<div class="k-card-body">\' +\n\t            \'<div class="k-card-description">\' +\n\t                \'# if(data[descriptionField]) { #\' +\n\t                    \'<p>#= data[descriptionField] #</p>\' +\n\t                \'# } #\' +\n\t                \'# if(data[imagesField] && data[imagesField].length > 0) { #\' +\n\t                    \'<img src="#= data[imagesField][0].src #" class="k-card-image" />\' +\n\t                \'# } #\' +\n\t            \'</div>\' +\n\t        \'</div>\' +\n\t        \'# if(data[actionsField] && data[actionsField].length > 0) { #\' +\n\t            \'<div class="k-card-actions">\' +\n\t                \'# for (var i = 0; i < data[actionsField].length; i++) { #\' +\n\t                    \'<a class="k-button k-flat k-primary" href="#= data[actionsField][i].url ? data[actionsField][i].url : "\\\\#" #">#= data[actionsField][i].text #</a>\' +\n\t                \'# } #\' +\n\t            \'</div>\' +\n\t        \'# } #\',\n\t        HORIZONTALTRACKTEMPLATE =\n\t        \'# var itemTemplate = data.itemTemplate, dateField = data.dateField, dateFormat = data.dateFormat, showDateLabels = data.showDateLabels, data = data.data, year = 0; #\' +\n\t            \'# for (var i = 0; i < data.length; i++) {\' +\n\t                    \'if(!(data[i][dateField] instanceof Date)) {\' +\n\t                        \'continue;\' +\n\t                    \'}\' +\n\t                    \'var currentYear = data[i][dateField].getFullYear();\' +\n\t                    \'if(year != currentYear) {\' +\n\t                        \'year = currentYear; #\' +\n\t                        \'<li class="k-timeline-track-item k-timeline-flag-wrap">\' +\n\t                            \'<span class="k-timeline-flag">#= year #</span>\' +\n\t                        \'</li>\' +\n\t                    \'# } #\' +\n\t                    \'<li class="k-timeline-track-item">\' +\n\t                        \'<div class="k-timeline-date-wrap">\' +\n\t                            \'# if(showDateLabels) { #\' +\n\t                                \'<span class="k-timeline-date">#= kendo.toString(data[i][dateField], dateFormat) #</span>\' +\n\t                            \'# } #\' +\n\t                        \'</div>\' +\n\t                        \'<a class="k-timeline-circle"></a>\' +\n\t                    \'</li>\' +\n\t            \'# } #\',\n\t        VERTICALEVENTSTEMPLATE =\n\t        \'# var itemTemplate = data.itemTemplate, dateField = data.dateField, titleField = data.titleField, descriptionField = data.descriptionField, subtitleField = data.subtitleField, imagesField = data.imagesField, actionsField = data.actionsField, alterMode = data.alterMode, collapsibleEvents = data.collapsibleEvents, dateFormat = data.dateFormat, showDateLabels = data.showDateLabels, data = data.data, counter = 0, year = 0, reverse = false;\' +\n\t            \'for (var i = 0; i < data.length; i++) {\' +\n\t                \'if(!(data[i][dateField] instanceof Date)) {\' +\n\t                    \'continue;\' +\n\t                \'}\' +\n\t                \'var currentYear = data[i][dateField].getFullYear();\' +\n\t                \'if(currentYear != year) {\' +\n\t                    \'year = currentYear; #\' +\n\t                    \'<li class="k-timeline-flag-wrap">\' +\n\t                        \'<span class="k-timeline-flag">#= year #</span>\' +\n\t                    \'</li>\' +\n\t                \'# } \' +\n\t                \'reverse = counter % 2 === 0 && alterMode; #\' +\n\t            \'<li class="#= reverse ? \\\'k-timeline-event k-reverse\\\' : \\\'k-timeline-event\\\' #" data-uid="#: data[i].uid #">\' +\n\t                \'# if(showDateLabels) { #\' +\n\t                    \'<div class="k-timeline-date-wrap">\' +\n\t                        \'<span class="k-timeline-date">#= kendo.toString(data[i][dateField], dateFormat) #</span>\' +\n\t                    \'</div>\' +\n\t                \'# } #\' +\n\t                \'<a class="k-timeline-circle"></a>\' +\n\t                \'<div class="#= collapsibleEvents ? \\\'k-timeline-card k-collapsed\\\' : \\\'k-timeline-card\\\' #">\' +\n\t                    \'<div class="k-card">\' +\n\t                        \'<span class="#= reverse ? \\\'k-timeline-card-callout k-card-callout k-callout-e\\\' : \\\'k-timeline-card-callout k-card-callout k-callout-w\\\' #"></span>\' +\n\t                        \'#= itemTemplate({titleField: titleField, subtitleField: subtitleField, descriptionField: descriptionField, imagesField: imagesField, actionsField: actionsField, data: data[i]}) #\' +\n\t                    \'</div>\' +\n\n\t                \'</div>\' +\n\t            \'</li>\' +\n\t            \'# counter ++;\' +\n\t        \'} #\',\n\t        ARROWSHTML =\n\t        \'<a class="k-button k-timeline-arrow k-timeline-arrow-left k-state-disabled" title="previous">\' +\n\t            \'<span class="k-icon k-i-arrow-60-left"></span>\' +\n\t        \'</a>\' +\n\t        \'<a class="k-button k-timeline-arrow k-timeline-arrow-right k-state-disabled" title="next">\' +\n\t            \'<span class="k-icon k-i-arrow-60-right"></span>\' +\n\t        \'</a>\';\n\n\t        function className(name) {\n\t            return "k-" + name;\n\t        }\n\n\t        function calculateTransform(element) {\n\t            var matrix = element.css(\'transform\');\n\t            var x;\n\t            var values;\n\n\t            if(matrix != "none") {\n\t                values = matrix.match(/-?[\\d\\.]+/g);\n\t                x = values[4];\n\t                return (x / element.width() * 100);\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\n\t        function calculateOffset(element, parentElement) {\n\t            return element.offset().left - parentElement.offset().left + element.width() / 2;\n\t        }\n\n\t        function applyCssStyles(element, property, value) {\n\t            element.css(property, value);\n\t        }\n\n\t        var Page = kendo.Class.extend({\n\t            init: function(container) {\n\t                this.cardContainer = $("<div class=\'k-card\' />");\n\t                var cardWrapper = $("<div class=\'k-timeline-card\'></div>").append(this.cardContainer);\n\n\t                this.element = $("<li class=\'" + className(VIRTUAL_PAGE_CLASS) + "\'></li>").append(cardWrapper);\n\t                container.append(this.element);\n\t            },\n\n\t            content: function(htmlContent, uid) {\n\t                var callOut = $("<span class=\'k-timeline-card-callout k-card-callout k-callout-n\'></span>");\n\t                this.cardContainer.html(htmlContent);\n\t                this.cardContainer.append(callOut);\n\t                this.element.attr("data-uid", uid);\n\t            },\n\n\t            position: function(position) { //position can be -1, 0, 1\n\t                this.element.css("transform", "translate3d(" + this.element.width() * position + "px, 0, 0)");\n\t            },\n\n\t            setPageCallout: function(propery, value) {\n\t                var element = this.element;\n\t                var callOutElement = element.find(".k-timeline-card-callout");\n\t                callOutElement.css(propery, value);\n\t            },\n\n\t            destroy: function() {\n\t                var that = this;\n\n\t                that.cardContainer = null;\n\t                that.element.remove();\n\t                that.element = null;\n\t            }\n\t        });\n\n\t        var HorizontalPane = kendo.Observable.extend({\n\t            init: function(element, options) {\n\t                var that = this;\n\n\t                kendo.Observable.fn.init.call(this);\n\n\t                this.element = element;\n\n\t                var movable,\n\t                    transition,\n\t                    pages;\n\n\t                movable = new kendo.ui.Movable(that.element);\n\n\t                transition = new Transition({\n\t                    axis: "x",\n\t                    movable: movable,\n\t                    onEnd: function() {\n\t                        that.trigger(TRANSITION_END);\n\t                    }\n\t                });\n\n\t                pages = [];\n\n\t                $.extend(that, {\n\t                    duration: options && options.duration || 1,\n\t                    movable: movable,\n\t                    transition: transition,\n\t                    pages: pages,\n\t                    eventTemplate: options.eventTemplate,\n\t                    eventHeight: options.eventHeight,\n\t                    dataFieldMappings: options.dataFieldMappings\n\t                });\n\n\t                this.bind([TRANSITION_END], options);\n\t            },\n\n\t            initPages: function() {\n\t                var pages = this.pages,\n\t                element = this.element,\n\t                page;\n\n\t                for (var i = 0; i < VIRTUAL_PAGE_COUNT; i++) {\n\t                    page = new Page(element);\n\t                    pages.push(page);\n\t                }\n\t            },\n\n\t            repositionPages: function() {\n\t                var pages = this.pages;\n\n\t                pages[0].position(LEFT_PAGE);\n\t                pages[1].position(CETER_PAGE);\n\t                pages[2].position(RIGHT_PAGE);\n\t            },\n\n\t            setPageContent: function(page, data) {\n\t                var template = typeof this.eventTemplate === Function ? this.eventTemplate : kendo.template(this.eventTemplate);\n\t                var dataFieldMappings = this.dataFieldMappings;\n\t                var html;\n\n\t                html = template({\n\t                    data: data,\n\t                    titleField: dataFieldMappings.title,\n\t                    subtitleField: dataFieldMappings.subtitle,\n\t                    descriptionField: dataFieldMappings.description,\n\t                    imagesField: dataFieldMappings.images,\n\t                    actionsField: dataFieldMappings.actions\n\t                });\n\n\t                page.content(html, data.uid);\n\t            },\n\t            updatePage: function(isForward, data, calloutOffset) {\n\t                var pages = this.pages;\n\t                var page = isForward === null ? pages[1] : isForward ? pages[pages.length - 1] : pages[0];\n\n\t                this.setPageContent(page, data);\n\t                page.setPageCallout("left", (calloutOffset / page.element.width()) * 100 + "%");\n\t            },\n\n\t            moveTo: function(offset) {\n\t                this.movable.moveAxis("x", -offset);\n\t            },\n\n\t            transitionTo: function(offset, ease) {\n\t                this.transition.moveTo({ location: offset, duration: this.duration, ease: ease });\n\t            },\n\t            destroy: function() {\n\t                var that = this;\n\n\t                for (var index = 0; index < that.pages.length; index++) {\n\t                    that.pages[index].destroy();\n\t                }\n\n\t                that.unbind();\n\n\t                that.movable =\n\t                that.transition =\n\t                that.dataFieldMappings =\n\t                that.eventTemplate =\n\t                that.duration =\n\t                that.pages = null;\n\t            }\n\t        });\n\n\t        var Timeline = kendo.ui.Widget.extend({\n\t            init: function(element, options) {\n\t                var that = this;\n\t                var orientation = options.orientation || that.options.orientation;\n\n\t                Widget.fn.init.call(this, element, options);\n\n\t                this.element.addClass(orientation === VERTICAL ? "k-timeline k-widget k-timeline-vertical": "k-timeline k-widget k-timeline-horizontal");\n\n\t                if(orientation != VERTICAL) {\n\t                    that._horizontal();\n\t                } else {\n\t                    that._vertical();\n\t                }\n\n\t                this.element.on("click", ".k-card-actions", function() {\n\t                    var action = $(event.target);\n\t                    var dataItemUid = $(event.target).closest(".k-timeline-event").data("uid");\n\t                    var dataItem = that.dataSource.getByUid(dataItemUid);\n\n\t                    that.trigger("actionClick", { sender: that, element: action, dataItem: dataItem});\n\t                });\n\n\t                that.currentEventIndex = 0;\n\t                that._forward  = null;\n\t                that._eventPage = 1;\n\t                that._currentIndex = 0;\n\t                that._firstIndexInView = 0;\n\n\t                that._initDataFieldMappings();\n\n\t                that.setDataSource(options.dataSource);\n\t            },\n\n\t            _horizontal: function() {\n\t                var that = this;\n\t                var element = this.element;\n\t                var options = this.options;\n\n\t                var trackWrap = $("<div />");\n\t                var trackEl = $("<div />");\n\t                var scrollableWrap = $("<ul />");\n\t                var eventsWrap = $("<div />");\n\t                var eventsList = $("<ul />");\n\n\t                that._trackWrap = trackWrap;\n\t                that._trackEl = trackEl;\n\t                that._scrollableWrap = scrollableWrap;\n\t                that._eventsWrap = eventsWrap;\n\t                that._eventsList = eventsList;\n\n\t                trackWrap.addClass("k-timeline-track-wrap");\n\t                trackEl.addClass("k-timeline-track");\n\t                scrollableWrap.addClass("k-timeline-scrollable-wrap");\n\t                eventsWrap.addClass("k-timeline-events-list");\n\t                eventsList.addClass("k-timeline-scrollable-wrap");\n\n\t                if(options.eventHeight) {\n\t                    eventsList.height(options.eventHeight);\n\t                }\n\n\t                trackEl.append(scrollableWrap);\n\t                trackWrap.append(ARROWSHTML);\n\t                trackWrap.append(trackEl);\n\t                eventsWrap.append(eventsList);\n\n\t                trackWrap.appendTo(element);\n\t                eventsWrap.appendTo(element);\n\t            },\n\n\t            _vertical: function() {\n\t                var that = this;\n\t                var options = this.options;\n\t                var element = this.element;\n\t                var eventsList = that._eventsList = $("<ul />");\n\n\t                that.element.append(eventsList);\n\n\t                if(options.alternatingMode) {\n\t                    element.addClass("k-timeline-alternating");\n\t                }\n\n\t                if(options.collapsibleEvents) {\n\t                    element.addClass("k-timeline-collapsible");\n\n\t                    this.element.on("click", ".k-card-header", function() {\n\t                        var card = $(this).closest(".k-timeline-card");\n\t                        var cardBody = card.find(".k-card-body");\n\t                        var dataItem = that.dataSource.getByUid(card.closest("li").data("uid"));\n\n\t                        if(card.hasClass("k-collapsed")) {\n\t                            if (!that.trigger("expand", {sender: that, dataItem: dataItem})) {\n\t                                kendo.fx(cardBody).expand("vertical").stop().play();\n\t                                card.toggleClass("k-collapsed");\n\t                            }\n\t                        } else {\n\t                            if (!that.trigger("collapse", {sender: that, dataItem: dataItem})) {\n\t                                kendo.fx(cardBody).expand("vertical").stop().reverse();\n\t                                card.toggleClass("k-collapsed");\n\t                            }\n\t                        }\n\t                    });\n\t                }\n\t            },\n\n\t            _renderContentVertical: function(data) {\n\t                var that = this;\n\t                var options = that.options;\n\t                var html;\n\t                var itemTemplate;\n\n\t                if(typeof options.eventTemplate === Function) {\n\t                    itemTemplate = options.eventTemplate;\n\t                } else {\n\t                    itemTemplate = options.eventTemplate ? kendo.template(options.eventTemplate) : kendo.template(DEFAULTVERTICALCARDTEMPLATE, { useWithBlock: false });\n\t                }\n\n\t                var template = kendo.template(VERTICALEVENTSTEMPLATE, { useWithBlock: false });\n\n\t                html = template({\n\t                    data: data,\n\t                    dateField: options.dataDateField,\n\t                    titleField: options.dataTitleField,\n\t                    subtitleField: options.dataSubtitleField,\n\t                    descriptionField: options.dataDescriptionField,\n\t                    imagesField: options.dataImagesField,\n\t                    actionsField: options.dataActionsField,\n\t                    itemTemplate: itemTemplate,\n\t                    alterMode: options.alternatingMode,\n\t                    collapsibleEvents: options.collapsibleEvents,\n\t                    dateFormat: options.dateFormat,\n\t                    showDateLabels: options.showDateLabels\n\t                });\n\n\t                this._eventsList.html(html);\n\n\t                if(options.eventWidth) {\n\t                    that.element.find(".k-card").width(options.eventWidth);\n\t                }\n\t            },\n\n\t            _renderContentHorizontal: function(data) {\n\t                var that = this;\n\t                var options = that.options;\n\t                var html;\n\t                var itemTemplate;\n\t                var dataFieldMappings = that._dataFieldMappings;\n\n\t                if(typeof options.eventTemplate === Function) {\n\t                    itemTemplate = options.eventTemplate;\n\t                } else {\n\t                    itemTemplate = options.eventTemplate ? kendo.template(options.eventTemplate) : kendo.template(DEFAULTHORIZONTALCARDTEMPLATE, { useWithBlock: false });\n\t                }\n\n\t                var trackTemplate = kendo.template(HORIZONTALTRACKTEMPLATE, { useWithBlock: false });\n\n\t                html = trackTemplate({data: data, itemTemplate: itemTemplate, dateFormat: options.dateFormat, dateField: options.dataDateField, showDateLabels: options.showDateLabels});\n\n\t                if(options.initialEventIndex) {\n\t                    that._trackWrap.append($(html).find(".k-timeline-scrollable-wrap").css("transform", "translateX(-100%)").parent());\n\t                } else {\n\t                    that._scrollableWrap.html(html);\n\t                }\n\n\t                if(that.pane) {\n\t                    that.pane.destroy();\n\t                }\n\n\t                that.pane = new HorizontalPane(that._eventsList, {\n\t                    transitionEnd: proxy(this, "_transitionEnd"),\n\t                    eventTemplate: itemTemplate,\n\t                    dataFieldMappings: dataFieldMappings,\n\t                    eventHeight: options.eventHeight\n\t                });\n\t            },\n\n\t            _initDataFieldMappings: function() {\n\t                var that = this;\n\t                var options = that.options;\n\n\t                that._dataFieldMappings = {\n\t                    "title": options.dataTitleField,\n\t                    "subtitle": options.dataSubtitleField,\n\t                    "date": options.dataDateField,\n\t                    "description": options.dataDescriptionField,\n\t                    "images": options.dataImagesField,\n\t                    "actions": options.dataActionsField\n\t                };\n\t            },\n\n\t            _transitionEnd: function() {\n\t                if(this._forward) {\n\t                    this.pane.pages.push(this.pane.pages.shift());//forward\n\t                } else {\n\t                    this.pane.pages.unshift(this.pane.pages.pop());//back\n\t                }\n\n\t                this._forward = null;\n\n\t                this.pane.repositionPages();\n\t                this.pane.movable.moveAxis("x", 0);\n\t                this._animationInProgress = false;\n\t            },\n\n\t            _setCurrentEvent: function(event) {\n\t                var that = this;\n\t                var trackItem = $(event.currentTarget);\n\t                var eventContainer;\n\t                var dataItem = that.dataSource.view()[trackItem.index("li[class=\'k-timeline-track-item\']")];\n\n\t                eventContainer = that._forward ? that.pane.pages[2].element : that.pane.pages[0].element;\n\n\t                if(!that.trigger("change", { eventContainer: eventContainer, dataItem: dataItem})) {\n\t                    that.open(trackItem);\n\t                }\n\t            },\n\n\t            open: function(element) {\n\t                var that = this;\n\n\t                var trackItem = $(element);\n\t                var trackItemCircle = trackItem.find(".k-timeline-circle");\n\t                var itemIndex = trackItem.index("li[class=\'k-timeline-track-item\']");\n\t                var forward;\n\n\n\t                var dataItem = that.dataSource.view()[itemIndex];\n\n\t                if(that.currentEventIndex === itemIndex) {\n\t                    return;\n\t                }\n\n\t                that._currentIndex = trackItem.index();\n\t                forward = that._forward = that.currentEventIndex < itemIndex;\n\t                that.currentEventIndex = itemIndex;\n\n\t                that.pane.updatePage(forward, dataItem, calculateOffset(trackItemCircle, that._trackWrap));\n\n\t                if(that._forward) {\n\t                    clearTimeout(that.navigateTimeOut);\n\t                    that.navigateTimeOut = setTimeout(function(){\n\t                        that.pane.transition.moveTo({ location: -that.pane.pages[2].element.width(), duration: 800, ease: Transition.easeOutExpo });\n\t                    }, 200);\n\n\t                } else {\n\t                    clearTimeout(that.navigateTimeOut);\n\t                    that.navigateTimeOut = setTimeout(function(){\n\t                        that.pane.transition.moveTo({ location: that.pane.pages[0].element.width(), duration: 800, ease: Transition.easeOutExpo });\n\t                    }, 200);\n\t                }\n\n\t                that._repositionEvents();\n\t            },\n\n\t            _navigateToView: function(event) {\n\t                var that = this;\n\t                var delta = $(event.currentTarget).hasClass("k-timeline-arrow-right") ? 1 : -1;\n\n\t                if(!that.trigger("navigate", {sender: that, action: delta > 0 ? "next": "previous"}) && !that._animationInProgress) {\n\t                    that._animationInProgress = true;\n\n\t                    if(delta > 0) {\n\t                        that.next();\n\t                    } else {\n\t                        that.previous();\n\t                    }\n\t                    that._updateArrows();\n\t                }\n\t            },\n\n\t            _updateArrows: function() {\n\t                var that = this;\n\t                var arrows = that.element.find(".k-timeline-arrow");\n\n\n\t                if(that._validateNavigation(false)) {\n\t                    arrows.filter(".k-timeline-arrow-left").addClass("k-state-disabled");\n\t                } else {\n\t                    arrows.filter(".k-timeline-arrow-left").removeClass("k-state-disabled");\n\t                }\n\n\t                if(that._validateNavigation(true)) {\n\t                    arrows.filter(".k-timeline-arrow-right").addClass("k-state-disabled");\n\t                } else {\n\t                    arrows.filter(".k-timeline-arrow-right").removeClass("k-state-disabled");\n\t                }\n\t            },\n\n\t            _validateNavigation: function(next) {\n\t                var that = this;\n\t                var transform = that._end || 0;\n\n\t                if(next) {\n\t                    return that._firstIndexInView + that.numOfEvents >= that.maxEvents;\n\t                } else {\n\t                    return Math.abs(transform) <= 1;\n\t                }\n\t            },\n\n\t            next: function() {\n\t                var that = this;\n\t                var options = that.options;\n\n\t                if(!that._validateNavigation(true) && options.orientation != VERTICAL) {\n\t                    that._forward = true;\n\t                    that._navigate();\n\t                }\n\n\t                that._updateArrows();\n\t            },\n\n\t            _navigate: function() {\n\t                var that = this;\n\t                var firstEventInViewIndex;\n\t                var firstEventInView;\n\t                var dataItem;\n\t                var width;\n\t                var forward = that._forward;\n\t                var end = calculateTransform(this._trackWrap.find("." + SCROLLABLEWRAPCLASS));\n\t                var leftOffset = forward ? - $("." + SCROLLABLEWRAPCLASS).width() : $("." + SCROLLABLEWRAPCLASS).width();\n\t                var currentIndex = that._currentIndex;\n\t                var currentPage;\n\t                var firstIndexInView = that._firstIndexInView;\n\n\t                end = forward ? end - 100 : end + 100;\n\n\t                if(end >= 0) {\n\t                    end = 0;\n\t                }\n\n\t                that._end = end;\n\n\t                width = that._tackItemWidth;\n\n\t                currentPage = Math.floor(currentIndex / that.numOfEvents);\n\n\t                if(forward) {\n\t                    if(that.numOfEvents === 1) {\n\t                        firstEventInViewIndex =  firstIndexInView  === 0 ? 1 : firstIndexInView;\n\t                        firstEventInView = this._trackWrap.find("." + TRACKITEMCLASS).eq(firstEventInViewIndex).nextAll(":not(." + FLAGWRAPCLASS + ")").first();\n\t                        that._firstIndexInView = firstEventInView.index();\n\t                    } else {\n\t                        firstEventInViewIndex = firstIndexInView + that.numOfEvents - 1;\n\t                        firstEventInView = this._trackWrap.find("." + TRACKITEMCLASS).eq(firstEventInViewIndex).nextAll(":not(." + FLAGWRAPCLASS + ")").first();\n\t                        that._firstIndexInView = firstIndexInView + that.numOfEvents;\n\t                    }\n\t                } else {\n\t                    if(that.numOfEvents === 1) {\n\t                        firstEventInViewIndex =  firstIndexInView;\n\t                        firstEventInView = this._trackWrap.find("." + TRACKITEMCLASS).eq(firstEventInViewIndex).prevAll(":not(." + FLAGWRAPCLASS + ")").first();\n\t                        that._firstIndexInView = firstEventInView.index();\n\t                    } else {\n\t                        firstEventInViewIndex = firstIndexInView;\n\t                        firstEventInView = this._trackWrap.find("." + TRACKITEMCLASS).eq(firstEventInViewIndex).prevAll(":not(." + FLAGWRAPCLASS + ")").first();\n\t                        firstEventInView = firstEventInView.length > 0 ? firstEventInView : this._trackWrap.find("." + TRACKITEMCLASS + ":not(." + FLAGWRAPCLASS + ")").first();\n\t                        that._firstIndexInView = firstIndexInView - that.numOfEvents < 0 ? 0 : firstIndexInView - that.numOfEvents;\n\t                    }\n\t                }\n\n\t                dataItem = that.dataSource.view()[firstEventInView.index("li[class=\'k-timeline-track-item\']")];\n\n\t                this._trackWrap.find("." + SCROLLABLEWRAPCLASS).css("transform",  "translateX(" + end + "%)");\n\n\t                if(that._currentIndex != firstEventInView.index()) {\n\t                    that.currentEventIndex = firstEventInView.index("li[class=\'k-timeline-track-item\']");\n\n\t                    that._currentIndex = firstEventInView.index();\n\n\t                    that.pane.updatePage(that._forward, dataItem, (currentPage === 0 && !forward ? firstEventInView.find(".k-timeline-circle").offset().left + 15 : calculateOffset(firstEventInView.find(".k-timeline-circle"), that._trackWrap) + leftOffset));\n\n\t                    clearTimeout(that.navigateTimeOut);\n\n\t                    that.navigateTimeOut = setTimeout(function() {\n\t                        if(forward && that.pane && that.pane.pages.length > 0) {\n\t                            that.pane.transition.moveTo({ location: - that.pane.pages[2].element.width(), duration: 800, ease: Transition.easeOutExpo });\n\t                        } else {\n\t                            that.pane.transition.moveTo({ location: that.pane.pages[0].element.width(), duration: 800, ease: Transition.easeOutExpo });\n\t                        }\n\t                    }, 200);\n\t                } else {\n\t                    var scrollWrapElement = this._trackWrap.find("." + SCROLLABLEWRAPCLASS);\n\t                    var transitionEndHandler = function() {\n\t                        if(that.numOfEvents != 1) {\n\t                            var page = that.pane.pages[1];\n\t                            var calloutOffset = calculateOffset(firstEventInView.find(".k-timeline-circle"), that._trackWrap);\n\t                            page.setPageCallout("left", (calloutOffset / page.element.width()) * 100 + "%");\n\t                        }\n\t                        scrollWrapElement.off(\'transitionend\' + NS, transitionEndHandler);\n\t                    };\n\t                    scrollWrapElement.on(\'transitionend\' + NS, transitionEndHandler);\n\t                }\n\t            },\n\n\t            previous: function() {\n\t                var that = this;\n\t                var options = that.options;\n\n\t                if(!that._validateNavigation(false) && options.orientation != VERTICAL) {\n\t                    that._forward = false;\n\t                    that._navigate();\n\t                }\n\n\t                that._updateArrows();\n\t            },\n\n\t            expand: function(event) {\n\t                var cardWrapper = $(event).find(".k-timeline-card");\n\t                var cardBody = $(event).find(".k-card-body");\n\n\t                if(cardWrapper.hasClass("k-collapsed")) {\n\t                    kendo.fx(cardBody).expand("vertical").stop().play();\n\t                    cardWrapper.removeClass(\'k-collapsed\');\n\t                }\n\t            },\n\n\t            collapse: function(event) {\n\t                var cardWrapper = $(event).find(".k-timeline-card");\n\t                var cardBody = $(event).find(".k-card-body");\n\n\t                if(!cardWrapper.hasClass("k-collapsed")) {\n\t                    kendo.fx(cardBody).expand("vertical").stop().reverse();\n\t                    cardWrapper.addClass("k-collapsed");\n\t                }\n\t            },\n\n\t            items: function() {\n\t                return this.element.find("li[data-uid]");\n\t            },\n\n\t            _resizeHandler: function() {\n\t                var that = this;\n\t                clearTimeout(that.resizeTimeOut);\n\t                that.resizeTimeOut = setTimeout(function(){\n\t                    that._redrawEvents();\n\t                    that.pane.repositionPages();\n\t                });\n\t            },\n\n\t            redraw: function() {\n\t                var options = this.options;\n\t                if(options.orientation != VERTICAL) {\n\t                    this._redrawEvents();\n\t                    this.pane.repositionPages();\n\t                }\n\t            },\n\n\t            _redrawEvents: function() {\n\t                var that = this;\n\t                var numOfEvents = Math.floor(that.element.find(".k-timeline-scrollable-wrap").width() / 150);\n\t                var width;\n\n\t                if(that.element.width() <= 480) {\n\t                    that.element.addClass("k-timeline-mobile");\n\t                    width = 100;\n\t                    that.numOfEvents = 1;\n\t                    that._tackItemWidth = width;\n\t                    that.element.find("li.k-timeline-track-item").css("flex", "1 0 " + width + "%");\n\t                    that._repositionEvents();\n\t                } else {\n\t                    that.element.removeClass("k-timeline-mobile");\n\t                    if(numOfEvents != that.numOfEvents) {\n\t                        that.numOfEvents = numOfEvents;\n\t                        width = 100 / numOfEvents;\n\t                        applyCssStyles(that.element.find("li.k-timeline-track-item"), "flex", "1 0 " + width + "%");\n\t                        that._tackItemWidth = width;\n\t                        that._repositionEvents();\n\t                    }\n\t                }\n\n\t                that._updateArrows();\n\t            },\n\n\t            _repositionEvents: function() {\n\t                var that = this;\n\t                var width = that._tackItemWidth;\n\t                var page = that._forward === null ? that.pane.pages[1] : that._forward ? that.pane.pages[2] : that.pane.pages[0];\n\t                var trackWrapScrollableElement = this._trackWrap.find("." + SCROLLABLEWRAPCLASS);\n\t                var end = calculateTransform(trackWrapScrollableElement);\n\t                var calloutOffset;\n\t                var offset;\n\t                var leftOffset;\n\t                var circleElement;\n\n\t                if(that.numOfEvents === 1) {\n\t                    offset = that.currentEventIndex * width;\n\t                } else {\n\t                    offset = that._currentIndex * width;\n\t                }\n\t                if(page) {\n\t                    if(that.numOfEvents === 1) {\n\t                        page.setPageCallout("left", "50%");\n\t                        leftOffset = offset;\n\t                        applyCssStyles(trackWrapScrollableElement, "transform", "translateX(-" + leftOffset + "%)");\n\t                        that._firstIndexInView = that._currentIndex;\n\t                        that._updateArrows();\n\t                        return;\n\t                    }\n\t                    if(offset >= Math.abs(end) + 100) {\n\t                        leftOffset = Math.abs(end) + ((offset - (Math.abs(end) + 100)) + width);\n\t                        that._end = -leftOffset;\n\t                        applyCssStyles(trackWrapScrollableElement, "transform", "translateX(-" + leftOffset + "%)");\n\t                        that._firstIndexInView = that._currentIndex - that.numOfEvents + 1;\n\t                    }\n\t                    else if(offset <= Math.abs(end)) {\n\t                        leftOffset = offset;\n\t                        that._end = -leftOffset;\n\t                        applyCssStyles(trackWrapScrollableElement, "transform", "translateX(-" + leftOffset + "%)");\n\t                        that._firstIndexInView = that._currentIndex;\n\t                    } else {\n\t                        circleElement = trackWrapScrollableElement.find("li.k-timeline-track-item").eq(that._currentIndex).find(".k-timeline-circle");\n\t                        calloutOffset = calculateOffset(circleElement, that._trackWrap);\n\t                        page.setPageCallout("left", (calloutOffset / page.element.width()) * 100 + "%");\n\t                        that._firstIndexInView = Math.round(Math.abs(end) / width);\n\t                    }\n\t                    var scrollWrapElement = this._trackWrap.find("." + SCROLLABLEWRAPCLASS);\n\t                    var transitionEndHandler = function() {\n\t                        if(that.numOfEvents != 1) {\n\t                            var page = that.pane.pages[1];\n\t                            var eventElement = that._trackWrap.find("." + TRACKITEMCLASS).eq(that._currentIndex);\n\t                            var calloutOffset = calculateOffset(eventElement.find(".k-timeline-circle"), that._trackWrap);\n\t                            page.setPageCallout("left", (calloutOffset / page.element.width()) * 100 + "%");\n\t                        }\n\t                        scrollWrapElement.off(\'transitionend\' + NS, transitionEndHandler);\n\t                    };\n\t                    scrollWrapElement.on(\'transitionend\' + NS, transitionEndHandler);\n\t                }\n\n\t                that._updateArrows();\n\t            },\n\n\t            _initHorizontal: function() {\n\t                var that = this;\n\t                var firstEventElement = that._trackWrap.find(".k-timeline-circle").first();\n\t                var dataItem = that.dataSource.view()[0];\n\n\t                that.maxEvents = that._trackWrap.find(".k-timeline-track-item").length;\n\n\t                that._currentIndex = 1;\n\n\t                that.pane.initPages();\n\n\t                that.pane.repositionPages();\n\n\t                that.pane.updatePage(that._forward, dataItem, calculateOffset(firstEventElement, that._trackWrap));\n\n\t                that._updateArrows();\n\n\t                $(window).on("resize" + NS, proxy(this, "_resizeHandler"));\n\t                that._trackWrap.on("click", ".k-timeline-track-item:not(.k-timeline-flag-wrap)", proxy(this, "_setCurrentEvent"));\n\t                that._trackWrap.on("click", ".k-timeline-arrow:not(.k-state-disabled)", proxy(this, "_navigateToView"));\n\t            },\n\n\t            setDataSource: function(dataSource) {\n\t                var that = this;\n\t                var options = that.options;\n\n\t                dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n\t                if (that.dataSource && that._refresh) {\n\t                    that.dataSource.unbind(CHANGE, that._refresh);\n\t                } else {\n\t                    this._refresh = proxy(that, "refresh");\n\t                }\n\n\t                this.dataSource = DataSource.create(dataSource);\n\t                if(this.dataSource._sort === undefined) {\n\t                    this.dataSource._sort = [{field: options.dataDateField, dir: "asc"}];\n\t                }\n\n\t                that.dataSource.bind(CHANGE, that._refresh);\n\n\t                if (options.autoBind) {\n\t                    this.dataSource.fetch();\n\t                }\n\t            },\n\n\t            refresh: function() {\n\t                var that = this;\n\t                var options = that.options;\n\n\t                var data = this.dataSource.view();\n\n\t                if(options.orientation != VERTICAL) {\n\t                    that._trackWrap.empty().remove();\n\t                    that.element.find(\'.k-timeline-events-list\').remove();\n\t                    that._horizontal();\n\t                }\n\n\t                that.currentEventIndex = 0;\n\t                that._forward  = null;\n\t                that._eventPage = 1;\n\t                that._currentIndex = 0;\n\t                that._firstIndexInView = 0;\n\t                that.numOfEvents = null;\n\t                that._end = 0;\n\n\t                that._initDataFieldMappings();\n\n\t                if(data.length){\n\t                    if(options.orientation === "horizontal") {\n\t                        that._renderContentHorizontal(data);\n\t                        that._redrawEvents();\n\t                        that._initHorizontal();\n\n\t                    } else {\n\t                        that._renderContentVertical(data);\n\t                    }\n\t                }\n\n\t                that.trigger("dataBound", {sender: that});\n\t            },\n\n\t            destroy: function() {\n\t                var options = this.options;\n\n\t                Widget.fn.destroy.call(this);\n\n\t                if(this.resizeTimeOut) {\n\t                    clearTimeout(this.resizeTimeOut);\n\t                }\n\n\t                if(this.navigateTimeOut) {\n\t                    clearTimeout(this.navigateTimeOut);\n\t                }\n\n\t                $(window).off("resize" + NS, this._resizeHandler);\n\n\t                this.element.off();\n\n\t                if(options.orientation != VERTICAL) {\n\t                    this.pane.destroy();\n\n\t                    this._trackWrap.find("." + SCROLLABLEWRAPCLASS).off();\n\t                    this._trackWrap.off();\n\n\t                    this.currentEventIndex =\n\t                    this.maxEvents =\n\t                    this.numOfEvents =\n\t                    this._currentIndex =\n\t                    this._eventPage =\n\t                    this._eventsList =\n\t                    this._eventsWrap =\n\t                    this.element =\n\t                    this._trackWrap =\n\t                    this.pane = null;\n\t                }\n\n\t                kendo.destroy(this.element);\n\n\t                this._dataFieldMappings = this.element = null;\n\t            },\n\n\t            options: {\n\t                autoBind: true,\n\t                name: "Timeline",\n\t                orientation: "vertical",\n\t                dateFormat: "MMM d, yyyy",\n\t                showDateLabels: true,\n\t                collapsibleEvents: false,\n\t                alternatingMode: false,\n\t                dataTitleField: "title",\n\t                dataDateField: "date",\n\t                dataSubtitleField: "subtitle",\n\t                dataDescriptionField: "description",\n\t                dataImagesField: "images",\n\t                dataActionsField: "actions"\n\t            },\n\n\t            events: [\n\t                "collapse",\n\t                "dataBound",\n\t                "expand",\n\t                "actionClick",\n\t                "change",\n\t                "navigate"\n\t            ]\n\t        });\n\t    kendo.ui.plugin(Timeline);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.timeline.js?')}}]);