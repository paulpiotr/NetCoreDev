(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{"./node_modules/@progress/kendo-ui/js/kendo.notification.js":
/*!******************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.notification.js ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1292);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1054:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.popup */ "./node_modules/@progress/kendo-ui/js/kendo.popup.js");\n\n/***/ }),\n\n/***/ 1292:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018), __webpack_require__(1054) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "notification",\n\t    name: "Notification",\n\t    category: "web",\n\t    description: "The Notification widget displays user alerts.",\n\t    depends: [ "core", "popup" ],\n\t    features: [ {\n\t        id: "notification-fx",\n\t        name: "Animation",\n\t        description: "Support for animation",\n\t        depends: [ "fx" ]\n\t    } ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        Widget = kendo.ui.Widget,\n\t        proxy = $.proxy,\n\t        extend = $.extend,\n\t        setTimeout = window.setTimeout,\n\t        CLICK = "click",\n\t        SHOW = "show",\n\t        HIDE = "hide",\n\t        KNOTIFICATION = "k-notification",\n\t        KICLOSE = ".k-notification-wrap .k-i-close",\n\t        KHIDING = "k-hiding",\n\t        INFO = "info",\n\t        SUCCESS = "success",\n\t        WARNING = "warning",\n\t        ERROR = "error",\n\t        TOP = "top",\n\t        LEFT = "left",\n\t        BOTTOM = "bottom",\n\t        RIGHT = "right",\n\t        UP = "up",\n\t        NS = ".kendoNotification",\n\t        WRAPPER = \'<div class="k-widget k-popup k-notification"></div>\',\n\t        TEMPLATE = \'<div class="k-notification-wrap">\' +\n\t                \'<span class="k-icon k-i-#=typeIcon#" title="#=typeIcon#"></span>\' +\n\t                \'<div class="k-notification-content">#=content#</div>\' +\n\t                \'<span class="k-icon k-i-close" title="Hide"></span>\' +\n\t            \'</div>\',\n\t        SAFE_TEMPLATE = TEMPLATE.replace("#=content#", "#:content#");\n\n\t    var Notification = Widget.extend({\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            Widget.fn.init.call(that, element, options);\n\n\t            options = that.options;\n\n\t            if (!options.appendTo || !$(options.appendTo).is(element)) {\n\t                that.element.hide();\n\t            }\n\n\t            that._compileTemplates(options.templates);\n\t            that._guid = "_" + kendo.guid();\n\t            that._isRtl = kendo.support.isRtl(element);\n\t            that._compileStacking(options.stacking, options.position.top, options.position.left);\n\n\t            kendo.notify(that);\n\t        },\n\n\t        events: [\n\t            SHOW,\n\t            HIDE\n\t        ],\n\n\t        options: {\n\t            name: "Notification",\n\t            position: {\n\t                pinned: true,\n\t                top: null,\n\t                left: null,\n\t                bottom: 20,\n\t                right: 20\n\t            },\n\t            stacking: "default",\n\t            hideOnClick: true,\n\t            button: false,\n\t            allowHideAfter: 0,\n\t            autoHideAfter: 5000,\n\t            appendTo: null,\n\t            width: null,\n\t            height: null,\n\t            templates: [],\n\t            animation: {\n\t                open: {\n\t                    effects: "fade:in",\n\t                    duration: 300\n\t                },\n\t                close: {\n\t                    effects: "fade:out",\n\t                    duration: 600,\n\t                    hide: true\n\t                }\n\t            }\n\t        },\n\n\t        _compileTemplates: function(templates) {\n\t            var that = this;\n\t            var kendoTemplate = kendo.template;\n\n\t            that._compiled = {};\n\n\t            $.each(templates, function(key, value) {\n\t                that._compiled[value.type] = kendoTemplate(value.template || $("#" + value.templateId).html());\n\t            });\n\n\t            that._defaultCompiled = kendoTemplate(TEMPLATE);\n\t            that._safeCompiled = kendoTemplate(SAFE_TEMPLATE);\n\t        },\n\n\t        _getCompiled: function(type, safe) {\n\t            var defaultCompiled = safe ? this._safeCompiled : this._defaultCompiled;\n\n\t            return type ? this._compiled[type] || defaultCompiled : defaultCompiled;\n\t        },\n\n\t        _compileStacking: function(stacking, top, left) {\n\t            var that = this,\n\t                paddings = { paddingTop: 0, paddingRight: 0, paddingBottom: 0, paddingLeft: 0 },\n\t                horizontalAlignment = left !== null ? LEFT : RIGHT,\n\t                origin, position;\n\n\t            switch (stacking) {\n\t                case "down":\n\t                    origin = BOTTOM + " " + horizontalAlignment;\n\t                    position = TOP + " " + horizontalAlignment;\n\t                    delete paddings.paddingBottom;\n\t                break;\n\t                case RIGHT:\n\t                    origin = TOP + " " + RIGHT;\n\t                    position = TOP + " " + LEFT;\n\t                    delete paddings.paddingRight;\n\t                break;\n\t                case LEFT:\n\t                    origin = TOP + " " + LEFT;\n\t                    position = TOP + " " + RIGHT;\n\t                    delete paddings.paddingLeft;\n\t                break;\n\t                case UP:\n\t                    origin = TOP + " " + horizontalAlignment;\n\t                    position = BOTTOM + " " + horizontalAlignment;\n\t                    delete paddings.paddingTop;\n\t                break;\n\t                default:\n\t                    if (top !== null) {\n\t                        origin = BOTTOM + " " + horizontalAlignment;\n\t                        position = TOP + " " + horizontalAlignment;\n\t                        delete paddings.paddingBottom;\n\t                    } else {\n\t                        origin = TOP + " " + horizontalAlignment;\n\t                        position = BOTTOM + " " + horizontalAlignment;\n\t                        delete paddings.paddingTop;\n\t                    }\n\t                break;\n\t            }\n\n\t            that._popupOrigin = origin;\n\t            that._popupPosition = position;\n\t            that._popupPaddings = paddings;\n\t        },\n\n\t        _attachPopupEvents: function(options, popup) {\n\t            var that = this,\n\t                allowHideAfter = options.allowHideAfter,\n\t                attachDelay = !isNaN(allowHideAfter) && allowHideAfter > 0,\n\t                closeIcon;\n\n\t            function attachClick(target) {\n\t                target.on(CLICK + NS, function () {\n\t                    that._hidePopup(popup);\n\t                });\n\t            }\n\n\t            if (options.hideOnClick) {\n\t                popup.bind("activate", function() {\n\t                    if (attachDelay) {\n\t                        setTimeout(function(){\n\t                            attachClick(popup.element);\n\t                        }, allowHideAfter);\n\t                    } else {\n\t                        attachClick(popup.element);\n\t                    }\n\t                });\n\t            } else if (options.button) {\n\t                closeIcon = popup.element.find(KICLOSE);\n\t                if (attachDelay) {\n\t                    setTimeout(function(){\n\t                        attachClick(closeIcon);\n\t                    }, allowHideAfter);\n\t                } else {\n\t                    attachClick(closeIcon);\n\t                }\n\t            }\n\t        },\n\n\t        _showPopup: function(wrapper, options) {\n\t            var that = this,\n\t                autoHideAfter = options.autoHideAfter,\n\t                x = options.position.left,\n\t                y = options.position.top,\n\t                popup, openPopup;\n\n\t            openPopup = $("." + that._guid + ":not(." + KHIDING + ")").last();\n\n\t            popup = new kendo.ui.Popup(wrapper, {\n\t                anchor: openPopup[0] ? openPopup : document.body,\n\t                origin: that._popupOrigin,\n\t                position: that._popupPosition,\n\t                animation: options.animation,\n\t                copyAnchorStyles: false,\n\t                modal: true,\n\t                collision: "",\n\t                isRtl: that._isRtl,\n\t                close: function() {\n\t                    that._triggerHide(this.element);\n\t                },\n\t                deactivate: function(e) {\n\t                    e.sender.element.off(NS);\n\t                    e.sender.element.find(KICLOSE).off(NS);\n\t                    e.sender.destroy();\n\t                }\n\t            });\n\n\t            that._attachPopupEvents(options, popup);\n\n\t            wrapper.removeClass("k-group k-reset");\n\n\t            if (openPopup[0]) {\n\t                popup.open();\n\t            } else {\n\t                if (x === null) {\n\t                    x = $(window).width() - wrapper.outerWidth() - options.position.right;\n\t                }\n\n\t                if (y === null) {\n\t                    y = $(window).height() - wrapper.outerHeight() - options.position.bottom;\n\t                }\n\n\t                popup.open(x, y);\n\t            }\n\n\t            popup.wrapper.addClass(that._guid).css(extend({margin:0,zIndex:10050}, that._popupPaddings));\n\n\t            if (options.position.pinned) {\n\t                popup.wrapper.css("position", "fixed");\n\t                if (openPopup[0]) {\n\t                    that._togglePin(popup.wrapper, true);\n\t                }\n\t            } else if (!openPopup[0]) {\n\t                that._togglePin(popup.wrapper, false);\n\t            }\n\n\t            if (autoHideAfter > 0) {\n\t                setTimeout(function () {\n\t                    that._hidePopup(popup);\n\t                }, autoHideAfter);\n\t            }\n\t        },\n\n\t        _hidePopup: function (popup) {\n\t            popup.wrapper.addClass(KHIDING);\n\t            popup.close();\n\t        },\n\n\t        _togglePin: function(wrapper, pin) {\n\t            var win = $(window),\n\t                sign = pin ? -1 : 1;\n\n\t            wrapper.css({\n\t                top: parseInt(wrapper.css(TOP), 10) + sign * win.scrollTop(),\n\t                left: parseInt(wrapper.css(LEFT), 10) + sign * win.scrollLeft()\n\t            });\n\t        },\n\n\t        _attachStaticEvents: function(options, wrapper) {\n\t            var that = this,\n\t                allowHideAfter = options.allowHideAfter,\n\t                attachDelay = !isNaN(allowHideAfter) && allowHideAfter > 0;\n\n\t            function attachClick(target) {\n\t                target.on(CLICK + NS, proxy(that._hideStatic, that, wrapper));\n\t            }\n\n\t            if (options.hideOnClick) {\n\t                if (attachDelay) {\n\t                    setTimeout(function(){\n\t                        attachClick(wrapper);\n\t                    }, allowHideAfter);\n\t                } else {\n\t                    attachClick(wrapper);\n\t                }\n\t            } else if (options.button) {\n\t                if (attachDelay) {\n\t                    setTimeout(function(){\n\t                        attachClick(wrapper.find(KICLOSE));\n\t                    }, allowHideAfter);\n\t                } else {\n\t                    attachClick(wrapper.find(KICLOSE));\n\t                }\n\t            }\n\t        },\n\n\t        _showStatic: function(wrapper, options) {\n\t            var that = this,\n\t                autoHideAfter = options.autoHideAfter,\n\t                animation = options.animation,\n\t                insertionMethod = options.stacking == UP || options.stacking == LEFT ? "prependTo" : "appendTo",\n\t                initializedNotifications;\n\n\t            wrapper\n\t                .removeClass("k-popup")\n\t                .addClass(that._guid)\n\t                [insertionMethod](options.appendTo)\n\t                .hide()\n\t                .kendoAnimate(animation.open || false);\n\n\t            initializedNotifications = that.getNotifications();\n\t            initializedNotifications.each(function(idx, element) {\n\t                that._attachStaticEvents(options, $(element));\n\n\t                if (autoHideAfter > 0) {\n\t                    setTimeout(function(){\n\t                        that._hideStatic($(element));\n\t                    }, autoHideAfter);\n\t                }\n\t            });\n\t        },\n\n\t        _hideStatic: function(wrapper) {\n\t            wrapper.kendoAnimate(extend(this.options.animation.close || false, { complete: function() {\n\t                wrapper.off(NS).find(KICLOSE).off(NS);\n\t                wrapper.remove();\n\t            }}));\n\t            this._triggerHide(wrapper);\n\t        },\n\n\t        _triggerHide: function(element) {\n\t            this.trigger(HIDE, { element: element });\n\t            this.angular("cleanup", function(){\n\t                return { elements: element };\n\t            });\n\t        },\n\n\t        show: function(content, type, safe) {\n\t            var that = this,\n\t                options = that.options,\n\t                wrapper = $(WRAPPER),\n\t                args, defaultArgs;\n\n\t            if (!type) {\n\t                type = INFO;\n\t            }\n\n\t            if (content !== null && content !== undefined && content !== "") {\n\n\t                if (kendo.isFunction(content)) {\n\t                    content = content();\n\t                }\n\n\t                defaultArgs = {typeIcon: type, content: ""};\n\n\t                if ($.isPlainObject(content)) {\n\t                    args = extend(defaultArgs, content);\n\t                } else {\n\t                    args = extend(defaultArgs, {content: content});\n\t                }\n\n\t                wrapper\n\t                    .addClass(KNOTIFICATION + "-" + type)\n\t                    .toggleClass(KNOTIFICATION + "-button", options.button)\n\t                    .toggleClass(KNOTIFICATION + "-closable", options.button)\n\t                    .attr("data-role", "alert")\n\t                    .css({width: options.width, height: options.height})\n\t                    .append(that._getCompiled(type, safe)(args));\n\n\t                that.angular("compile", function(){\n\t                    return {\n\t                        elements: wrapper,\n\t                        data: [{ dataItem: args }]\n\t                    };\n\t                });\n\n\t                if ($(options.appendTo)[0]) {\n\t                    that._showStatic(wrapper, options);\n\t                } else {\n\t                    that._showPopup(wrapper, options);\n\t                }\n\n\t                that.trigger(SHOW, {element: wrapper});\n\t            }\n\n\t            return that;\n\t        },\n\n\t        showText: function(content, type) {\n\t            this.show(content, type, true);\n\t        },\n\n\t        info: function(content) {\n\t            return this.show(content, INFO);\n\t        },\n\n\t        success: function(content) {\n\t            return this.show(content, SUCCESS);\n\t        },\n\n\t        warning: function(content) {\n\t            return this.show(content, WARNING);\n\t        },\n\n\t        error: function(content) {\n\t            return this.show(content, ERROR);\n\t        },\n\n\t        hide: function() {\n\t            var that = this,\n\t                openedNotifications = that.getNotifications();\n\n\t            if (that.options.appendTo) {\n\t                openedNotifications.each(function(idx, element){\n\t                    that._hideStatic($(element));\n\t                });\n\t            } else {\n\t                openedNotifications.each(function(idx, element){\n\t                    var popup = $(element).data("kendoPopup");\n\t                    if (popup) {\n\t                        that._hidePopup(popup);\n\t                    }\n\t                });\n\t            }\n\n\t            return that;\n\t        },\n\n\t        getNotifications: function() {\n\t            var that = this,\n\t                guidElements = $("." + that._guid + ":not(." + KHIDING + ")");\n\n\t            if (that.options.appendTo) {\n\t                return guidElements;\n\t            } else {\n\t                return guidElements.children("." + KNOTIFICATION);\n\t            }\n\t        },\n\n\t        setOptions: function(newOptions) {\n\t            var that = this,\n\t                options;\n\n\t            Widget.fn.setOptions.call(that, newOptions);\n\n\t            options = that.options;\n\n\t            if (newOptions.templates !== undefined) {\n\t                that._compileTemplates(options.templates);\n\t            }\n\n\t            if (newOptions.stacking !== undefined || newOptions.position !== undefined) {\n\t                that._compileStacking(options.stacking, options.position.top, options.position.left);\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\t            this.getNotifications().off(NS).find(KICLOSE).off(NS);\n\t        }\n\t    });\n\n\t    kendo.ui.plugin(Notification);\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.notification.js?')},"./node_modules/@progress/kendo-ui/js/kendo.numerictextbox.js":
/*!********************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.numerictextbox.js ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1293);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error("define cannot be used indirect"); };\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ "./node_modules/@progress/kendo-ui/js/kendo.core.js");\n\n/***/ }),\n\n/***/ 1056:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.userevents */ "./node_modules/@progress/kendo-ui/js/kendo.userevents.js");\n\n/***/ }),\n\n/***/ 1247:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.floatinglabel */ "./node_modules/@progress/kendo-ui/js/kendo.floatinglabel.js");\n\n/***/ }),\n\n/***/ 1293:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1018), __webpack_require__(1056), __webpack_require__(1247) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: "numerictextbox",\n\t    name: "NumericTextBox",\n\t    category: "web",\n\t    description: "The NumericTextBox widget can format and display numeric, percentage or currency textbox.",\n\t    depends: [ "core", "userevents", "floatinglabel" ]\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        caret = kendo.caret,\n\t        keys = kendo.keys,\n\t        ui = kendo.ui,\n\t        Widget = ui.Widget,\n\t        activeElement = kendo._activeElement,\n\t        extractFormat = kendo._extractFormat,\n\t        parse = kendo.parseFloat,\n\t        placeholderSupported = kendo.support.placeholder,\n\t        getCulture = kendo.getCulture,\n\t        CHANGE = "change",\n\t        DISABLED = "disabled",\n\t        READONLY = "readonly",\n\t        INPUT = "k-input",\n\t        SPIN = "spin",\n\t        ns = ".kendoNumericTextBox",\n\t        TOUCHEND = "touchend",\n\t        MOUSELEAVE = "mouseleave" + ns,\n\t        HOVEREVENTS = "mouseenter" + ns + " " + MOUSELEAVE,\n\t        DEFAULT = "k-state-default",\n\t        FOCUSED = "k-state-focused",\n\t        HOVER = "k-state-hover",\n\t        FOCUS = "focus",\n\t        POINT = ".",\n\t        CLASS_ICON = "k-icon",\n\t        LABELCLASSES = "k-label k-input-label",\n\t        SELECTED = "k-state-selected",\n\t        STATEDISABLED = "k-state-disabled",\n\t        STATE_INVALID = "k-state-invalid",\n\t        ARIA_DISABLED = "aria-disabled",\n\t        INTEGER_REGEXP = /^(-)?(\\d*)$/,\n\t        NULL = null,\n\t        proxy = $.proxy,\n\t        isPlainObject = $.isPlainObject,\n\t        extend = $.extend;\n\n\t    var NumericTextBox = Widget.extend({\n\t         init: function(element, options) {\n\t             var that = this,\n\t             isStep = options && options.step !== undefined,\n\t             min, max, step, value, disabled;\n\t             var inputType;\n\n\t             Widget.fn.init.call(that, element, options);\n\n\t             options = that.options;\n\t             element = that.element\n\t                           .on("focusout" + ns, proxy(that._focusout, that))\n\t                           .attr("role", "spinbutton");\n\n\t             options.placeholder = options.placeholder || element.attr("placeholder");\n\n\t             min = that.min(element.attr("min"));\n\t             max = that.max(element.attr("max"));\n\t             step = that._parse(element.attr("step"));\n\n\t             if (options.min === NULL && min !== NULL) {\n\t                 options.min = min;\n\t             }\n\n\t             if (options.max === NULL && max !== NULL) {\n\t                 options.max = max;\n\t             }\n\n\t             if (!isStep && step !== NULL) {\n\t                 options.step = step;\n\t             }\n\n\t             that._initialOptions = extend({}, options);\n\n\t             inputType = element.attr("type");\n\n\t             that._reset();\n\t             that._wrapper();\n\t             that._arrows();\n\t             that._validation();\n\t             that._input();\n\n\t             if (!kendo.support.mobileOS) {\n\t                 that._text.on(FOCUS + ns, proxy(that._click, that));\n\t             } else {\n\t                 that._text.on(TOUCHEND + ns + " " + FOCUS + ns, function() {\n\t                     if (kendo.support.browser.edge) {\n\t                         that._text.one(FOCUS + ns, function() {\n\t                             that._toggleText(false);\n\t                             element.focus();\n\t                         });\n\t                     } else {\n\t                         that._toggleText(false);\n\t                         element.focus();\n\t                     }\n\t                 });\n\t             }\n\n\t             element.attr("aria-valuemin", options.min !== NULL ? options.min*options.factor : options.min)\n\t                    .attr("aria-valuemax", options.max !== NULL ? options.max*options.factor : options.max);\n\n\t             options.format = extractFormat(options.format);\n\n\t             value = options.value;\n\n\t             if (value == NULL) {\n\t                 if (inputType == "number") {\n\t                    value = parseFloat(element.val());\n\t                 } else {\n\t                     value = element.val();\n\t                 }\n\t             }\n\n\t             that.value(value);\n\n\t             disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(\':disabled\');\n\n\t             if (disabled) {\n\t                 that.enable(false);\n\t             } else {\n\t                 that.readonly(element.is("[readonly]"));\n\t             }\n\n\t             that.angular("compile", function(){\n\t                 return {\n\t                     elements: that._text.get()\n\t                 };\n\t             });\n\n\t             that._label();\n\n\t             kendo.notify(that);\n\t         },\n\n\t        options: {\n\t            name: "NumericTextBox",\n\t            decimals: NULL,\n\t            restrictDecimals: false,\n\t            min: NULL,\n\t            max: NULL,\n\t            value: NULL,\n\t            step: 1,\n\t            round: true,\n\t            culture: "",\n\t            format: "n",\n\t            spinners: true,\n\t            placeholder: "",\n\t            factor: 1,\n\t            upArrowText: "Increase value",\n\t            downArrowText: "Decrease value",\n\t            label: null\n\t        },\n\t        events: [\n\t            CHANGE,\n\t            SPIN\n\t        ],\n\n\t        _editable: function(options) {\n\t            var that = this,\n\t                element = that.element,\n\t                disable = options.disable,\n\t                readonly = options.readonly,\n\t                text = that._text.add(element),\n\t                wrapper = that._inputWrapper.off(HOVEREVENTS);\n\n\t            that._toggleText(true);\n\n\t            that._upArrowEventHandler.unbind("press");\n\t            that._downArrowEventHandler.unbind("press");\n\t            element\n\t                .off("keydown" + ns)\n\t                .off("keyup" + ns)\n\t                .off("input" + ns)\n\t                .off("paste" + ns);\n\n\t            if (that._inputLabel) {\n\t                that._inputLabel.off(ns);\n\t            }\n\n\t            if (!readonly && !disable) {\n\t                wrapper\n\t                    .addClass(DEFAULT)\n\t                    .removeClass(STATEDISABLED)\n\t                    .on(HOVEREVENTS, that._toggleHover);\n\n\t                text.removeAttr(DISABLED)\n\t                    .removeAttr(READONLY)\n\t                    .attr(ARIA_DISABLED, false);\n\n\t                that._upArrowEventHandler.bind("press", function(e) {\n\t                    e.preventDefault();\n\t                    that._spin(1);\n\t                    that._upArrow.addClass(SELECTED);\n\t                });\n\n\t                that._downArrowEventHandler.bind("press", function(e) {\n\t                    e.preventDefault();\n\t                    that._spin(-1);\n\t                    that._downArrow.addClass(SELECTED);\n\t                });\n\n\t                that.element\n\t                    .on("keydown" + ns, proxy(that._keydown, that))\n\t                    .on("keyup" + ns, proxy(that._keyup, that))\n\t                    .on("paste" + ns, proxy(that._paste, that))\n\t                    .on("input" + ns, proxy(that._inputHandler, that));\n\n\t                if (that._inputLabel) {\n\t                    that._inputLabel.on("click" + ns, proxy(that.focus, that));\n\t                }\n\n\t            } else {\n\t                wrapper\n\t                    .addClass(disable ? STATEDISABLED : DEFAULT)\n\t                    .removeClass(disable ? DEFAULT : STATEDISABLED);\n\n\t                text.attr(DISABLED, disable)\n\t                    .attr(READONLY, readonly)\n\t                    .attr(ARIA_DISABLED, disable);\n\t            }\n\t        },\n\n\t        readonly: function(readonly) {\n\t            var that = this;\n\n\t            this._editable({\n\t                readonly: readonly === undefined ? true : readonly,\n\t                disable: false\n\t            });\n\n\t            if (that.floatingLabel) {\n\t                that.floatingLabel.readonly(readonly === undefined ? true : readonly);\n\t            }\n\t        },\n\n\t        enable: function(enable) {\n\t            var that = this;\n\n\t            this._editable({\n\t                readonly: false,\n\t                disable: !(enable = enable === undefined ? true : enable)\n\t            });\n\n\t            if (that.floatingLabel) {\n\t                that.floatingLabel.enable(enable = enable === undefined ? true : enable);\n\t            }\n\t        },\n\n\t        setOptions: function (options) {\n\t            var that = this;\n\t            Widget.fn.setOptions.call(that, options);\n\n\t            that._arrowsWrap.toggle(that.options.spinners);\n\t            that._inputWrapper.toggleClass("k-expand-padding", !that.options.spinners);\n\t            that._text.prop("placeholder", that.options.placeholder);\n\t            that._placeholder(that.options.placeholder);\n\t            that.element.attr({\n\t                "aria-valuemin": that.options.min !== NULL ? that.options.min*that.options.factor : that.options.min,\n\t                "aria-valuemax": that.options.max !== NULL ? that.options.max*that.options.factor : that.options.max\n\t            });\n\n\t            that.options.format = extractFormat(that.options.format);\n\n\t            if (options.value !== undefined) {\n\t                that.value(options.value);\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            if (that._inputLabel) {\n\t                that._inputLabel.off(ns);\n\n\t                if (that.floatingLabel) {\n\t                    that.floatingLabel.destroy();\n\t                }\n\t            }\n\n\t            that.element\n\t                .add(that._text)\n\t                .add(that._upArrow)\n\t                .add(that._downArrow)\n\t                .add(that._inputWrapper)\n\t                .off(ns);\n\n\t            that._upArrowEventHandler.destroy();\n\t            that._downArrowEventHandler.destroy();\n\n\t            if (that._form) {\n\t                that._form.off("reset", that._resetHandler);\n\t            }\n\n\t            Widget.fn.destroy.call(that);\n\t        },\n\n\t        min: function(value) {\n\t            return this._option("min", value);\n\t        },\n\n\t        max: function(value) {\n\t            return this._option("max", value);\n\t        },\n\n\t        step: function(value) {\n\t            return this._option("step", value);\n\t        },\n\n\t        value: function(value) {\n\t            var that = this, adjusted;\n\n\t            if (value === undefined) {\n\t                return that._value;\n\t            }\n\n\t            value = that._parse(value);\n\t            adjusted = that._adjust(value);\n\n\t            if (value !== adjusted) {\n\t                return;\n\t            }\n\n\t            that._update(value);\n\t            that._old = that._value;\n\t        },\n\n\t        focus: function() {\n\t            this._focusin();\n\t        },\n\n\t        _adjust: function(value) {\n\t            var that = this,\n\t            options = that.options,\n\t            min = options.min,\n\t            max = options.max;\n\n\t            if (value === NULL) {\n\t                return value;\n\t            }\n\n\t            if (min !== NULL && value < min) {\n\t                value = min;\n\t            } else if (max !== NULL && value > max) {\n\t                value = max;\n\t            }\n\n\t            return value;\n\t        },\n\n\t        _arrows: function() {\n\t            var that = this,\n\t            arrows,\n\t            _release = function() {\n\t                clearTimeout( that._spinning );\n\t                arrows.removeClass(SELECTED);\n\t            },\n\t            options = that.options,\n\t            spinners = options.spinners,\n\t            element = that.element;\n\n\t            arrows = element.siblings("." + CLASS_ICON);\n\n\t            if (!arrows[0]) {\n\t                arrows = $(buttonHtml("increase", options.upArrowText) + buttonHtml("decrease", options.downArrowText))\n\t                        .insertAfter(element);\n\n\t                that._arrowsWrap = arrows.wrapAll(\'<span class="k-select"/>\').parent();\n\t            }\n\n\t            if (!spinners) {\n\t                arrows.parent().toggle(spinners);\n\t                that._inputWrapper.addClass("k-expand-padding");\n\t            }\n\n\t            that._upArrow = arrows.eq(0);\n\t            that._upArrowEventHandler = new kendo.UserEvents(that._upArrow, { release: _release });\n\t            that._downArrow = arrows.eq(1);\n\t            that._downArrowEventHandler = new kendo.UserEvents(that._downArrow, { release: _release });\n\t        },\n\n\t        _validation: function () {\n\t            var that = this;\n\t            var element = that.element;\n\n\t            that._validationIcon = $("<span class=\'" + CLASS_ICON + " k-i-warning\'></span>")\n\t                .hide()\n\t                .insertAfter(element);\n\t        },\n\n\t        _blur: function() {\n\t            var that = this;\n\n\t            that._toggleText(true);\n\n\t            that._change(that.element.val());\n\t        },\n\n\t        _click: function(e) {\n\t            var that = this;\n\n\t            clearTimeout(that._focusing);\n\t            that._focusing = setTimeout(function() {\n\t                var input = e.target,\n\t                    idx = caret(input)[0],\n\t                    value = input.value.substring(0, idx),\n\t                    format = that._format(that.options.format),\n\t                    group = format[","],\n\t                    result, groupRegExp, extractRegExp,\n\t                    caretPosition = 0;\n\n\t                if (group) {\n\t                    groupRegExp = new RegExp("\\\\" + group, "g");\n\t                    extractRegExp = new RegExp("(^(-)$)|(^(-)?([\\\\d\\\\" + group + "]+)(\\\\" + format[POINT] + ")?(\\\\d+)?)");\n\t                }\n\n\t                if (extractRegExp) {\n\t                    result = extractRegExp.exec(value);\n\t                }\n\n\t                if (result) {\n\t                    caretPosition = result[0].replace(groupRegExp, "").length;\n\n\t                    if (value.indexOf("(") != -1 && that._value < 0) {\n\t                        caretPosition++;\n\t                    }\n\t                }\n\n\t                that._focusin();\n\n\t                caret(that.element[0], caretPosition);\n\t            });\n\t        },\n\n\t        _change: function(value) {\n\t            var that = this,\n\t                factor = that.options.factor;\n\n\t            if(factor && factor !== 1){\n\t                value = kendo.parseFloat(value);\n\t                if(value !== null) {\n\t                    value = value/factor;\n\t                }\n\t            }\n\n\t            that._update(value);\n\t            value = that._value;\n\n\t            if (that._old != value) {\n\t                that._old = value;\n\n\t                if (!that._typing) {\n\t                    // trigger the DOM change event so any subscriber gets notified\n\t                    that.element.trigger(CHANGE);\n\t                }\n\n\t                that.trigger(CHANGE);\n\t            }\n\n\t            that._typing = false;\n\t        },\n\n\t        _culture: function(culture) {\n\t            return culture || getCulture(this.options.culture);\n\t        },\n\n\t        _focusin: function() {\n\t            var that = this;\n\t            that._inputWrapper.addClass(FOCUSED);\n\t            that._toggleText(false);\n\t            that.element[0].focus();\n\t        },\n\n\t        _focusout: function() {\n\t            var that = this;\n\n\t            clearTimeout(that._focusing);\n\t            that._inputWrapper.removeClass(FOCUSED).removeClass(HOVER);\n\t            that._blur();\n\t            that._removeInvalidState();\n\t        },\n\n\t        _format: function(format, culture) {\n\t            var numberFormat = this._culture(culture).numberFormat;\n\n\t            format = format.toLowerCase();\n\n\t            if (format.indexOf("c") > -1) {\n\t                numberFormat = numberFormat.currency;\n\t            } else if (format.indexOf("p") > -1) {\n\t                numberFormat = numberFormat.percent;\n\t            }\n\n\t            return numberFormat;\n\t        },\n\n\t        _input: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                CLASSNAME = "k-formatted-value",\n\t                element = that.element.addClass(INPUT).show()[0],\n\t                accessKey = element.accessKey,\n\t                wrapper = that.wrapper,\n\t                text;\n\n\t            text = wrapper.find(POINT + CLASSNAME);\n\n\t            if (!text[0]) {\n\t                text = $(\'<input type="text"/>\').insertBefore(element).addClass(CLASSNAME).attr("aria-hidden", "true");\n\t            }\n\n\t            try {\n\t                element.setAttribute("type", "text");\n\t            } catch(e) {\n\t                element.type = "text";\n\t            }\n\n\t            text[0].title = element.title;\n\t            text[0].tabIndex = element.tabIndex;\n\t            text[0].style.cssText = element.style.cssText;\n\t            text.prop("placeholder", options.placeholder);\n\n\t            if (accessKey) {\n\t                text.attr("accesskey", accessKey);\n\t                element.accessKey = "";\n\t            }\n\n\n\t            that._text = text.addClass(element.className)\n\t                             .attr({\n\t                                 "role": "spinbutton",\n\t                                 "aria-valuemin": options.min !== NULL ? options.min*options.factor : options.min,\n\t                                 "aria-valuemax": options.max !== NULL ? options.max*options.factor : options.max,\n\t                                 "autocomplete": "off"\n\t                             });\n\t        },\n\n\t        _keydown: function(e) {\n\t            var that = this,\n\t                key = e.keyCode;\n\n\t            if (key == keys.DOWN) {\n\t                that._step(-1);\n\t                return;\n\t            } else if (key == keys.UP) {\n\t                that._step(1);\n\t                return;\n\t            } else if (key == keys.ENTER) {\n\t                that._change(that.element.val());\n\t                return;\n\t            }\n\n\t            if (key != keys.TAB) {\n\t                that._typing = true;\n\t            }\n\t            that._cachedCaret = caret(that.element);\n\t        },\n\n\t        _keyup: function () {\n\t            this._removeInvalidState();\n\t        },\n\n\t        _inputHandler: function () {\n\t            var element = this.element;\n\t            var value = element.val();\n\t            var numberFormat = this._format(this.options.format);\n\t            var isValid = this._numericRegex(numberFormat).test(value);\n\n\t            if (isValid) {\n\t                this._oldText = value;\n\t            } else {\n\t                this._blinkInvalidState();\n\t                this.element.val(this._oldText);\n\t                if (this._cachedCaret) {\n\t                    caret(element, this._cachedCaret[0]);\n\t                    this._cachedCaret = null;\n\t                }\n\t            }\n\t        },\n\n\t        _blinkInvalidState: function () {\n\t            var that = this;\n\n\t            that._addInvalidState();\n\t            clearTimeout(that._invalidStateTimeout);\n\t            that._invalidStateTimeout = setTimeout(proxy(that._removeInvalidState, that), 100);\n\t        },\n\n\t        _addInvalidState: function () {\n\t            var that = this;\n\t            that._inputWrapper.addClass(STATE_INVALID);\n\t            that._validationIcon.show();\n\t        },\n\n\t        _removeInvalidState: function () {\n\t            var that = this;\n\t            that._inputWrapper.removeClass(STATE_INVALID);\n\t            that._validationIcon.hide();\n\t            that._invalidStateTimeout = null;\n\t        },\n\n\t        _numericRegex: function(numberFormat) {\n\t            var that = this;\n\t            var separator = numberFormat[POINT];\n\t            var precision = that.options.decimals;\n\t            var fractionRule = "*";\n\n\t            if (separator === POINT) {\n\t                separator = "\\\\" + separator;\n\t            }\n\n\t            if (precision === NULL) {\n\t                precision = numberFormat.decimals;\n\t            }\n\n\t            if (precision === 0 && that.options.restrictDecimals) {\n\t                return INTEGER_REGEXP;\n\t            }\n\n\t            if (that.options.restrictDecimals) {\n\t                fractionRule = "{0," + precision + "}";\n\t            }\n\n\t            if (that._separator !== separator) {\n\t                that._separator = separator;\n\t                that._floatRegExp = new RegExp("^(-)?(((\\\\d+(" + separator + "\\\\d" + fractionRule + ")?)|(" + separator + "\\\\d" + fractionRule + ")))?$");\n\t            }\n\n\t            return that._floatRegExp;\n\t        },\n\n\t        _paste: function(e) {\n\t            var that = this;\n\t            var element = e.target;\n\t            var value = element.value;\n\t            var numberFormat = that._format(that.options.format);\n\n\t            setTimeout(function() {\n\t                var result = that._parse(element.value);\n\n\t                if (result === NULL) {\n\t                    that._update(value);\n\t                } else {\n\t                    element.value = result.toString().replace(POINT, numberFormat[POINT]);\n\t                    if (that._adjust(result) !== result || !that._numericRegex(numberFormat).test(element.value)) {\n\t                        that._update(value);\n\t                    }\n\t                }\n\t            });\n\t        },\n\n\t        _option: function(option, value) {\n\t            var that = this,\n\t                element = that.element,\n\t                options = that.options;\n\n\t            if (value === undefined) {\n\t                return options[option];\n\t            }\n\n\t            value = that._parse(value);\n\n\t            if (!value && option === "step") {\n\t                return;\n\t            }\n\n\t            options[option] = value;\n\t            element\n\t                .add(that._text)\n\t                .attr("aria-value" + option, value);\n\n\t            element.attr(option, value);\n\t        },\n\n\t        _spin: function(step, timeout) {\n\t            var that = this;\n\n\t            timeout = timeout || 500;\n\n\t            clearTimeout( that._spinning );\n\t            that._spinning = setTimeout(function() {\n\t                that._spin(step, 50);\n\t            }, timeout );\n\n\t            that._step(step);\n\t        },\n\n\t        _step: function(step) {\n\t            var that = this,\n\t                element = that.element,\n\t                originalValue = that._value,\n\t                value = that._parse(element.val()) || 0,\n\t                precision = that.options.decimals || 2;\n\n\t            if (activeElement() != element[0]) {\n\t                that._focusin();\n\t            }\n\n\t            if(that.options.factor && value) {\n\t                value = value/that.options.factor;\n\t            }\n\n\t            value =  +(value + that.options.step * step).toFixed(precision);\n\t            value = that._adjust(value);\n\t            that._update(value);\n\t            that._typing = false;\n\n\t            if (originalValue !== value) {\n\t                that.trigger(SPIN);\n\t            }\n\t        },\n\n\t        _toggleHover: function(e) {\n\t            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");\n\t        },\n\n\t        _toggleText: function(toggle) {\n\t            var that = this;\n\n\t            that._text.toggle(toggle);\n\t            that.element.toggle(!toggle);\n\t        },\n\n\t        _parse: function(value, culture) {\n\t            return parse(value, this._culture(culture), this.options.format);\n\t        },\n\n\t        _round: function(value, precision) {\n\t            var rounder = this.options.round ? kendo._round : truncate;\n\n\t            return rounder(value, precision);\n\t        },\n\n\t        _update: function(value) {\n\t            var that = this,\n\t                options = that.options,\n\t                factor = options.factor,\n\t                format = options.format,\n\t                decimals = options.decimals,\n\t                culture = that._culture(),\n\t                numberFormat = that._format(format, culture),\n\t                isNotNull;\n\n\t            if (decimals === NULL) {\n\t                decimals = numberFormat.decimals;\n\t            }\n\n\t            value = that._parse(value, culture);\n\n\t            isNotNull = value !== NULL;\n\n\t            if (isNotNull) {\n\t                value = parseFloat(that._round(value, decimals), 10);\n\t            }\n\n\t            that._value = value = that._adjust(value);\n\t            that._placeholder(kendo.toString(value, format, culture));\n\n\t            if (isNotNull) {\n\t                if(factor) {\n\t                    value =  parseFloat(that._round(value*factor, decimals), 10);\n\t                }\n\t                value = value.toString();\n\t                if (value.indexOf("e") !== -1) {\n\t                    value = that._round(+value, decimals);\n\t                }\n\t                value = value.replace(POINT, numberFormat[POINT]);\n\t            } else {\n\t                value = null;\n\t            }\n\n\t            that.element.val(value);\n\t            that._oldText = value;\n\t            that.element.add(that._text).attr("aria-valuenow", value);\n\t        },\n\n\t        _placeholder: function(value) {\n\t            var input = this._text;\n\n\t            input.val(value);\n\t            if (!placeholderSupported && !value) {\n\t                input.val(this.options.placeholder);\n\t            }\n\n\t            input.attr("title", this.element.attr("title") || input.val());\n\t        },\n\n\t        _label: function() {\n\t            var that = this;\n\t            var element = that.element;\n\t            var options = that.options;\n\t            var id = element.attr("id");\n\t            var floating;\n\t            var labelText;\n\n\t            if (options.label !== null) {\n\t                floating = isPlainObject(options.label) ? options.label.floating : false;\n\t                labelText = isPlainObject(options.label) ? options.label.content : options.label;\n\n\t                if (floating) {\n\t                    that._floatingLabelContainer = that.wrapper.wrap("<span></span>").parent();\n\t                    that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });\n\t                }\n\n\t                if (kendo.isFunction(labelText)) {\n\t                    labelText = labelText.call(that);\n\t                }\n\n\t                if (!labelText) {\n\t                    labelText = "";\n\t                }\n\n\t                if (!id) {\n\t                    id = options.name + "_" + kendo.guid();\n\t                    element.attr("id", id);\n\t                }\n\n\t                that._inputLabel = $("<label class=\'" + LABELCLASSES + "\' for=\'" + id + "\'>" + labelText + "</label>\'").insertBefore(that.wrapper);\n\n\t                if ((that.element.attr("disabled") === undefined) && (that.element.attr("readonly") === undefined)) {\n\t                    that._inputLabel.on("click" + ns, proxy(that.focus, that));\n\t                }\n\t            }\n\t        },\n\n\t        _wrapper: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                DOMElement = element[0],\n\t                wrapper;\n\n\t            wrapper = element.parents(".k-numerictextbox");\n\n\t            if (!wrapper.is("span.k-numerictextbox")) {\n\t                wrapper = element.hide().wrap(\'<span class="k-numeric-wrap k-state-default" />\').parent();\n\t                wrapper = wrapper.wrap("<span/>").parent();\n\t            }\n\n\t            wrapper[0].style.cssText = DOMElement.style.cssText;\n\t            DOMElement.style.width = "";\n\t            that.wrapper = wrapper.addClass("k-widget k-numerictextbox")\n\t                                  .addClass(DOMElement.className)\n\t                                  .removeClass(\'input-validation-error\')\n\t                                  .css("display", "");\n\n\t            that._inputWrapper = $(wrapper[0].firstChild);\n\t        },\n\n\t        _reset: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                formId = element.attr("form"),\n\t                form = formId ? $("#" + formId) : element.closest("form");\n\n\t            if (form[0]) {\n\t                that._resetHandler = function() {\n\t                    setTimeout(function() {\n\t                        that.value(element[0].value);\n\t                        that.max(that._initialOptions.max);\n\t                        that.min(that._initialOptions.min);\n\t                    });\n\t                };\n\n\t                that._form = form.on("reset", that._resetHandler);\n\t            }\n\t        }\n\t    });\n\n\t    function buttonHtml(direction, text) {\n\t        var className = "k-i-arrow-" + (direction === "increase" ? "60-up" : "60-down");\n\n\t        return (\n\t            \'<span unselectable="on" class="k-link k-link-\' + direction + \'" aria-label="\' + text + \'" title="\' + text + \'">\' +\n\t                \'<span unselectable="on" class="\' + CLASS_ICON + \' \' + className + \'"></span>\' +\n\t            \'</span>\'\n\t        );\n\t    }\n\n\t    function truncate(value, precision) {\n\t        var parts = parseFloat(value, 10).toString().split(POINT);\n\n\t        if (parts[1]) {\n\t            parts[1] = parts[1].substring(0, precision);\n\t        }\n\n\t        return parts.join(POINT);\n\n\t    }\n\n\t    ui.plugin(NumericTextBox);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///./node_modules/@progress/kendo-ui/js/kendo.numerictextbox.js?')}}]);